[{"span":[0,259778],"parents":[],"agent":"jeremy","ops":[[0,0,"\\documentclass[a4paper,twocolumn,10pt]{article}\n\\usepackage{"],[59,1,""],[59,0,"[utf8]{inputenc}\n\\usepackage{mathptmx} % times roman, including math\n\\usepackage[hyphens]{url}\n\\usepackage{doi}\n\\usepackage{hyperref}\n\\usepackage[numbers,sort]{natbit"],[224,1,""],[224,0,"b}\n\\hyphenation{data"],[242,2,""],[242,0,"-d"],[243,1,""],[243,0,"ta-cen-ter da-ta-cen-ters}\n\\frenchspacing\n\n\\begin{document}\n\\sloppy\n\\title{Composing Data Structures for Collaborative Doument"],[364,5,""],[364,0,"cument Editing}\n\\author{}\n\\maketitle\n\n\\subsection*{Abstracgt}"],[422,3,""],[422,0,"t}\n\n\\section{Introduction}\n\n\n\\end{document}\n"],[450,0,"\n{\\footnotesize\n\\bibliographystyle{plainnat}\n\\bibliography{references}{}}"],[449,0,"\n\\cite{Roh:2011dw}"],[456,0,"Shapiro:2011wy,"],[450,0,"CRDTs~"],[489,0,"\n"],[489,0,"\n\\section{Operational Semantics}\n\nThe Repl"],[527,4,""],[527,0,"\\emph{Replicated Growable Array} (RGA) datatype was originally defined by Roh et al.\\ using pseudocode~\\cite{Roh:2011dw}. In this section we present the algorithm in an alternative form which is more amenable to proofs.\n\nEach peer that maintains a replica of an RGA stores a copy of its state $A$, which is a set of triples ("],[851,1,""],[851,0,"$(\\mathit{id}, \\mathit{value}, \\mathit{next})$. The empty array is represen"],[914,0," $A_\\emptyset$"],[940,0,"ted by a set containing a single tuple:\n\\begin{equation}\n\\end{equation}"],[996,0,"\nA_\\emptyset = {(\\vdash, \\bot, \\dashv)}"],[1050,0,"\nwhere $\\vdash$ is a special ID denoting the head of the list, $\\dashv$ indicates the end of the list, and $\\bot$ is the b"],[1171,1,""],[1171,0,"absence of a value."],[1011,0,"\\"],[1035,0,"\\"],[995,0,"*"],[980,18,""],[980,0,"$$ "],[1023,15,""],[1023,0," $$"],[739,0,"correctness "],[1178,0,"\n\nWe can "],[1183,4,""],[1183,0,"t"],[1183,1,""],[1183,0,"define some convenic"],[1202,1,""],[1202,0,"ence functions for accessing the state $A$:\n\\begin{eqnarray*}\n\\end{eqnarray*}"],[1263,0,"\n\\mathrm{next}(A, \\mathit{id}) = "],[1294,0,"&"],[1296,0,"&"],[1298,0,"n \\quat"],[1304,1,""],[1304,0,"d \\mathrm{such that} \\; (\\mathit{id}, \\visiblespace, n) \\in A"],[1343,0,"text"],[1253,8,""],[1253,0,"align"],[1372,8,""],[1372,0,"align"],[75,0,"\n\\usepackage{amsmath} % align env"],[106,2,""],[106,0,"nvironment"],[1334,1,""],[1344,6,""],[1344,0,"text"],[1361,1,""],[1361,0,"quad"],[1407,0,"\n\\mathrm{val}(A, \\mathit{id})  &= n \\quad \\text{such that} \\quad (\\mathid{id}, "],[1441,1,""],[1441,0,"v"],[1486,0,"v, \\textvisis"],[1498,1,""],[1498,0,"blespace) \\in A"],[1407,0," \\\\"],[325,0,"\n\n% Like \\textvisiblespace"],[329,0,"Place "],[334,1,""],[334,0,"hjo"],[335,2,""],[335,0,"older character "],[351,1,""],[351,0,"l"],[373,0,", but works in math mode\n\\newcommand\\placeholder{%\n  \\makebox[0.5em]{%\n    \\kern0."],[452,3,""],[452,0,"n.07em\n    \\vrule height.3ex\n    \\hrulefill\n    \\vrule height.3ex\n     "],[522,1,""],[522,0,"\\kern.07em\n  }%\n}"],[1707,16,""],[1707,0,"placeholder"],[1595,16,""],[1595,0,"placeholder"],[1691,1,""],[1691,0,"tq"],[1692,1,""],[1557,0,"&"],[1662,0,"&"],[1612,0,"&"],[1718,0,"&"],[437,1,""],[437,0,"8"],[1557,1,""],[1662,1,""],[1573,0,"&"],[1679,0,"&"],[437,1,""],[437,0,"7"],[1573,1,""],[1678,1,""],[1716,1,""],[1611,1,""],[1103,14,""],[1103,0,"partial function from an ItemID"],[1136,1,""],[1147,0,"$ to a pair of "],[1162,2,""],[1162,0,"$("],[1247,29,""],[1124,10,""],[1142,2,""],[1146,0,"s"],[1196,5,""],[1196,0,"list"],[1230,5,""],[1230,0,"as follows"],[1261,1,""],[1269,0,"("],[1267,1,""],[1267,0," \\mapsto"],[1262,5,""],[1262,0,"mathsf{head}"],[1291,5,""],[1291,0,"mathsf{tail}"],[1318,5,""],[1318,0,"mathsf{head}"],[1331,0," and $\\mathsf{tail}$"],[1351,3,""],[1353,0,"re"],[1366,0,"s"],[1385,0," and tail"],[1407,0," respectively"],[1420,39,""],[1433,2,""],[1433,0,"denotes"],[1466,298,""],[1233,7,""],[1233,0,"a function whose domain is the single value $\\mathit{head}$"],[1283,2,""],[1283,0,"sf"],[1518,0,"We use the notation $A\\[a \\mapsto (b, c)\\]$ to denote a function identical to $A$, except that $A(a)=(b,c)$."],[1558,1,""],[1540,1,""],[1625,0,"\n\n"],[1626,0,"The operation $\\mathsf{insert}(\\mathit{id}, \\mathit{prev} "],[1683,1,""],[1683,0,", v)$ is an instruction to insert the value $v$ into a list at a position following the existing list element with ID $\\mathit{prev}$ ("],[1816,2,""],[1816,0,". An insertion at the head of the list is expressed as $\\mathsf{insert}(\\mathid"],[1894,1,""],[1894,0,"t{id}, \\mathsf{head}, v)$. The $\\mathit{id}$ is the unique ID of this operation.\n\nThe "],[1976,4,""],[1976,0,"When the operation is applied to a "],[2009,2,""],[2009,0,"the list state $A$, it produces a modified list state $A^\\prime$ as follows:\n\\begin{align&*"],[2098,2,""],[2098,0,"*}\n\\end{align*&"],[2112,1,""],[2112,0,"}"],[2100,0,"\nA^\\prime = \\mathrm{apply}(A, \\mathsf{insert}(\\mathit{id} "],[2157,1,""],[2157,0,", \\mathit{prev}, v)) ="],[2065,7,""],[2065,0,"'"],[2096,7,""],[2096,0,"'"],[2167,0," \\\\\n\\begin{cases}\n\\end{cases}"],[2184,0,"\na & \\quad\\text{if foo}"],[2203,3,""],[2185,1,""],[2185,0,"\\mathrm{apply}(A, \\mathsf{insert}(\\mathit{id}, n, v))"],[2256,0," A(\\mathit{prev}) = (\\placeholder, n)"],[2087,5,""],[2080,9,""],[2080,0,"$$"],[2294,12,""],[2294,0,"$$"],[2082,1,""],[2082,0," "],[2293,1,""],[2293,0," "],[2080,2,""],[2080,0,"\\begin{equation*}\n"],[2098,1,""],[2308,3,""],[2308,1,""],[2308,0,"\n\\end{equation*}\n"],[2296,0," \\\\\nA[\\mathit{prev]"],[2314,1,""],[2314,0,"} \\mapsto (v_p, \\mathit{id}), \\mathit{id} \\mapsto (v, n) & \\quad\\text{if }"],[2370,0,"]"],[2370,0,"\\,"],[2302,0,"\\,"],[1541,0,"\\,"],[1559,0,"\\,"],[2246,1,""],[2246,0,"\\\\"],[2248,1,""],[2248,0,"\n    "],[2385,1,""],[2385,0,"\\\\\n   "],[2091,8,""],[2091,0,"align"],[2422,8,""],[2422,0,"align"],[2265,0,"\\l"],[2266,1,""],[2266,0,";"],[2263,1,""],[2403,1,""],[2404,0,"\\;"],[2403,0," "],[2263,0," "],[2304,0," \\wedge n > "],[2312,4,""],[2312,0,"\\mathit{id} < n"],[2431,0," A(\\mathit{prev}) = (v_p, n) \\wedge n < \\mathit{id}"],[2305,0,"\\;"],[2313,0,"\\;"],[2464,0,"\\;"],[2472,0,"\\'"],[2473,1,""],[2473,0,";"],[2419,0,"q"],[2335,0,"\\quad "],[2189,0,"\\quad "],[2257,0,"q"],[2172,0,"&"],[2172,1,""],[2102,0,"&"],[2175,0,"&"],[2395,0,"\\;"],[2176,0,"="],[2175,0," "],[2535,0,"\n\nExplained informally, applying an \\"],[2571,1,""],[2571,0,"$\\mathsf{insert}$ operation is like inserting an element into a linked list, with the"],[2648,8,""],[2648,0,"except that the function first skips over list elements that "],[2704,5,""],[2704,0,"with an ID "],[2537,23,""],[2537,0,"A"],[2693,0,"greater than the ID of the new element being inserted. Thus "],[2750,3,""],[2750,0,"is has the effect of deterministically ordering concurrent insertions made at the same position of the list. This property is proved formally below.\n\nThe operation \\"],[2914,1,""],[2914,0,"$\\mathsf{delete}$ is an instruction to delete "],[2930,0,"(\\mathit{id})"],[2973,0,"the element with ID $\\mathit{id}$ from the list. When the operation is applied t"],[3022,6,""],[3022,0,"T"],[3036,12,""],[3036,0,"has the following semantics:\n\\ebeg"],[3066,4,""],[3066,0,"begin{align*}\nA' &= \\mathrm{apply}(\\mathsf{delete("],[3115,1,""],[3115,0,"}{\\mathit{id}"],[3116,1,""],[3116,0,"("],[3128,0,")) = "],[3134,0,"\\begin{align&"],[3146,1,""],[3146,0,"*}\n"],[3133,0,"A[\\,\\mathit{id} \\mapsto (\\bot, n)\\,] \\;\\text{if} A(\\mathit{id}) "],[3169,1,""],[3169,0,"\n"],[3197,0,"= (\\placeholder, n)"],[3180,0," "],[3182,0,"\\;"],[3171,1,""],[3171,0,"quad"],[3224,5,""],[3224,0,"end"],[2171,2,""],[3129,0,"\\\\ &"],[3134,1,""],[3134,0,"\n"],[777,0,"\n\\sb"],[780,1,""],[780,0,"ubsection{Ordered List OPera"],[804,4,""],[804,0,"perations}\n"],[776,0,"\n\nWe assume that each peer has a unique identifier (for example, the hash of its public key). We can then "],[870,12,""],[870,0,"Whenever an edit to a document is made at one of the peers, we generate a unique identifier for that edit operation using Lamport timestamps~\\cite{Lamport:1978jq}. "],[1033,1,""],[1033,0,"\n\nA Lamport timestamp is a pair ("],[1065,1,""],[1065,0,"$()"],[1067,1,""],[1067,0,"c, n)$ where $c$ is a counter that is stored at node "],[1079,0," $n$ is the unique identifier of the node on which the edit is made, and"],[1146,5,""],[1146,0,"."],[1183,5,""],[1183,0,"each node and incremented for every operation. Moreover, whenever "],[1070,1,""],[1070,0,"p"],[1081,1,""],[1081,0,"p"],[1116,4,""],[1116,0,"peer"],[1188,4,""],[1188,0,"peer"],[1249,0,"a peer receives an "],[1230,9,""],[1230,0,"The pair $(c, p)$ is sent to other"],[1230,8,""],[1230,0,"Whenever an operation is sent to other peers, the Lamport timestamp"],[1310,42,""],[1310,0,"included in the message. I"],[1306,0," for that operation"],[1354,1,""],[1354,0,"When "],[1354,5,""],[1354,0,"If a peer receives an operation with a counter value $c$ that is great "],[1424,1,""],[1424,0,"er than the locally stored counter value, the local counter is increased to the value of the incoming counter."],[1353,1,""],[1353,0,"\n\n"],[1535,0," This ensures that if operation $o_1$ happened before $o_2$ (that is, the peer that generated $o_2$ knew about the "],[1635,15,""],[1635,0,"had received and processed $o_1$ before $o_2$ was generated), then $o_2$ must have a greater counter value than $o_1$. Only concurrent operations can have equal counter values.\n\nWe can thus define a total ordering on operations. "],[1849,2,""],[1849,13,""],[1849,0,"for Lamport timestamps:\n$$ "],[1875,1,""],[1875,0,"(c_1, p_1) < (c_2, p_2) \\quad{"],[1904,1,""],[1904,0,"\\text{iff}\\quad (c_1 < c_2) \\vee (c_1 = c_2 \\wedge p_1 < p_2).$$\nThis ordering is consistent with causality, that is, if operation $o_1$ happened before $o_2$, then $o_1$ is guarantee"],[2075,12,""],[2075,0,"has a lowe"],[1969,116,""],[1969,0,"If one operation happened before another, this ordering is consistent with causality (the earlier operation has a lower timesetamp). If two operations are concurrent, this ordering is arbitrary but deterministic."],[1900,4,""],[1900,0,";"],[1912,4,""],[1912,0,";\\;"],[1911,2,""],[1910,0," "],[1907,0," "],[2134,2,""],[2134,0,"e"],[2141,3,""],[2141,0," $<$"],[1848,0," $<$"],[2139,0,"ir"],[2147,0," according to1"],[2160,1,""],[2643,0," The parameter $\\mathid"],[2665,1,""],[2665,0,"t{id}$ is either a Lamport timestamp or the special symbol $\\mathsf{head}$, indicating the head of the list. %"],[2774,1,""],[2774,0,"$\\mathit{next}$ is either a Lamport timestamp or the symbol $\\mathsf{tail}$, denoting the end of the list.\n\n"],[2882,1,""],[3054,1,""],[3054,0,". "],[3058,155,""],[2880,0," $\\mathit{value}$ is any value of the datatype of list elements, or the special value $\\bot$, indicating the absence of a value."],[4203,0,"\nwhere $<$ is the total order on Lamport timestamps, with the addition that $\\mathsf{tail} < (c, p) < ma"],[4305,2,""],[4305,0,"\\mathsf{head}$ for any Lamport timestamp ("],[4346,1,""],[4346,0,"$(c, p)$."],[4111,0,"\\quad"],[3934,0,"\\quad"],[3298,0,"\n\nList items are inserted "],[3300,24,""],[3300,0,"Each list item is uniquely identified by the Lamport timestamp of the \\"],[3370,1,""],[3370,0,"$\\mathsf{insert} "],[3386,1,""],[3386,0,"$ operation that inserted the item. Th"],[3310,4,""],[3310,0,"element"],[3415,8,""],[3415,0,"it"],[3406,8,""],[3406,0,"created"],[3418,2,""],[3418,0,"We call the Lamport timestamp "],[3417,31,""],[3417,0," "],[3417,1,""],[3299,0,"\nLis"],[3300,3,""],[3300,0,"Element "],[3300,8,""],[3300,0,"A list element is created with an $\\mathsf{insert}$ operation. Since each operation has a Lamport timestamp, a list element can be "],[3424,7,""],[3423,19,""],[3450,11,""],[3450,0,"its"],[3463,0,", which remains immutable."],[3488,0," for the lifetime of the document"],[3522,0," We call that Lamport timestamp the ID of the list element."],[3581,52,""],[4566,0,"al requirement"],[4609,16,""],[5350,0,"\n\nThe user view of a list A iterates over the list elements from \\"],[5415,1,""],[5415,0,"$\\mathsf{head}$ to $\\mathsf{tail}$, skipping any deleted elements (tombstones):\n\\begin{align*}\n\\end{align*}"],[5509,0,"\n\\mathrm("],[5517,1,""],[5517,0,"{view}(A) = \\at"],[5530,2,""],[5530,0,"mathrm{iter}(A, \\mathsf{head}) \\\\"],[5527,0,"&"],[5564,0,"\n\\mathrm{iter}(A, \\mathit{I"],[5590,1,""],[5590,0,"id}) &= \\begin{cases}\n\\end["],[5616,1,""],[5616,0,"{cases}"],[5611,0,"\n    [v] :: "],[5619,4,""],[5619,0," \\mathbin{::} \\mathrm{iter}(A, n) \\quad \\text{if };"],[5669,1,""],[5669,0,"\\; A(\\mathit{id}) = (v, n) \\;w"],[5698,1,""],[5698,0,"\\wedge\\; v \\neq \\bot \\\\\n    \\mathrm{iter}(A, n) \\quad \\text"],[5726,0,"                              "],[5743,13,""],[5774,0,"{if }\\; A(\\mathit{id}) = (v, n) \\;\\wedge\\; v = \\bot \\\\\n    p"],[5833,1,""],[5833,0,"[] \\quad \\text{if };"],[5852,1,""],[5852,0,"\\; \\mathit{id} = \\mathsf{tail}"],[5653,6,""],[5653,0,"&"],[5758,6,""],[5758,0,"& "],[5654,0," "],[5828,5,""],[5828,0,"&"],[5826,0,"\\,"],[5575,2,""],[5641,2,""],[5745,2,""],[5540,2,""],[5540,0,"r"],[5574,0,"r"],[5641,0,"r"],[5746,0,"r"],[5893,0,"\n\n\\subsection{Convergence}\n\nWe now prove the convergence property, also known as \\emph{eventual consistency}, for this data structure.\n\n\\textbf{Theorem.} If two peers process the same set of \\"],[6084,1,""],[6084,0,"$\\te"],[6086,2,""],[6086,0,"mathsf{insert}$ and $\\mathsf{delete}$ operations, in different causally consistent orders, their final state is identical.\n\n"],[6177,0,"thenb "],[6181,2,""],[6181,0," "],[6199,0,"s"],[6201,2,""],[6201,0,"are"],[6200,0," after processing all operations"],[6200,32,""],[6217,0,"We consi"],[6217,8,""],[6217,0,"Consider"],[6217,8,""],[6217,0,"Since each peer processes operations in some sequential order, and the state of a peer is modified only by operations, we can describe "],[6345,7,""],[6345,0,"rive the state of a peer by considering the \\emph{history} of op"],[6050,0,"any "],[6413,0,"erations at each peer and applying the operations in the order of the history.\n\nW"],[6493,1,""],[6493,0,"C"],[6493,1,""],[6493,0,"We can prove the theorem by induction"],[6493,0,"Consider the history of operations at "],[6528,3,""],[6528,0,"$H_p$ at peer $p$, consisting of a sequence of operations $H_p=o_1 \\dots o_n$. "],[6644,0," over the length of the historn $"],[6674,3,""],[6674,0,"y $n$.\n\nBase case:"],[6682,0,"\\emph{"],[6698,0,"} A history of $n=0$ operations describes an empty document. An empty document is deterministically defined, so any two peers that have not executed any operations are by definition in the same state.\n\n\\emph{Induction step:} Given causal histories H"],[6946,1,""],[6946,0,"$H_1$ and $H_2$, such that $H_1=o_1 \\dots o_n$ and $H_2$ is a permutation of $H1"],[7025,1,""],[7025,0,"_1$, w"],[7030,1,""],[7030,0,"and such that applying $H_1$ results in the same state as applying $H_2$"],[6928,0," amu"],[6930,2,""],[6930,0,"ny "],[6928,5,""],[7102,0,", we can extend the history by "],[7111,22,""],[7111,0,"construct new histories of length $n+1$ by inserting an operation $o_{n+1}$ at any causally ready "],[6961,0," of length $n$"],[7223,0,"position in either history. "],[7242,9,""],[7242,0,"$H_1$ or $H_2$. We must then show that all of the histories constructed this way "],[7281,0,"applying "],[7281,9,""],[7281,0,"for "],[7326,1,""],[7326,0,", applying the operations results in the same final state."],[6152,0," but"],[6143,13,""],[6143,0,"any"],[6172,1,""],[6172,0," (but not necessarily the same order)"],[6520,1,""],[6520,0,":\n$$ A_\\mathrm{final}}"],[6527,0,"{"],[6543,0," = "],[5212,0,"A, "],[6549,0,"\\mathrm{apply}(\\mathrm{apply}(\\dots \\mathrm{apply}(A_\\emptyset, o_1), \\dots, o_{n-1}), o_n) $$"],[6254,7,""],[6254,0,"E"],[6365,3,""],[6365,0,". Therefore, w"],[6390,1,""],[6390,0,"e"],[6412,14,""],[6412,0,"from"],[6434,1,""],[6421,6,""],[6442,0," "],[6404,2,""],[6409,0," $p$"],[6445,0,"$H_p=o_1 \\dots o_n$ applied"],[6476,4,""],[6476,0,"that"],[6485,28,""],[6485,0,","],[6487,0,"processed "],[6641,0,"."],[6647,114,""],[6532,14,""],[6532,0,"H_p"],[6254,0,"\\textbf{Proof. "],[6268,1,""],[6268,0,"} "],[7429,0,"\n\nWe show the induction step case by case, considering each type of operation $P"],[7508,1,""],[7508,0,"o_{n+1}$ that may be inserted. First consider the case that $o_"],[7538,1,""],[7538,0,"\n\n"],[7572,0,"{n+1}=\\mathsf{delete}(\\mathit{id})$. By causality, th"],[7609,16,""],[7609,0,"A list element can only be deleted if it exists in the list, so by causality, there must be a prior "],[7702,7,""],[7702,0,"n operation $o_i=\\mathsf{insert}(\\mathit{id}, \\placeholder, \\placeholder)$ at a prior point in the history. Moreover, Lamport timestamps used "],[7820,0,"the "],[7841,1,""],[7847,0,"as \\"],[7850,1,""],[7850,0,"$\\mathid{"],[7857,2,""],[7857,0,"t{id}$ is unique, so there must be exactly one such $\\mathsf{insert}$ operation, and there cannot be any $\\mathsf{isnert"],[7972,5,""],[7972,0,"nsert}$ operation for the same $\\mathit{id}$ at a point after $o_{n+1}$ in the history.\n\nThus, the only m"],[8076,1,""],[8076,0,"operation that can modify the mapping for the "],[8118,4,""],[8118,0,"$A(\\mathit{id}$"],[8132,1,""],[8132,0,")$ "],[8060,0,"\nNote that the "],[8071,4,""],[8071,0,"applying $\\mathsf{delete}(\\mathit{id})$ "],[8111,35,""],[8116,1,""],[8116,0,"ies only"],[8158,0,"in the state "],[8157,0,","],[8159,2,""],[8159,0,"and otherwise leaves"],[8190,0,"$A$ unchanged. The operation can thus only interact with another operation that modifies the mapping for $A(\\mathit{id})$; it is trivially "],[8311,1,""],[8311,0,", and"],[8333,0,"commutative with respect to a"],[8203,0,", so it is trivially commutative with respect to any operation that does not modify or depend on $A(\\mathit{id})$"],[8317,0,"\n\n"],[7539,0,"\n\\subsubsection{Deletion}\n"],[7555,0,"Commutativity of "],[7572,1,""],[7572,0,"d"],[8362,158,""],[7741,2,""],[7741,0,"exist"],[8365,0,"The first kind of operation that can a"],[8402,1,""],[8402,0,"modify the same $A(\\mathit{id})$ is a $\\mathsf{delete}$ operation for the same list element $\\mathit{id}$. As the rule for applying this operation is idempotent, the presence of any other $\\mathsf{delete}(\\mathit{id})$ operations before or after ${"],[8649,1,""],[8649,0,"o_{n+1}$ in the history does not have any effect on the final state.\n\nThe only other kind of operation that can depend on or modify $A(\\mathit{id})$ is an \\"],[8804,1,""],[8804,0,"$\\mathsf{insert}$ operation in which "],[8831,10,""],[8820,0,"(\\placeholder, \\mathit{id}, \\placeholder)"],[8872,0,"."],[8719,0," "],[8719,0,"We showed that an $\\mathsf{insert}(\\mathit{id}, \\placeholder, \\placeholder)$ operation can only occur prior to $\\mathsf{delete}(\\mathit{id})$. Thus,"],[8868,1,""],[8868,0,"t"],[9021,0,", or a recursive call to the $\\mathrm{apply}$ function that uses such an operation internally"],[9115,0," Note that all lookups "],[9126,12,""],[9126,0,"when applying such an inser"],[9148,5,""],[9148,0,"$\\mathsf{insert}$ operation, the query for $A(\\mathit{prev})$ ignores the \\mathit{value}"],[9222,0,"$"],[9237,0,"$ element of the "],[9185,1,""],[9185,0,"ies"],[9212,7,""],[9212,0,"ignore"],[9255,0,"tuple and leave it una"],[9276,1,""],[9276,0,"changed, and only examine and modify the $\\mathit{next}$ element of the tuple. By contrast, $"],[9368,1,""],[9368,0,"applying $|"],[9378,1,""],[9378,0,"\\mathsf{delete}(\\mathit{id})$ modifies only the $\\mathit{value}$ element of $A(\\mathit{id})$, and "],[9472,4,""],[9472,0,"and leaves the $\\mathit{next}$ element unchanged. Thus, the "],[9521,11,""],[9521,0,"\n\nThus, inserting $o_{n+1}=\\mathsf{delete}(\\mathit{id})$ at any causally ready point in a history "],[9529,9,""],[9529,0,"if"],[9571,0,"is inserted "],[9623,1,""],[9623,0,", the final state does not depend on the insertion point, because the inserted operation does not interact with any prior or following operations.\n\n\\subsubsection{Commutativity of insertion}\n\nNow consider the case that ${"],[9843,1,""],[9843,0,"o_{n+1}=\\mathsf{insert}(\\mathit{id}, \\mathit{prev}, v)$. In this operation, $\\mathit{id}$ is a freshly generated Lamport timestamp"],[9900,18,""],[9900,0,"The Lamport timestamp"],[9938,2,""],[9957,17,""],[9958,0,"by t"],[9958,4,""],[9957,0,"by the peer on which the edit was performed. B"],[9900,0,"\n\n"],[9900,0,"Let $A_o$ be the state of the peer on which $o_{n+1}$ was generated, immediately after $o_{n+1}$ was locally applied. "],[10122,1,""],[10122,0,"Let $A_o$ be the state of the peer on which $o_{n+1}$ was generated, immediately after $#"],[10210,1,""],[10210,0,"o_{n+1}$ was locally applied."],[9900,120,""],[10119,0," By the definition of Lamport timestamps, $\\mathit{id}$ is the greatest timestamp in $A_o$. Therefore, the $\\mathrm{apply}$ "],[10009,1,""],[10009,0,"p"],[10069,1,""],[10082,5,""],[10082,0,"before"],[10102,8,""],[10110,0,", and let $A_p'$ be the state of the same peer immediately after $o{"],[10177,1,""],[10177,0,"_{n+1}$ was applied"],[10197,1,""],[10197,0,"\n\n"],[10287,0,"'"],[10289,0,", and greater than any timestamp occurring in $A_p$"],[10286,1,""],[10286,0,"p"],[10374,0,"function that transformed $A_p$ into $A_p'$ "],[10372,46,""],[10356,0," "],[10356,1,""],[10353,0,"in "],[10359,0," state update"],[10374,0,"AP"],[10375,1,""],[10375,0,"_p' = "],[10395,0,"(A_p, \\mathsf{insert}(\\mathit{id}, \\mathit{prev}, v))$ the sec"],[10454,3,""],[10454,0,"non-recursive case ($n < \\mathit{id}$) must apply"],[10005,0," $p$ by the peer on which ${"],[10032,1,""],[10032,0,"o_{n+1}$ was generated, let"],[10082,41,""],[10082,0,"$p$"],[10159,13,""],[10159,0,"$p$"],[10509,0,"."],[309,0," time-stamp"],[10466,0,","],[10466,1,""],[10465,0,","],[10522,0," Therefore we have:\n$$ A_p' = A[\\,\\mathit{prev} \\mapsto"],[10553,0,"_p"],[10579,0," (v_p, \\mathit{id}), \\math"],[10599,0,"\\;"],[10607,0,"it{id} \\mapsto (v, n)\\,]\n\\quad\\text{ where }\\; A(\\mathit{prev}) = (v_p, n). $$"],[10643,1,""],[10648,1,""],[10650,1,""],[10650,0,"quad"],[10631,0," $$"],[10635,11,""],[10640,6,""],[10640,0," $"],[10642,1,""],[10672,1,""],[10670,1,""],[10643,0,"_p"],[10669,1,""],[10669,0,"\\mathit{next}"],[10666,0,"\\mathit{"],[10671,2,""],[10671,0,"rm"],[10675,0,"rev}"],[10583,1,""],[10583,0,"\\mathrm{prev}"],[10638,1,""],[10638,0,"\\mathit{next}"],[10588,2,""],[10588,0,"it"],[10695,2,""],[10695,0,"it"],[10719,1,""],[10720,0," and $\\mathit{prev} < \\mathit{id}$ and $\\mathit{next} < \\mathit{n"],[10784,1,""],[10784,0,"id}$."],[10541,0,"\n\\begin{align*}"],[10557,3,""],[10668,2,""],[10668,0,"\\\\"],[10671,0,"\\text{"],[10682,0,"}\\quad"],[10743,7,""],[10743,0," \\\\\n"],[10774,1,""],[10775,0,"\\quad\\text{"],[10789,0,"}\\quad"],[10796,1,""],[10823,1,""],[10824,0,"\n\\end{align*}"],[10689,1,""],[10562,0,"&"],[10709,0,"&"],[10748,0,"& "],[10690,0,"& "],[10711,1,""],[10564,0,"&"],[10692,0,"&"],[10685,5,""],[10746,0,"&"],[10746,1,""],[10686,1,""],[10685,0,"\\quad"],[10564,1,""],[10565,0,"& "],[10562,1,""],[10563,0,"\\;"],[10845,0,"\n\n"],[10846,0,"The rules that modify a pp"],[10871,1,""],[10871,0,"eer's state never remove an ID from the state ("],[10901,15,""],[10903,0,"i.e.\\ the domain of the partial function $A$ monotonically grows as operations are applied). Thus, when $o_{n+1}$ is applied at another peer $q$ at any causally ready time in its history, $\\mathit{prev}$ "],[11092,0,"A_q("],[11109,0,")"],[11112,0,"and $A_q(\\mathit{next})$ must be defined in the state $A_q$ of $Q"],[11176,1,""],[11176,0,"q$ at the time when $O"],[11197,1,""],[11197,0,"o_{n+1}$ is applied."],[11177,39,""],[11177,0,"$"],[11171,7,""],[11172,0,"\n\nNote ths"],[11181,1,""],[11181,0,"at the linked list structure is only modified by applying $\\]"],[11241,1,""],[11241,0,"mathsf{insert}$ operations ($\\mathsf{delete} "],[11285,1,""],[11285,0,"$ operations modify values, but t"],[11317,1,""],[11317,0,"not the order of items in the list), and applying an $\\mathsf{insert}$ operation always "],[4621,0," and $\\mathsf{head} < (c, p)$"],[11381,53,""],[11381,0,"."],[11381,0,", so $o_{n+1}$ "],[11381,1,""],[11381,0,". Causally ordered delivery requires $o_{n+1}$ to be delivered aft"],[11434,13,""],[11434,0,"applied "],[11397,11,""],[11397,0,"ing"],[11434,0,"after any operation that happened before and before any operation that happened causally later,"],[11532,0," we need only consider all possible orderings of"],[11591,0,"with respect to other concurrent \\"],[11624,1,""],[11624,0,"$\\mathsf{insert}$ operations"],[11389,2,""],[11652,0,"\n\n"],[11653,0,"Moreover, the list structure is only modified by inserting a new element between two existing, adjacent elements. When $o{"],[11774,1,""],[11774,0,"_{n+1}$ is applied at peer $q$, the elements $\\mathit{prev}$ and "],[11818,0," identified by"],[11853,0,"$\\mathit{next}$ are no longer necessarily adjacent (as a"],[11904,5,""],[11904,0,"in $A_q4"],[11911,1,""],[11911,0,"$, BUT "],[11914,4,""],[11914,0,"but we know from "],[11926,5,""],[11926,0,"that any other ID inserted between those elements must have $\\mathit{prev"],[11943,0," $\\mathit{id}'$"],[12014,0,"} < \\mathit{id}'$ and $\\mathit{next} < \\mathit{id}'$ according to the observation above."],[11931,0,"they must still be in the same order, and we "],[11967,9,""],[11967,0,". According to the observation above, we also know that "],[12158,35,""],[11875,7,""],[11875,0,"t"],[11472,0,","],[12154,0,"\n\n"],[11200,0,", or \\mat"],[11205,0,"$"],[11210,0,"hit{next} = \\mathsf{tail}$"],[12192,0,"By the induction hypothesis "],[12219,1,""],[12219,0,", assume a "],[12228,2,""],[12228,0,"we have "],[12221,15,""],[12221,0,"let hist"],[12227,2,""],[12227,0,"stories H1"],[12235,2,""],[12235,0,"$#"],[12236,1,""],[12236,0,"H_1$ and $HJ"],[12247,1,""],[12247,0,"_@"],[12248,1,""],[12248,0,"2$ "],[12225,10,""],[12241,0,"be causal histories of operations $o_n1 "],[12278,3,""],[12278,0,"1 \\dots o_n$ which result in the same final state when applied. When $o_{n+1}$ is inserted into tieht"],[12374,5,""],[12374,0,"either of these histories, causality demands that $\\mathit{prev}$ and $\\mathit{next}$"],[12424,0,"list elements "],[12473,0," are inserted b"],[12487,1,""],[12487,0,"at some point prior to $o_{n+1}$ in the history. When $o_{n+1}$ is applied, the $\\mathrm{apply}(\\placeholder, \\mathsf{insert}(\\mathit{id}, \\mathit{prev}, v))$ rule starts iterating at $\\mathit{prev}$ and skips over any elements with an ID greater than $\\mathit{id}$. Since $\\mathid{next} < \\mathid{id}"],[12783,1,""],[12783,0,"t"],[12788,0,"$, this iteration "],[12793,13,""],[12793,0,"e recursion never continues beyond $\\mathit{next}$. Thus, the $\\mathit{app"],[12861,6,""],[12861,0,"rm{apply}$ rule is guaranteed to insert $\\mathit{id}$ at some position between $\\mathit{prev}$ and $\\mathit{next}$."],[12767,1,""],[12767,0,"t"],[12474,3,""],[12474,0,"were already"],[12509,0," in the history"],[12543,15,""],[12985,0,"\n\nThus, we "],[12989,7,""],[12989,0,"her"],[12989,3,""],[12989,0,"erefore "],[12996,1,""],[12996,0,", we need only consider insertions that are concurrent to $o_["],[13057,1,""],[13057,0,"{n+1}$ and that insert at some position between $\\mathit{prev}$ and $\\mathit{next}$. Note that the $\\mathrm{apply}$ rule has"],[13178,3,""],[13178,0,"ensures that after $\\mathit{id}$ is inserted, all list elements between $\\mathit{prev}$ and $\\mathit{id}$ are "],[13284,4,""],[13284,0,"have an ID greater than $\\mathit{id}$, and "],[13270,13,""],[13270,0,"the insertion point"],[13333,0,"the list element following the insertion point has an ID less than $\\mathit{id}$. We use this po"],[13428,1,""],[13428,0,"roperty to show that no matter where $o{"],[13467,1,""],[13467,0,"_{n+1}$ is inserted in $H-"],[13492,1,""],[13492,0,"_1$ and $H_2$, the outcome is the same sequence of list elements.\n\nLet $H_c$ be a history of operations "],[13595,1,""],[13595,0,", derived b"],[13605,1,""],[13605,0,"from either $H_1$ or $H_2$ by condidering only insert op"],[13652,0,"$\\mathsf{"],[13667,0,"}$"],[13672,0,"erations that are concurrent with $o_{n+1}$"],[13635,11,""],[13635,0,"selecting"],[13713,0," and that insert at a position between $\\mathit{prev}$ and $\\mathit{next}$. Among the operations in $H_c$ there is a subset of operations $H_s$ that are ``starting operations'': they do not cu"],[13904,1,""],[13904,0,"ausally depend on any other operation in $H_c$."],[13789,0,"Let $H-"],[13795,1,""],[13795,0,"_s$ be the "],[13806,9,""],[13806,0,"subset of"],[13835,38,""],[13930,0," After applying $#"],[13947,1,""],[13947,0,"o_{n"],[13931,20,""],[13931,0,"Note that $o_{n+1}$ is also a starting operation."],[13979,0,", since it does not have any causal dependencies in $H_c$"],[14037,0,"\n\nLet $O"],[14044,1,""],[14044,0,"o_i$ be a starting "],[14047,0," \\in H_s"],[14071,0,"operation. Note that by the definition of Lamport timestamps, any operation that causally depends on $o_i$ must have a greater timestamp than $o_i$. Thus, $"],[14226,1,""],[14226,0,"if the $\\mathrm{apply}$ rule inserts $o_{n+1}$ after $o_i$, then $o"],[14291,2,""],[14291,0,"all operations that causally depend on $o_i$ necessarily also appear before $o_{n+1}$ in the final state.\n\n"],[13142,0,"\n\n"],[13142,0,"Let $H_c$ be a history of operations, derived from either $H_1$ or $H_2$ by selecting only $\\mathsf{insert}$ operations that are concurrent with ${"],[13288,1,""],[13288,0,"o_{n+1}$ and that insert a "],[13314,1,""],[13314,0,"t a position within the interval from $\\mathit{prev}$ to $\\mathit{next}$. The operations in $H_c$ determine the final order of list elemtns "],[13450,4,""],[13450,0,"emt"],[13451,2,""],[13451,0,"nts within that interval, and do not affect (and are not affected by) the order"],[13525,5,""],[13525,0,"list order outside of that interval. By the induction hypothesis, the operations in $H_c$ "],[13591,17,""],[13591,0,"all possible choices of"],[13621,0,"result in the same final list order within "],[13387,0," By the induction hypothesis,"],[13417,17,""],[13417,0,"all possible sub-histories"],[13450,9,""],[13450,0,"result in th"],[13459,3,""],[13463,0," same"],[13518,5,""],[13518,0,". The operations in $H_c$"],[13623,104,""],[13623,0,", so we can consider $H_c$ in isolation."],[14082,230,""],[13663,0,"\n\nLet $[\\mathit{id}_1, \\dots, \\mathit{id}_k]$ be the order of list elements "],[13715,0," Lamport timestamps of"],[13738,8,""],[13738,0,"the"],[13756,0,"insert"],[13756,6,""],[13756,0,"define"],[13756,6,""],[13756,0,"in the interval between $\\mathit{prev}$ and $\\mathit{next}$, in the list order unambiguously defined by $H_c$. We need to show that regardless at what position in $H_c$ we insert the operation $o_{n+1}$, the outcome is the same sequence of list elements. Equivalently, we can show "],[14008,29,""],[14008,0,"s $[\\mathit{id_1, \\dots, "],[14022,0,"}"],[14034,0,"\\mathit{id}, \\dots, \\mathit{id}_k]$. "],[14070,1,""],[14070,0,"\n\nSince in"],[14078,2,""],[14078,0,"$\\mathit{"],[14084,3,""],[14084,0,"sf{insert}$ operations only add a new element between two ad"],[14142,2,""],[14142,0,"existing, adjacent elements, it is equivalent to show that regardless where $o_{n+$"],[14224,1,""],[14224,0,"1}$ is adde"],[14231,4,""],[14231,0,"inserted to $H_c$"],[14033,0," \\mathit{id}_m,"],[14061,0," \\mathit{id}_{m+1},"],[14282,0,", the set of list elements $\\mathit{id}_1"],[14310,0,"{"],[14310,0,"\\"],[14325,0,", \\dots, \\mathit{id}_m\\}$ that appear \\emph{before} $"],[14377,1,""],[14377,0,"the list element for $o_{n+1}$ is the same. By "],[14211,10,""],[14211,0,"sufficient"],[14420,4,""],[14694,0,"\n\n"],[14694,0," Further note that by the definition of Lamport timestamps, any operation that causally depends on an operation $O"],[14807,1,""],[14807,0,"o_i$ must have a greater ID than $o_i$."],[14848,143,""],[14103,0,", where $\\mathit{id}$ is the Lamport timestamp of $o_{n+1}$"],[14458,7,""],[14458,0,"\\mathit{id}"],[14436,21,""],[14434,1,""],[14422,6,""],[14442,0," in the final order"],[14474,0," This "],[14474,6,""],[14902,0,"Let $o_i$"],[14907,1,""],[14907,0,"\\mathit{id}"],[14920,0," \\in {\\mathit{id_1, "],[14936,0,"}"],[14941,0,"\\dots, \\mathit{id}_m}"],[14961,0,"\\"],[14925,0,"\\"],[14965,0," be the ID of any list element that appears before $o_{n+1}$ in the final order. The operation $O"],[15061,1,""],[15061,0,"o_i#$"],[15064,2,""],[15064,0,"$ that inserts $\\mathit{id}_i$ occurs either before or after $o_{n+1}$ in $H_c$. "],[15095,6,""],[15095,0,"is applied"],[15149,0,"If $o_i$ is applied before $o_{n+1}$, that implies $\\mathit{id}_i "],[15214,1,""],[15214,0,"$."],[15201,0,"\\mathit{id} < "],[14900,0,"\n\nLet $O_{"],[14909,1,""],[14909,0,"\\mathit{left} = "],[14907,1,""],[14907,0,"T"],[14925,0,"\\{\\mathit{id}_i \\mid \\mathsf{insert}(\\mathid{"],[14968,2,""],[14968,0,"t{id}_i, \\mathit{prev}, \\placeholder) \\in H_c\\}$ be the IDs of all operations in $H_c$ that use $\\mathit{prev}$ as their reference position."],[15015,0," \\cu p"],[15019,2,""],[15019,0,"p \\mathit"],[15021,0,"\\{"],[15030,0,"{id}\\}"],[15075,0," and $"],[15075,6,""],[15015,21,""],[14905,0," the set"],[15025,2,""],[15025,0,"contain"],[15121,0," Any history containing these operations"],[15145,0,"only "],[15137,7,""],[15137,0,"sisting"],[15149,0," of"],[15169,0," "],[15169,1,""],[15169,0,", in any order, results in the same final list order, namely in order of descending Lamport timestamp. Since Lamport timestamps are totally ordered, this list order is deterministic and unqi"],[15357,2,""],[15357,0,"ique.\n\nWhen operations are added"],[15270,0," (TODO prove this in a lemma)"],[15298,0,", it might not be obvious"],[15433,0," "],[15418,4,""],[15418,0,"Any"],[15433,0,"in $H_c$ "],[15416,0," $\\mathit{id}$ has a deterministic position within this order."],[15504,10,""],[15504,0,"that use a different list element (not $\\mathit{prev}$ "],[15558,1,""],[15558,0,") as their reference position appear a"],[15595,1,""],[15595,0,"at some position after their reference element in the final list order, and have a Lamport timestamp greater than their reference element. If the reference element appears before $o_{n+1}$ in the final order, and "],[15493,1,""],[15493,0," $o_i$"],[15517,0,"s"],[15568,6,""],[15568,0," its"],[15598,0,"s"],[15623,5,""],[15623,0,"its"],[15676,2,""],[15676,0,"s"],[15711,5,""],[15711,0,"its"],[15808,0,"and $"],[15808,5,""],[15808,0,"$o_i$ appears before $o_{n+1}$ in the history, then the apply rule will "],[15875,5,""],[15875,0,"for #"],[15879,1,""],[15879,0,"$o_{n+1}$ skips over both $o_i$ and the reference element, since they must both have timestamps greather tha"],[15980,7,""],[15980,0,"er than $\\mathit{id}$. If the reference element appears before $o_{n+1}$ in the final order, and $o_i$ appears after $#"],[16098,1,""],[16098,0,"o_{n+1}$ in thei"],[16113,1,""],[16113,0," history"],[15803,0," that means the timestamp of the reference element is greater than $\\mathit{id}$"],[15854,2,""],[15854,0,"and "],[15854,4,""],[15854,0,"is"],[15883,0,","],[15888,0," so the timestamp of "],[15908,1,""],[15914,0," is also greater than ${"],[15937,1,""],[15937,0,"\n"],[15937,1,""],[15937,0,"\\mathit{id}$. If $o_{n+1}$"],[15972,16,""],[15972,0,"after $o_i$"],[16081,65,""],[16086,71,""],[15733,0," if "],[15734,3,""],[15734,0,"If the reference element appears after $o_{n+1}$ in the final order, $o_i$ also appears after $o_{n+1}$, regardless of the order of "],[15862,4,""],[15862,0," in which operations are applied."],[15895,1,""],[15895,0,"\n\n"],[16293,0,", the apply rule for $o_i$ does not skip over $o_{n+1}$"],[16338,0," the list element for"],[16369,0,", because "],[16371,0,"again "],[16385,0,"the timestamp for $o_i$ is greather than"],[16417,8,""],[16417,0,"er than $\\mathit{id}$. Either way, both "],[16452,5,""],[16452,0,"if the reference element appears before $o_["],[16495,1,""],[16495,0,"{n+1}$ in the final order, so does $o_i$, regardless of the order in which a"],[16570,1,""],[16570,0,"operations are applied."],[16595,937,""],[16595,0,"TODO that last bit of the argument is a bit hand-wavy, need to make it more precise. But I think the general approach is ok. That completes the induction step, and thus the proof."],[16774,2,""],[3942,0,"\n\n\\begin{figure*}\n\\end{figure*}"],[3959,0,"\n\\captu"],[3965,1,""],[3965,0,"ion{Rules for mutating an ordered list}\n\\label{fig:rga-rules}"],[168,0,"\n\\usepackage{pa"],[181,2,""],[181,0,"mathpartir} % inference rules"],[195,0,"notation for "],[4014,0,"\n\\inferrule[insert]"],[181,10,""],[181,0,"semantic"],[4031,0,"\n\\inference[insert"],[4043,6,""],[4043,0,"Insert]"],[4012,19,""],[4031,0,"{\n    \\exists "],[390,0,"\n\\renewcommand{\\prediate}[1]{$ #1 $}\n"],[390,0,"\n$ "],[391,2,""],[391,0,"% For semantic package, use math mode for all premises "],[428,18,""],[428,0," within inference rules"],[472,0,"c"],[4144,0,"vP"],[4145,1,""],[4145,0,"_p, \\mathit{next}. A(\\mathit{prev}) = (v_p, \\n"],[4190,1,""],[4190,0,"mathit{next}) & \\mathit{id} < \\mathit{next}\n}{\n    A, \\mathrm{apply}("],[4244,15,""],[4244,0,"\\mathsf{insert}(\\mathit{id}, \\mathit{prev}, v) ==> A'"],[4233,0," &\n    A, \\mathsf{insert}(\\mathit{id}, \\mathit{next}, v) ==> A'"],[4360,0,"\n}"],[4163,0,"\\;"],[4162,3,""],[4162,0," \\mathbin{:}"],[4300,4,""],[4300,0," \\evalto"],[4368,4,""],[4368,0," \\evalto"],[572,0,"{"],[585,0,"}"],[488,0,"\n\n\\newcommand{\\evalto}{\\quad\\Longrightarrow\\quad}"],[512,4,""],[512,0,";"],[529,4,""],[529,0,";"],[452,0,"%"],[389,100,""],[181,8,""],[181,0,"mathpartit"],[190,1,""],[190,0,"r"],[4066,4,""],[4066,0,"rule"],[4163,1,""],[4163,0,"\\\\\n    "],[4169,1,""],[4198,1,""],[4198,0,"\\\\"],[181,10,""],[181,0,"bussproofsq"],[191,1,""],[4044,0,"\n"],[4044,1,""],[4060,0,"\n"],[4060,0,"\\begin{prooftree}"],[4078,19,""],[4078,5,""],[4078,0,"    \\AxiomC{$"],[4169,3,""],[4169,0,"}"],[4175,0,"\\AxiomC{"],[4210,3,""],[4210,0,"}"],[4216,0,"\\AxiomC{"],[4284,0,"}"],[4284,0,"$"],[4224,0,"$"],[4183,0,"$"],[4211,0,"$"],[4290,2,""],[4290,0,"    \\TrinaryInfC{"],[4307,5,""],[4307,0,"$"],[4368,0,"$}"],[4371,1,""],[4371,0,"\\end{prooftree}"],[4169,0,"$"],[4117,12,""],[4117,0,".\\;"],[4281,0,"\n    \\LeftLabel{\\textsc{Insert}}"],[4059,0,"\n\\begin{prooftree}\n}"],[4078,1,""],[4078,0,"\\end{prooftree}\n"],[4077,0,"\n    \\AxiomC{$\\exists v_p, \\mathit{next}.\\; A(\\mathit{prev}) = (v_p, \\mathit{next})$}\n    \\AxiomC{$\\mathit{next} < \\mathit{id}$}\n    \\LeftLabel{\\"],[4221,0,"$"],[4223,0,"mathsc{Ins}_1$}\n    \\BinaryInfC{$A, \\mathsf{insert}(\\mathit{id}, \\mathit{prev}, v) \\evalto "],[4313,1,""],[4313,0,"\n        "],[4577,0,"$"],[4579,4,""],[4579,0,"math"],[4589,3,""],[4590,0,"_2$"],[4322,0,"A[\\,\\mathit{prev} \\mapsto (v_p, \\mathit{id}),\\; \\mathit{id} \\mapsto (v, \\mathit{next})\\,]}"],[4223,4,""],[4223,0,"text"],[4669,4,""],[4669,0,"text"],[4411,0,"$"],[4462,30,""],[4091,30,""],[4200,0,"Apply-"],[4623,0,"Apply-"],[4734,0,"\n\n\\begin{prooftree}\n\\end{prooftree}"],[4753,0,"\n    \\AxiomC{$A(\\mathit{target}) = (v, \\mathit{next})$}\n    \\LeftLabel{$\\textsc{Apply-Del}$"],[4843,1,""],[4824,1,""],[4842,0,"}\n    \\UnaryInfC{$A, \\am"],[4864,2,""],[4864,0,"mathsf{delete}(\\mathid"],[4885,1,""],[4885,0,"t{id}, \\mathit{target}) \\evalto "],[4916,1,""],[4916,0,"\n        A[\\,\\mathit{target} \\mapsto (\\bot, \\mathit{next})\\,]$}"],[4110,0,"\\mathsf{listEl}"],[4339,0,"\\mathsf{listEl}"],[4375,1,""],[4375,0,"\n        "],[4404,0,"\\mathsf{listEl}"],[4510,0,"\\mathsf{listEl}"],[4856,0,"\\mathsf{listEl}"],[5036,0,"\\mathsf{listEl}"],[4059,0,"\n\\begin"],[4060,6,""],[4060,0,"\\AxiomC{$"],[4059,10,""],[4235,3,""],[4235,0,"Trin"],[4077,0,"\n    \\AxiomC{$\\mathit{id} \\not\\in \\mathrm("],[4118,1,""],[4118,0,"{dom}(A)$}"],[4059,0,"\n\\begin{prooftree}\n\\end{prooftree}\n"],[4077,0,"\n    \\LeftLabel{\\textsc{Apply-TS}}\n    \\UNar"],[4077,0,"\n    \\AxiomC{}"],[4132,3,""],[4132,0,"naryInfC{$$}"],[4142,0,"A, \\mathsf{ts}(\\mathit{id}) \\evalto A[\\,\\mathit"],[4187,2,""],[4187,0,"sf{ctr} \\mapsto \\mathrm{"],[4177,1,""],[4177,0,"\n        "],[4219,0,"max}(A(\\mathsf{ctr}), c)\\,]"],[4090,0,"\\mathit{id"],[4090,0,"$"],[4102,0," = (c, p)$}"],[4469,0,"\n    \\AxiomC{$A, \\mathsf{ts}(\\mathit{id}) \\evalto A'$}"],[4568,3,""],[4568,0,"Quater"],[4651,0,"'"],[5270,1,""],[5270,0,"Bi"],[5229,0,"\n    \\AxiomC{$A, \\mathsf{ts}(\\mathit{id}) \\evalto A'$}"],[5402,0,"'"],[4221,0,"oun"],[4225,0,"e"],[4261,0,"oun"],[4265,0,"e"],[4265,1,""],[4261,3,""],[4225,1,""],[4221,3,""],[4059,0,"\n\\AxiomC{$A(\\mathsf{ctr}) = c$}\n\\LeftLabel{\\textsc{Gen-TS}}\n\\UnaryInfC{$A, \\mathSF"],[4139,2,""],[4139,0,"sf{newID} \\evalto A[\\,\\ma"],[4090,0,"\n\\AxiomC{$p = mathr"],[4104,0,"\\"],[4110,0,"m{myPeerID()}$}"],[4155,1,""],[4155,0,"Bi"],[4200,0,"thsf{ctr} \\mapsto c+1\\,],\\;(c,"],[4227,0," "],[4231,0," p)$}\n\n"],[4237,1,""],[4237,0,"\\DisplayProof\n"],[4169,0,"\\,"],[4170,1,""],[4170,0,";"],[4253,18,""],[4448,14,""],[4448,0,"DisplayProof"],[4232,0,"+1"],[4344,0,"\\;"],[4663,0,"\\;"],[4766,0,"\\;"],[5126,0,"\\;"],[5248,0,"\\;"],[5431,0,"\\;"],[5526,0,"\\;"],[4180,5,""],[4180,0,"newID"],[4254,0,"\n\nhello"],[4472,0,"\nworld\n"],[4255,8,""],[4255,4,""],[4287,4,""],[4317,4,""],[4367,3,""],[4371,1,""],[4254,0,"\n%%"],[4256,1,""],[4450,7,""],[4059,0,"\n\\centering\n"],[4070,1,""],[4265,0,"\\hfill"],[4080,0,"c = "],[4099,4,""],[4466,0,"\n\n"],[4085,0,"_p"],[4181,0,"_p"],[4211,0,"_p"],[4308,0,"_\\mathit{id}"],[4367,0,"_p"],[4411,0,"_p"],[4557,0,"_p"],[4577,0,"_p"],[4615,1,""],[4615,0,"\\mathit{prev}"],[4704,0,"_p"],[4809,0,"_p"],[4744,0,"_p"],[4881,0,"_p"],[4927,1,""],[4927,0,"]"],[4927,1,""],[4927,0,"\\mathit{prev}"],[5074,0,"_p"],[5112,1,""],[5112,0,"\\mathit{prev}"],[5261,0,"_p"],[5201,0,"_p"],[5327,0,"_p"],[5389,0,"_p"],[5444,0,"_p"],[5516,0,"_p"],[5556,0,"_p"],[5615,0,"_p"],[5684,0,"_p"],[4490,0,"\\begin{prooftree}\n\\end{pr"],[4491,24,""],[4491,0,"AxiomC{$q \\in \\mathit{peers}$}\n\\LeftLabel{\\textsc{Recv}}\n\\UnaryInfC{$A_p,\\; \\mathsf{yield|"],[4580,1,""],[4580,0,"} \\evalto A_p[,"],[4594,1,""],[4594,0,"\\,\\mathsf{recv} \\mapsto A_p(\\mathsf{recv}) \\cup A_q(\\mathsf{send})\\,]$}\n\\DisplayProof"],[4667,12,""],[4667,0,"end{prooftree}"],[4489,0,"\n\\begin{prooftree}"],[4490,17,""],[4490,0,"\\proofSkipAmount \\leavevmode"],[4506,1,""],[4695,14,""],[4695,0,"proofSkipAmount"],[4517,0,"\n\\AxiomC{}\n\\LeftLabel{\\textsc{Send}}\n\\UnaryInfC{$A_p,\\; \\mathsf{yield} \\evalto A_p[\\,\\mathsf{send} \\mapsto A_p(\\mathsf{send}) \\cup A_p(\\mathsf{newOps})\\,]$}\n\\DisplayProof\\hfill\n%"],[4872,0,"\\DisplayProof"],[4491,26,""],[4491,0,"begin{prooftree}"],[4683,0,"\n\\end{prooftree}"],[4700,1,""],[4700,0,"\n\\beginP"],[4707,1,""],[4707,0,"{prooftree}"],[4896,28,""],[4896,0,"end{prooftree}"],[4663,20,""],[4890,0,"\n\n\\begin{prooftree}\n\\end{prooftree}"],[4909,0,"\n\\AxiomC{$(\\mathsf{"],[4925,3,""],[4925,0,"it{deps}, \\mathit{ip"],[4943,2,""],[4943,0,"op}) \\in A_p(\\mathsf{recv})$}\n\\AxiomC{$ "],[4982,1,""],[4982,0,"\\mathit{deps} \\subseteq A_p(\\mathsf{ops})$}\n\\AxiomC{$A_p, \\mathit{op} \\evalto A_p'$}\n\\LeftLabel{\\textsc{Apply}}\n\\Ternary"],[5096,6,""],[5096,0,"rinaryInfC{$A_p,\\; \\mathsf{yield} \\evalto A_p'[\\,\\mathsf{ops} \\mapsto A_p'(\\mathsf{ops}) \\cup \\{op\\}\\,]$}"],[5192,0,"\\mathit{"],[5202,0,"}"],[5039,0,"\\;"],[5228,0,"\n\\caption{Rules for mainti"],[5248,6,""],[5248,0,"Lamport timestamps, sendcin"],[5272,3,""],[5272,0,"ing and receiving operations}\n\\label{fig:send-recv}\n\\end{figure*}"],[5338,0,"\n\\begin{figure*}"],[4682,16,""],[4682,0,"proofSkipAmount'leavevmode"],[4697,1,""],[4697,0,"\\"],[4886,14,""],[4886,0,"DisplayProof\\"],[4898,1,""],[4898,0,"\n%\n\\DisplayProof\\proofSkipAmount"],[4900,0,"\n\\AxiomC{}\n\\LeftLabel{\\Textsc"],[4923,1,""],[4923,0,"t"],[4929,0,"{Yield-NOP}}\n\\UnaryInfC{$A_p,\\; \\mathsf{yield} \\evalto A_p$}"],[4898,0,"\\hspace{30pt}"],[4907,3,""],[4907,0,"em"],[5495,0,"\n\\begin{prooftree}\n\\end{P"],[5519,1,""],[5519,0,"prooftree}\n"],[5513,0,"\n\\LeftLabel{\\textsc{Insert}}\n"],[5541,1,""],[5513,0,"\n\\AxiomC{$$}"],[5523,0,"A_p,;"],[5527,1,""],[5527,0,"\\;\\mathsf{newID}"],[5529,0," "],[5544,0," \\evalto A_p',\\; \\mathid{id}"],[5567,1,""],[5567,0,"t"],[5602,0,"\n\\TrinaryInfC{$A_p,\\; \\mathsf{insertLocal}(\\mathit{prev})"],[5513,0,"\n\\AxiomC{$A"],[5523,1,""],[5523,0,"\\mathit{prev} \\in \\mathrm{dom}(A_p)$}"],[5705,0,", v"],[5709,0," \\evalto A_p''$}"],[5621,0,"\n\\AxiomC{$A_p',\\;"],[5631,7,""],[5631,0,"\\mathit{op}"],[5738,1,""],[5738,0,"\n    "],[5748,0,"[\\,\\mathit"],[5756,2,""],[5756,0,"sf{newOps} \\mapsto A_p''(\\mathsf{newOps}) \\cup \\{\\mathit{op}\\}\\,]"],[5805,0,"\\"],[5805,1,""],[5805,0,"(A_p''(\\mathit{"],[5817,3,""],[5817,0,"sf{ops}), "],[5838,0,")"],[5642,0," = \\mathsf{insert}(\\mathit{id}, \\mathit{prev}, v)$}\n\\Axc"],[5697,1,""],[5697,0,"iomC{$$}"],[5703,0,"A_p', \\mathit{op} \\evalto A_p''"],[5766,3,""],[5766,0,"Quater"],[5938,0,",\\;\n    \\mathsf{ops}"],[5856,6,""],[5856,0,"queue"],[5885,6,""],[5885,0,"queue"],[4650,6,""],[4650,0,"queue"],[4884,117,""],[4884,29,""],[4884,0,"\\end{prooftree}"],[4680,27,""],[4680,0,"\\begin{prooftree}"],[5814,0," \\mapsto A_p''(\\mathsf{ops} \\"],[5840,3,""],[5840,0,"}) \\cup \\{\\mathit{op}\\}"],[5227,0,"\n\n\\begin{prooftree}\n\\end{prooftree}"],[5246,0,"\n\\BinaryInfC{$A_p,\\;"],[5092,0,"-R"],[5092,2,""],[5266,0," \\mathit{cmd} \\evalto A_p',\\; "],[5292,4,""],[5292,0,"[\\,"],[5246,0,"\n\\AxiomC{$A_p,\\; \\mathit{cmd} \\evalto A_p',\\;\\ma"],[5291,0," "],[5295,0,"thit{op}$}"],[5307,2,""],[5307,0,"U"],[5305,0,"\n\\LeftLabel"],[5092,0,"-Remote"],[5323,0,"{\\textsc{Apply-Local}}"],[5393,0,"\n    \\mathsf{queue} \\mapsto \\"],[5421,1,""],[5421,0,"A_p'(\\mathsf{queue}) \\cup \\{(A_p'(\\mathsf{ops}), \\mathit{op})\\},\\;\n    \\mathsf{ops} \\mapsto A_p'(\\mathsf{ops}) \\cup \\{\\mathit{op}\\}\\,]$}"],[4889,0,"\n\n\\begin{prooftree}\n\\AxiomC{$A_p,\\; \\mathit{cmd} \\evalto A_p',\\; \\mathit{op}$}\n\\LeftLabel{\\textsc{Apply-Local}}\n\\UnaryInfC{$A_p,\\; \\mathit{cmd} \\evalto A_p',\\"],[5045,2,""],[5045,0,"[\\,\n    \\mathsf{queue} \\mapsto A_p'(\\mathsf{queue}) \\cup \\{(A_p'(\\mathsf{ops}), \\mathit{op})\\},\\'"],[5141,1,""],[5141,0,";\n    \\mathsf{ops} \\mapsto \\A_p'(\\mathsf{ops}) \\cup"],[5097,0,"\\;"],[5103,0,"\\;"],[5196,0," \\{\\mathit{op}\\}\\,]$}\n\\end{prooftree}"],[5578,339,""],[5172,1,""],[5191,0,"\\;"],[5197,0,"\\;"],[5540,0,"';"],[5540,2,""],[5540,0,"\\;"],[5546,0,"\\;"],[5492,0,"\n   "],[4797,0,"\n   "],[4853,0,"\\;"],[4849,0,"\\;"],[4585,0,"\n   "],[4641,0,"\\;"],[4637,0,"\\;"],[4638,1,""],[4638,0,","],[4644,1,""],[4644,0,","],[4864,1,""],[4864,0,","],[4858,1,""],[4858,0,","],[4830,0,"\\,"],[4839,0,"\\,"],[4610,0,"\\,"],[4619,0,"\\,"],[5092,0,"\\,"],[5101,0,"\\,"],[5192,0,"\\,"],[5201,0,"\\,"],[5230,1,""],[5230,0,","],[5224,1,""],[5224,0,","],[5132,1,""],[5132,0,","],[5126,1,""],[5126,0,","],[5577,1,""],[5577,0,","],[5583,1,""],[5583,0,","],[5549,0,"\\,"],[5558,0,"\\,"],[6100,1,""],[6100,0,",\\; \\mathsf{insert}(\\mathit{id}, \\mathit{prev}, v)$}\n"],[6153,166,""],[5877,115,""],[5907,6,""],[5907,0,"Bi"],[4488,0,"\\proofSkipAmount"],[7250,4,""],[7172,4,""],[7137,4,""],[7077,4,""],[7005,4,""],[6883,4,""],[6844,4,""],[6762,4,""],[6719,4,""],[6635,4,""],[6533,4,""],[6447,4,""],[6364,4,""],[6325,4,""],[6265,4,""],[6222,4,""],[6138,4,""],[6085,4,""],[6065,0,"\n\n\\begin{prooftree}\n\\end{prooftree}"],[6084,0,"\n\\AxiomC{$\\mathit{target} \\in \\mathrm{dom}(A_p)$}\n\\AxiomC{$A_p,\\; \\mathsf{newID} \\evalto A_p',\\; \\mathit{id}$}\n\\LeftLabel{\\Text"],[6207,1,""],[6207,0,"t"],[6211,0,"sc{Delete}}\n\\BinaryInfC{$A_p,\\; \\mathsf{deleteLocal}(\\mathit{target}) \\evalto\n    A_p',\\; \\mathsf{delete}(\\mathit{id}, \\mathit{target})$}"],[6747,0,"\\,"],[6756,0,"\\,"],[6824,0,"\\,"],[6833,0,"\\,"],[7516,0,"\\,"],[7525,0,"\\,"],[5042,1,""],[5042,0,"Bi"],[5007,0,"\n\\AxiomC{$A_p',\\; \\mathit{op} \\evalto A_p''$}"],[5130,0,"'"],[5170,0,"'"],[5204,0,"'"],[5272,0,"'"],[6006,5,""],[6006,0,"Cmd"],[6006,3,""],[6006,0,"Local"],[6006,5,""],[6006,0,"Cmd"],[6304,6,""],[6304,0,"eCmd"],[5973,2,""],[5973,0,"Tri"],[5943,0,"\n\\AxiomC{$A_p',\\; \\mathsf{apply}(\\mathsf{insert}(\\mathit{id}, \\mathit{prev}, v)) \\evalto A_p''$}"],[6133,0," A_p'',\\; \\mathit{id}$}"],[6156,61,""],[6331,1,""],[6331,0,"Tr"],[6301,0,"\n\\AxiomC{$A_p',\\; \\mathsf{apply}(\\mathsf{delete}(\\mathit{id}, \\mathit{target})) \\evalto A_p''$}"],[6489,0," A_p''$}"],[6497,60,""],[6495,0,"\\; \\bot"],[6495,0,","],[5114,3,""],[5114,0,"op"],[5106,0,"\n"],[5106,1,""],[5106,0,"\\mathsf{apply}("],[5132,0,")"],[4973,3,""],[4973,0,"op"],[4989,15,""],[5001,35,""],[5001,0,"q = A'"],[5006,1,""],[5006,0,"_p'(\\mathsf{queue}) \\,\\cup\\, \\P{"],[5036,2,""],[5036,0,"{(A_p'(\\mathsf{ops}), \\mathit{op})\\}$}"],[5167,1,""],[5203,69,""],[5203,0,"q"],[5203,0,"\\mathsf"],[5208,2,""],[5208,0,"it{"],[5212,0,"ueue}"],[5001,1,""],[5001,0,"\\mathit{queue}"],[5984,0,"Op"],[6344,0,"Op"],[6836,0,"Op"],[7216,0,"Op"],[7336,0,"Op"],[7610,0,"Op"],[5732,4,""],[5732,0,","],[5743,0,", and applying"],[5822,0,"\n\\begin{prooftree}\n\\end{prooftree}\n"],[5840,0,"\n\\AxiomC{A_p,\\;\\mathsf{newID} \\evalto A_p',\\; \\mathit{id}$}\n"],[5849,0,"$"],[5901,0,"\\AxiomC{$A_p',\\; \\mathsf{apply}(\\mathsf{listOp"],[5941,1,""],[5941,0,"l"],[5947,0,"}(\\mathit{id})) \\evalto A_p''$}\n\\Leve"],[5982,2,""],[5982,0,"ftLabel{\\textsc{Alloc-List}}\n\\BinaryInfC{$A_p,\\; \\mathsf{a"],[6039,1,""],[6039,0,"listCmd}(\\"],[6047,2,""],[6047,0," \\evalto A_p'', "],[6062,1,""],[6062,0,"\\; \\mathit{id}$}"],[6803,0,"\n\n\\begin{prooftree}\n\\end{prooftree}"],[6822,0,"\n\\LeftLabel{\\textsc{Apply-List}}"],[6822,0,"\n\\AxiomC{$\\mathit{id} \\not\\in \\mathrm{dom}(A_p}"],[6868,1,""],[6868,0,")$}\n\\AxiomC{$\\mathit{id}"],[6881,0,"A_p,\\; \\mathsf{ts}("],[6911,0,") \\evalto A_p'$}"],[6959,0,"\n\\BinaryInfC{$$}"],[6973,0,"A_p,\\; \\mathsf{listOp}(\\mathit{id}) \\evalto A_p"],[7016,0,"\n   "],[7024,0,"'[\\,\\mathit{id} \\mapsto"],[7040,0,"\\,"],[7049,0,"\\, \\mathsf{listEl}(\\bot, \\mathsf{tail})\\,]"],[7267,0,"\\mathit{next} = \\mathsf{ta"],[7267,26,""],[7294,0," \\vee \\mathit{next} = \\mathsf{tail}"],[7295,0,"\\,"],[7301,0,"\\,"],[855,0,"\n\n"],[856,0,"% TODO papers on formal verification of CRDTs or similar:\n% Gotsman et al, \"cause I'm strong enough\", POPL 2016\n% various papers by Sebastian Burckhardt\n% Roh et al's tech report (lemmas 8-13, theorem 4)\n% Zeller & Bieniusa"],[4308,18,""],[4308,0," \\mathrm{max}()"],[4322,0,"\\{\\}"],[4306,0,"_\\mathit{max}"],[4337,0,"c \\mid "],[4360,0,"_\\mathit{self}"],[4343,0," \\exists p. "],[4306,53,""],[4306,0," = A_p(\\mathsf{ctr})"],[4339,14,""],[4757,0,"~"],[4757,1,""],[8448,1,""],[8448,0,","],[8357,1,""],[8357,0,","],[8174,1,""],[8174,0,","],[8054,1,""],[8054,0,","],[7674,1,""],[7674,0,","],[7575,1,""],[7575,0,","],[7203,1,""],[7203,0,","],[7111,1,""],[7111,0,","],[6951,1,""],[6951,0,","],[7004,1,""],[7004,0,","],[6822,1,""],[6822,0,","],[6760,1,""],[6760,0,","],[6791,1,""],[6791,0,","],[6646,1,""],[6646,0,","],[6592,1,""],[6592,0,","],[6462,1,""],[6462,0,","],[6400,1,""],[6400,0,","],[6431,1,""],[6431,0,","],[6288,1,""],[6288,0,","],[6254,1,""],[6254,0,","],[6141,1,""],[6141,0,","],[6080,1,""],[6080,0,", "],[6111,1,""],[6111,0,","],[5785,1,""],[5785,0,","],[5703,1,""],[5703,0,","],[5364,1,""],[5364,0,","],[5188,1,""],[5188,0,","],[5026,1,""],[5026,0,","],[4802,1,""],[4802,0,","],[4596,1,""],[4596,0,","],[4410,1,""],[4410,0,","],[4470,1,""],[4470,0,","],[8603,0,"\n\n"],[8603,2,""],[1079,0,"\n%\n% Look at KC's Quelea (also in DEBull March)"],[1125,0," issue"],[1166,0,"\n\\subsection{Lamport timestamps}\n"],[1165,0,"\n\nWe go about defining the semantics for collaboratively editable data structures as follw0"],[1254,2,""],[1254,0,"ows. Firstly, we define a simple command language that is executed locally on one o"],[1329,8,""],[1329,0,"at any of the peers, and which allows the local state of that peer's copy of the document to be queried and modified. Performing queries "],[1458,8,""],[1458,0,"read-only queries has no side-effects, but per"],[1501,3,""],[1501,0,"modifying the document has the effect of producing \\emph{operations} describing the mutation. Those operations are applied to the local copy of the document "],[1657,1,""],[1657,0,", and also enqueued for broadcasting to other peers. \n\n\\begin{figure}\n\\end{figure}"],[1726,0,"\n\\caption{Syntax of command language for locally "],[1767,8,""],[1767,0,"querying and modifying a document}\\label{fig:local-syntax}"],[1726,0,"\n\\begin{tabular}\n\\end{tabular}"],[1742,0,"\nCMD & ::= & l"],[1755,1,""],[1755,0,"\\ma"],[1756,2,""],[1756,0,"textsf{let} $x$ = EXPR & $x \\in \\mathrm{VAR}$"],[1742,0,"{rcll}"],[1807,0," \\\\\n& | & EXPR = $v$ & $v \\in VAL"],[1837,0,"\\mathrm{"],[1848,0,"}$ \\\\"],[1813,0,"|"],[1813,1,""],[1813,0,"\\"],[1813,1,""],[1813,0,"$"],[1815,0,"$"],[1855,0,"\n^"],[1856,1,""],[1856,0,"& $|$ & CMD; CMD \\\\\nEXPR & ::= & \\textsf{doc} \\\\\n& $|$ EXPR.\\mathsf{get}("],[1917,4,""],[1917,0,"text"],[1929,0,"\\textit{key}) & \\\\"],[1945,2,""],[1945,0,"$\\mathit{key} \\in \\mathrm "],[1970,1,""],[1970,0,"{VAL}$ \\\\\n& $|$ EXPR.\\textsf{next} \\\\\n& $|$ EXPR.\\"],[2019,1,""],[2019,0,"\\textsf{values}\n"],[2034,1,""],[1855,0,"\n^ "],[1856,2,""],[1856,0,"& $|$ & \\mathsf{yield} \\\\"],[1865,4,""],[1865,0,"text"],[1937,0,"& "],[2014,0,"& "],[2044,0,"& "],[1901,0,"\\vspace{10pt}"],[1910,3,""],[1910,0,"em"],[1913,0,"\\\\"],[1899,2,""],[2019,0,"\n& $|$ & EXPR.\\textsf{delKey} \\\\"],[2081,0,"\n& $|$ & EXPR.\\textsf{del"],[2041,3,""],[2041,0,"rm"],[2102,3,""],[2102,0,"rmElem} \\\\"],[2141,0," \\\\\n& $|$ & $x$ & $x \\in \\mathrm{VAR}$ \\vspace{1em}\\\\\nVAR & ::= & ${x_1, x_2, \\dots}$\nVAL & ::= & \\mathbb"],[2239,0,"$"],[2247,0,"{N} \\cup \\mathrm{String}$"],[2226,0," \\\\"],[116,0,"\n\\usepackage{amssymb} % mathbb"],[2257,0,"\\vspace{0.5em}"],[2218,1,""],[2218,0,"0.5"],[1937,1,""],[1937,0,"0.5"],[2302,0,"\\;"],[2308,0,"\\;"],[1885,0,"\n& $|$ & EXPR.\\ma"],[1900,2,""],[1900,0,"textsf{insertAfter}("],[1913,5,""],[1894,0,"$\\mathrm{"],[1907,0,"}"],[1910,4,""],[1910,0,"math"],[1925,0,"v)$ & $v \\in \\mathrm{VAL}$ \\\\\n& $"],[1957,1,""],[1957,0,"$|$ & \\mathrm"],[1963,0,"%"],[1963,1,""],[1963,0,"$"],[1849,0,"$\\mathrm{"],[1862,0,"}"],[1866,1,""],[1980,0,"{EXPR}.\\mathsf{rmKey"],[1995,5,""],[1995,0,"delete} \\\\"],[2002,0,"$"],[2171,32,""],[2171,0,"\\"],[2202,32,""],[2095,0,"\n& $|$ & $x$ & $x \\in \\mathrm{VAR} $"],[2129,2,""],[2129,0,"$ \\\\"],[2273,52,""],[2270,0,"\\vspace{0.5em}"],[2202,3,""],[2202,0,"String"],[2006,0,"\n& $|$ & $\\mathrm{EXPR}.\\mathsf{incr}(n)$ & $n \\in \\mathbb{N}$ \\\\"],[2415,0," n &"],[2421,0,"n \\ "],[2424,1,""],[2424,0,"in "],[2437,25,""],[2438,0,"\n& |"],[2441,1,""],[2441,0,"$|$ & s"],[2416,0,"$"],[2418,0,"$"],[2449,0,"$"],[2451,0,"$ & $s \\in \\mathrm{String}$"],[2440,0," \\\\"],[2481,0," \\\\\n& $|$ & \\ma"],[2494,2,""],[2494,0,"textsf{\\{\\}} \\\\\n& |"],[2512,1,""],[2512,0,"$|$ & \\textsf{\\[\\]}"],[2526,1,""],[2518,12,""],[2518,0,"$\\mathsf{[]}$"],[2528,0,"\\,"],[2498,2,""],[2498,0,"tt"],[2524,2,""],[2524,0,"tt"],[2494,12,""],[2494,0,"verb|{}|"],[2513,16,""],[2513,0," \nver"],[2514,4,""],[2514,0,"\\verb|[]|"],[2452,0,"\\verb|\"| "],[2464,0," \\verb|\"|"],[2459,0,"str|"],[2462,1,""],[2462,0,"\""],[2465,13,""],[2468,0,"\\mathtt{"],[2477,0,"tr}"],[2669,0,"\n\n\\subsection{Command language}\n\nTR"],[2703,1,""],[2703,0,"he syntax of the command language is given in Figure~\\ref{fig:local-syntax}. A program is assumed to be a linear, possibly infinite, sequence of commands. The language of Figure`\\re"],[2880,4,""],[2880,0,"~\\ref{fig:local-syntax} does not provide loops, condit"],[2921,13,""],[2858,3,""],[2858,0,"For brevity, the"],[2934,0,"the usual const"],[2946,3,""],[2946,0,"ntrol structures such as conditionals, loops, function"],[2991,0," or"],[3003,0,"s, but such facilities can easily be provid"],[3040,6,""],[3040,0,"implemented by embedding this command language in a general-purpose programming language.\n\nThe command language has two mains k"],[3163,4,""],[3163,0," "],[3163,1,""],[3163,0,"n kinds of construct: an expression EXPR, which queries the state of a document and identifies a position within a document, and a comm"],[3184,4,""],[3184,0," "],[3195,0,"s"],[3213,3,""],[3213,0,"y"],[3249,4,""],[3249,0,"fy"],[3134,50,""],[3145,1,""],[3145,0," construct"],[3160,7,""],[3160,0," is used to"],[3201,0,". An expression starts with either the special token \\textsf{doc}, identifying the root of the JSON document tree, or a variable $x$ that was previously defined in a ]"],[3367,1,""],[3367,0,"\\textsf{let} expres"],[3380,6,""],[3380,0,"command. The expression then continues with a sequence of function "],[3438,9,""],[3438,0,"method calls: $\\mathsf{get}(\\mathit{key}_"],[3478,1,""],[3478,0,")$ selects a key within a map (a JSON object), $"],[3525,1,""],[3525,0,"\\textsf{next} moves to the next element of an ordered list, and \\textsf{values} "],[3605,15,""],[3605,0,"returns the value at the current"],[3654,1,""],[3654,0,"the"],[3666,12,""],[3666,0,"."],[3131,0," "],[3131,0,"We first explain the language informally, before giving its formal semantics."],[3745,0,"\n\n"],[2669,0,"\n\n\\begin{figure}\n\\centering\n\\caption{"],[1756,0,"\n\\centering"],[2717,0,"Example of programmatically constructing a JSON document}\\label{fig:make-doc}\n\\end{figure}"],[2707,0,"\n\\begin{tabular}{l}\n\\end{tabular}"],[2726,0,"\n\\textsf{doc} = \\verb|{}|;\\\\\n\\textsf{doc}"],[2766,0,".get"],[2771,0,"(\\math"],[2773,4,""],[2773,0,"text"],[2772,5,""],[2772,0,"\\verb|\"shopping|"],[2787,1,""],[2787,0,"\"|) = \\verb|[]|;\\\\\n\\textsf{doc.get}(\\verb\""],[2828,1,""],[2828,0,"|\"shopping\"|)."],[2806,0,"\\textsf "],[2813,1,""],[2813,0,"{let} \\textit{shopp"],[2827,5,""],[2827,0,"list} = "],[2870,1,""],[2870,0,";\\\\"],[2871,0," "],[2803,0," "],[2752,0," "],[2876,0,"\n\\textit{list}.\\textsf{insert}(\\verb\\\""],[2913,1,""],[2913,0,"|eggs\\\""],[2918,2,""],[2914,0,"\""],[2919,0,"\"|"],[2912,1,""],[2920,0,"); \\\\\n\\textit{list}.\\textsf{insert}(\\verb|\"milk\"|})"],[2969,2,""],[2969,0,");"],[2985,0,"\nFinal state:\n\n"],[2999,1,""],[2999,0,"\\begin{verbatim}\n\\end{verbatim}"],[3015,0,"\n{\"shopping\": [\"eggs\","],[2877,0,"\\textsf{let} "],[2898,4,""],[2898,0,"eggs"],[2903,0," = \\textsf{doc.get)("],[2921,2,""],[2921,0,"}(\\verb\""],[2928,1,""],[2928,0,"|\"shopping\"|)"],[2807,69,""],[2916,4,""],[2916,0,"eggs"],[3019,0," \"milk\"]}"],[2997,0,"\ndoc = {};\ndoc.get(\"shopping\"}"],[3026,1,""],[3026,0,") = [];\nlet eggs = doc.get(\"shopping\").insert(\"eggs\");\neggs.insert(\"milk\");\n\n// Final state:"],[2707,273,""],[2735,0,"let list = "],[2765,0,"\nlist"],[2781,0,"f"],[2781,1,""],[2788,19,""],[2788,0,"list"],[1875,0,":"],[2730,0,":"],[2773,0,":"],[2767,0,";"],[4074,0,"A command CMD either sets the value of a local variable (\\m"],[4132,1,""],[4132,0,"textsf{let}), performs network communication (\\textsf{yield}), or modifies the document (\\"],[4221,1,""],[4221,0,":=, \\tex"],[4217,12,""],[4217,0,"nt. A document can be modified by assigning the value of some field (using "],[2833,0,"\nlist.insert(\"cheese\");"],[2888,0,"\"cheese\", "],[4325,0,"the assignment operator :=), by inserting"],[4311,6,""],[4311,0," object"],[4312,6,""],[4312,0,"field"],[4366,0," an element into a list (\\textsf{isnert})"],[4400,1,""],[4401,0,"s"],[4407,0,", by deleting an element from a list or a map (\\textf"],[4459,1,""],[4459,0,"sf{delete}), or by incrementing a counter (\\textsf{incr}). The part "],[4517,10,""],[4517,0,"\n\nThe "],[4517,0," The part of the document being modified is d"],[4521,41,""],[4521,0," preceding expression EXPR identifies the part of the document being modified."],[4601,4,""],[4601,0,"Figure~\\ref{fig:make-doc} shows an example of a sequence of commands constructing a new document representinga "],[4710,2,""],[4710,0," a shopping list. First \\textsf{doc} is ass"],[4750,3,""],[4750,0,"set to \\verb|{}|, the empty map literal. Within that map, the key \\\""],[4816,2,""],[4816,0,"\\verb|\"shopping\"| is set to the empty list \\verb|[]|, and then three items are inserted into the list. The \\textsf{insert} command "],[4547,0," acts as a cursor,"],[4573,3,""],[4573,0,"ying"],[4966,0,"adds an "],[4972,2,""],[4972,0," new list a"],[4982,1,""],[4982,0,"element \\emph{after} the current cursor position, and returns the cursor position of the new "],[5074,1,""],[5074,0,"ly inserted element. Thus, \\"],[5101,1,""],[5101,0,"milk is inserted after eggs, but cheese ins"],[5142,2,""],[5142,0,"s inserted at "],[5094,0," If the cursor refers to the list as a whole, insertion happens at the head of the list."],[2767,0,".next"],[2773,12,""],[4803,16,""],[4803,0,"The second line navigates to"],[4858,0,"(which is implicitly created if it does not exist), and calls \\textsf{next}, which moves to the "],[4941,13,""],[4941,0,"treats the value at that key as a list and selects the head of the list."],[5013,44,""],[5013,0," Finally,"],[5220,88,""],[5281,0,"the head of the list, because the variable \\verb|list| continues to refer to the head.\n\nA few features of this language deliberately differ from most mainste"],[5437,1,""],[5437,0,"ream programming languages: th"],[5465,2,""],[5465,0,"keys in maps are implicitly created when they are first accessed; lists can only n"],[5546,1,""],[5546,0,"be navigated by iteration (\\textsf{next}) but not by index; and the language has literals for empty maps and lists, but not for maps "],[5678,1,""],[5678,0," and lists c"],[5660,30,""],[5646,0,"b"],[5646,1,""],[5660,0,", but not for non-empty collections. As we shall see later, these features are helpful for "],[5736,15,""],[5736,0,"re helpful for de"],[5751,2,""],[5751,0,"achieving desirable semantics in the presence of concurrent modifications."],[5639,0," creating"],[5834,0,"\n\n\\subsubsection{Operational semantics of command language}"],[2768,4,""],[2768,0,"iter"],[2290,0,"\n& $|$ & EXPR.\\textsf{iter} \\\\"],[3986,0,"\\textsf{iter} starts iterating over an ordered list, "],[5011,4,""],[5011,0,"iter"],[5977,0,"\n\n"],[5978,0,"\\begin{figure*}\n\\end{figure*}"],[5993,0,"\n\\centering\n\\caption{Rules for evaluating an expression to obtain a cursor}\\label{fig:c"],[6079,1,""],[6079,0,"expr-rules}"],[6004,0,"\n\\AxiomC{$\\a"],[6015,1,""],[6015,0,"mathit{cmd}_1 \\mathbin{:} \\mathrm{CMD}$}\n\\AxiomC{$A_p,\\, \\mathit{cmd}_1"],[6072,0,"<"],[6072,1,""],[6072,0,"\\langle"],[6093,0," \\mathbin{;} \\mathit"],[6079,0," "],[6114,0,"{cmd}_2 \\mathbin{;} \\dots \\rangle"],[6057,6,""],[6057,0,"BinaryInfC"],[6055,0,"\n\\LeftLabel{\\textsc{Exec}}"],[6055,0,"\n\\E"],[6057,1,""],[6057,0,"AxiomC{$A_p,\\, \\mathit{cmd}_1 \\evalto A_p'$}"],[6223,0,"\n    \\evalto A_p', "],[6241,1,""],[6241,0,"\\, \\langle \\mathit{cmd}_2 \\mathbin{;} \\dots \\rangle$}\n\\DisplayProof\\hfill\n%\n\\AxiomC{}\n\\LeftLabel{\\textsc{Doc}}\n\\UnaryInfC{$A_p,\\, \\mathsf{doc} \\evalto \\mathsf{cursor}(\\langle\\rangle, \\mathsf{doc})$}\nDi"],[6440,2,""],[6440,0,"\\DisplayProof\\proofSkipAmount\n\n\\AxiomC{$\\"],[6480,1,""],[6480,0,"A_p,\\, \\mathit{expr} \\evalto \\mathit{cur}$}\n\\LeftLabel{\\textsc{Let}}\n\\UnaryInfC{$A_p,\\, \\mathsf{let} x = \\mathit{expr} \\evalto A_p[\\,x \\mapsto "],[6615,0,"\\,"],[6624,1,""],[6624,0,"\\, \\mathit{cur}\\,]$}\n\\DisplayProof\\hfill\n%\n\\AxiomC{$x \\in \\mathrm{dom}(A_p)$}\n\\AxiomC{$%"],[6703,9,""],[6703,0,"LeftLabel{|te"],[6713,3,""],[6713,0,"\\textsc{Var}}\n\\UnaryInfC{$A_p,\\, x \\evalto A_p(x)$}\n\\DISPLAYPROOF"],[6767,11,""],[6767,0,"isplayProof\\h"],[6779,1,""],[6779,0,"proofSkipAMount"],[6789,5,""],[6789,0,"mount"],[6310,4,""],[6310,0,"space{6em}"],[6666,4,""],[6666,0,"space{6em}"],[6477,0,"\\proofSkipAmount"],[6602,0,"\\;"],[6429,0,"\\,"],[6316,1,""],[6316,0,"4"],[6692,1,""],[6692,0,"3"],[6826,0,"\n\n\\begin{r"],[6835,1,""],[6835,0,"prooftree}\n\\end{prooftree}"],[6828,33,""],[6479,16,""],[6812,0,"\\AxiomC{$A_p,\\, \\mathit{expr}.\\mathsf{get}(\\mathit{key}) \\evalto"],[6820,0,"\n\\UnaryInfC{"],[6820,0,"$A_p,\\, \\mathit{expr} \\evalto \\mathit{"],[6855,3,""],[6855,0,"sf{cursor}(\\langle k_1, \\dots, \\"],[6886,1,""],[6886,0,"k_{n-1} \\rangle, "],[6902,1,""],[6902,0,"\\, k_n)$}\n\\LeftLabel{\\textsc{Get}}"],[7004,0,"\n    \\mathsf{cursor}(\\langle k_1, \\dots, k_{n-1}, \\mathsf{mapT}(k_n) \\rangle, \\mathit{key})$}\n\\DisplayProof\\hspace{4em}\n%\n\\AxiomC{$A_p,\\, \\mathit{expr} \\evalto \\mathsf{cursor} "],[7179,1,""],[7179,0,"(\\langle k_1, \\dots, \\"],[7200,1,""],[7200,0,"k_{n-1} \\rangle,\\, k_n)$%}"],[7224,2,""],[7224,0,"}\n\\LeftLabel{\\textsc{Iter}}\n\\UnaryInfC{$A_p,\\, \\mathit{expr}.\\mathsf{iter} \\evalto "],[7306,1,""],[7306,0,"\n    \\mathsf{cursor}(\\langle k_1, \\dots, k_{n-1}, \\mathsf{listT}(k_n) \\rangle,\\,"],[7081,0,"\\,"],[7388,0," \\mathsf{head})$}\n\\DisplayProof\\proofSkipAmount"],[7121,1,""],[7121,0,"0"],[6811,0,"\n\\begin{prooftree}"],[7119,26,""],[7119,0,"end{prooftree}\n\n\\begin{P"],[7142,1,""],[7142,0,"prooftree}"],[7432,28,""],[7432,0,"end{prooftree}"],[5995,9,""],[5995,0,"begin{center}"],[6481,0,"\n\\end{center}"],[6495,0,"\n\\begin{center}"],[6842,0,"\n\\end{center}"],[7491,0,"\n\n\\begin{prooftree}\n\\end{[ropof"],[7516,6,""],[7516,0,"prooftree}"],[7510,0,"\n\\AxiomC{$A_p,\\, \\mathit{expr} \\evalto \\mathit{cur}$}\n\\AxiomC{$A_p,\\, \\mathit{cur}.\\mathsf{next} \\evalto \\mathit{cur}'$}\n\\LeftLabel{$\\ma"],[7644,2,""],[7644,0,"tes"],[7646,1,""],[7646,0,"xtsc{Next}_1$}\nA"],[7661,1,""],[7661,0,"\\Binarey"],[7667,2,""],[7667,0,"yInfC{$A_p,\\, \\mathit{expr}.\\mathsf{n ex"],[7704,3,""],[7704,0,"ext} \\evalto \\mathit{cur}'$}"],[7748,0,"\n\n\\begin{prooftree}\n\\endP"],[7772,1,""],[7772,0,"{prooftree}"],[7767,0,"\nAxiomC"],[7768,0,"\\"],[7775,0,"{$\\mathsf{next}(k) \\in \\mathrm{dom}(\\mathit{ctx})$}\n\\AxiomC{$\\mathit{ctx}(\\mathsf{next}(k)) = k'$}\n\\LeftLabel{$\\textsc{Next}_2$}\n\\BinaryInfC{$\\mathit{ctx},\\, \\mathsf{cursor}(\\langle\\rangle,\\, k).\\mathsf{next} \\evalto "],[7991,1,""],[7991,0,"\n    \\mathsf{cursor}(\\langle\\rangle,\\, k')$}"],[8051,0,"\n\n\\begin{prooftree}\n\\end{prooftree}"],[8070,0,"\n\\AxiomC{$k_1 \\in \\mathrm{dom}(\\mathit{ctx})$}\n\\AxiomC{$\\mathit{ctx}(k_1),\\, \\mathsf{}"],[8155,0,"cursor"],[8162,0,"(\\langle k_2, \\dots, k_{n-1} \\rangle,\\, k_n).\\mathsf{next} \\eva"],[8220,5,""],[8220,0,"\n    'e"],[8225,2,""],[8225,0,"\\evalto \\mathsf{cursor}(\\langle k_2, \\dots, k_{n-1} \\rangle,\\, k_n')$}\n\\LeftLabel{$\\textsc{Next}_3$}\n\\BinaryInfC{%$"],[8338,2,""],[8338,0,"%"],[8338,1,""],[8338,0,"$\\mathit{ctx},\\, \\mathsf{cursor}(\\langle k_1, k_2, \\dots, k{"],[8397,1,""],[8397,0,"_{n-1} \\rangle,\\, k_n)\\."],[8419,2,""],[8419,0,".\\mathsf{next}\n    \\evalto \\mathsf{cursor}(\\langle k_1, k_2, \\dots, k_{n-1} \\rangle,\\, k_n')$}"],[7500,9,""],[7500,0,"center"],[7730,0,"%"],[7747,0,"%"],[7749,0,"%"],[8041,10,""],[8041,0,"center}"],[8035,0,"\n\\DisplayProof\\proofSkipAmount"],[7729,0,"\n\\DisplayProof\\quad"],[7744,4,""],[7744,0,"hspace{2em}"],[7751,1,""],[7751,0,"1"],[7745,10,""],[7745,0,"fill"],[7749,17,""],[7751,19,""],[5977,0,"\n\\begin{figure}\n\\end{figure}\n"],[5992,0,"\n\\centering\n\\begin{tabular}{ll}\n\\end{tabular}\n\\caption{Internal representation of the example of Figure~\\ref{fig:make-doc}.}\\label{fig:state-example}"],[6023,0,"\n"],[6003,0,"\n"],[6003,1,""],[6003,0," \\["],[6014,7,""],[6014,0,"array"],[6031,7,""],[6031,0,"array"],[6037,0," \\]"],[6025,0,"A_p = {\\; & \\mathsf{do"],[6045,2,""],[6045,0,"mapT}(\\mathsf{doc}) \\mapsto {"],[6031,0,"\\"],[6074,0,"\\"],[6140,2,""],[6140,0,"document in"],[6149,2,""],[6149,0,"from"],[6076,0," \\mathsf{listT}(\\verb\""],[6097,1,""],[6097,0,"|\"shopping\"|) \\mapsto \\{\\\\"],[6121,0," "],[6076,0,"\\;"],[6006,18,""],[6109,11,""],[6109,0,"\\mathsf{next}(\\mathit{id}-"],[6134,1,""],[6134,0,"_3) \\mapsto "],[6123,0,"\\mathsf{head}) \\mapsto "],[6158,11,""],[6158,0,"3 \\\\\n\\mathsf{next}(\\mathit{id}_23"],[6189,2,""],[6189,0,"3) \\mapsto \\mathit{id_1} \\\\\n\\mathsf{next}(m"],[6231,1,""],[6231,0,"\\mathit{id_1}"],[6243,1,""],[6241,0,"}"],[6244,0,") \\mapsto \\mna"],[6256,2,""],[6256,0,"athit{id_2} \\\\\n\\mathsf{next}(\\mathit{id}_2) \\mapsto \\mathsf{tail}"],[6018,2,""],[6006,0," \\begin{alignat*}{2}"],[6066,0,"& "],[6129,0,"& "],[6185,0,"& "],[6241,0,"& "],[6297,0,"& "],[6349,0," \\end{alignat*}"],[6349,1,""],[6349,0,"\n"],[6364,3,""],[6004,3,""],[6030,0,"& "],[6128,0,"&"],[6185,0,"&"],[6242,0,"&"],[6299,0,"&"],[6367,0," \\]"],[6003,0," \\["],[6030,0," &"],[6035,2,""],[6005,1,""],[6005,0,"begin{equation*}"],[6021,1,""],[6383,4,""],[6383,0,"\\end{equation*}"],[6383,0,"}"],[6083,0,"&"],[6146,0,"&"],[6204,0,"&"],[6262,0,"&"],[6320,0,"&"],[6146,0,"%"],[6205,0,"%"],[6264,0,"%"],[6323,0,"%"],[6041,0,"%"],[6004,17,""],[6377,15,""],[6024,1,""],[6129,1,""],[6187,1,""],[6245,1,""],[6303,1,""],[6081,0,"%"],[6081,0,"\\\\"],[6065,3,""],[6050,0,"&&"],[6064,0,"fffff"],[6064,5,""],[6079,4,""],[6079,0," "],[6096,6,""],[6096,0,"mathsf{``"],[6113,2,""],[6113,0,"''}"],[6096,6,""],[6096,0,"text"],[6184,0,","],[6243,0,","],[6302,0,","],[6163,0,"& "],[6224,0,"& "],[6285,0,"& "],[6346,0,"& "],[6313,1,""],[6252,1,""],[6191,1,""],[6130,1,""],[6050,2,""],[6065,0,"&& "],[6366,0," \\\\\n& \\}\\,"],[6375,1,""],[6375,0,";\\}\\;\\}"],[6036,0," &"],[6067,1,""],[6028,2,""],[6029,0," &"],[6037,2,""],[6050,0,"&"],[6066,2,""],[6093,0,"&"],[6029,0,"\\l;"],[6030,1,""],[6065,0,"fffff"],[6065,5,""],[6081,0,"&"],[6096,1,""],[6191,0,"\n&& \\mathsf{regT}(\\mathit{id}_3) & \\mapsto \\{\\,\\mathsf{op}(\\mathit"],[6255,2,""],[6255,0,"sf{id}: \\mathit{id}_3, \\mathsf{value}: \\text{``cheese''})\\,\\}"],[6233,0,"\n   "],[6320,0," \\\\"],[6081,1,""],[6067,0," &"],[6052,1,""],[6032,0,"&"],[6504,2,""],[6504,0,"&& "],[6504,3,""],[6282,0,"\\,"],[6386,0,"\n&& \\mathsf{regT}(\\mathit{id}_1) & \\mapsto "],[6428,1,""],[6428,0,"\n    \\{\\,\\mathsf{op}(\\mathsf{id}: \\mathit{id}_1,\\, \\mathsf{value}: \\text{``eggs''}),\\,\\} \\\\"],[6579,0,"\n&& \\mathsf{regT}(\\mathit{id_"],[6607,1,""],[6607,0,"}_2) & \\mapsto '"],[6621,2,""],[6621,0,"\n    \\{\\,\\mathsf{op}(\\mathsf{id}: \\mna"],[6657,2,""],[6657,0,"athit{id}_2,\\, \\mathsf{value}: \\text{``milk''})"],[6511,1,""],[6703,0,"\\,\\} \\\\"],[6707,0,","],[6515,0,","],[6323,0,","],[9590,0,"\n\nThe state of peer $p$ is described with $A_p$, a finite partial function."],[9627,4,""],[9627,0,"by"],[9663,0," E"],[9664,1,""],[9664,0,"The seme"],[9671,1,""],[9671,0,"antics of the command language are defined by rules that inspect and modify this local state $A-P"],[9765,3,""],[9765,0,"A_p$, and which are indepent"],[9792,1,""],[9792,0,"dent of the state of "],[9810,3,""],[9810,0,"$A_{p'}$ of any other peer $p'$. The only communication pe"],[9866,2,""],[9866,0,"between peers occurs in the evaluation of the \\textsf{yield} command, which we discuss later. For now "],[9967,1,""],[9967,0,", we concentrate on the execution of commands at a single peer $p$.\n\nAn illustrative example of the peer state $A_p$ is given in Figure~\\ref{fig:state-example}, which corresponds to the shopping list example of Figure~\\ref{fig:make-doc}. In Figure~\\ref{s"],[10220,1,""],[10220,0,"fig:state-example}, $A_p$ is a partial function whose domain is the single atom $\\"],[10300,2,""],[10300,0,"\\m"],[10301,1,""],[10301,0,"textsf{mapT(doc)}, which denotes that the document \\m"],[10353,1,""],[10353,0,"textsf{doc} is of"],[10368,2,""],[10368,0,"of a map type"],[10371,10,""],[10371,0,"type map. \\textsf{mapT(doc} "],[10397,2,""],[10397,0,")} maps to a "],[10409,1,""],[10409,0,"nother partial function containing the key-value pairs of the map; in t"],[10476,4,""],[10476,0,"here, the only entry is the key ``shopping'' of type \\textsf{listT}. The list is represented in a manner resembling a linked list, with each list element assigned a unique identifier ($\\mathit{id}_1, \\mathit{id}_2, \\mathit{3"],[10699,1,""],[10699,0,"id}_3$) "],[10706,1,""],[10706,0,", and special \\textsf{head} and \\textsf{tail} atoms denoting the beginning and end of the list.\n\nThe rules for evaluating EXPR expressions in the command language"],[10803,0,"Figure~\\ref{r"],[10815,1,""],[10815,0,"fig:expr-rules} gives "],[10837,1,""],[10837,0,"t"],[10902,0,", which are applied in the context of the local peer state $A_p$."],[10914,7,""],[10914,0,"evaluated"],[10969,0," The \\textsc{Exec} rule defines that commands are executed sequentially. The \\textsc{Let} rule allows the program to define a local variable, which is added to the local state, and the corresponding \\textsc{Var} rule allows the program to retrieve the value of a previously defined variable.\n\nThe other"],[11266,5,""],[11266,0,"remaining rules in f"],[11285,1,""],[11285,0,"Figure~\\ref{fig:expr-rules} operator"],[11319,2,""],[11319,0,"e "],[11313,8,""],[11313,0,"evaluate to a \\emph{cursor} atom, "],[11265,10,""],[11281,0,"f"],[11281,1,""],[11302,0," show how an expression is"],[11337,0,"d"],[11362,2,""],[11362,0,". "],[11362,2,""],[11362,0,", which is "],[11362,11,""],[11362,0,". A cursor identifies a "],[11373,0,"unambiguously "],[11400,0,"particular position in a JSON document by describing a path from the root of the document tree to some branch or leaf node. S"],[11524,1,""],[11524,0,"A cursor consists only of immutable keys and identifiers, so it can be sent over the network to another peer, where it can be used to locate the same position in the document.\n\nFor example, $\\mathsf{cursor}(\\langle \\mathsf{mapT}(\\mathsf{doc}), \\mathsf{listT}(\\text{``shopping''}) \\rangle,\\, \\mathit{id}_1)$ is a cursor representing the list element \\verb|\"eggs\"| in Figure~\\ref{fig:make-doc}. The cur"],[11917,7,""],[11917,0,"It can be interpreted as a path, read from left to right: "],[11948,0," through the structure in Figure~\\ref{fig:state-example}"],[12031,0,"starting from the \\ma"],[12050,2,""],[12050,0,"textsf{doc} map at the root, it traverses through the map key ``shopping'' of type list"],[12108,3,""],[12108,0,"entry"],[12135,0,"\\mathsf{"],[12147,0,"T}, and ends with the list element with identifier $\\mathit{id}_1$."],[12136,4,""],[12136,0,"text"],[11707,7,""],[11707,0,"ampke"],[11709,3,""],[11709,0,"ple, "],[11713,1,""],[11713,0,"\n$"],[11831,0,"$\n"],[11833,1,""],[10800,0,", respectively"],[12171,4,""],[12171,0,"finishes"],[12234,0,"\n\nIn general, a cursor contains"],[12260,5,""],[12260,0,"sists of "],[12248,21,""],[12248,0,"$\\mathsf{cursor}(\\langle k_1, \\dots, \\k"],[12285,2,""],[12285,0,"k_{n-1} \\rangle,\\, k_n)$ consists of a vector of keys $\\langle k_1, \\dots"],[12323,0," (possibly empty)"],[12375,0,", k_{n-1} \\rangle$, and a final key $k_n$ (which is always present). $k_n$ can be thought of as the final element of the vector, with the distinction that is"],[12531,1,""],[12531,0,"t is not tagged with a datatype, whereas the elements of the vector have a datatype ann"],[12615,3,""],[12615,0,"atom such as $\\"],[12628,2,""],[12628,0,"\\textsf{mapT} or \\textsf{listT}.\n\nThe \\mat"],[12667,3,""],[12667,0,"textsc{Doc} rule in Figure~\\ref{fig:expr-rules} defines the simplest cursor, referencing the root of the document using the special atom \\ma"],[12805,2,""],[12805,0,"textsf{doc}. If the root is a map (as in the example of "],[12818,43,""],[12818,0,"The \\textsc{Get} rule navigates a cursor "],[12742,0," $\\mathsf{cursor}(\\langle\\rangle,\\, \\mathsf{doc})$"],[12909,0,"to a particular key within a map, so the key ``wh"],[12956,2,""],[12956,0,"shopping'' in the root document is represented "],[12938,65,""],[12938,0,"map. For example, the expression $\\"],[12971,2,""],[12971,0,"\\verb|doc.get(\"shopping\")| evaluates to the cursor $"],[13011,12,""],[13011,0,"$\\mathsf{cursor}(\\langle \\mathsf{mapT}(\\mathsf{doc}) \\rangle,\\, \\text{``shopping''})$ by applying the \\textsc{Doc} and \\textsc{Get} rules.\n\nThe \\textsc{Iter} rule shu"],[13176,1,""],[13176,0,"ifts the cursor into a list val"],[13203,4,""],[13203,0," and positions the "],[13218,4,""],[13218,0,"it at the \\ma"],[13229,2,""],[13229,0,"textsf{head} of the list. This rule applies even if $"],[13281,1,""],[13281,0,"the list is empty or nonexistent in $A_p$. The three rules $\\textsc{Next}_1$, $\\textsc{Next}_2$ and $\\textsc{Next}$ handle iteration through a linked list by setting the final key in the cursor to the "],[13355,0,"{"],[13357,0,",2,3}"],[13362,39,""],[13449,0,"identifier of the next list element. The \\textsc{Next} rules apply only if the list exists in $A_p$, and the \\textsc{Next}+_3"],[13571,1,""],[13558,0,"$"],[13574,0,"$ recursively descends the local state according to the vector of keys in the cursor."],[6684,2,""],[6491,2,""],[6296,2,""],[9484,0,"\n\n\\begin{prooftree}\n\\end{prooftree}"],[9503,0,"\n\\AxiomC{$A_p,\\, \\mathit{expr} \\evalto \\mathit{val}$}\n\\AxiomC{$A_p,\\, \\mathit{"],[9550,3,""],[9550,0,"cur"],[9581,0,"cur}.\\mathsf{values} \\evalto \\mathit{c"],[9618,1,""],[9618,0,"val}$}\n\\LeftLabel{$\\textsc{Val}_1$}\n\\BinaryInfC{$A_p,\\, \\mathit{expr}.\\mathsf{values} \\evalto \\mathit{val}$}"],[9742,0,"\n\n\\begin{prooftree}\n\\AxiomC{$\\mathsf{regT}(k) \\in \\mathrm{dom}(\\mathit{ctx})$}\n\\AxiomC{$\\mathit{val} = \\{\\, \\mathit{op}.\\mathsf{val} \\mid \\mathit{op} \\in \\mathit{ctx}(\\mathsf{regT}(k)) \\,\\}$}\n\\LeftLabel{$\\textsc{Val}_2$}\n'"],[9963,1,""],[9963,0,"\\BinaryInfC{$A_p,\\, "],[9976,7,""],[9976,0,"\\mathit{ctx},\\, \\mathsf{cursor}(\\langle\\rangle,\\, k).\\mathsf{values} \\evalto \\mathit{val}$}\n\\end{prooftree}\n\n\\begin{prooftree}\n\\end{prooftree}"],[10102,0,"\n\\AxiomC{$k_1 \\in \\mathrm{dom}(\\mathit{ctx})$}\n\\AxiomC{$\\mathit{ctx}(k_1}"],[10174,1,""],[10174,0,"),\\, \\mathsf{cursor("],[10193,0,"}"],[10195,0,"\\langle k_2, \\dots, k{"],[10216,1,""],[10216,0,"_{n-1} \\rangle,\\, k_n).\\mathsf{values}\n    \\evalto \\mathit{val}$}\n\\LeftLabel{$\\textsc{Val}_3$}\n\\BinaryInfC{$\\mathit{ctx},\\, \\mathsf{cursor}(\\langle k_1, k_2, \\dots, k_{n-1} \\rangle,\\, k_n).\\mathsf{values}\n    \\evalto \\mathit{val}$}"],[14122,0," Note that the "],[14133,4,""],[14133,0,"the expression \\verb\""],[14153,1,""],[14153,0,"|doc.get| implicitly asserts that \\mathsf{doc} is of type \\map"],[14212,3,""],[14188,4,""],[14188,0,"text"],[14212,0,"textsf{mapT}, and this assertion is encoded in the cursor."],[14780,0,"\n\nFinally, the $\\textsc{Val}_{1,2,3}$ rules d"],[14824,1,""],[14824,0,"allow a program to read the value "],[14852,6,""],[14852,0,"contents of the document at a particular cursor position. The leaves of the document tree are always \\emph{registers} exp"],[14969,0,","],[14974,0,"press"],[14974,1,""],[14978,0,"ed using the $\\"],[14991,2,""],[14991,0,"\\textsf{regT} type annotation in the local state. A regu"],[15046,1,""],[15046,0,"ister may have mu"],[15042,21,""],[15042,0,"lthough a singl"],[15056,1,""],[15056,0,"le peer can only a"],[15052,7,""],[15067,0,"ssign a single value to a register, a register can nevertheless contain multiple values if multil"],[15163,1,""],[15163,0,"ple peers concurrently assign values to it, an issue we will expo"],[15227,1,""],[15227,0,"l;o"],[15228,2,""],[15228,0,"ore in greater depth later."],[14908,0,", using a similar recursive rule structure as the \\textsc{Next} rules"],[15324,0,"\n\n\\subsubsection{Operational "],[15341,12,""],[15341,0,"Semantics of local mutations}"],[5959,16,""],[5959,0,"expression evaluation"],[5934,13,""],[5934,0,"S"],[2937,0,"\n\neggs.values // evaluates to {\"eggs\"}\neggs.next.values // evaluates to {\"milk}"],[3015,1,""],[3015,0,"\"}"],[6883,0,"fffff"],[6883,5,""],[6905,8,""],[6914,0," resulting"],[6929,0," the execution of the commands in"],[6316,25,""],[6329,3,""],[6329,0," \\mapsto"],[6338,14,""],[6308,3,""],[6307,1,""],[6462,4,""],[6467,25,""],[6480,17,""],[6480,0," \\mapsto"],[6615,4,""],[6620,25,""],[6633,17,""],[6633,0," \\mapsto"],[6770,45,""],[6770,0,"state $A_p$ of peer $p$ after"],[6736,0," \\\\\n\\mathsf{list}  "],[6754,1,""],[6740,0,"&& "],[6757,0,"& \\mapsto \\mathsf{cursor}(\\langle \\mathsf{mapT}(\\mathsf{doc}), \\mathsf{listT}(\\text{``shopping''})\\rangle,\\,"],[6819,0,"\n   "],[6869,0," \\mathsf{head}), \\\\\n&& \\mathsf{eggs} & \\mapsto \\mathsf{cursor}(\\langle \\mathsf{mapT}(\\mathsf{doc}),\n    \\mathsf{listT}(\\text{``shopping''})\\rangle,\\, \\mathit{id}_1) \\\\\n\\}"],[6726,4,""],[6732,0,","],[6105,1,""],[6097,0,"& "],[7035,0,"& "],[6094,1,""],[6094,0,"3"],[6157,0,"&"],[6157,1,""],[6172,0,"&&"],[6209,0,"&&"],[6271,0,"&&"],[6368,0,"&&"],[6430,0,"&&"],[6525,0,"&&"],[6587,0,"&&"],[6682,0,"&&"],[6743,0,"&& "],[6776,0,"\\multicolumn{2}{l}{"],[6921,0,"}"],[6970,0,"bbbbbbbb"],[6970,8,""],[6945,0,"\\multicolumn{2}{l}{"],[7089,0,"}"],[7089,1,""],[6951,13,""],[6951,0,"span{2} "],[6782,13,""],[6782,0,"span{2} "],[6916,1,""],[6938,14,""],[6776,14,""],[6784,0,"\\multicolumn{"],[6784,13,""],[6776,0,"\\multicolumn{2}{c}{"],[6855,0,"%"],[6922,0,"}"],[6922,1,""],[6777,18,""],[6777,0,"hdotsfor{1} "],[7072,0," \\multispan{3}"],[6776,13,""],[6776,0,"\\multialign{3}{[]["],[6791,3,""],[6791,0,"[]["],[6791,3,""],[6791,0,"{}{="],[6793,2,""],[6793,0,"="],[6921,0,"}"],[6782,5,""],[6782,0,"span"],[6789,4,""],[6789,0,"\\mbox{$"],[6923,0,"$"],[6923,1,""],[6789,5,""],[6782,4,""],[6782,0,"align"],[6791,1,""],[6791,0,"{}="],[6050,0,"\n\\newcommand{\\multialign}[2]{%\n  \\multispan{#1}\\mbox{$\\displaystyle#2$}%\n}"],[7152,14,""],[6867,1,""],[7018,0,"\\multialign{3}{{}"],[7095,0,"%"],[7161,0,"}"],[7033,2,""],[7033,0,"{}"],[7033,2,""],[6117,0,"{}"],[6867,2,""],[6173,2,""],[6831,1,""],[6996,1,""],[7160,2,""],[7160,0,"& "],[6173,0,"& "],[6834,0,"&"],[6999,0,"&"],[6184,0,"&"],[6219,2,""],[6818,0,"&"],[6175,0,"\\multialign{3}{"],[6198,3,""],[6195,2,""],[6290,0,"}"],[6290,0," "],[6173,0,"%"],[6173,1,""],[6257,2,""],[6241,0,"} &&"],[6293,2,""],[6242,4,""],[6242,0,"\n    "],[6294,0,"} "],[6241,1,""],[6187,1,""],[6187,0,"5"],[6174,0," _"],[6175,1,""],[6175,0,"A_p = \\{ \\\\\n"],[6249,1,""],[6249,0,"\n"],[6187,26,""],[6187,0,"&&"],[6225,0," \\"],[6226,1,""],[6226,0,"& "],[6225,3,""],[6218,0,"& \\multialign{34"],[6233,1,""],[6233,0,"}{"],[6242,1,""],[6242,0," "],[6247,4,""],[6175,0,"\\multialign{3}{"],[6198,0,"}"],[6233,2,""],[6234,15,""],[6198,7,""],[6187,1,""],[6187,0,"5"],[6198,0,"\\;"],[6241,0,"\n   "],[10270,50,""],[10270,0,"mathrm{ran}("],[10312,0,")"],[10313,5,""],[10280,0,"ge"],[3242,0," It is not a full prog"],[3262,2,""],[3262,0,"="],[3261,2,""],[3261,0,"rogramming language, but rather an API through which the document state is queried and modified. We assume that the user program issues a"],[3397,1,""],[3397,0,"a (possibly infinite) sequence of commands, "],[3439,2,""],[3377,5,""],[3384,0," accepts user input and"],[3457,0," to the API. We model only the semantics of those commands, and assume that "],[3521,0,"do not "],[3535,4,""],[3535,0,"anything about the program in which the command language is embedded."],[3604,351,""],[1740,0,"\n\n"],[1739,1,""],[1741,0,"\\subsection{Data model}\n\nWe "],[714,0,"A com="],[716,4,""],[716,0,"Conflict-Free Replicated JSON Datatype"],[754,60,""],[1746,3,""],[1746,0,"We "],[1746,3,""],[1746,0,"Our data model for a document is based on JSON. "],[1792,2,""],[1792,0,". It consists of a tree with the following types no"],[1841,2,""],[1841,0,"of node:\n\n\\begin{enumerate}\n\\end{enumerate}"],[1868,0,"\n\\item "],[1858,9,""],[1858,0,"description"],[1883,9,""],[1883,0,"description"],[1876,1,""],[1876,0,"[MAP"],[1878,2,""],[1878,0,"ap.] "],[1880,1,""],[1880,0,":"],[1883,0,"A branch node whose children are not ordered, and where each children is "],[1949,7,""],[1949,0," is labelled with a string \\emph{key}. A key uniquely identifies one of the children.\n\\item[List:}"],[2046,1,""],[2046,0,"] A branch node whose children have an order defined by the application.\n\\item[Register:] A leaf node "],[2034,0," A JSON map is also known as an \\emph{object}."],[2164,0," A JSON list is also known as an \\emph{array}."],[2033,0,", and keys are immutable ("],[2057,2,""],[2033,7,""],[2033,0,". K"],[2053,0,", but values are mutable, and key-value mappings can be added and removed from the map"],[2270,0," The list can be mutated by inserting or deleting list elements."],[2410,0,"containing a primitive value (string, number "],[2454,1,""],[2454,0,", boolean or null). Although primitives are themselves immutable, the value of a register can be mutated by setting "],[2520,13,""],[2557,0,"it to "],[2549,14,""],[2549,0,"assigning a new value to it.\n\\item[Counter:] A leaf node containing an "],[2618,2,""],[2618,0," number. S"],[2627,1,""],[2627,0,"It is similar to a register, but has different semantics under concurrent modification, as described below."],[2752,0,"\n\nThus, in the tree of a JSON document, all the interior branch nodes are either maps or lists, and all the leaf nodes are either registers or counters. Maps and lists may be nested within each other arbitrarily. W"],[2965,1,""],[2965,0,"For simplicity we do not define a schema language or static type-checking rules, but such restrictions could be added easily."],[5410,16,""],[5449,1,""],[5449,0,"n"],[5563,0,"of the register or counter "],[5634,0," (\\mathsf{values} is not defined for map or list nodes.)"],[5637,4,""],[5637,0,"text"],[3067,0," of the document structure"],[5918,10,""],[5918,0,"a register"],[6631,0," If the key does not exist, it is implicitly created and set to the empty list."],[6476,52,""],[7150,0,"fff"],[7149,4,""],[7149,0,"n"],[7174,0,", so there is no need for a command to insert a new key into a map"],[13150,0," contains the local variables defined with \\textsf{let} commands"],[13110,53,""],[13110,0,"For each"],[13133,1,""],[13146,0," a"],[13169,1,""],[13169,0,", $A-p"],[13173,2,""],[13173,0,"_p$ maps the variable name to a \\emph{cursor}, which identifies a position in the document as described below. In addition, $A_p$ maps the"],[13312,42,""],[13342,0," to a nested partial function representing the contents of the document. \\textsf{mapT}"],[13428,7,""],[13484,102,""],[13484,0,"T"],[13492,0," map"],[14734,2,""],[14734,0,"\\[ "],[14851,2,""],[14851,0," \\]"],[14013,7,""],[14013,0,"formalizes the assumption"],[15625,28,""],[15625,0,"are tagged with the datatype of the branch node, either"],[16944,15,""],[16944,0,"a register at"],[17113,4,""],[17113,0,"r is"],[17057,49,""],[17057,0,"A "],[17139,0,", and the \\textsc{Val} rules only apply if the register exists in $A_p$"],[17194,0," identified by the cursor"],[17401,1,""],[17401,0," --"],[18954,1733,""],[17502,0,"sub"],[17455,4,""],[17455,0,"\\"],[17467,28,""],[17467,0,"Generating operations"],[17489,0,"\n\nBefore "],[17491,7,""],[17491,0,"We now turn to the commands for mutating the state of the document."],[17491,18,""],[17491,0,"Before we can define the formal semantics of the"],[17549,3,""],[17549,0,"that"],[17559,3,""],[17559,0,"e"],[17586,0," "],[17586,1,""],[17586,0,", we must "],[17549,5,""],[17491,48,""],[17491,0,"When"],[17539,8,""],[17539,0,"they generate \\emph{operations} that describe the mutation"],[17598,0," In our semantics, commands never directly modify the the "],[17652,4,""],[17652,0,"local peer state $A_p$, but only generate an operation."],[17617,0,"a "],[17626,1,""],[17647,1,""],[17647,0,"ies"],[17696,0,"s"],[17711,0," That operation is that "],[17732,3,""],[17732,0,"en applied to $A_p$ in order to "],[17735,0,"immediately "],[17764,12,""],[17764,0,"so that it takes effect locally, and asynchronously "],[17801,0,"the operation is also "],[17838,0,"broadcast to the other peers. A peer applies "],[17881,2,""],[17881,0,"s operations received from remote nodes when its causal dependencies are satisfied, as detailed below.\n\n"],[17985,2,""],[18020,0,"\n"],[18020,0,"\nEvery operation in our model is given a unique identifier, which is used as part of the local state and of cursors."],[18094,10,""],[18094,0,"in"],[18117,2,""],[18117,0,"in"],[18128,0," For example, in Figure~\\ref{fig:state-example}, $\\mathit{id}_{1,2,3}$ are used to identify list elements and also the values of registers. Those identifiers $\\mathit{id}_{1,2,3,}$ "],[18305,1,""],[18308,0,"are infact the identifiers "],[18314,0," "],[18336,0,"of the operations that inserted the list elements.\n\nIn "],[18388,3,""],[18388,0,"We use Lamport timestamps~\\cite{Lamport:1978jq} to generate th"],[18436,14,""],[18436,0,"as operation identifiers, "],[18388,0," "],[18388,0,"In order to generq"],[18405,1,""],[18405,0,"ate globally unique operation identifiers without synchronization between peers,"],[18462,8,""],[18462,0,"nous coordination"],[18455,0,"requiring "],[18503,1,""],[18504,1,""],[18504,0,"w"],[18550,28,""],[18550,0,"}."],[18922,0," (for example, the hash of its public key)"],[18936,4,""],[18936,0," a cryptographic"],[18552,259,""],[18552,0," "],[18718,1,""],[18718,0,", and"],[18806,123,""],[18806,0,"Since each peer generates a strictly monotonically increasing sequence of counter values $c$, the pair $(c, p)$ is unique."],[19452,2,""],[19452,0,"\\[ "],[19542,2,""],[19542,0," \\]"],[19773,0," This ordering property is important for our definition of the semantics of ordered lists."],[17915,5,""],[17915,0,"peers"],[24283,0,"\n\\ifproofdraft\n"],[24283,0,"\n\n"],[37132,0,"\n\\fi % proofdraft\n"],[422,0,"\n\n"],[423,0,"\\newif\\ifproofdraft\n\\proofdraftfalse"],[718,0,"\n\n\\newcommand{\\multialign}[2]{%\n  \\multispan{#1}\\mbox{$\\displaystyle{}#2$}%\n}"],[7713,76,""],[4295,11,""],[4316,0,"\n"],[4316,0,"let eggs = list.next;"],[6399,5,""],[6420,0," that"],[6435,3,""],[6435,0,"s"],[6924,0,". "],[6924,2,""],[6925,0," or at the head if the cursor is at the head of the list. The variable \\verb\""],[7001,1,""],[7001,0,"|list| refers to the head, so cheese is inserted ahead of eggs, but the variable \\verb|eggs| refers to the list element ``eggs'', so milk is inserted after eggs."],[7162,211,""],[7050,8,""],[7050,0,"before"],[3509,65,""],[2692,157,""],[2833,7,""],[2842,12,""],[3055,0," Other replicated datatypes such as counters or sets "],[3056,0,"Our approach also generalizes to "],[3089,1,""],[3089,0,"o"],[3073,0," easily"],[3147,1,""],[3147,0,", which we do not spell out in detail in the interests of brevity."],[3200,1,""],[5647,11,""],[6051,0,"or "],[6115,46,""],[3883,2,""],[3883,0,"rm"],[3886,1,""],[3886,0,"Number"],[3958,0,"\n& $|$ & \\verb|true| $|$ \\verb|false $|$"],[3994,0,"|"],[3999,0," \\verb|null \\\\"],[4010,0,"|"],[4041,2,""],[4032,5,""],[7277,6,""],[7277,0,"put"],[7290,0,"-value pair"],[19891,432,""],[19891,0,"begin{prooftree}\n\\end{prooftree}"],[19861,0,"\\subsubsection{Operation structure}\n\nAn operation is a typ"],[19917,2,""],[19917,0,"uple of the form\n\\[ \\mathsf{op}(\\mathit{id}: \\mathrm{"],[19962,8,""],[19962,0,"\\mathbb{N} \\times \\mathrm{PeerID}"],[19949,0,"\n    "],[20000,0,",\n    \\mathit{deps}: \\mathcal{P}( "],[20033,1,""],[20033,0,"\\mathbb{N} \\times \\mathrm{PeerID}),\n    \\mathit{cur}: \\mathsf{cursor}(\\langle k_1, \\dots, k_{n-1} \\rangle,\\, k_n),\n    \\mathit{mut}"],[19933,0,"\n\\begin{alignat*}{2}"],[19954,2,""],[19954,0,"&"],[20184,0,"& )\n\\end{alignat*}\n"],[19968,0," \\\\"],[19972,3,""],[19972,0,"&&"],[20023,3,""],[20023,0,"&&"],[20089,3,""],[20089,0,"&&"],[20167,3,""],[20167,0,"&&"],[19986,0," &"],[20041,0," &"],[20108,0," &"],[20188,0," &: \\mathsf{insert}(v) \\mid \\mathsf{delete} \\ "],[20233,1,""],[20233,0,"mid \\mathsf{assign}(v) \\\\"],[20172,0," \\\\"],[20092,0," \\\\"],[20024,0," \\\\"],[20315,0,"%"],[20334,0,"%"],[20286,0,"\nwhere \\t"],[20293,2,""],[20293,0,"$\\mathit{id}$ is the Lamport timestamp that uniquely identifies the operation, $\\mathit{cur}$ is the cursor describing the position in the document being modified, and $\\mathit{mut}$ is the mutation that should occur "],[20497,13,""],[20497,0,"was requested at the specified position.\n\n$\\mathit{deps}$ is the set of causal dependencies of the operation, given as a set of Lamport timestamps. The semantics below define this ="],[20672,6,""],[20672,0,"$\\mathit{deps}$ to be the set of operation IDs "],[20704,0," all"],[20723,0,"that had been applied to the document at the time when the operation was generated. In a real implementation, this set would become impracticably large, so a compact representation of causal history such "],[20922,5,""],[20922,0,"would be used instead -- for example, version vectors or dotted version vectors (TODO i"],[21008,1,""],[21008,0,"citations). However, in our abstract presentation of the semantics we give the dependencies as a set of operation IDs sinc e"],[21130,2,""],[21130,0,"e."],[21124,8,""],[21124,0,"s."],[21020,7,""],[21020,1,""],[21020,0,"To avoid ambiguity"],[21046,25,""],[21020,0,"However, "],[21029,1,""],[21029,0,"t"],[21055,4,""],[21094,0," simple"],[21123,0,"\n\nThe purpose of the causal dependencies $\\mathit{deps}$ is to impose a partial ordering on operations: an operation can only be applied after all operations that ``happened before'' it have been applied. In particular, this means that the sequence of operations generated at one particular peer will be applied in the same order at every other peer. Operations that are concurrent "],[21504,1,""],[21504,0,", i.e. where there is no causal dependency, can be applied in any order.\n\n\\subsubsection{Semantics of generating operations}"],[22993,0,"\n\nThe formal evaluation rules for commands are given in Figure~\\ref{fig:send-recv}."],[20671,0,"s"],[21658,1,""],[21676,1,""],[21675,0,"\n|"],[21676,1,""],[21676,0,"\\AxiomC{A_p,\\, \\mathit{expr} \\evalto \\mathit{cur}}"],[21725,0,"$"],[21684,0,"$"],[21728,0,"\n\\AxiomC{$\\mathit{val}: \\mathrm{VAL} \\wedge \\mathit \\not= \\verb|[]|$}\n\\BinaryInfC{$"],[21810,1,""],[21810,0,"ok}"],[21794,1,""],[21794,0,"}"],[21787,5,""],[21787,0,"mathtt{"],[21797,0," \\wedge \\"],[21779,0,"{val}"],[21810,1,""],[21801,1,""],[21801,0,"|"],[21792,7,""],[21792,0,"verb|"],[21791,0,"\\mbox{"],[21806,0,"}"],[21793,14,""],[21793,0,"athtt{\\lbrack\\rbrack}"],[21799,14,""],[21799,0,"[]"],[21792,4,""],[21792,0,"text"],[21765,0,"\\,"],[21773,0,"\\,"],[21807,0,"\\,"],[21815,0,"\\, \\mathit{val} \\not= \\textt{\\{\\}}"],[21806,0,"\n   "],[21847,0,"t"],[21850,0,"string"],[21858,0,"string"],[21869,0,"\n\\AxiomC{$A_p,\\, \\mathsf{makeOp}(\\mathit{cur} "],[21914,1,""],[21914,0,", \\mathsf{assign}(\\mathit{val})) \\evalto A_p'$}"],[21963,1,""],[21963,0,"Tr"],[21975,2,""],[21975,0,"$A_p,\\, \\mathit{expr} \\e"],[21997,2,""],[21997,0,"\\text{:"],[21998,6,""],[21998,0,"mathbin(:"],[22005,2,""],[22005,0,"{:=}"],[22006,0,"\\text{"],[22014,0,"}"],[22016,0," \\mathit{val} \\evalto A_p'$"],[21961,0,"\n\\LeftLabel{\\textsc{Assign}}"],[22025,9,""],[22031,0," "],[22034,0," "],[22035,1,""],[22036,0,"\\,"],[22025,0,"\\,"],[22084,0,"\n\n\\begin{prooftree}\n\\end{prooftree}"],[22103,0,"\n\\AxiomC{$A_p,\\, \\mathit{expr} \\evalto \\mathit{cur}$}\n\\AxiomC{$\\mathit{val}: \\mathrm{VAL}$}\n\\AxiomC{$A_p,\\, \\mathsf{makeOp}(\\mathit{cur}, \\mathsf{insert}(\\mathit{val})) \\evalto \\A-"],[22282,1,""],[22282,0,"_p'$}"],[22280,1,""],[22286,0,"\n\\LeftLabel{\\textsc{Insert}}\n\\TrinaryInfC{$A-"],[22330,1,""],[22330,0,"_p,\\, \\mathit{expr}.\\mathsf{insert}(\\mathit{val}) \\evalto A_p'$}"],[22410,0,"\n\n\\begin{prooftree}\n\\AxiomC{$A_p,\\, \\mathit{expr} \\evalto \\mathit{cur}$}\n\\AxiomC{$A_p,\\, \\mathsf{makeOp}(\\mathit{cur}, \\mathsf{delete}) \\evalto A_p'$}\n\\LeftLabel{\\textsc{Delete}}\n\\BinaryInfC{$A_p,\\, \\mathit{expr}.\\mathsf{delete "],[22637,1,""],[22637,0,"} \\evalto A_p'$}\n\\end{prooftree}\n\n\\begin{prooftree}\n\\end{prooftree}"],[22688,0,"\n\\AxiomC{$\\mathit{ctr} = \\mathrm{max}(\\{0\\} \\,\\cup\\, \\{ c_i \\mid (c_i, p_i) \\in A_p(\\mathsf{ops}) \\}#}"],[22788,2,""],[22788,0,"$}\n\\AxiomC{$\\mathit{id} = (\\mathit{ctr}, p)"],[22827,0," + 1"],[22835,0,"$}\n\\AxiomC{$A_p,\\, \\mathit{app"],[22859,6,""],[22859,0,"sf{apply}(\\mathsf{op}(\\mathit{id}, A_p(\\mathsf{ops}), \\mathit{cur}, \\mathit{mut}) \\evalto A_p'$}\n\\LeftLabel{\\textsc{Make-Op}}\n\\TrinaryInfC{$A_p,\\, \\mathsf{makeOp}(\\mathit{cur}, \\mathit{mut}) \\evalto \\A_p'$}"],[23058,1,""],[22899,0,"b"],[22899,1,""],[22889,2,""],[22889,0,"ctr"],[22893,0," + 1, p)"],[22881,0,"("],[22922,0,"\n   "],[22791,47,""],[22953,2,""],[22953,0,"B"],[23278,4,""],[23278,0,":"],[23285,2,""],[23285,0,"rm"],[23288,1,""],[23288,0,"P"],[23292,1,""],[23292,0,"ID"],[22906,0,")"],[23807,1,""],[23845,0,".\\mathsf{id}"],[23845,12,""],[23844,0,".id"],[23762,2,""],[23762,0,"sf"],[23757,0,"A_p'("],[23776,0,") \\,\\cup\\, \\{\\mathit{op}\\}"],[23663,2,""],[23663,0,"Un"],[23532,96,""],[23862,1,""],[23835,16,""],[23889,0,"op."],[23871,0,"\n\\AxiomC{$\\mathit{op.id} \\not\\in "],[23900,1,""],[23903,0,"A_p\\"],[23906,1,""],[23906,0,"(\\mathsf{ops})$}"],[24057,3,""],[24057,0,"Quater"],[24179,0,".id"],[23568,1,""],[24205,0,"\n\n\\begin{prooftree}\n\\AxiomC{}\n\\LeftLabel{\\textsc{Send}}\n\\UnaryInfC{$A_p,\\, \\mathsf{yield} \\evalto\n    A_p[\\,\\mathsf{send} \\,\\mapsto\\, A_p(\\mathsf{send}) \\,\\cup\\, \\"],[24367,1,""],[24367,0,"A_p(\\mathsf{queue})\\,]$}\n\\end{prooftree}\n\n\\begin{prooftree}\n\\AxiomC{$a: "],[24436,3,""],[24436,0,"q: \\mathrm{PeerID}$}\n\\LeftLabel{\\textsc{Recv}}\n\\UnaryInfC{$A_p,\\, \\mathsf{yield} \\evalto\n    A_p[\\,\\mathsf{recv} \\,\\mapsto\\, A_p(\\mathsf{recv}) \\,\\cup\\, A_q(\\mathsf{send})\\,]$}\n\\proof"],[24614,5,""],[24614,0,"end{prooftree}"],[23048,423,""],[24263,14,""],[24225,18,""],[24225,0,"generating"],[24246,0,"and "],[24205,0,"\n\n\\begin{prooftree}\n\\AxiomC{$A_p,\\, \\mathsf{yield} \\evalto A_p'$}\n\\AxiomC{$A_p,\\, \\"],[24283,0,"'"],[24289,0,"mathsf{yield} \\evalto A_p''$}\n\\LeftLabel{\\textsc{Yield}}\n\\BinaryInfC{$A_p,\\, \\mathsf{yield} \\evalto A_p''$}\n\\end{prooftree}"],[24597,0," The \\textsc{Assign}, \\textsc{Insert} and \\textsc{Delete} rules show "],[24661,5,""],[24661,0,"define how these respective commands mutate the document: all three delegate the "],[24738,4,""],[24738,0,"to the \\textsc{Make-Op} rule for generating "],[24767,3,""],[24767,0,"to"],[24777,4,""],[24777,0,"e and apply the operation. \\textsc{Make-Op} encapsulates"],[24821,12,""],[24821,0,"generates a new Lamport timestamp by choosing a counter value that is 1 greater than any existing counter in $A_p(\\mathsf{ops})$ the "],[24949,0,","],[24955,0,"set of all operation IDs that have been applied to the document.\n\n\\textsc{Make-Op} constructs an \\textsf{op} "],[25062,0,"()"],[25066,0,"tuple of the form described above, and delegates to the \\textsc{Apply-Local} rule to process the operation. \\textsc{Apply-Local} does three things: it evaluates the operation to produce a modified local state $A_p'$, it adds the operation to the queue of outb"],[25321,4,""],[25321,0,"generated operations $A_p(\\mathsf{queue})$, and it adds the operation ID to the set of processed operations $A_p(\\mathsf{ops})$.\n\nThe remaining rules in Figure~\\ref{fig:send-recv} "],[25500,1,""],[25500,0,", \\textsc{Apply-Remote}, \\textsc{Send}, \\textsc{Recv} and \\textsc{Yield} define the semantics of the \\textsf{yield} command. These "],[25627,4,""],[25627,0,"is seman"],[25625,10,""],[25625,0,"Since any of these rules can be used to evaluate \\textsf{yield}, the semantics is nondeterministic, which models the asynchronicity of n"],[25760,1,""],[25760,0,"the network between peers: a ,essag"],[25789,1,""],[25789,0,"m"],[25795,0,"e sent by one peer arrives at another peer some "],[25838,5,""],[25838,0,"some "],[25838,5,""],[25838,0,"at some arbitrarily later point in time."],[25877,0,", and there is no ordering guarantee in the network"],[25895,0,"mesage "],[25936,0,"\n\n\\textsc{Send} "],[25938,0,"The "],[25956,0,"rule takes any operations that were placed in th"],[26001,3,""],[26001,0," $A_p(\\mathsf{queue})$ by \\textsc{Apply-Local} and adds them to a send buffer $A_p(\\mathsf{send})$. Correspondingly, the \\textsc{Recv} rule takes operations in the send buffer of peer $q$ and adds them to the receive buffer o"],[26225,1,""],[26225,0,"$A_p(\\textsf{recv})$ of peer $p$. This is the only rule that involves more than one peer, and it models all network communication.\n\nOnce an operation h"],[26375,1,""],[26375,0,"appears in the receive buffer $A_p(\\textsf"],[26231,4,""],[26231,0,"math"],[26411,4,""],[26411,0,"maths"],[26415,1,""],[26417,0,"{recv})$, the rule \\textsc{Apply-Remote} may apply. Under the precondition that the operation has not already been processed"],[26491,0,"s"],[26542,0," and that its causal dependencies hav"],[26576,3,""],[26576,0,"are satisified, \\textsc{Apply-Remote} evaluates the operation in the same s"],[26650,1,""],[26650,0,"way as \\textsc{Apply-Local}, and adds the operation ID to the set of processed operations $A_p(\\mathsf{ops})$.\n\nThe actual document modifications are performed by evaluationg"],[26821,3,""],[26821,0,"ng the operations, which we discuss in the net section."],[26866,0,"x"],[26877,0,"\n\n\\subsection{Applying operations}% T"],[26911,3,""],[26911,0,"\n\n% TODO\n\n\\begin{figure*}\n\\end{figure*}"],[26936,0,"\n\\caption{Rules for evaluationg "],[26963,5,""],[26963,0,"ing operations and modifying document state}\\fig"],[27008,3,""],[27008,0,"label{fig:operation-rules}"],[26936,0,"\n\\begin{prooftree}\n\\end{prooftree}"],[26954,0,"\n\\AxiomC{$K"],[26964,1,""],[26964,0,"k_1 \\in \\mathrm{dom}(\\mathit{ctx})$}\n\\AxiomC{$\\mathit{ctx}(k_1),\\, \\mathsf{op}(\\mathit{id}, \\mathit{deps}, "],[27070,1,""],[27070,0,"\n    \\mathsf{cursor}(\\langle k_2, \\dots, k_{n-1} \\rangle,\\, k_n), \\mathit{mut}) \\evalto \\mathit{state}$}\n\\LeftLabel{\\textsc{Descend}}\n\\BinaryInfC{$$}"],[27217,0,"\\mathit{ctx},\\, \\mathsf{op}(\\mathit{id}, \\mathit{deps},\n    \\mathsf{cursor}(\\langle k_1, k_2, \\dots, k_{n-1} \\rangle,\\, k_n), \\mathit{mut}) \\evalto\n    \\mathit{ctx}[\\, k_1 \\mapsto \\mathit{state} \\,]"],[27389,0,","],[27389,0,"\\"],[27398,0,"\\,"],[27437,0,"\n\n\\begin{prooftree}\n\\end{prooftree}"],[27456,0,"\n\\AxiomC{$k_1 \\notin \\mathrm{dom}(\\mathit{ctx})$}\n\\AxiomC{$k_1 = \\mathsf{mapT}(k_\\mathit{new})$}\n\\Lef"],[27554,3,""],[27554,0,"AxiomC{$\\{\\},\\, \\mathsf{op}{\\mathit{id}, \\mathit{deps},\n    \\mathsf{cursor}(\\langle k_2, \\dots, k_{n-1} \\rangle,\\, k_n), \\mathit{mut}) \\evalto \\mathit{state}$}\n\\LeftLabel{\\textsc{Def-Map}}\n\\TrinaryInfC{$\\mathit{ctx},\\, \\mathi"],[27778,1,""],[27778,0,"sf{op}(\\mathit{id}, \\mathit{deps},\n  \\mathsf"],[27813,0,"  "],[27824,0,"{cursor}(\\langle k_1, k_2, \\dots, k_{n-1} \\rangle,\\, k_n), \\mathit{mut}) \\evalto\n    \\mathit{ctx}[\\, k_1 \\,\\mapsto "],[27938,1,""],[27938,0,"\\, \\mathit{state} \\,]$}"],[27581,1,""],[27581,0,"("],[27977,0,"\n\n\\begin{prooftree}\n\\AxiomC{$k_1 \\notin \\mathrm{dom}(\\mathit{ctx})$}\n\\AxiomC{$k_1 = \\mathsf{listT}(k_\\mathit{new})$}\n\\AxiomC{$\\{ \\ma"],[28105,4,""],[28105,0,"\\mathsf{next}(\\mathsf{head}) \\mapsto \\mathsf{tail}\\}, \\mathsf{op}(\\mathit{id}, \\mathit{deps},\n    \\mathsf{cursor}(\\langle k_2, \\dots, k_{n-1} \\rangle,\\, k_n), \\mathit{mut}) \\evalto \\mathit{state}$}\n\\LeftLabel{\\textsc{Def-List}}\n\\TrinaryInfC{$\\mathit{ctx},\\, \\mathsf{op}(\\mathit{id}, \\mathit{deps},\n    \\mathsf{cursor}(\\langle k_1, \\k_2, \\dots"],[28436,1,""],[28446,0,", k_{n-1} \\rangle,\\, k_n), \\mathit{mut}) \\evalto\n    \\mathsf{ctx}[\\, k_1 \\,\\mapsto "],[28528,1,""],[28528,0,"\\, \\mathit{state} \\,]$}\n\\end{prooftree}"],[28103,0,"\\begin{matrix}\n    "],[28217,0," \\\\"],[28322,0,"\n    \\end{matrix} "],[28737,1289,""],[30023,24,""],[30023,0,"evaluating operations and modifying document state"],[30074,0,"\\label{fig:operation-rules}"],[30101,22,""],[28721,16,""],[28608,111,""],[28608,0,"\n\\begin{prooftree}\n\\end{prooftree}"],[28626,0,"\n\\AxiomC{$\\mathit{val} \\not= \\texttt{[]} \\,\\wedge\\, \\mathit{val} \\not= \\texttt{\\string\\"],[28712,1,""],[28712,0,"{\\string}} "],[28722,1,""],[28722,0,"$}\n\\AxiomC{$\\mathsf{regT}(k) \\in \\mathrm{dom}(\\mathit{ctx})$}\n\\m"],[28785,1,""],[28785,0,"AxiomC{$\\mathit{conc} = { "],[28809,2,""],[28809,0,"\\{ \\mathit{id}_i \\mapsto \\mathit"],[28834,7,""],[28834,0,"v_i \\mid"],[28793,0,"\\begin{matrix}\n    "],[28861,0," (\\mathit{id}_i \\mapsto v_i) \\in \\mathit{ctx}(\\mathsf{regT}(k)) \\\\\n    \\wedge "],[28932,0,"\\,"],[28940,1,""],[28940,0,"\\, \\mathit{id}_i \\notin \\mathit{deps} \\}\n    \\end{matrix} $}\n\\LeftLabel{$\\maths"],[29014,5,""],[29014,0,"tescsc{A"],[29016,2,""],[29016,0,"xt"],[29022,0,"ssign}_1$}\n\\TrinaryInfC{$\\mathit{ctx},\\, \\mathsf{op}(\\mathit{id}, \\mathit["],[29095,1,""],[29095,0,"{DEPS"],[29096,4,""],[29096,0,"deps},\n    \\mathsf{cursor}(\\langle "],[29130,1,""],[29130,0,"\\rangle,\\, k), \\mathsf{assign}(\\mathit{val}) \\evalto\n    \\mathsf{ctx}[\\, \\mathsf{regT}(k) \\,m"],[29222,1,""],[29222,0,"\\mapsto\\, \\mathit{conc}[\\, \\mathit{id} \\,\\mapsto\\, \\mathit{val} \\,]\\,]$}"],[28932,2,""],[28824,0,"urrent"],[28867,0,"\n   "],[29239,0,"\n   "],[29256,0,"urrent"],[29328,0,"\n\n\\begin{prooftree}\n\\end{prooftree}"],[29347,0,"\n\\AxiomC{$\\mathit{val} \\not= \\texttt{[]} \\,\\wedge\\, \\mathit{val} \\not= \\texttt{\\string{\\string}}$}\n\\AxiomC{$\\mathsf{regT}(k) \\notin \\mathrm{dom}(\\mathit{ctx})$}\n\\LeftLabel{$\\textsc{Assign}_2$}\n\\BinaryInfC{$\\mathit{ctx},\\, \\mathsf{op}\\"],[29580,1,""],[29580,0,"(\\mathit{id}, \\mathit{deps},\n    \\mathsf{cursor}(\\langle\\rangle,\\, k), \\mathsf{assign}(\\mathit{val}) \\evalto\n    \\mathsf{ctx}[\\, \\mathsf{regT}(k) \\,\\mapsto\\, \\{\\, \\mathit{id} \\,\\mapsto\\, \\mathit{val} \\,\\}\\,]$}"],[29824,49,""],[29834,3,""],[29834,0,"\\mathit{ctx}"],[29847,0,"\\mathsf{next}("],[29874,0,")"],[29879,33,""],[29892,1,""],[29982,44,""],[29982,0,"\\mathit{ctx},\\, \\mathit{op}(\\mathit{id}, \\mathit{deps},"],[29679,0,")"],[29182,0,")"],[30039,0,"\n    \\mathsf{cursor}(\\langle\\rangle,\\, \\mathit{id}), \\mathsf{assign}(\\mathit{val})) \\evalto \\mathit{ctx}'"],[30176,0,"ert"],[30167,6,""],[30180,6,""],[30180,0,"Tri"],[30193,3,""],[30193,0,"\\mathit{ctx}"],[30217,7,""],[30217,0,"o"],[30233,0," \\mathit{deps},\n    \\mathsf{cursor}(\\langle\\rangle,\\,"],[30300,0,")"],[30303,1,""],[30303,0,"\\mathsf{insert}(\\mathit{val})"],[30346,3,""],[30346,0,"\\mathit{ctx}"],[30362,0,"\\mathsf{next}("],[30389,0,")"],[30403,33,""],[30423,0,"\\mathsf{next}("],[30448,0,")"],[30462,19,""],[30475,1,""],[30005,2,""],[30005,0,"sf"],[30414,1,""],[30496,0,"\n% TODO need to update the next two rules\n"],[30566,3,""],[30566,0,"\\mathit{ctx}("],[30578,1,""],[30579,0,"\\mathsf{next}("],[30606,0,")"],[30611,34,""],[30611,0,"\\"],[30624,1,""],[30675,3,""],[30675,0,"ctx"],[30690,7,""],[30690,0,"o"],[30706,0," \\mathit{deps},\n   "],[30726,0,"\\mathsf{cursor}(\\langle\\rangle,\\, "],[30773,0,")"],[30776,0,"\\mathsf{assign}(\\mathit{"],[30801,0,"al})"],[30815,3,""],[30815,0,"\\mathit{ctx}"],[30860,0,"ert"],[30851,6,""],[30877,3,""],[30877,0,"\\mathit{ctx}"],[30901,7,""],[30901,0,"o"],[30917,0," \\mathit{deps},\n   "],[30937,0,"\\mathsf{cursor}(\\langle\\rangle,\\, "],[30984,0,")"],[30987,0,"\\mathsf{insert}(\\mathit{"],[31012,0,"al}))"],[31017,1,""],[31026,3,""],[31026,0,"\\mathit{ctx}"],[30495,42,""],[31178,5,""],[31178,0,"Lit"],[31180,1,""],[31180,0,"st"],[31056,6,""],[31056,0,"ctx"],[31060,1,""],[31044,4,""],[31056,0,"(k)"],[31056,3,""],[31044,0,"\\mathsf{next}(\\mathit{target}) "],[31074,1,""],[31074,0," \\in "],[31091,36,""],[31093,56,""],[31137,3,""],[31137,0,"\\mathit{ctx}"],[31161,8,""],[31161,0,"op"],[31178,0,"\\mathit{deps},\n    \\mathsf{cursor}(\\langle\\rangle,\\, "],[31247,0,", \\mathsf{listDel})"],[31279,4,""],[31279,0,"\\mathit{ctx}"],[31294,0,"\\mathsf{deleted}("],[31326,0,")"],[31348,6,""],[31348,0,"true"],[31353,21,""],[31125,2,""],[31125,0,"U"],[31079,0,"\\mathrm{dom}("],[31104,0,")"],[31501,0,"TODO known problems:\n\n\\begin{enumerate}\n\\end{enumerate}"],[31540,0,"\n\\item Assignment of empty list and empty array is not defined (need to reset value but preserve its existence)"],[31650,0,"/datatype"],[31540,0,"\n\\item Deleting element from map"],[31692,0,"\n\\item \\textsf{.next} should skip over tombstones"],[31682,1,""],[31682,0," and "],[31655,0,","],[31548,24,""],[31548,0,"istinction between \\textsf{listDel} and \\textsf{mapDel}"],[31728,0," -- also needed for creating nested lists 92"],[31770,2,""],[31770,0,"(2D arrays)"],[31830,0,"\n\\item Assignment "],[31837,1,""],[31837,0,"Register a"],[31856,1,""],[31856,0,": set of concurrent values should default to empty set if register is nod"],[31928,1,""],[31928,0,"t defined"],[31831,107,""],[31387,0,"\n\n\\begin{prooftree}\n\\AxiomC{$\\mathsf+"],[31423,1,""],[31423,0,"{regT}(k) \\in \\mathrm "],[31444,1,""],[31444,0,"{dom}(\\mathit{ctx})$}\n\\end{prooftree}"],[31465,0,"\n\\AxiomC{$\\mathit{concurrent} = \\{ \\mathit{id}i \\mapsot"],[31518,2,""],[31518,0,"to v_i \\mid\n    (\\mathit{id}_i \\mapsto v_i) \\in \\mathit{ctx}(\\mathsf{regT}(k)) \\"],[31596,2,""],[31596,0,"\n    \\,\\wedge\\, \\mathit{id}_i \\notin \\mathit{deps} \\}$}\n\\LeftLabel{\\textsc{Clear-Reg}}\n\\BinaryInfC{$$}"],[31696,0,"\\mathit{ctx},\\, \\mathsf{op}(\\mathit{id}, \\mathit{deps},\n    \\mathsf{cursor}(\\langle\\rangle,\\, k), \\mathsf{clearReg)"],[31810,1,""],[31810,0,"}) \\evalto\n    \\mathsf"],[31830,2,""],[31830,0,"it{ctx}["],[29700,2,""],[29700,0,"it"],[29201,2,""],[29201,0,"it"],[31838,0,"\\,\\mathsf{regT}(k) \\,\\mapsto "],[31866,1,""],[31866,0,"\\, \\mathit{concurrent} \\,]"],[31840,0," "],[31511,0,"_"],[31912,0,"\n\n\\begin{prooftree}\n\\AxiomC{$\\mathsf{listT}(k) \\in \\mathrm{dom}(\\mathit{ctx})$}\n\\AxiomC{$\\mathit{ctx}(\\mathsf{listT}(k)),\\, \\mathsf{op}(\\mathit{id}, \\maths"],[32066,1,""],[32066,0,"it{deps},\n    \\mathsf{cursor}(\\langle\\rangle,\\, \\mathsf{head}), \\mathsf{clearEleme"],[32147,1,""],[32147,0,"s}) \\evalto \\mathit{cleared}$}\n\\LeftLabel{\\textsc{Clear-List}}\n\\BinaryInfC{$\\mathit{ctx},\\, \\mathsf{op}(\\mathit{id}, \\mathit{deps},\n    \\mathsf{cursor}(\\langle\\rangle,\\, k), \\mathsf{clearList}) \\evalto\n    \\mathit{ctx}[\\, \\mathsf{listT}(k) \\,\\mapsto\\, \\mathit{cleared} \\,]$}\n\\end{prooftree}\n\n\\begin{prooftree\\"],[32455,1,""],[32455,0,"}\n\\AxiomC{$\\math"],[32466,5,""],[32466,0,"k \\not= \\mathsf{tail}$}\n\\AxiomC{$\\mathit{ctx}(\\mathsf{next}(k)) = \\mathit{next}$}\n\\AxiomC{$"],[32489,0,"\n\\AxiomC{$k \\in \\mathit{deps}$}"],[32588,0,"\\mathit{ctx},\\, \\mathsf{op}(\\mathit{id}, \\mathit{deps},\n    \\mathsf{cursor}(\\langle\\rangle,\\, k), \\mathsf{clearEleme"],[32703,1,""],[32703,0,"s}) \\evalto \\mathit{ctx}'$}\n\\LeftLabel{\\textsc{Cle"],[32751,2,""],[32742,0,"$"],[32752,0,"lear-Elems}_1$}\n\\QuaternaryInfC{$\\mathit{ctx},\\, \\mathsf{op}(\\mathit{id}, \\mathit{deps},\n    \\mathsf{cursor}(\\langle,"],[32868,1,""],[32868,0,"\\rangle,\\, k), \\mathsf{clearElems"],[32682,1,""],[32682,0,"\\mathit{next}"],[32913,0,"}) \\evalto "],[32923,1,""],[32923,0,"\n    \\mathit{ctx}'[\\, \\math"],[32944,1,""],[32949,0,"sf{deleted}(\\mathit(k"],[32968,2,""],[32968,0,"{"],[32961,8,""],[32961,0,"k) \\,\\mapsto\\, \\mathsf{true}\\,]$}\n\\end{prooftree}"],[32781,6,""],[32781,0,"Tri"],[32487,12,""],[32487,0," \\,\\wedge\\, "],[33007,0,"\n\n\\begin{prooftree}\n\\AxiomC{$k \\not= \\mathsf{tail} \\,\\wedge\\, k \\notin \\mathit{deps}$}\n\\AxiomC{$\\mathit{ctx}(\\mathsf{next)"],[33128,1,""],[33128,0,"}(k)) = \\mathit{next}$}\n\\AxiomC$"],[33159,1,""],[33159,0,"{$\\mathit{ctx},\\, \\mathsf{op}(\\mathit{id}, \\mathit{deps},\n    \\mathsf{cursor}(\\langle\\rangle,\\, \\mathit{next}), \\mathsf{clearElems}) \\evalto \\mathit{ctx}'$}\n\\LeftLabel{$\\textsc{Clear-Elems}_2$}\n\\TrinaryInfC{$\\mathit{ctx},\\, \\mathsf{op}(\\mathit{id}, \\mathit{deps},\n    \\mathsf{cursor}(\\langle\\rangle,\\, k), \\mathsf{clearElemes"],[33482,2,""],[33482,0,"s}) \\evalto\n"],[33493,1,""],[33493,0," \\mathit{ctx}'$}\n\\end{["],[33515,1,""],[33515,0,"prooftree}\n\n\\begin{prooftree}\n\\end{prooftree}"],[33544,0,"\n\\AxiomC{$k = \\mathsf"],[33563,2,""],[33563,0,"sf{tail}$}\n\\LeftLabel{$\\textsc{Clear-Elems}_3$}\n\\UnaryInfC{$\\mathit{ctx},\\, \\mathsf{op}(\\mathit{id}, \\mathit{deps},\n    \\mathsf{cursor}(\\langle\\rangle,\\, k), \\mathsf{clearElems}) \\evalto \\mathit{ctx}$}\n\\end{prooftree}"],[33780,16,""],[34174,0,"\n\\item C"],[34181,1,""],[34181,0,"Clearing a structure should remove it if there are no concurrent mutations to the structure"],[30742,6,""],[30742,0,"insert"],[27979,632,""],[27979,0,"\\b"],[27439,538,""],[26964,21,""],[26976,1,""],[26976,0,",\\, k_1 e"],[26984,1,""],[26984,0,"\\evalto \\mathit{child}"],[27030,5,""],[27027,2,""],[27027,0,"hild"],[27018,0,"\\begin{matrix}\n    "],[27094,0," \\\\"],[27193,5,""],[27193,0,"child"],[27199,0,"'\n    \\end{matrix} "],[27177,0,"\\\\\n    "],[27177,7,""],[27220,0,"\n\\AxiomC{$\\mathit{ctx},\\, \\mathsf{addId}(k_1, \\mathit{id}) \\evalto \\mathit{ctx}'$}"],[27333,1,""],[27333,0,"Tr"],[27510,0,"'"],[27539,5,""],[27539,0,"child"],[27545,0,"'"],[27511,0," "],[27571,0,"\\begin{center}\n\\end{center}"],[27585,0,"\n\\AxiomC{$k \\in \\mathrm{dom}(\\mathit{ctx})$}\n\\LeftLabel{\\te"],[27641,3,""],[27641,0,"$\\textsc{Child}_1$}\n\\UnaryInfC{$\\mathit{ctx},\\, \\"],[27689,1,""],[27689,0,"k \\evalto \\mathit{ctx}(k)$}\n\\DisplayProof\\hfill"],[27732,4,""],[27732,0,"space{3em}\n%\n\\AxiomC{$\\mathsf{mapT}(k) \\notin \\mathi"],[27783,1,""],[27783,0,"rm{dom}(\\mathit{ctx})$}\n\\LeftLabel{$\\textsc{Child_"],[27832,1,""],[27832,0,"}_2$}\n\\UnaryInfC{$\\mathit{ctx},\\, \\mathsf{mapT}(k) e"],[27883,1,""],[27883,0,"\\evalto \\{\\}$}\n\\DisplayProof\\proofSkipAmoubnt"],[27925,3,""],[27925,0,"nt"],[27940,0,"\n\n\\begin{center}\n\\AxiomC{$k \\notin \\mathrm{dom}(\\mathit{ctx})$}\n\\LeftLabel{$\\textsc{Child}_3$}\n\\UnaryInfC{$\\mathit{ctx},\\, \\mathsf{listT}(k) \\evalto \\{\\,\\mathsf{next}(\\mathsf{head}) \\mapsto "],[28122,0,"\\,"],[28131,0,"\\,"],[28088,0,"\n   "],[28138,0,"\\mathsf{tail} \\,\\}$}\n\\DisplayProof\\hspace{3em}\n%$"],[28186,1,""],[28186,0,"\n\\AxiomC{$\\math"],[27966,0,"\\mathsf{listT}("],[27982,0,")"],[28202,0,"\n\\AxiomC{$\\mathsf{regT}(k) \\notin \\mathrm{dom}(\\mathit{ctx})$}\n\\LeftLabel{\\"],[28276,1,""],[28276,0,"$"],[27656,2,""],[27656,1,""],[27641,1,""],[27654,0,"-Get"],[27833,3,""],[27832,0,"-Map"],[27818,1,""],[28031,1,""],[28044,0,"-List"],[28050,3,""],[28277,1,""],[28277,0,"\\textsc{Child-Reg}}\n\\UnaryInfC{$\\mathit{ctx},\\, \\mathsf{regT}(k) \\evalto \\{\\}$}\n\\DisplayProof\\proofSkipAmount"],[28388,13,""],[28388,0,"end{center}\n\n\\begin{prooftree}\n\\end{prooftree}"],[28418,0,"\n\\AxiomC{$k_\\mathit{tag} \\in \\{\\mathsf{mapT}(k), \\mathsf{listT}(k), \\mathsf("],[28493,1,""],[28493,0,"{regT}(k)\\}$}\n\\AxiomC{$\\mathsf{pres}(k) \\notin \\mathrm{dom}{"],[28552,1,""],[28552,0,"(\\mathit{ctx})$}\n\\LeftLabel{$\\textsc{Add-ID-"],[28595,1,""],[28595,0,"}_1$}\n\\BinaryInfC{$\\mathit{ctx},\\, \\mathsf{addId}(k_\\mathit{tag}, \\mathit{id}) \\evalto\n    \\mathit{ctx}[\\, \\mathsf{pres}(k) \\,\\mapsto\\, \\{\\mathit{id}\\} \\,]$}"],[28768,0,"\n\n\\begin{prooftree}\n\\end{prooftree}"],[28787,0,"\n\\AxiomC{$k_\\mathit{tag} \\in \\{m"],[28818,1,""],[28818,0,"\\mathsf{mapT}(k), \\mathsf{listT}(k), \\mathsf{regT}(k)\\}$}\n\\AxiomC{$\\mathsf{pres}(k) \\in \\mathrm{dom}(\\mathit{ctx}("],[28931,1,""],[28931,0,")$}\n\\LeftLabel{$\\textsc{Add-ID}_2$}\n\\BinaryInfC{$\\mathit{ctx,"],[28991,1,""],[28991,0,"},\\, \\mathi"],[29001,1,""],[29001,0,"sf{addId}(k_\\mathit{tag}, \\mathit{id}) \\evalto\n    \\mathit{ctx}[\\, \\mathsf{pres}(k) \\,\\mapsto\\, \\mathit{ctx}(\\mathsf{pres}(k)) \\cup \\{\\mathit{id}\\} \\,]$}"],[29128,0,"\\,"],[29134,0,"\\,"],[29347,1,""],[29301,34,""],[29313,0,"\\,"],[29313,2,""],[29313,0,",\\, \\mathsf{clear}(\\mathit{deps}, \\mathsf{regT}(k)) \\evalto \\mathit{ctx}',\\, \\mathit{pres}"],[29415,212,""],[29415,1,""],[29415,0,"\\mathit{ctx}', \\mathsf{addId}(\\mathsf{regT}(k), \\mathit{id}) \\evalto \\mathit{ctx}''"],[29500,0,"\n\\AxiomC{$\\mathit{ctx}'', \\mathsf{regT}(k) \\evalto \\mathit{child}$}"],[29595,3,""],[29579,1,""],[29763,0,"''"],[29811,9,""],[29811,0,"hild"],[29597,3,""],[29597,0,"Quater"],[34445,1,""],[34439,0,"sideways"],[26928,0,"sideways"],[26942,1,""],[253,0,"\n\\usepackage{rotating} $"],[276,1,""],[276,0,"% sidewaysfigure "],[292,1,""],[493,5,""],[493,0,"true"],[493,4,""],[493,0,"false"],[20303,0," && v: \\mathrm{VAR}"],[19990,1,""],[19990,0,"3"],[20320,1,""],[20320,0,"L"],[20307,0,"\\uqd "],[20308,3,""],[20308,0,"quad"],[18635,0," \\in \\mathrm{PeerID}"],[18781,0," \\in \\mathBB{N}"],[18791,2,""],[18791,0,"bb"],[27041,0,"*"],[34560,0,"*"],[34462,53,""],[34462,0,"clearing}\\l"],[34482,9,""],[34482,0,"clear"],[34514,1,""],[31677,0,"\n\\caption{Rules for evaluating operations and modifying document state}\\label{fig:operation-rules}\n\\end{sidewaysfigure*}"],[31798,0,"\n\\begin{figure*}"],[34636,8,""],[34642,0,"*"],[27125,19,""],[27182,3,""],[27285,0,"$}"],[27287,20,""],[27979,15,""],[27979,0,"hspace{3em}"],[27990,13,""],[27991,0,"%"],[27993,15,""],[27993,0,"\n"],[27993,0,"\\begin{center}"],[27991,1,""],[27979,11,""],[27979,0,"proofSkipAmount\n\\end{center}"],[28475,9,""],[28475,0,"center"],[28818,14,""],[28818,0,"DisplayProof\\hspace{3em}"],[28843,0,"%"],[28844,18,""],[29221,9,""],[29221,0,"center"],[29215,0,"\n\\DisplayProof\\proofSkipAmount"],[28832,10,""],[28832,0,"fill"],[29657,0,"$"],[29673,0,"_1$"],[29673,3,""],[29657,1,""],[30301,12,""],[30301,0,"\\string{\\string}}"],[30301,0,"\\texttt{"],[30169,3,""],[30162,6,""],[30162,0,"Empty-Map"],[30153,1,""],[30378,56,""],[30378,0,"psto\\, "],[30364,4,""],[30364,0,"mapT"],[30385,0,"\\mathit{child} \\,]"],[30352,0,"''"],[29991,42,""],[30004,4,""],[30255,23,""],[30255,0,"\\mathit{val"],[30255,1,""],[30092,1,""],[30043,37,""],[30055,0,",\\, \\mathsf{clearElem}(\\mathit{deps}, \\mat"],[30092,5,""],[30092,0," k) \\evalto \\mathit{ctx}',\\, \\mathit{pres}"],[30136,0,"\n\\AxiomC{$\\mathit{ctx}',\\, "],[29603,0,"\\,"],[29507,0,"\\,"],[30167,0,"\\mathsf{addId}(\\mathsf{reg"],[30190,3,""],[30190,0,"mapT}(k), \\mathit{id}) \\evalto \\mathit{ctx}''$}\n\\AxiomC{$\\mathit{ctx}'',\\, \\mathsf{mapT}(k) \\3e"],[30283,2,""],[30283,0,"evalto \\mathit{child}$}"],[30339,2,""],[30339,0,"Quater"],[30579,0,"\n\n% TODO EMpty-List is imsilar"],[30602,7,""],[30602,0,"similar"],[30589,1,""],[30589,0,"m"],[30581,28,""],[30581,0,"\\begin{prooftree}\n\\end{prooftree}"],[30598,0,"\n\\AxiomC{$\\mathit{val} = \\texttt{[]}$}\n\\AxiomC{$\\mathit{ctx},\\, \\mathsf{clearElem}(\\mathit{deps}, k) \\evalto \\mathit{ctx}',\\, \\mathit{pres}$}\n\\m"],[30741,1,""],[30741,0,"AxiomC{$\\mathit{ctx}',\\, \\mathsf{addId}(\\mathsf{listT}(k), \\mathit{id}) \\evalto \\mathit{ctx}''$}\n\\AxiomC{$\\mathit{ctx}'',\\, \\mathsf{listT}(k) \\evalto \\mathit{child}$}\n\\LeftLabel{\\textsc{Empty-List}}\n\\QuaternaryInfC{$\\mathit{ctx},\\, \\mathsf{op}(\\mathit{id}, \\mathit{deps},\n    \\mathsf{cursor}(\\langle\\rangle,\\, k), \\mathsf{assign}(\\mathit{val})) \\evalto\n    \\mathit{ctx}''[\\, \\mathsf{listT}(k) \\,\\mapsto "],[31143,1,""],[31143,0,"\\, \\mathit{child} \\,]$}"],[32744,0,"ff"],[32744,2,""],[32755,15,""],[32755,0,"k"],[32767,7,""],[32767,0,"delete"],[32800,65,""],[32800,0,"'"],[32783,5,""],[32783,0," "],[32638,5,""],[32641,0,"ete"],[32615,1,""],[32555,48,""],[32567,0," "],[32567,1,""],[32567,0,",\\, \\mathsf{clearElem}(\\mathit{deps}, k) \\evalto \\mathit{ctx}', "],[32630,1,""],[32630,0,"\\, \\mathit{pres}"],[32843,0,"\n\n\\begin{prooftree}\n\\end{prooftree}"],[32862,0,"\n\\AxiomC{$\\mathit{ctx},\\, \\mathsf{clearAny}(\\mathit{deps}, k) \\evalto \\mathit{ctx}', \\mathit{pres}$}\n\\AxiomC{$\\mathit{pres}' = \\mathit{pres} \\,\\cup\\, $}"],[28008,15,""],[28008,0,"%"],[27979,28,""],[27979,0,"hspace{3em}"],[28226,11,""],[28226,0,"proofSkipAmount\n\\end{center}\n"],[28256,1,""],[28256,0,"\\begin{center}"],[32845,0,"%"],[32864,0,"%"],[32965,0,"%"],[33018,0,"%"],[28438,15,""],[28438,0,"hspace{3em}\n%\nAxiomC{$\\mathsf{pres}(k) \\in \\mathrm{dom}(\\mathit{ctx})$}\n"],[28452,0,"\\"],[28511,0,"\\LeftLabel{\\textsc{Presence"],[28522,0,"$"],[28539,0,"\n"],[28539,1,""],[28539,0,"}_1$}\n\\UnaryInfC{$\\mathit{ctx},\\, \\mathsf{pres}(k) \\evalto \\mathit{ctx}(\\mathsf{pres}(k))$}\n\\DisplayProof\\hspace{3em}\n%\n\\AxiomC{$\\mathsf{pres}(k) \\notin \\mathrm{dom}(\\mathit{ctx})$}\n\\LeftLabel{$\\textsc{Presence}_2$}\n\\UnaryInfC{$\\mathit{ctx},\\, \\mathsf{pres}(k) \\evalto \\m"],[28808,2,""],[28808,0,"\\{\\}$}\n\\DisplayProof\\proofSkipAmount"],[28866,6,""],[28866,0,"prooftree"],[29639,6,""],[29639,0,"prooftree"],[28974,0,"\\mathit{ctx},\\, "],[29008,5,""],[29008,0,"evalto"],[29020,2,""],[29020,0,"it"],[29023,3,""],[29023,0,"pres"],[29028,14,""],[29058,3,""],[29042,1,""],[29058,353,""],[29250,30,""],[29215,4,""],[29207,2,""],[29207,0,"it"],[29189,13,""],[32842,1,""],[32860,1,""],[32960,1,""],[33012,1,""],[32959,0,"\n\\AxiomC{$\\mathit{ctx}',\\, \\mathsf{pres}(k)"],[32957,0,"\\"],[32957,1,""],[32957,0,"_\\mathit{child}"],[33017,0," ="],[33018,1,""],[33018,0,"\\evalto \\mathit{pres}_\\mathit{elem}$}"],[33095,0,"_\\mathit{child}"],[33120,0,"\\mathit{pres}_\\mathit{elem}"],[33149,0,"\n\\LeftLabel{\\textsc{Clear_"],[33174,1,""],[33174,0,"-Elem}}\n\\TrinaryInfC{$\\mathit{ctx},\\, \\mathsf{clearElem}(\\mathit{deps}, k}"],[33247,1,""],[33247,0,") \\evalto \\mathit{ctx}'"],[33256,0,"\n   "],[33274,0," [\\, \\mathsf{pres}(k) \\,\\mapsto\\, \\mathit{pres}' \\,],\\, \\mathit{pres}'$}"],[32958,0,"1"],[32959,14,""],[33027,13,""],[33027,0,"2"],[33109,13,""],[33109,0,"2"],[33071,14,""],[33071,0,"1"],[33053,1,""],[33053,0,"+"],[33053,1,""],[33053,0,"_3"],[33272,1,""],[33272,0,"_3"],[33295,1,""],[33295,0,"_3"],[33315,0,"\n\n\\begin{prooftree}\n\\end{prooftree}"],[33334,0,"\n\\AxiomC{$\\begin{matrix}\n    \\mathit{ctx},\\, \\mathsf{clear}(\\mathit{deps}, \\mathsf{mapT}(k)) \\\\\n    \\evalto \\mathit{ctx_"],[33453,1,""],[33453,0,"}_1,\\, \\mathit{pres}_1 \\end{matrix}$}\n\\AxiomC{$\\begin{matrix}\n    \\mathit{ctx}_1,\\, \\mathsf{clear}(\\mathit{deps}, \\mathsf{listT}(k)) \\\\\n    \\evalto \\mathit{ctx_"],[33612,1,""],[33612,0,"}_2,\\, \\mathit{pres}_2 \\end{matrix}$}\n\\AxiomC{$\\begin{matrix}\n    \\mathit{ctx}_2,\\, \\mathsf{clear}(\\mathit{deps}, \\mathsf{regT}(k)) \\\\\n    \\evalto \\mathit{ctx}_3,\\, \\mathit{pres}_3} "],[33792,2,""],[33792,0," \\end{matrix}$}\n\\LeftLabel{\\textsc{Clear-Any}}\n\\TrinaryInfC{$\\mathit{ctx},\\, \\mathsf{clearElem"],[33882,4,""],[33882,0,"Any}(\\mathit{deps}, k) \\evalto\n    \\mathit{ctx}-"],[33929,1,""],[33929,0,"_3,\\, \\matht"],[33940,1,""],[33940,0,"it{pres}_1 \\,\\cup\\, \\mathit{pres}_2 \\c\\"],[33977,2,""],[33977,0,",\\cup\\, \\mathit{pres}_3 "],[34000,1,""],[34000,0,"$}"],[34018,0,"\n\n\\begin{prooftree}\n\\end{prooftree}"],[34037,0,"\n\\AxiomC{$k \\notin \\mathrm{dom}(\\mathit{ctx})$}\n\\LeftLabel{\\textsc{Clear-None}}\n\\UnaryInfC{$\\mathit{ctx},\\, \\mathsf{clear}(\\mathit{deps}, k) \\evalto \\mathiot"],[34192,2,""],[34192,0,"t{ctx},\\, \\{\\}$}"],[34558,2,""],[34558,0,"clear"],[34565,13,""],[34579,0," \\mathsf{regT}(k)) \\evalto"],[34605,69,""],[34678,0,",\\, \\mathit{"],[34687,3,""],[34687,0,"rm{dom}(\\mathit{concurrent})"],[34360,2,""],[34348,2,""],[34392,2,""],[34380,2,""],[34453,2,""],[34723,0,"\n\n\\begin{prooftree}\n\\end{prooftree}"],[34742,0,"\n\\AxiomC{$\\mathsf{mapT}(k) \\in \\mathrm{dom}(\\mathit{ctx})$}\n\\LeftLabel{\\textsc{Clear-Map}}\n\\"],[34813,0,"$"],[34832,0,"_1$"],[34836,2,""],[34801,0,"\n\\AxiomC{$\\mathit{ctx},\\"],[34823,2,""],[34823,0,"(\\mathsf{mapT}(k))\\"],[34841,1,""],[34841,0,",\\, \\mathsf{clearMap}(\\mathit{deps}, \\{\\}) \\evalto \\math"],[34891,0,"\n   "],[34901,0,"it{cleared},\\, \\mathit{pres}$}\n\\Left"],[34931,6,""],[34966,0,"\n\\BinaryInfC{$\\mathit{ctx},\\, \\mathsf{clear("],[35009,1,""],[35009,0,"}(\\mathit{deps}, \\mathsf{mapT}(k)) \\evalto\n    \\mathit{ctx} [\\, \\mathsf{mapT}(k) \\,\\mapsto\\, \\mathit{cleared} \\,],\\, \\mathit{pres}$}"],[35157,0,"\n\n\\begin{prooftree}\n\\ne"],[35178,2,""],[35178,0,"end{prooftree}"],[35176,0,"\n\\AxiomC{$k \\in \\mathrm{keys}(\\mathit{ctx}) \\,\\wedge\\, k \\notin \\mathit{done}$}\n\\AxiomC{$\\mathit{ctx},\\, \\mathsf{clearElem}(\\mathit{deps}, k) \\evalto \\mathit{ctx}', \\mathit{pres}_1$}\n\\AxiomC{$\\mathit{ctx}',',"],[35381,3,""],[35381,0,",\\, \\mathsf{clearMap}{"],[35402,1,""],[35402,0,"(\\mathit{deps}, \\mathit{done} \\cup \\{k\\})\n    \\evalto \\mathit{ctx}'',\\, \\mathit{pres}_2$}\n\\LeftLabel{$\\textsc{Clear-Map}_2$}\n\\TrinaryInfC{$\\mathit{ctx},\\, \\mathsf{clearMap}(\\mathit{deps}, \\mathit{done}) \\evalto\n    \\math"],[35617,0,"\\evalto "],[35604,8,""],[35622,0,"it{ctx}'',\\, \\mathit{pres}_1 \\cup \\mathit{pres{"],[35668,1,""],[35668,0,"}_2$}"],[35186,0,"\\begin{matrix} "],[35200,0,"\n   "],[35240,1,""],[35240,0,"\\\n    "],[35277,0," \\end{matrix}"],[35302,0,"\\begin{matrix}\n    "],[35373,0,"\\"],[35373,1,""],[35373,0," \\\\\n   "],[35419,0," \\end{matrix}"],[35444,0,"\\begin{matrix}\n     "],[35463,1,""],[35538,0," \\\\"],[35587,0," \\end{matrix}"],[35800,0,"\n\n\\begin{prooftree}\n\\end{prooftree}"],[35819,0,"\n\\AxiomC{$\\mathit{done} = \\mathrm{keys}(\\mathit{ctx})$}\n\\LeftLabel{$\\textsc{Clear-Map}_3$}\n\\UnaryInfC{$\\mathit{ctx},\\, \\mathsf{clearMap}(\\mathit{deps}, \\mathit{done})\n    \\evalto \\mathit{ctx}, \\{\\}$}"],[36011,0,"\\,"],[35985,5,""],[35985,0," "],[36367,2,""],[36367,0,"clear"],[36374,13,""],[36388,0," \\mathsf{listT}(k)) \\evalto"],[36415,70,""],[36164,2,""],[36164,0,"clearList"],[36175,13,""],[36189,0," \\mathsf{head})"],[36209,71,""],[36233,0,",\\, \\mathit{pres}"],[36283,0,"_1$"],[36264,0,"$"],[36445,0,",\\, \\mathit{pres}"],[36819,1,""],[36819,0,"2"],[36812,5,""],[36812,0,"List"],[36860,2,""],[36860,0,"clearList"],[36871,13,""],[36885,0," k) \\evalto"],[36896,71,""],[36914,51,""],[36914,0,"', \\mathit{pres}_1 \\,\\cup\\, \\mathit{pres}_2"],[35762,0,"\\,"],[35768,0,"\\,"],[36513,0,"\\begin{matrix}\n    "],[36553,0," \\\\\n   "],[36561,2,""],[36555,6,""],[36555,0,","],[36563,1,""],[36563,0,"\\"],[36564,22,""],[36565,9,""],[36565,0,"    "],[36615,0,"\n    \\end{matrix} "],[36632,1,""],[36615,5,""],[36615,0," "],[36640,0,"\\begin{matrix}\n    "],[36683,2,""],[36683,0,"clearL"],[36688,1,""],[36688,0,"Elem"],[36694,13,""],[36708,0," k) \\\\"],[36719,71,""],[36740,0,", \\mathit{pres}_1  "],[36758,1,""],[36758,0,"\\end{matrix}"],[36772,0,"\n\\AxiomC{$\\begin{matrix}\n    \\at"],[36802,2,""],[36802,0,"mathit{ctx}',\\, \\mathsf{clearList}(\\mathit{deps}, \\mathit{next}) \\\\\n    \\evalto \\mathit{ctx}'', \\mathit{pres}_2 \\end{matrix}$}"],[37059,0,"\\,"],[37122,518,""],[37195,5,""],[37195,0,"List"],[37241,2,""],[37241,0,"clearList"],[37252,13,""],[37266,0," k) \\evalto \\mathit{ctx},\\, \\{\\}$}"],[37300,86,""],[37336,0,"deleting and "],[37357,0," state"],[37403,443,""],[24709,0,"Make-"],[24731,0,"Make-"],[24756,0,"Make-"],[22679,0,"Make-"],[22405,0,"Make-"],[22080,0,"Make-"],[21863,102,""],[21863,1,""],[3797,0,"\n"],[3797,0,"& $|$ & EXPR.\\textsf{keys} \\\\"],[3669,14,""],[3669,0,"["],[3682,1,""],[3682,0,"]"],[4298,5,""],[4298,0,"["],[4309,1,""],[4309,0,"]"],[3671,11,""],[3671,0,"verb|\"str\"|"],[3692,2,""],[3692,0,"tt"],[3677,3,""],[3677,0,"key"],[5698,0," \\textsf{keys} returns the set of keys in a map,"],[10512,6,""],[10512,0,"prooftree"],[10746,18,""],[10746,0,"end{prooftree}"],[10761,1,""],[10761,0,"\n\\begin{prooftree}"],[11047,30,""],[10883,0," \\,\\wedge\\, k' \\not= \\mathsf{tail}"],[10919,0,"\n\\Axo"],[10923,1,""],[10923,0,"iomC{$\\mathit{ctx}(\\mathsf{pres}(k)) \\not= \\{\\}$}"],[11004,1,""],[11004,0,"Tr"],[11141,6,""],[11141,0,"prooftree"],[10779,59,""],[10945,2,""],[10945,0,"B"],[11091,0,"\n\n\\begin{prooftree\\"],[11109,1,""],[11109,0,"}\n\\end{prooftree}"],[11110,0,"\n\\AxiomC{$\\mathit{ctx}(\\mathsf{next}(k)) = k' \\,\\wedge\\, k' \\not= \\mathsf{tail}$}\n\\AxiomC{$\\mathit{ctx}(\\mathsf{pres}(k)) = \\{\\}$}\n\\LeftLabel{$\\textsc{Next}_3#"],[11268,1,""],[11268,0,"$}\n"],[11240,0,"\n\\AxiomC{$\\mathit{ctx},\\, \\mathsf{cursor}(\\langle\\rangle,\\, k').\\mathsf{next} \\evalto \\mathit{cur}'$}"],[11372,0,"\\TrinaryInfC{$\\mathit{ctx},\\, \\mathsf{cursor}(\\langle\\rangle,\\, k).\\mathsf{next} \\evalto \\mathit{cur}\""],[11473,1,""],[11473,0,"'$}"],[11763,1,""],[11763,0,"4"],[11229,0,"'"],[10898,0,"'"],[11972,0,"\n\n\\[ \\mathrm{keys}(\\mathit{ctx}) = \\{\\;\n\\;\\} \\]"],[12011,0,"\n    k \\mid \\mathsf{li"],[12030,3,""],[12030,0,"m"],[12030,1,""],[12030,0,"{mapT}(k) \\in \\mathrm{dom}(ctx) \\,\\vee\\, "],[12070,1,""],[12011,5,""],[12011,0," "],[12018,0,"\n   "],[12070,0,"\n    \\mathsf{listT}(k) \\in \\mathrm{dom}(ctx) \\,\\vee\\,\n    \\mathsf{regT}(k) \\in \\mathrm{dom}(ctx)"],[12174,0,"\n\n\\mathsf{or"],[12177,9,""],[12177,0,"begin{prooftree\\="],[12192,2,""],[12192,0,"}\n\\AxiomC{$A_p,\\, \\mathit{expr} \\evalto \\mathit{cur}$}\n\\AxiomC{$A_p,\\, \\mathit{cur}.\\mathsf{keys}$}"],[12289,0," \\evalto \\mathit{val"],[12306,3,""],[12306,0,"keys}"],[12313,0,"\n\\LeftLabel{$\\textsc{Keys}_1$}\n\\BinaryInfC{$A_p,\\, \\mathit{expr}.\\mathsf{keys} \\evalto \\mathit{keys}$}\n\\end{P"],[12421,1,""],[12421,0,"prooftree}"],[12057,0,"\\mathit{"],[12068,0,"}"],[12119,0,"\\mathit{"],[12130,0,"}"],[12180,0,"\\mathit{"],[12191,0,"}"],[12163,0," "],[12040,0," "],[12460,0,"\n\n\\begin{prooftree}\n\\end{prooftree}"],[12479,0,"\n\\AxiomC{$\\mathit{ctx}(\\mathsf{mapT}(k))"],[12489,0,"\\mathrm{keys}("],[12533,0,")"],[12494,2,""],[12494,0,"it"],[12497,4,""],[12497,0,"map"],[12501,0," = "],[12504,1,""],[12534,1,""],[12534,0,"$}\n\\AxiomC{$\\mathit{keys} = \\{\\; k \\mid k \\in \\mathrm{keys}(\\mathit{map}) \\,\\wedge\\,\n    \\mathit{map}(\\mathsf{pres}(k)) \\not= \\{\\} \\;\\}$}\n\\LeftLabel{$\\textsc{Keys}_2$}\n\\BinaryInfC{$A_p,\\, \\math"],[12723,4,""],[12723,0,"mathsf{cursor}(\\langle\\rangle,\\, k).\\mathsf{keys} \\evalto \\mathit{keys}$}"],[12812,0,"\n\n\\begin{prooftree}\n\\end{prooftree}"],[12831,0,"\n\\AxiomC{$k_1 \\in \\mathrm{dom}(\\mathit{ctx})$}\n\\AxiomC{$\\mathit{ctx}(k_1),\\, \\mathsf{cursor(\\langle k_2, \\dots, k_{n-1} \\rangle,\\, k_n).\\mathsf{keys}\n    \\evalto \\mathit{keys}$}\n\\LeftLabel{$\\textsc{Keys}_3#}"],[13036,2,""],[13036,0,"$}\n\\BinaryInfC{$\\mathit{ctx},\\, \\mathsf{cursor}(\\langle k_1, k_2, \\dots, k_{n-1]"],[13115,1,""],[13115,0,"} \\rangle\\"],[13124,1,""],[13124,0,",\\, k_n).\\mathsf{keys}\n    \\evalto \\mathit{keys}$}"],[12922,0,"}"],[4881,0," "],[4881,1,""],[5128,0," The features of the API "],[5133,20,""],[5133,0,"API differs slightly from the JSON libriaries "],[5172,1,""],[5178,0,"found in many programming languages, in order to allow us to define consistent merge semantics."],[5423,0,", and to construct a \\emph{cursor} which identifies a position in the document"],[5704,46,""],[5689,3,""],[5689,0,"Moving left to right through the"],[5732,0,", "],[5734,1,""],[5734,0,"the cursor is navigated through the tree"],[5776,0,"the subscript operator \\verb|[\"key\"]|"],[5813,28,""],[5893,1,""],[5893,0," and"],[5956,1,""],[5956,0,".\n\nThe expression construct EXPR can also query the state of the document:"],[6072,1,""],[6072,0,"the"],[6079,0," at the current cursor"],[6171,0," cursor"],[6178,29,""],[6212,3,""],[6212,0,"if the cursor refers to a "],[6237,1,""],[6249,6,""],[5393,38,""],[6586,0," part of the document being modified is identified by "],[6586,54,""],[6613,9,""],[6613,0,"defines the"],[6631,1,""],[6631,0," that"],[6644,4,""],[6644,0,"ies"],[4686,0," introduction"],[8050,3,""],[8060,13,""],[8060,0,"L"],[8060,1,""],[8060,0,"{Local"],[8479,0," \\mathsf{pres}(\\mathit{id}_3} \\mapsto \\{\\mathit{id}_3\\},"],[8507,1,""],[8507,0,")"],[8479,0,"\\;"],[8694,0,"\\; \\mathsf{pres}(\\mathit{id_"],[8721,1,""],[8721,0,"}_1) \\mapsto \\{\\mathit{id}_1\\},"],[8908,0,",\\; \\mathsf{pres}(\\mathit{id}_2) \\mapsto \\{\\mathit{id}_2\\}"],[8976,0,","],[8979,0," \\mathsf{pres}(\\math"],[8994,5,""],[8994,0,"\\text{``shopping''}) \\mapsto \\{\\mathit{id}_1, \\mathit{id}+"],[9051,1,""],[9051,0,"_2, \\mathit{id}_3\\;"],[9068,0," "],[8974,0,"\\multialign{3}{"],[8994,0,"\n   "],[9093,0,"}"],[9087,0,"\\}"],[15561,65,""],[15549,6,""],[15580,16,""],[16639,6,""],[16645,16,""],[16645,0,", which"],[10659,2,""],[10659,0,"tt"],[10662,3,""],[10662,0,"["],[10664,1,""],[10676,1,""],[10676,0,"\\mathtt{]}"],[10677,4,""],[10677,0,"text"],[10655,4,""],[10655,0,"text"],[18281,5,""],[18281,0,"["],[18292,1,""],[18292,0,"]"],[18481,4,""],[18481,0,"[...]"],[18774,5,""],[18774,0,"four"],[18803,3,""],[18803,0,"\\dots,4"],[19022,1,""],[19022,0,"4"],[19108,0," $\\textsc{Next}_{2,3}$ inspect "],[19131,8,""],[19131,0,"are conditional on an entry $\\mathsf{pres}(k')$ in $A_p$, which encodes the \\emph{presence} of an element in the list: if the presence set is empty, that means the list element was deleted, and so $\\textsc{Next}_3$ skips over the element. If the presence set is non=-"],[19396,2,""],[19396,0,"-"],[19396,1,""],[19396,0,"empty "],[19401,1,""],[19401,0,", $\\textsc{Next}_2$ applies.\n\nThe $\\textsc{Keys}_{1,2,3}$ rules allow the application to inspect the set of keys that are defined in a map. This set is determined by examining the local state, and excluding any keys for which the presence set is empty (indicating that the key has been deleted)."],[19746,9,""],[19746,0,"the application"],[18803,5,""],[18803,0,"2,3"],[19001,4,""],[21537,14,""],[29726,8,""],[35213,0,"\n\nFigure~\\ref{fig:operation-rules} gives the rules that evaluate an operation $\\mathsf{op}$ within a context $\\mathit{ctx}$, and produce a new "],[35351,5,""],[35351,0,"n updated context $\\mathit{ctx}'$. These rules are used by \\textsc{Apply-Local} and \\textsc{Apply-Remote} to perform the state updates on a document.\n\nWhen the cursor "],[35511,0,"operation's "],[35530,0,"refers to a tree node that is not the document root \\"],[35582,1,""],[35582,0,"$\\mathsf{doc}$, the \\textsc{Descend} rule first applies. It d"],[35642,1,""],[35642,0,"recursively descends the document tree according to the vector of keys given in the cursor. If the tree node already exists, \\textsc{Child-Get} "],[35765,0," in the local peer state"],[35810,0,"finds it, otherwise \\textsc{Child-Map} and \\textsc{Child-List} c"],[35873,1,""],[35873,0,"create an empty map or list respectively. "],[35914,1,""],[35914,0,"\n\n\\"],[35916,1,""],[35916,0,"The \\textsc{Descend} rule also invokes \\textsc{Add_"],[35966,1,""],[35966,0,"-ID} at each tree node along the path described by the cursor, adding the operation ID to the presence set $\\mathsf{pres}(k)$ to indicate that the subtree includes mut"],[36130,3,""],[36130,0,"a mutation made by this operation.\n\nThe remaining rules in Figure~\\ref{fig:operation-rules} apply when the vector of keys in the cursor is empty, i.e. when descended to the context of the tree node to which the mutation applies. \\"],[36359,1,""],[36359,0,"The \\textsc{Assign}, \\textsc{Empty-Map} and \\textsc{Empty-List} rules handle evaluation of the \\"],[36454,1,""],[36454,0,"$\\tex"],[36456,3,""],[36456,0,"mathsf{assign}$ "],[36378,1,""],[36378,0," rule handles assignment of a register,"],[36436,0," handles assignment where the value is the empty map literal \\verb|{}|,"],[36531,6,""],[36538,0,"s"],[36573,3,""],[36540,27,""],[36546,0,"ment of the empty list \\verb|[]|. These assignment rules "],[36586,0,"three "],[36592,11,""],[36598,0,"for \\textsf{assign} have a similar structure: first clearing the prior value at the cursor (as discussed in the next section), then adding the operation ID to the presence set, and finally incorporating the new value into the tree of local state."],[36845,0,"\n\n"],[36846,0,"The $\\textsc{Insert}_{1,2}$ rules handle insertion of a new element into an ordered list. In this case, the cursor rev"],[36963,1,""],[36963,0,"fers to the list element $\\mathit{prev}$, and the new element is inserted after that position in the list. The "],[37070,4,""],[37070,0,"$\\textsc{Insert}_1$ performs the insertion by manipulating the linked list structure, an"],[37154,4,""],[37154,0,". $\\textsc{Insert}_2$ handles the case of multiple peers concurrently inserting list elements at the same position, and ensures a consistent order by o"],[37304,1,""],[37304,0,"locating "],[37274,39,""],[37274,0,"uses the ordering relation $<$ on Lamport timestamps to determine the insertion point."],[37359,0," "],[37359,1,""],[37330,0,"consistently "],[37373,0," We show later that these rules ensure all peers converge towards the same state."],[37455,0,"\n"],[37455,0,"\n\\subsubsection{Clearing prior state}"],[42388,0,"Assignment and deletion operations require that prior state (the value being overwritten or deleted) is cleared "],[42499,1,""],[42499,0,", while also ensuring that concurrem"],[42534,1,""],[42534,0,"nt modifications are not lost. The rules to handle this clearing process are given in Figure~\\ref{fig:clear-rules}. Intuitively, the effect of clearing something is to reset it to its empty state by undoing any operations that causally pred"],[42773,1,""],[42773,0,"cede the current operation, while leaving any concurrent operations"],[42815,0,"the effect of "],[42854,0," untouched.\n\nThe \\textsc{Delete} rule shows how the \\textsf{delete}"],[42902,4,""],[42917,0," operations (which can be used to delete either "],[42929,7,""],[42867,35,""],[42867,0,"A "],[42894,1,""],[42924,0,"an element from an ordered list or a key from a map, depending on what the cursor refers to. The \\textsc{Delete} rule shows how this operation is evaluated, by delegating to \\textsf{clearElem}. \\textsc{Clear-Elem} uses \\textsc{Clear-Any} to recursively cl"],[43165,14,""],[43165,0,"clear out any data with a given key "],[43200,1,""],[43200,0,", regardless of whether it is of type \\textsf{mapT}, \\textsf{listT} or \\textsf{regT}, and also updates the presence set to include any nested operation IDs, but exclude any operations in $\\textit{deps}$."],[43389,4,""],[43389,0,"math"],[38083,0," \\setminus \\mathit{deps}"],[43127,2,""],[43127,0,"sc"],[43103,1,""],[43129,1,""],[43129,0,"C"],[43134,0,"-"],[43141,0," In turn,"],[43437,0,"\n\n"],[43438,0,"The premises of \\textsc{Clear-Any} are satisfied by $\\textsc{Clear-Map}_1$, $\\textsc{Clear-List}_1$ and \\textsc{Clear-Reg} if the respective key appears in $\\mathit{ctx}$, or by \\textsc{Clear-None} (which does nothing) if the key is absent.\n\n\\textsc{Clear-Reg} removes "],[43680,0," "],[43680,0,"As defined by the \\textsc{Assign} rule, a register maintains a mapping from operation IDs to values."],[43800,0,"updates a register by "],[43827,3,""],[43827,0,"ing all operation IDs that appear in $\\textit{deps}$, i.e. which are causally p"],[43892,4,""],[43902,0,"recede the clearing operation, but retaining all operation IDs "],[43879,1,""],[43880,0,"("],[43931,0,")"],[43966,0,"that do not appear in $\\text"],[43990,4,""],[43990,0,"mathit{deps}$"],[43866,4,""],[43866,0,"math"],[44003,0," (from assignment operations that are concurrent with the clearing operation).\n\nClearing maps and lists takes a similar approach: each element of the map or list is recursively cleared using $"],[44194,1,""],[44194,0,"\\textsf{clearElem}, and presence sets are updated to exclude $\\mathit{deps}$. Thus, any list elements or map entries whose modifications causally precede the clearing operation will end up with empty presence sets, and thus be considered deleted. Any map or list elements containing operations that are concurrent with the clearing operation will preserve their non"],[44549,10,""],[44549,0,"d."],[44536,4,""],[44536,0,"are"],[16085,0,"\n\\subsection{Expression evaluation}\n"],[8050,3,""],[8058,27,""],[8058,0,"Formal semantics"],[3669,1,""],[3675,0,"["],[3681,0,"]"],[3683,1,""],[4670,29,""],[4670,0,"Document editing API"],[4691,0,"\n\nTo define the semantics for collaboratively editable data structures, we first define a simple command language that is executed locally at any of the peers, and which allows the local state of that "],[4870,22,""],[4870,0,"at peer's local copy of the document to be queried and mot"],[4927,1,""],[4927,0,"dified. Performing read-only queries has no side-effects, but modifying the document has the effect of producing \\emph{operations} describing the mutation. Those operations are applied to the local copy of the document, and also enqueued for broadcasting to other peers."],[1307,21,""],[1307,0,"T"],[1307,1,""],[1307,0,"Composing collaborative data structures"],[1349,542,""],[1317,14,""],[1335,0,"In this section we outline our approach by example, and demonstrate some of the problem that occur when nested data structures are made collaboratively editable."],[1422,0,"s"],[1497,0," In the next section we provide formal semantics of our collaborea"],[1561,2,""],[1561,0,"atively editable "],[1505,4,""],[1505,0,"following"],[1583,0,"datatype and prove its correctness."],[758,0,"\n% Span multiple columns within an alignat math environment"],[292,0,"\n\\usepackage{tikz}"],[3073,0,"\n\n\\subsection{Concurrent editing examples}\n\n\\begin{figure*}\n\\end{figure*}"],[3144,1,""],[3130,1,""],[3131,0,"\n\\begin{tikzpicture}\n\\end{tikzpicture} "],[3169,1,""],[3169,0,"\n\\caption{Concurrent assignment to a register}\\label["],[3221,1,""],[3221,0,"{fig:register-assign}"],[3151,0,"\n\\draw(2,0) node {Hello} -- ("],[3157,0," "],[3181,0,"0, 2"],[3183,1,""],[3184,0,") node {World};"],[3131,0,"\n\\centering"],[3172,1,""],[3172,0,"2"],[3194,1,""],[3194,0,"0"],[3181,5,""],[3181,0,"v"],[3181,1,""],[3181,0,"\\verb|{\"title\": \"A\"}|"],[3203,0,"\n  "],[3222,5,""],[3222,0,"\\verb|{\"title\": :"],[3238,1,""],[3238,0,"\"B\"}|"],[3213,1,""],[3213,0,"1 "],[3214,1,""],[293,18,""],[391,0,"\n\n% Diagrams\n\\usepackage{tikz}\n\\usetikzlibrary{arrows}\n"],[3199,0,"\n\\node[start]"],[3205,7,""],[3205,0," (start) at (2,2)"],[3222,17,""],[3247,0,"\\node (left)"],[3261,3,""],[3261,0,"at"],[3270,5,""],[3246,0,";"],[3295,0,"\n\\draw [->] (start) -- (enter left);"],[3319,6,""],[3295,0,"\n\\node (right) at (4,1) {\\verb|{\"title\": \"C\"}|};"],[3373,0,"\n\\draw [->] (start) -- (right);"],[3259,0,"1"],[3309,0,"1"],[3213,0," "],[3221,1,""],[3221,0,"4"],[3270,1,""],[3270,0,"2"],[3319,1,""],[3319,0,"2"],[3346,0,"\n\\node (left2)  at (0, 0"],[3368,2,""],[3368,0,")"],[3368,1,""],[3368,0,"0) {\\verb|{\"title\":: {"],[3387,3,""],[3387,0," {\"B\",\"C\"}}|};\n\\node (right2) at (4,0) {\\verb|{\"title\": {\"B\",\"C\"}}|};"],[3517,0,"\n\\draw [->] ("],[3484,0,"1"],[3516,0,"1"],[3532,0,"left1) -- (left2);\n\\draw [p"],[3558,1,""],[3558,0,"->] (left1) -- ("],[3573,1,""],[3573,0,"(righty2"],[3579,2,""],[3579,0,"2);\n\\draw [->] (right1) -- (left2);\n\\draw [->] (right2"],[3632,1,""],[3632,0,"1) -- (right2);"],[3233,5,""],[3233,0,"key"],[3280,5,""],[3280,0,"key"],[3327,5,""],[3327,0,"key"],[3374,5,""],[3374,0,"key"],[3427,5,""],[3427,0,"key"],[3432,1,""],[3379,1,""],[3332,1,""],[3285,1,""],[3238,1,""],[3471,1,""],[3472,10,""],[3472,0,"[->]"],[3471,0,";"],[3473,0,"\\draw "],[3461,2,""],[3461,0,"to"],[3492,2,""],[3492,0,"to"],[3463,0," node {x} node"],[3461,16,""],[3461,0,"edge {x}"],[3460,5,""],[3460,0," edge node"],[3199,0,"[aud"],[3202,1,""],[3202,0,"to]"],[3478,1,""],[3478,0,"\\textsf{doc[``key''] := ``B'';"],[3489,0,"\\"],[3498,0,"\\"],[3511,0,"}"],[3478,0,"$"],[3480,4,""],[3480,0,"math"],[3490,0,"}"],[3491,1,""],[3492,0,"\\text{"],[3505,1,""],[3505,0,"}"],[3517,1,""],[3517,0,"$"],[3511,0,"\\text{"],[3523,0,"}"],[3480,6,""],[3480,0,"text"],[3553,2,""],[3553,0,"edge node {$\\text{doc}[\\text{``key''}] := \\text{``C'';}$}"],[3553,4,""],[3553,0,"to"],[3467,4,""],[3467,0,"to"],[3474,0," [above]"],[3566,0," [above]"],[3481,0,",sloped"],[3580,0,",sloped"],[3227,1,""],[3227,0,"5"],[3491,0,"\\footnotesize "],[3604,0,"\\footnotesize "],[3694,2,""],[3694,0,"to node [left] {\\footnotesize yield;}"],[3760,2,""],[3760,0,"to"],[3793,2,""],[3793,0,"to node [right] {\\footnotesize yield;}"],[3861,2,""],[3861,0,"to node [right] {\\footnotesize yield;}"],[3795,36,""],[3273,1,""],[3273,0,"1"],[3319,1,""],[3319,0,"1"],[3227,1,""],[3227,0,"4"],[3274,0,".3"],[3274,2,""],[3274,0,".5"],[3322,0,".5"],[3459,0,"tic"],[3459,3,""],[3459,0,"h"],[3459,1,""],[3459,0,"thick,"],[3578,0,"thick,"],[3698,0,"thick,"],[3770,0,"thick,"],[3808,0,"thick,"],[3846,0,"thick,"],[1411,0,"\n\n"],[1412,0,"Our design is based on two simple principles: "],[1457,1,""],[1457,0,"\n\\begin{enumerate}\n\\item All replicas of the data structure should converge towards the same sa"],[1551,1,""],[1551,0,"tate.\n\\item No user input should be lost due to concurrent modifications."],[1434,4,""],[1552,0,"\n\\item WIn"],[1559,3,""],[1559,0,"U"],[1559,1,""],[1559,0,"In the absence of concurrency"],[1585,3,""],[1585,0,"nt modifications, the data structure should behave like its familiar, non-replicated version."],[1747,0,"\\end{enumerate}\n\n"],[1763,0,"\nIf the third c"],[1776,2,""],[1776,0," "],[1670,7,""],[1670,0,"counterpart"],[1552,130,""],[1435,0,"two "],[1649,6,""],[1649,0,"second principle is omitted, a simple conflict resolution policy "],[1687,0,"``last writer wins'' "],[1735,0,"is sufficient, in which one update "],[1763,7,""],[1763,0,"version is chosen from a set of concurrent modification"],[1524,0,"autom"],[1524,5,""],[1624,0,"\n\\item No application "],[1624,22,""],[1524,0,"automatically "],[1832,0,"s, and "],[1794,14,""],[1784,0," of a document"],[1808,0," arbitrarily, and any"],[1854,6,""],[1854,0," are discarded. However, the requirement to preserve user input requires a more careful approach."],[4558,0,"\n\nIn this section we will examine some examples of concurrent edits that may occur in a JSON document "],[4659,1,""],[4659,0,", in order to illustrate some of the subtleties that arise.\n\nOur first example is shown in Figure~\\ref{fig:register-assign}. A document that maps "],[4784,1,""],[4784,0,"In a"],[4808,0,"``key'' to ``A'', one replica sets the value of the key to ``B'', while another concurrently sets it to ``C''. As the replicas subsequently exchange edits, they "],[4860,3,""],[4860,0,"register"],[4974,0,"detect the conflict. Since we rule out the "],[5004,13,""],[5004,0,"do not want to simply discard one of the edits, and the strings ``B'' and ``C'' cannot meaningfully be merged, the system must preserve both concurrent updates. This datatypes"],[5178,1,""],[5178,0," is known as a \\emph{multi-value register}: although a replica can only assign as"],[5258,1,""],[5258,0," single value to the register, it may have "],[5289,12,""],[5289,0,"reading the register may return a set of concurrently written values."],[4818,0," a register with value"],[5380,0,"\n\n'"],[5382,1,""],[5382,0,"\\begin{figure*}\n\\end{figure*}"],[5397,0,"\n\\centering\n\\begin{tikzpicture}[auto]\n\\end{tikzpicture}\n\\caption{Concurrent mo"],[5462,13,""],[5462,0,"Modifying the contents of a nested map while concurrently the entire map is removed}\\label{fig:map-remove}"],[5434,0,"\n\\node (start) at (5,4) {\\verb|{\"colors\": {\"blue\": \"#0000ff\"}}|};\n\\node (left1)  "],[5449,0," "],[5516,0,"at (0,2) {\\verb|{\"colors\": {\"blue\": \"#0000ff\"|};"],[5561,0,","],[5563,0," \\\\ \\verb{\"red\": \"#ff0000\""],[5572,1,""],[5572,0,"|"],[5589,0,"}}|}"],[5526,0,"\\mbox{"],[5526,6,""],[5506,0," [matrix]"],[5523,1,""],[5449,1,""],[5599,0," \\\\ "],[5603,1,""],[5533,0,"\\node {"],[5577,0,"}"],[5582,0,"\\node{"],[5613,0,"}"],[5533,0,"\n    "],[5586,0,"\n   "],[5596,0," "],[5627,1,""],[5627,0,"\n"],[5545,0,"a"],[5546,37,""],[5562,25,""],[5562,0,"b"],[5547,0,";"],[5565,0,";"],[5545,1,""],[5545,0,"\\verb|{\"colors\": {\"red"],[5564,3,""],[5564,0,"blue\": \"#0000ff\",|"],[5599,1,""],[5599,0,"\\verb|{"],[5605,1,""],[5605,0,"\"red:"],[5609,1,""],[5609,0,"\": \"#ff0000\"}}|"],[5632,0,"\n\\node (right1) at (10,2"],[5655,1,""],[5655,0,"3) {\\verb|{}|};\n\\node (right2) at (10,2) {\\verb|{\"colors\": \"#"],[5714,2,""],[5714,0,"{\"green\": \"#00ff00\"}}|};"],[5453,1,""],[5453,0,"4"],[5652,2,""],[5652,0,"8"],[5689,2,""],[5689,0,"8"],[5736,0,"\n\\node (left2) at (0,0) {\\verb|{\"colors\": {\"red\": \"#ff0000\", \"green\": \"#00ff00\"}}|};"],[5742,0," [matrix]"],[5770,0,"\n    \\node {"],[5817,0,"|};\n    \\node"],[5831,0,"{\\verb|"],[5861,0,"\n};\n\\node [matrix] (right3) at (8, "],[5895,1,""],[5895,0,"0) {\n    \\node {\\verb|{\"colors\": {\"red\": \"#ff0000\",}"],[5946,1,""],[5946,0,"|};\n    \\node {\\verb|\"green\": \"#00ff00\"}}|};\n};"],[5994,0,"\n"],[5994,1,""],[5991,0,"%"],[5950,0,"%"],[5900,0,"%"],[5865,0,"%"],[5820,0," \\\\"],[5864,0," \\\\"],[5871,1,""],[5906,1,""],[5956,1,""],[5997,1,""],[5996,0," '\\"],[5997,2,""],[5997,0,"\\\\"],[5955,0," \\\\"],[6005,0,"\n\\draw [thick,->] (start) to node [above,sloped] {\\footnotesize $\\text{doc}["],[6069,12,""],[6069,0,"doc[``colors'']} (left1);"],[6040,12,""],[6040,0,"left"],[6076,0,"[``red''] := ``\\#ff0000'';\\"],[6102,1,""],[6102,0,"~~"],[6102,2,""],[6102,0,"\\hspace{1em}"],[6103,11,""],[6103,0,"quad"],[6103,4,""],[6103,0,"hspace{1em}"],[6102,12,""],[4027,12,""],[4027,0,"left"],[4138,12,""],[4138,0,"right"],[3768,1,""],[3768,0,"3"],[4031,0,", in"],[4031,4,""],[4031,0,",inner sep=5pt"],[4157,0,",inner sep=5pt"],[4168,3,""],[4168,0,"1em"],[4042,3,""],[4042,0,"1em"],[4042,3,""],[4042,0,"8pt"],[4168,3,""],[4168,0,"8pt"],[6057,0,",inner sep=8pt"],[6068,1,""],[6068,0,"12"],[6131,0,"\n\\d"],[6131,3,""],[6140,0,"\n\\draw [thick,-."],[6155,1,""],[6155,0,">] (start) to node [right,inner sep=12pt] {\\footnotesize doc[``colors''].delete;} (right1);\n\\draw [thick,->] (left1) to node [right] {\\footnotesize doc[``colors'']."],[6318,1,""],[6318,0,"[``green''] = "],[6330,2,""],[6330,0,":= ``\\"],[6335,1,""],[6335,0,"\\#00ff00'';} (right2);"],[6265,4,""],[6265,0,"right"],[4188,7,""],[4191,1,""],[4192,6,""],[4199,1,""],[4204,6,""],[4210,1,""],[4087,1,""],[4092,6,""],[4098,2,""],[4201,1,""],[4074,6,""],[4072,1,""],[4062,7,""],[5621,1,""],[5621,0,"2.5"],[5660,1,""],[5660,0,"1.5"],[5621,3,""],[5621,0,"3"],[5422,1,""],[5422,0,"5"],[6314,0,"\n\\draw [thick,->] (left1) to node [ef"],[6349,2,""],[6349,0,"left] {\\footnotesize yield;]"],[6376,1,""],[6376,0,"} (left2);\n\\draw [thick,->] (right1"],[6410,1,""],[6410,0,"2) to node [right] {\\footnotesize yield;]"],[6450,1,""],[6450,0,"\n"],[6450,1,""],[6450,0,"} (right3);\n\\draw [thick,->] (left1) to (right3);\n\\draw [thick,->] (right2) to (Alef"],[6530,4,""],[6530,0,"left2);"],[5422,1,""],[5422,0,"4"],[6148,1,""],[6148,0,"8"],[6183,7,""],[6183,0," = \\{\\}"],[5632,0,"\"colors\": {}"],[6653,7,""],[6653,0,"overwritten"],[6701,0,"\n\nAnother example is given in Figure~\\ref{fig:map-remove}. Here, one replica adds ``red'' to a map of colors, while concurrently another client first blanks out the entire map of colors "],[6886,1,""],[6886,0,", and then adds ``green''. As the replicas merge their edits, all changes must be preserved: ``blue'' must be absent from the final map, since it was removed by blanking out the map, while ``red``"],[7080,2,""],[7080,0,"'' and ``green'' must be present, since they were explicitly added.\n\nA naive implementation "],[7147,25,""],[5339,7,""],[5319,0,"multiple values that were "],[7167,0,"\n\n"],[7168,0,"\\begin{figure*}\n\\centering\n\\begin{tikzpicture}[auto]\n\\end{tikzpicture}\n\\caption{Two replicas concurrently create an "],[7281,3,""],[7281,0,"ordered lists under the same map key}\\label{fig:two-lists}\n\\end{figure*}"],[7220,0,"\n\\node (start) at (4,4) {\\verb|{}|};\n\\node (left1) at (0,3) {\\verb|{\"food\":[]}\""],[7298,1,""],[7298,0,"|};\n\\node (right1)"],[7271,0," "],[7235,0," "],[7318,0," at (8,3) {\\verb|{\"food\":p"],[7343,1,""],[7343,0,"[]}|};\n\\node (left2)  at (0,2) {\\verb|{\"food\":[\"eggs\"]}|};\n\\node (left3)  at (0,1) {\\verb|{\"food\":[\"eggs\",\"milk\"]}|};"],[7291,4,""],[7291,0,"buy"],[7336,4,""],[7336,0,"buy"],[7381,4,""],[7381,0,"buy"],[7432,4,""],[7432,0,"buy"],[7456,0,"\n\\node (right2) at 8,2)"],[7475,0,"("],[7480,0," {\\verb|{\"buy\":[\"ham\"]}"],[7446,4,""],[7446,0,"ham"],[7496,3,""],[7496,0,"milk"],[7503,0,"|};\n\\node (right3) at (8,1) {\\verb|{\"buy\":[\"milk\",\"flour\"]}|};\n\\node [matrx"],[7577,1,""],[7577,0,"ix] (left4) at (0,0) {\n    \\node "],[7598,12,""],[7572,9,""],[7589,0," "],[7589,1,""],[7589,0,"{\\verb|{\"buy\":[\"eggs\",\"ham\",\"milk\",\"flour\"]}|};\n\\node (right4) at (8,0) {\\verb|{\"buy\":[\"eggs\",\"ham\",\"milk\",\"flour\"]}|};\n\\draw [thick,->] (start) to node [left,inner sep=12pt] {\\footnotesize doc[``buy''] := [];} (left1);\n\\draw [thick,->] (start) to node [right, "],[7849,1,""],[7849,0,"inner sep=12pt] {\\footnotesize doc[``buy''] := [];} (right1);"],[7855,0,"x"],[7754,0,"x"],[6174,0,"x"],[6051,0,"x"],[7762,1,""],[7762,0,"8"],[7864,1,""],[7864,0,"8"],[7914,0,"\n\\draw [thick,-> "],[7930,1,""],[7930,0,"] (left1) to node [left] {\\footnotesize doc[``buy''].iter.insert(``eggs'');} (left2);\n\\draw [thick,->] (right1) to node [right] {\\footnotesize doc[``buy''].iter.insert(``milk'');} (right2);\n\\draw [thick,->] (left2) to node [left] {\\footnotesize eggs.insert(``ham'');} (left3);\n\\draw [thick,->] (right2) to node [right] {\\footnotesize milk.insert(``flour'');} (right3);\n\\draw [thick,->] (left3) to node [left] {\\footnotesize yield;]"],[8360,1,""],[8360,0,"} (left5"],[8367,1,""],[8367,0,"4);\n\\draw [thick,->] (right3) to node [right] {\\footnotesize yield;} (right4);\n\\draw [thick,->] (left3) to (right5"],[8480,1,""],[8480,0,"4);\n\\draw [thick,-> "],[8499,1,""],[8499,0,"] (right3 "],[8508,1,""],[8508,0,") to (left34"],[8518,2,""],[8518,0,"4);"],[7582,0," "],[7737,0," "],[7839,0," "],[7943,0," "],[8149,0," "],[8329,0," "],[8477,0," "],[8345,0," "],[8165,0," "],[7959,0," "],[7752,0," "],[7531,0,".5"],[7592,0,".0"],[7666,0,".0"],[7479,1,""],[7479,0,"3.0"],[7423,0,".5"],[7371,1,""],[7371,0,"3.0"],[7326,1,""],[7326,0,"4.5"],[7281,1,""],[7281,0,"4.5"],[7244,1,""],[7244,0,"6.0"],[6520,0," "],[6373,0," "],[6154,0," "],[6031,0," "],[6046,0," "],[6392,0," "],[8689,0,"\n\n\\begin{figure*}\n\\end{figure*]"],[8719,1,""],[8719,0,"}"],[8706,0,"\n\\centering\n\\begin{tikzpicture}[auto]\n\\end{tikzpicture}\n\\captu"],[8767,1,""],[8767,0,"ion{One replica removes a list element, while another concurrently updates its contents}\\label{fig:todo-item}"],[8743,0,"\n\\node (start)  at (4,5) {\\verb||};"],[8775,0,"{\"todo\":[{\"text"],[8787,3,""],[8787,0,"itle\":\"buy milk\", \"done:"],[8810,1,""],[8810,0,"\": false}]}"],[8793,0," "],[8783,0," "],[8765,1,""],[8765,0,"4"],[8826,0,"\n\\node (left1)  at (0,2) {\\verb|{\"todo\": []}|};\n\\node (right1) at (8,2) {\\verb|{\"todo\": [{\"title\": \"buy milk\", \"done\": true}]}|};\n\\node (left2)  at (0,0) {\\verb|[\""],[8987,2,""],[8987,0,"{\"todo\": [{\"done\": true}]}|};\n\\node (right2) at (8,0) {\\verb|{\"todo\": [\""],[9058,1,""],[9058,0,"{\"done\": true}]}|};"],[8895,1,""],[8895,0,"1.5"],[8848,1,""],[8848,0,"1.5"],[8765,1,""],[8765,0,"3.0"],[8984,0,".0"],[9047,0,".0"],[9087,0,"\n\\draw [thick,->] (start)  to node [left, inner xsep=12pt] {\\footnotesize doc[``todo''].iter.next.delete;} (left1);\n\\draw [thick,->] (start)  to node [right,inner xsep=12pt] {\\footnotesize doc[``todo'']]"],[9289,1,""],[9289,0,".iter.next[``done''] := true;} (right2"],[9326,1,""],[9326,0,"1);\n\\draw [thick,->] (left1)  to node [left]  {\\footnotesize yield;} ["],[9395,1,""],[9395,0,"(left2);\n\\draw [thick,->] (right1) to node [right] {\\footnotesize yield;} (right2);\n\\draw [thick,->] (left1)  to (right2);\n\\draw [thick,->] (right1) to (left2);"],[8689,0,"\n\nThe example in Figure~\\ref{fig:two-lists} shows two replicas concurrently creating a new list under the same map "],[8780,0,"ordered "],[8780,7,""],[8780,0,"shopping"],[8813,0,"key ``buy'', and adding items to the list. When the replicas are merged, the lists need to be merged "],[8913,1,""],[8913,0," also. We preserve the ordering of adja"],[8945,7,""],[8945,0,"and adjacency of items inserted at each replica, so ``ham "],[9002,1,""],[9002,0,"'' appears after ``eggs'', and ``flour`"],[9040,1,""],[9040,0,"'' appears after ``milk'' in the merged result. Whether "],[9088,8,""],[9088,0,"There is no information on whether "],[9116,7,""],[9116,0,"i"],[9116,1,""],[9116,0,"hich replica's items should appear first in the merged result, so there "],[9185,3,""],[9185,0," algorithm can make an arbitrary no"],[9218,2,""],[9218,0,"choice between ``eggs, hja"],[9242,2,""],[9242,0,"am, milk, flour'' and ``milk, flour, eggs, ham'', provided that all replicas conv"],[9319,4,""],[9319,0,"end up with the same order."],[10359,0,"\n\nOur final example in Figure~\\ref{fig:todo-item} shows a limitation of the principle of preserving all user input. In a To "],[10479,4,""],[10479,0,"to "],[10478,4,""],[10478,0,"a to-do list application, one replica removes a to-do item from the list, while another replica concurrently marks the same item as done. As the changes are merged, the update of the map key ``done'' effectively causes the list item to be resurrected on the left replica. "],[10748,2,""],[10748,0,", leading to a to-do-"],[10768,1,""],[10768,0," item without a title (since the title was deleted as part of deleting the list item). This behavior is consistent with the example in Figure~\\l"],[10911,1,""],[10911,0,"ref{fig:map-remove}, but it is perhaps surprising to users. In this example it may be more desirable to discard one of the concurrent updates, and thus preserve the implicit schema that a to-do item has both a ``title'' and a ``done'' field.\n\nS"],[11154,1,""],[11154,0,"The algorithm in this paper preserves all o"],[11196,1,""],[11196,0,"user input, and so it exhibits the behavior in "],[11240,3,""],[11240,0,"shown in Figure~\\ref{fig:todo-item}. Further study will be required to determine to what degree this behavior matches the expectations of application developers and users."],[5366,0," An implementation may keep metadata about the provenance of each value (who made the change, on which device at what time)"],[5475,0,","],[5490,0," to assist users with resolving the conflict."],[5512,0,"manually "],[12996,35,""],[11590,0,"\n\n\\subsection{Document editing API}\n"],[11590,0,"\n\\subsection{JSON versus other models}\n\nThe most common alternative to JSON is XML, and collaborative editing of XML documents has been extensively studied. "],[11745,2,""],[11745,0," (Ignat and Norrie, 203)."],[11767,0,"0"],[11726,11,""],[11726,0,"previously"],[11770,0," "],[11615,0,"XML"],[11618,12,""],[11762,0,"Although the tree structure"],[11762,0,"Besides the superficial syntat"],[11791,1,""],[11791,0,"ctical differences, "],[11811,9,""],[11829,0," of XML and JSON appears quite similar. However, there is an important difference that we should highlight.\n\nJSON has two collection constructs: maps for unordered key-value pairs, and lists for ordered sequences. "],[11972,0," that can be arbitrarily nested"],[12074,0,"XML is more restricted in this regard: the children of an element are a"],[12140,5,""],[12140,0,"form an ordered sequence"],[12148,0,"bbbbbb"],[12148,6,""],[12076,36,""],[12076,0,"L,"],[12074,0,"In "],[12133,0,", while the attributes of an element are unordered key-value pairs. However, in XML"],[12210,6,""],[12210,0,"XML does not allow nested ch"],[12236,2,""],[12236,0,"elements inside attributes -- the value of an attribute can only be a primitive datatype. Thus, XMl supports "],[12334,1,""],[12334,0,"L"],[12345,0,"maps within lists, but not lists within maps.\n\nS"],[12377,0," or maps"],[12392,0," other"],[12404,0," The example in Figure~\\ref{fig:two-lists} cannot occur in XML for this reason"],[12405,0,"This "],[12404,6,""],[12404,0," In this regard, XML is more restri"],[12428,11,""],[12428,0,"less expressive than JSON: "],[12455,1,""],[12455,0,"t"],[12516,0,"."],[12517,16,""],[12520,0,"ome applications may attach map-like semantics to the children of an XML document"],[12516,0,", as it would result in two separate lists rather than one merged list"],[12393,6,""],[12378,8,""],[12657,0,", for example by using the element name or an attribute"],[12684,0,"child "],[12674,5,""],[12674,0,"interpreting"],[12725,0," "],[12710,16,""],[12710,0,"as key. However, these semantics are not part of XML itself and would not be enforced by a collaborative XML editor "],[12795,31,""],[12795,0,": a co"],[12797,4,""],[12797,0,"existing collaborative editing algorithms for XML would create duplicate whildren with the same key rather than m"],[12796,0," if multiple no"],[12800,11,""],[12800,0,"ne"],[12795,0," by existing collaborative editing algorithms for XML."],[12849,1,""],[12850,1,""],[12850,0,"I"],[12853,2,""],[12853,0,"multiple children with the same key are concurrently created, existing algoriths"],[12932,1,""],[12932,0,"ms "],[12935,51,""],[12958,1,""],[12958,0,"c"],[12502,70,""],[12928,0,"erging them like in Figure~\\ref{fig:two-lists}."],[34105,3,""],[34105,0,", state vectors~\\cite{Ellis:1989ue}, or"],[34105,0,"~\\cite{ParkerJR:"],[34119,2,""],[34119,0,"r:1983jb}"],[34190,17,""],[34190,0,"~\\cite{Preguica:2012fx}"],[67723,0,"\n\n\\section{Related W"],[67742,1,""],[67742,0,"work}\n\nAlgorithms based on _"],[67769,1,""],[67769,0,"\\emph{operational transformation} (OT) have long been used for collaborative editing applications~\\cite{Ellis:1989ue,Ressel:1996wx,Sun:1998vf,Nichols:1995fd}. Most of them treat a document as a flat sequence (of characters, for example) and do not support the nested tree structures that are required "],[67962,14,""],[67962,0,"singl"],[67962,0," "],[67968,0,"e ordered list"],[68076,0,"for many applications. Some algorithms generalize OT to editing XML documents~\\cite{Davis:2002iv,Ignat:2003jy,"],[68185,0,"}"],[68187,0," "],[68185,0,",Wang:2015vo"],[68200,0,"which provides nesting of ordered lists, but these algorithms do not support key-value maps as defined in this paper.\n\nMost deployed OT systems, including \\"],[68355,1,""],[68355,0,"Google Docs~\\cite{DayRichter:2010tt}, Etherpad~\\cite{Etherpad:2011um}, Novell Vibe~\\cite{Spiewak:2010vw} and Apache Wave (formerly Google Wave~\\cite{Wang:2015vo}), rely on a "],[68335,0," collaboration"],[68543,0,"single server to decide on a total ordering of operations. This has the advantage of simplifying the transformation "],[68627,12,""],[68627,0," making"],[68654,0,"functions simpler and less error-prone~\\cite{Imine:2003ks}, but it is not acceptable "],[68600,0,", a design decision inherited from the Jupiter system~\\cite{Nichols:1995fd}"],[68793,21,""],[68682,0,"approach "],[68802,0,"it does not meet our requirements "],[68835,1,""],[68835,0,", since we want to support collaboration without "],[68861,0," peer-to-peer"],[68897,0,"relying "],[68899,6,""],[68899,0,"quiring a single server. Deciding on "],[68924,1,""],[68924,0,"Although it p"],[68936,1,""],[68936,0,"is possible to d"],[68956,3,""],[68956,0,"e"],[68961,0,"a total ordering of operations by using an atomic broadcast protocol~\\cite{Defago:2004ji}, such protocols are equivalent to consensus~\\cite{Chandra:1996cp}, so they can only make progress"],[69135,0,"safely "],[69155,0," if a majority of participants are online and reachable. We expect that in peer-to-peer systems with"],[69051,0," which avoids relying on a single server,"],[68923,1,""],[68923,0,"\n\n"],[69293,4,""],[69293,0,"of mobile devices it will frequently be the case that only a minority of participants are online at the same time, and so any algorithm that relies "],[69414,27,""],[69414,0," the system will not be able "],[69415,28,""],[69415,0,"any algorithm requiring atomic broadcast would become unavailable. The strongest guararantee such a system can give is causal ordering~\\cite{Attiya:2015dm}.\n\nThe CRDT family of data structures "],[69573,0,"For "],[69577,1,""],[69577,0,"t"],[69611,1,""],[69611,0,", causal ordering is sufficient to achieve convergence."],[69570,3,""],[69570,0,", and "],[69576,1,""],[69576,0,"f"],[68925,0," "],[68925,0,"Many secure messaging protocols, which we plan to use for encrypted d"],[68993,1,""],[68993,0,"collaboration, do not guarantee that different recipients will see messages "],[69065,4,""],[69065,0,"ges in the same order~\\cite{Unger:2015kg}."],[67748,0,"\n\\subsection{Operational transformation}\n"],[69893,0,"\n\n\\subsection{CRDTs}"],[69794,98,""],[69795,0,"\n\nThe Google Realtime API~\\cite{Google:2015vk} is the only implementation of OT of which we aware that supports arbitrary nesting of lists and maps. However, it is "],[69956,3,""],[69956,0,"also "],[69944,17,""],[69944,0,"Like Google Docs, it appears to "],[68641,0,"~\\cite{Lemonik:2016wh}"],[69987,11,""],[69987,0,"relies on a single server~\\cite{Lemonik:2016wh}. As a proprietary product, details of its algorithms have not been publsi"],[70106,2,""],[70106,0,"ished."],[70132,0,"\n\nCRDTs for registers, m"],[70155,1,""],[70155,0,"counters, maps and sets are widely known, and they are quite "],[70195,21,""],[70195,0,"~\\cite{Shapiro:2011wy}, and have been implemented in various deployed systems such as Riak. For ordered lists, various algorithms have been proposed, including WOOT~\\cite{o"],[70366,1,""],[70366,0,"Oster:2006wj}, RGA~\\cite{Roh:2011dw}, Logoot"],[70404,6,""],[70404,0,"Treedoc~\\cite{Preguica:2009fz}, Logoot~\\cite{Weiss:2010hx} and LSEQ~\\cite{Nedelec:2013ky}. However, none of them support nesting: the elements "],[70537,0,"y assume that the"],[70564,0,"of the CRDT map or list are atomic values"],[70598,0,", immutable"],[70598,11,""],[70605,0,"."],[70605,0,", not another CRDT"],[70624,0,"\n\nThe problem of nesting one CRDT inside another (also known as \\emph{embedding}) has only been studied more recently."],[70202,0,"Shapiro:2011un,"],[70300,0,"~\\cite{Brown:2014hs}"],[70778,0,"\n\n"],[70779,0,"\\subsection{Other approaches}\n\nMany replicated data systems need to deal with the problem of concurrent, conflicting moodifications"],[70898,1,""],[70909,0,", but the solutions are often ad-hoc and "],[70945,5,""],[70945,0,". In Dynamo~\\cit4e{"],[70961,3,""],[70961,0,"e{DeCandia:2007ui} and p"],[70984,1,""],[70984,0,"l"],[70984,1,""],[70984,0,"projects it inspired"],[70984,0,"related "],[71000,12,""],[71000,0,", the database "],[70947,0,"For example, "],[70960,1,""],[70960,0,"i"],[70992,21,""],[70994,13,""],[70994,0,"concu"],[70994,5,""],[70994,0,"if several values are concurrently written to the same key, the database preserves those values and presents "],[71079,1,""],[71079,0,"e"],[71077,0,"all of "],[71101,9,""],[71101,0,"requires application code to resolve the conflict."],[71096,0,","],[71101,0," leaves conflict resolution to"],[71131,9,""],[71148,24,""],[71149,0," Simp"],[71150,4,""],[71150,0,"Naively chosen merge functions often exhibit anomalies, such as deleted items reappearing~\\cite{DeCandia:2007ui}.\n\nAnother frequently-used approach to conflict resolution is \\emph{last writer wins}, which arbitrarily chooses one among several concurrent writes as ``winner'' and discards the others. p"],[71450,1,""],[71450,0,"This "],[71452,3,""],[71452,0,"e l"],[71347,0," (LWW)"],[71456,5,""],[71456,0,"LWW does not meet our requirements, since we want no user input to be lost due to concurrent modifications."],[71455,0," This approach is used in Apache Cassandra, and it is a "],[71510,1,""],[71510,0,"n option in many other systems including Riak, "],[71555,2,""],[71555,0," and CouchDB."],[70808,0,"\\label{sec:related-other}"],[70132,0,"\\label{sec:related-crdts}"],[67788,0,"\\label{sec:related-ot}"],[71748,0,"\n\nFinally, many systems "],[71758,5,""],[71767,0,"such as Bayou~\\cite{Terry:1995dn} allow offline nodes to execute transactions tentatively, and confirm them when they are next online. T"],[71902,1,""],[71902,0,"As discussed in section~\\ref{sec:related-ot}, such total order requirements are prohibitive in a peer-to-peer system of mobile devices."],[71964,0,"ing"],[71901,0," This approach relies on a central server to execute transactions in a total order"],[71972,5,""],[71972,0,"serial"],[72085,0,"bbb"],[72085,3,""],[72036,5,""],[72036,0,"serial"],[71984,0,", and decide whether a transaction was successful depending on its pred"],[72054,1,""],[72054,0,"conditions."],[71335,0," As the complexity of this paper demonstrates, c"],[71382,1,""],[71382,0,"its "],[71382,4,""],[71382,0,"conflict resolution is not a simple matter that should be left to application programmers."],[71430,6,""],[71430,0,"can reasonably"],[72097,1,""],[72097,0,"ing"],[72087,3,""],[72087,0,"s"],[72072,8,""],[72072,0,"ll"],[72109,1,""],[72109,0,"the same"],[72141,1,""],[72141,0,"ing"],[70366,0,",Brown:2013wy"],[70782,0," \\emph{composition} or"],[70859,0," Baquero et al.~\\cite{Baquero:2015tm} present "],[70897,8,""],[70897,0,"="],[70897,1,""],[70897,0,"define a theoretical basis for C"],[70928,1,""],[70928,0,"composition of state-based CRDTs, based on lattices."],[70859,0," Riak allows multiple levels of "],[70872,19,""],[70872,0,"nesting of counters and registers inside maps, and of maps within other maps, but does not support ordered lists~\\cite{Brown:2014hs,Brown:2013wy}. Embedding counters inside maps raises di"],[71057,2,""],[71057,0,"questions of semantics, which have been studied by A"],[71108,1,""],[71108,0,"Baquero, Almeida and Lerche~\\cite{Baquero:2016iv}."],[71195,0," also"],[71222,5,""],[71222,0,"framework"],[71289,0,"\n\n"],[71290,0,"Burckhardt et al.~\\cite{Burckhardt:2012jy} define \\emph{cloud types}, which are similar to CRDT but "],[71385,5,""],[71385,0,"s and can be composed. Our \\textsf{yield} statement is inspired by Burckhardt et al."],[71407,0," The only defined collection type is the \\emph{cloud array}, which is similar to our map datatype; ordered lists are not supported."],[71600,0,"\n\nIn general, we are not aware of any "],[71602,10,""],[71602,0,"Although li"],[71611,2,""],[71611,0,"CRDTs for registers, maps and ordered lists have existed in isolation for years"],[71716,0,"prior work that allows them to be composed into a compound CRDT with a JSON-like structure."],[71765,9,""],[71765,0,"n arbitrarily"],[71667,0," for yearsf"],[71676,2,""],[71676,0,"s"],[71690,10,""],[71743,0," all"],[71782,0," nested"],[71408,40,""],[71408,0,"A "],[71428,7,""],[71408,1,""],[71408,0,"This model defines"],[71444,0,"s"],[71445,4,""],[71445,0,"}, which"],[71481,0,", and \\emph{entity"],[71498,1,""],[71498,0,"ies}, which are like tuples in the relational model."],[71550,1,""],[71551,1,""],[71551,0,"O"],[71573,9,""],[71573,0,"defined in this framework"],[71446,0," and \\emph{entities}"],[71473,0," behave"],[71488,0,"ly"],[71510,68,""],[71510,0,";"],[71511,1,""],[71512,1,""],[71512,0,"o"],[71408,10,""],[71408,0,"They"],[71419,1,""],[71439,20,""],[71483,0,", and \\emph{entities}, which are like unordered sets or relations"],[71157,0,", "],[71157,2,""],[71158,0," Almeida et al.~\\cite{Almeida:2016tk} also define delta mutation "],[71222,1,""],[71222,0,"s for nested maps, and"],[71281,5,""],[71369,0," Although "],[70948,36,""],[71334,9,""],[71334,0,"None of this work integrates CRDTs for ordered lists, but the treatment of causality in these datatypes is the "],[71441,4,""],[71441,0,"a basis for the semantics in thsi"],[71472,2,""],[71472,0,"is ap"],[71475,2,""],[71475,0,"paper."],[71438,2,""],[71438,0,"forms"],[71469,0," developed"],[73619,15,""],[73675,1,""],[73638,8,""],[73638,0,"IEEEtran"],[11736,24,""],[11735,1,""],[11735,0,"~\\cite{Davis:2002iv,Ignat:2003jy,Wang:2015va}"],[12995,0,"\n\nWe discuss related work "],[13008,13,""],[13008,0,"existing algorithms for collaborative editing in section~\\ref{sec:related-ot}."],[11778,1,""],[11778,0,"o"],[1094,39,""],[1070,0,"\\IEEEraisesectionheading{"],[1117,0,"\\label{sec:introduction}}"],[1143,0,"\n\\IEEEPARstart{T}{this} is where the introduction should go (TODO). Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse mattis leo cursus tortor mattis tincidunt. Donec sed bibendum purus, vel blandit erat."],[1046,24,""],[1033,0,"\n\n\\IEEEtitleabstractindextext{%\n\\begin{abstract}\nTOD\\end{abstract}"],[1085,0,"O\n"],[1101,0,"\n\n\\begin{IEEEkeywords}\nCRDTs, Collaborative Editing, P2P, JSON, Optimistic Replication, Semantics, Eventual Consistency.\n\\end{IEEEkeywords}}"],[15,18,""],[19,0,",journal,compsoc"],[37,7,""],[37,0,"IEEEtran"],[383,6,""],[383,0,"cite"],[370,11,""],[370,0,"ocompress"],[317,17,""],[146,0,"%"],[146,53,""],[266,0,"%"],[266,1,""],[415,0,"net-works "],[437,15,""],[953,0,"Author 1 and Author 2\n\\IEEEcompsoci"],[976,12,""],[976,0,"thanks{Author affiliation goes here.}"],[469,5,""],[469,0,"true"],[1322,1,""],[1322,0,"U"],[1325,4,""],[1325,0,"sers"],[1331,0,"of applications on mobile devices expect the applications still to work while the device is offline or has poor network connectivity."],[1464,199,""],[1463,0,", and to synchronize its state with other devices when the network is available"],[1543,0," Examples of such applications include address books, ca"],[1582,0,"calendaring, "],[1590,3,""],[1590,0,"s"],[1608,2,""],[1608,0,"note-taking, password managers"],[1499,0,"the user's "],[1631,0," and"],[1653,0,". Moreover, m\n\nTODO more intrudo"],[1682,3,""],[1682,0,"oduction."],[1666,0,"any people want to collaborate with others on documents "],[1712,0,"text "],[1726,1,""],[1726,0," "],[1726,1,""],[1726,0,", spreadsheets, presentations, graphics, and similar documents."],[1771,7,""],[1771,0,"other kinds of"],[1794,1,""],[1795,0,"\n\nWhat these d"],[1808,1,""],[1808,0,"applications have in common is that the same application state needs to be replicated to several devices, each of which may modify the state locally. St"],[1958,2,""],[1958,0,"Modifications may happen concurrently, and traditional concurrency control methods s"],[2033,9,""],[2033,0,"approaches such as serializability "],[1958,44,""],[1958,0,"T"],[2025,0,"would cause the application to become unusable at times of poor network connectivity, so we must assume that users can make arbitrary modifications concurrently on different devices, and any resulting conflicts must be resolved.\n\nThe simplest way of reseolv"],[2278,4,""],[2278,0,"olving conflcits"],[2290,4,""],[2290,0,"icts is to discard some document modifications if concurrent, confl"],[2340,17,""],[2340,0,"conflicts occurred, a policy sometimes known as ``last writer wins''."],[2340,0,"a "],[2350,1,""],[2361,27,""],[2361,0,"for example using a"],[2401,0," policy"],[2409,0," However, this approach is under"],[2440,1,""],[2440,0,"sirable as it incurs data loss. An alternative is to let the user manually resolve the conflict, which is tedious in case of modifications that could be merged automatically."],[75236,0,"i\n\n"],[75236,1,""],[75236,0,"\n\\section*{Acknowledgements}\n\ni"],[75266,1,""],[75266,0,"This research was supported by a grant from The Boeing Company.:wq"],[75329,3,""],[3459,0,"\n\n"],[3460,0,"\\section{Relatedion{Operational transformation}\\s based on \\emph{operational transformation} (OT) have long beenite{Ellis:1989ue,Ressel:1996wx,Sun:1998vf,Nichols:1995fd}. Most of them treat a document as a single ordered lisat are required for many applicaze OT to editing XML documents~\\cite{Davis:2002iv,Ignat:2003jy,Wlists, but these algorithms do not support key-ved OT collaboration systems, including Google Docs~\\cite{DayRich{Spiewak:2010vw} and Apache Wave (formerly Google Wave~\\cite{Wanng of operations~\\cite{Lemonik:2016wh}, a design decision inherih has the advantage of making the transformation functions simplet our requirements, since we want to support peer-to-peer collang protocols, which we plan to use for encrypted collaboration, do not guarantee the same order~\\cite{Unger:2015kg}. Although it is possible to dcast protocol~\\cite{Defago:2004ji}, which avoids relying on a sChandra:1996cp}, so they can only safely make progress if a majon peer-to-peer systems of mobile devices it will frequently be tame time, and so any algorithm rbecome unavailable. The strongest guararantee such a system can me API~\\cite{Google:2015vk} is the only implementation of OT of which we aware that supports arbitrary nesting of lists and maps. Like Google Docs, it relies on a single server~\\cite{Lemonik:2016wh}. As a proprietary product, details of its algorithms have not been published."],[3460,1396,""],[3460,0,"\\section{Relatedion{Operational transformation}\\s based on \\emph{operational transformation} (OT) have long been used for collaborative editing document as a sis, for example) and do not support the nested tree structures that are required cite{Davis:2002iv,Ignat:2003jy,Wang:2015vo}, whi algorithms do not support key-value maps as defined in this paper.\n\n\\section{Relatedion{Operational transformation}\\label{sec:relate) have long been used for collaborative editing s:1995fd}. Most of them treat a document as a siand do not support the nested tree structures that are required for many applications. Some algor\nithms generalize OT to editing XML documents~\\cite{Davis:2002iv,Ignat:2003jy,Wang:2015vo}, which provides nesting of ord\nered lists, but these algorithms do not support key-value maps as defined in this paper."],[3459,356,""],[3477,0," work}\n\n\\subsect"],[3541,0,"d-ot}\n\nAlgorithms based on \\emph{operational transformation} (OT"],[3653,0,"applications~\\cite{Ellis:1989:"],[3682,1,""],[3682,0,"ue,Ressel:1996wx,Sun:1998vf,Nichol"],[3764,0,"ngle ordered list (of characters, for example) "],[3908,1,""],[4028,1,""],[4116,0,"\n\nMost deployed OT collaboration systems, including Google Docs~\\cite{DayRichter:2010tt}, Etherpad~{"],[4215,1,""],[4215,0,"\\cite{Etherpad:2011um}, Novell Vibe~\\cite{Spiewak:2010vw} and Apache Wave (formerly Google Wave~\\cite{Wang:2015vo}), rely on a single server to decide on a total ordering of operations~\\cite{Lemonik:2016wh}, a design decision inherited from the Jupiter system~\\cite{Nichols:1995fd}. This approach has the advantage of making the transof"],[4549,2,""],[4549,0,"formation functions simpler and less error-prone~\\cite{Imine:2003ks}, but it does not meet our requirements, since we want to support peer-to-peer collaboration without requiring a single server.\n\nMany secure messaging protocols, which we plan to use for encrypted collaboration, do not guarantee that different recipients will see messages in the same order~\\cite{Unger:2015kg}. Although it is possible to decide on a totla "],[4971,3,""],[4971,0,"al ordering of operations by using an atomic broadcast protocol~\\cite{Defago:2004ji}, which avoids relying on a single server, such protocols are equivalent to consensus~\\cite{Chandra:1996cp}, so they can only safely make progress if a majority of participants are online and reachable. We expect that in peer-to-peer systems of mobile devices it will frequently be the case that only a minority of participants are online at the same time, and so any algorithms"],[5432,1,""],[5432,0," requiring atomic broadcast would become unavailable. The strongest guarantee such a system can give is causal ordering~]"],[5552,1,""],[5552,0,"\\cite{Attiya:2015dm}.\n\nThe Google Realtime API~\\cite{Googo"],[5609,1,""],[5609,0,"le:2015vk} is the only implementation of OT of which we are aware that "],[5623,0,"to our knowledge "],[5670,22,""],[5675,0,"supports arbitrary nesting of lists and maps. Like Google Docs, it relies on a single server~\\cite{Lemonik:2016wh}. As a proprietary product, details of its algorithms have not been published.\n\n\\subsection{CRDTs}\\label{sec:related-crdts}\n\nCRDTs for registers, counters, maps and sets are widely known~\\cite{Shapiro:2011un,Shapiro:2011wy}, and have been implemented in various deployed systems such as Riak~\\cite{Brown:2014hs,Brown:2013wy}. For ordered lists, various algorithms have been proposed, inclu"],[6177,1,""],[6177,0,"uding WOOT~\\cite{Oster:2006wj}, RGA~\\cite{Roh:2011dw}, Treedoc~\\cite{Preguica:2009fz}, Logoot~\\cite{Weiss:2010hx} and LSEQ~\\cite{Nedelec:2013ky}. However, none of them support nesting: they assume that the elements of the CRDT map or list are atomic values, not another CRDT.\n\nThe problem of nesting one CRDT inside another (also known as \\emph{composition} or \\emph{embedding}) has only been studied more recently. Riak allows nesting of counters and registers inside maps, and of maps within other maps~\\cite{Brown:2014hs,Brown:2013wy}. Embedding counters inside maps raises questions of semantics, which have been studied by Baquero, Almeida and Lerche~\\cite{Baquero:2016iv}. Almeida et a."],[6868,1,""],[6868,0,"l.~\\cite{Almeida:2016tk} also define delta mutations for nested maps, and Baquero et al.~\\cite{Baquero:2015tm} define a theoretical framework for composition of state-based CRDTs, based on lattices. None of this work integrates CRDTs for ordered lists, but the treatment of causality in these datatypes forms a basis for the semantics developed in this paper.\n\nBurckhardt et al.Z~"],[7246,2,""],[7246,0,"|~"],[7246,2,""],[7246,0,"|"],[7246,1,""],[7246,0,"~\\cite{Burckhardt:2012jy} define \\emph{cloud types}, which are similar to CRDTs and can be composed. They define \\emph{cloud arrays}, which behave similarly to our map datatypes"],[7422,1,""],[7422,0,", and \\emph{entities}, which are like unordered sets or relations; ordered lists are not defined in this frameow"],[7532,2,""],[7532,0,"work. Our \\textsf{yield} statement is inspired by Burckhardt et al.\n\nAlthough CRDTs for registers, maps and ordered lists have existed for years in isolation, we are not aware of any prior work that allows them allt "],[7746,2,""],[7746,0," to be composed into an arbitrarily nested CRDT with a JSON-like structure.\n\n\\subsection{Other approaches}\\label{sec:related-other}\n\nMany replicated data systems need to deal with the problem of concurrent, conflicting modifications, but the solutions are often ad-hoc. For example, in Dynamo~\\cite{DeCandia:2007ui}, if several values are concurrently written to the same key, the database preserves all of these values, and leaves conflict resolution to application code. Naively chosen merge functions often exhibit anomalies such as the "],[8282,4,""],[8282,0,"deleted items reappearing~\\cite{DeCandia:2007ui}. As the complexity of this paper demonstrates, conflcit resolution is not a simple matter than "],[8424,2,""],[8424,0,"t can reasonably be left to application programmers.\n\nAnother frequently-used approach to conflict resolution is \\emph{last writer wins} (LWW), which arbitrarily chooses one among several concurrent writes as ``winner'' and discards the others. This approach is used in Apache Cassandra, and it is an ope"],[8727,1,""],[8727,0,"tion in many other systems including Riak and CouchDB. LWWW"],[8785,1,""],[8785,0," does not meet our requirements, since we want no user input to be lost due to concurrent modifications.\n\nFinally, systems such as Bayou~\\cite{Terry:10"],[8935,1,""],[8935,0,"995dn} allow offline nodes to execute transactions tentatively, and  on"],[9003,3,""],[9003,0,"confirm them when they are next online. This approach relies on all servers executing transactions in the same serial order, and deciding whether a transaction wan"],[9165,1,""],[9165,0,"s successful depending on its preconditions. As discussed in section~\\ref{sec:related-ot}, such serial ordering requirements are prohibitive in a peer-to-peer system of mobile devices."],[9351,0,"\n"],[75235,5894,""],[62368,0,"\n\n\n\\section{Conclusion}\n\nTODO conclusion.\n\n\n\\section*{Acknowledgements}\n\nThis research was supported by a grant from The Boeing Company.\n"],[62521,0,"\\appendices\n\\section{Proof of convergence}\n"],[62505,0,"\n\\bibliographystyle{IEEEtran}\n\\bibliography{references}{}"],[75472,152,""],[75471,1,""],[1062,4,""],[1062,0,"Many applications model their data in a general-purpose storage format such as JSON. F"],[1147,1,""],[1147,0,"This data structure is modified by the application as a result of user input. Such modifications are well understood if t"],[1267,1,""],[1267,0,"performed sequentially on a single copy of the data, but the semantics are "],[1338,4,""],[1338,0,"is unclear if dat"],[1352,3,""],[1352,0,"the data is replicated on multiple devices where it may be modified "],[1396,24,""],[1396,0,"i"],[1395,2,""],[1395,0,"and modified concurrently on multiple devices."],[1374,20,""],[1421,0," In this paper we present an algorithm and formal semantics for a JSON data structure that automatically resolves concurrent modifications such that no updates are lost, and that "],[1595,0,"such "],[1605,0,"all replicas converge towards the same state. It supports arbitrarily nested list and map types. "],[1700,2,""],[1700,0,". It "],[1700,0,", which can be modified by insertion, deletion and assignment"],[1763,3,""],[1763,0,"The algorithm performs all merging client-side and does not depend on ordering guarantees from the network, allowing it to be deployed in peer-to-peer networks and in e"],[1930,1,""],[1930,0,"messaging systems with end-to-end encryption."],[1061,0,"\n% word limit "],[1064,0,"abstract "],[1083,1,""],[1083,0,": 100-200 words"],[2279,16,""],[2294,0," such as smartphones"],[2321,4,""],[2333,1,""],[2333,6,""],[2336,0," continue"],[2350,0,"ing"],[2294,0,","],[2315,0,","],[2335,0,"s"],[2584,0," tools, to-do lists"],[3082,0,"~\\cite{Davidson:1985hv}"],[2821,5,""],[3100,1,""],[3100,0,"."],[3103,1,""],[3103,0,"="],[3102,2,""],[3102,0,"If we require applications to work regardless of the network,"],[3261,0," that"],[2938,0,"approaches to "],[2971,11,""],[2971,0,","],[2926,0,"Requiring serializability, the "],[2957,1,""],[2957,0,"t"],[2977,2,""],[3001,24,""],[3125,0,"that "],[3142,3,""],[3680,0,"\n\nCurrently"],[3689,2,""],[3689,0," applications solve this problem with a range of ad-hoc and application-specific mechanisms, the correc"],[3780,12,""],[3780,0,". As concurrent modifications are difficult to reason about "],[3781,0," In this paper we present the first"],[3807,9,""],[3807,0,"a datatype that provides the full expressiveness of the JSON data model, and automatically merges any concurrent modifications without loss of information. We expect that this datatype will "],[3808,0," general-purpose"],[3994,0,"implementations of "],[4031,0," signific"],[4032,8,""],[4032,0,"drastically simplify the development of collaborative and state-synchronizing applications for mobile devices."],[4142,60,""],[4144,23,""],[4144,0,"\\subsection{JSON data model}"],[64152,1,""],[64152,0,"]"],[64124,8,""],[64124,0,"appendix["],[64110,12,""],[64142,0,"\\label{sec:proof}"],[4172,0,"\n\nJSON "],[10927,0,"\\label{sec:composing}"],[12653,0,"\\label{sec:examples}"],[20599,0,"\\label{sec:json-xml}"],[22121,0,"\\label{sec:client-api}"],[22132,6,""],[22132,0,"editing"],[4179,0,"It has similarities to XML, and we compare them further in section~\\ref{sec:json-xml}."],[4178,0," is a popular general-purpose data encoding format."],[4278,8,""],[4308,0," "],[4228,0,", used in many databases and web services"],[4350,0,"The structure of a JSON document can optionally be constrained by a schema, but in this paper we consider ``"],[4456,2,""],[4456,0,"only untyped JSON without an explicit schema."],[4424,5,""],[4424,0,"; for simplicity,"],[4442,3,""],[4453,11,""],[4453,0,"discusses"],[4425,0," however,"],[4517,0,"\n\nA JSON document is a tree consisting of the following types of node:\n\n\\begin{description}\n\\end{description}"],[4608,0,"\n\\item[Map:] A branch node whose children are not ordered"],[4650,15,""],[4650,0,"have no defined order, and where each child is labelled with a string \\emph{key}. A key uniquely identifies one of the children. A JSON map is also known as an \\emph{object}.\n\\item{List:"],[4830,1,""],[4830,0,"["],[4836,0,"] A branch node whose children have an order defined by the application. Th"],[4909,2,""],[4909,0,"A JSON list is also known as an \\emph{array}.\n\\item[Register:] A leaf node containing a primitive value (string, number, boolean or"],[5037,0,","],[5041,0," null). "],[5048,1,""],[4582,0,"branch "],[4629,7,""],[4840,7,""],[4948,93,""],[4947,1,""],[4965,0,"\n\n"],[4824,0," "],[4824,1,""],[4778,0," Keys are immutable, but values are mutable, and key-value mappings can be added and removed from the map."],[5007,0," The list can be mutated by inserting or deleting list elements."],[5137,0,"The leaves of the tree contain "],[5137,3,""],[5137,0,"e"],[5137,1,""],[5137,0,"A child of a branch node can be either another branch node, or a leaf node. A"],[5218,3,""],[5218,0,"f"],[5239,1,""],[5239,0,"s a primitive value (string, number, boolean, or null). We treat primitive values as immutable, but allow a "],[5345,2,""],[5345,0,"the value of a leaf node to be modified by treating it as a \\emph{register} that can be assigned a new value."],[4548,24,""],[4548,0,"ntain"],[4548,5,""],[4548,0,"taining two"],[5441,0,"\n\n\\"],[5443,1,""],[5443,0,"In section~\\ref{sec:ea"],[5464,1,""],[5464,0,"xamples} we show some ex"],[5486,2,""],[5486,0,"simple examples of using JSON to model application data."],[5442,0,"\nThis model is sufficient to express the state of a wide range of applications. For example, a text document can be represented by an ordered list of indiv"],[5574,9,""],[5588,0,"idual characters"],[5583,11,""],[5583,0,"single-"],[5599,1,""],[5599,0," strings; character-by-character edits are then expressed as insertions and deletions of list elements."],[5702,1,""],[5702,0," "],[5741,11,""],[5741,0,"further"],[5798,0,"\n\n\\subsection{Conflict resolution}"],[5812,19,""],[5812,0,"Replication model"],[5824,5,""],[5824,0,"and conflict resolution"],[12904,1378,""],[6127,0,"\n\n"],[6128,0,"We consider systems in which a full copy of the JSON document is replicated on several devices. Those devices could be servers in datacenters, but we primarily "],[6278,10,""],[6278,0,"co"],[6278,2,""],[6278,0,"p"],[6278,1,""],[6278,0,"focus on mobile devices such as smartphones, table"],[6321,7,""],[6321,0," and laptops."],[6333,0,", which have intermittent network connectivity"],[6380,0," Our model allows each rep"],[6403,3,""],[6403,0,"device to modify its local copy "],[6430,5,""],[6430,0,"replica of the document, and to asynchronously propagate those edits to other replicas.\n\nWe "],[6519,3,""],[6519,0,"Our only requirement of the network is the liveness condition that messages are eventually delieve"],[6614,3,""],[6614,0,"vered"],[6558,23,""],[6596,0,", a liveness condition. "],[6598,22,""],[6598,0,"if necessary by retrying if necessary./"],[6636,1,""],[6598,16,""],[6598,0,"by "],[6613,9,""],[6613,0,"delivery fails"],[6628,0," We make no assumptions abou"],[6629,27,""],[6629,0,"The network is allowed to arbitrarily re-or"],[6669,3,""],[6669,0,"order or duplicate messages. We "],[6698,3,""],[6698,0,"Our algorithm performs all work on the clients and does not depend on any server to transform or process messages"],[6712,24,""],[6712,0,"works"],[6724,0,"-"],[6726,0,"ide"],[6596,0," to all replicas"],[6571,0," sent by one replica"],[6623,0," other"],[6838,0,"; this approach allows a peer-to-peer network and a secure messaging protocol "],[6915,1,""],[6915,0,"~\\cite{Unger:2015kg} to be used."],[6837,4,""],[6837,0,"s. T"],[6946,0,", although the details of the network implementation and any cryptographic protocols are outside of the scope of this paper"],[6915,0," with end-to-end encryption"],[7099,0," "],[7099,0,"When the JSON document is concurrently modified on different devices, we "],[28766,0,"\\label{sec:semantics}"],[7099,0," "],[7099,0,"In section~\\ref{sec:semantics} we pro"],[7133,3,""],[7133,0,"give formal semantics that describes how conflicts are resolved"],[7197,1,""],[7197,0,"w"],[7202,3,""],[7202,0,"a"],[7263,5,""],[7263,0,"."],[7509,295,""],[7509,0,"\\subsection{Our contributions}"],[7564,0,"\\able"],[7565,4,""],[7565,0,"label{sec:related}"],[7540,0,"\nOur main contribution in this work is to define an algorithm and fo"],[7607,1,""],[7607,0,"ormal semantics for collaborative, concurrent editing of JSON data structures with automatic conflict resolution. Although similar algorithms have previously been defined for lists, maps and registers individually, to our knowledge this paper is the first to integrate all of these structures into an arbitrarily composable datatype."],[7820,0," (see section~\\ref{sec:related})"],[7972,0,"\n\nComposing maps and lists into arbitrarily nested structures opens up subtle challenges that do not arise in flat structures, due to the possibility of edit"],[8125,0,"concurrent "],[8140,0,"s at different levels of the tree. We illustrate some of those challenges by example in section~\\ref{sec:examples}. On the other hand, nested structures are an important requirement for many applications; by providing an algorithm that "],[6413,0,"optimistically "],[6532,0," "],[6532,1,""],[8391,0,"handles conflict resolution on such structures, we hope to simplify the the development of applications that use optimistic replication."],[8570,0,"\n\nIn this section we discuss existing approaches to optimistic replication, collaborative editing and conflict resolution."],[9324,0," (see section~\\ref{sec:json-xml})"],[6380,0," We do not distinguish between devices owned by the same user and different users."],[4766,0,"We treat "],[4775,1,""],[4775,0,"k"],[4780,3,""],[4780,0,"as"],[4806,2,""],[4806,0,"s"],[6843,1,""],[6843,0,"\n\n"],[6965,0," messages to be delivered via"],[7096,11,""],[7153,4,""],[7408,2,""],[7408,0,"hree"],[7612,0,"\n\\item If a"],[7619,4,""],[7619,0,"For some set "],[7619,13,""],[7619,0,"If all sequential permutations of updates lead to the same state, then concurrent execution of those updates also leads to the same state~\\cite{Bieniusa:2012gt}."],[7257,0,"a "],[11431,0,"\nConflict-free replicated datatypes are a family of data structures \n"],[11467,0,"(CRDT) "],[11472,0,"s"],[11507,0,"that can be concurrently modified and that guarantee convergence of such concurrent updates. They work by attaching additional metadata to the data structure, and making modification operations commutative by construction."],[11599,0," Unlike OT, which transforms operations a"],[11599,41,""],[11729,0," By contrast, OT works by transo"],[11760,1,""],[11760,0,"forming non-commutative update operations "],[11729,73,""],[12237,6,""],[12237,0,"primitive"],[9634,0," Moreover, performance studies have cast doubt on "],[9655,29,""],[9645,0,"the "],[9659,0,"e of OT algorithms degrades rapidly "],[9635,11,""],[9635,0,"T"],[9685,0,"as the number of concurrent operations increases~\\cite{Li:2006kd}."],[11846,0," The JSON datatype described in this paper is a kind of CRDT."],[7654,0," a set of"],[13544,62,""],[50753,0,"\nThe \\textsf{yield} command, inspired by Burckhardt et al.~\\cite{Burckhardt:2012jy}, performs network communication: sending and receiving operations to and from other peers, and applying operations from remote peers."],[50970,1,""],[50970,0," "],[50975,10,""],[50981,31,""],[51094,8,""],[51076,4,""],[14277,54,""],[14277,0,"We believe that conflict"],[15264,0," The possibility of tentative transactions later being rolled back also opens the risk of user input being lost."],[15455,0,"\n\n"],[15455,0," introduce our approach to "],[15456,0,"informally "],[15493,0,"collaborative editing of JSON data structures. A formal presentation of the algorithm follows in section~\\ref{sec:semantics}."],[15620,267,""],[16514,111,""],[16514,0,"T"],[16561,0," when JSON documents are concurrently modified, we present some examples"],[24966,91,""],[5857,278,""],[6535,0,"deyaly"],[6537,4,""],[6537,0,"lay, "],[6550,2,""],[6550,0,"and"],[6497,3,""],[6497,0,"We assume the"],[6519,13,""],[6519,0,"may"],[7139,5,""],[7139,0,"three"],[26310,5,""],[26310,0,"replicas"],[26342,4,""],[26342,0,"replica"],[26663,5,""],[26663,0,"replicas"],[31463,4,""],[31463,0,"reo"],[31465,1,""],[31465,0,"plica"],[36842,4,""],[36842,0,"replica"],[37072,4,""],[37072,0,"replica"],[37117,5,""],[37117,0,"replicas"],[37271,4,""],[37271,0,"replica"],[37316,4,""],[37316,0,"replica"],[38268,4,""],[38268,0,"replica"],[38950,4,""],[38950,0,"replica"],[42123,4,""],[42123,0,"replica"],[42241,4,""],[42241,0,"replica"],[42542,4,""],[42542,0,"replica"],[42745,4,""],[42745,0,"replica"],[42757,4,""],[42757,0,"replica"],[42805,4,""],[42805,0,"replicas"],[43392,4,""],[43392,0,"replicas"],[43399,1,""],[43510,4,""],[43510,0,"Replica"],[43619,2,""],[43619,0," k"],[43554,4,""],[43554,0,"replica"],[43688,3,""],[43689,0,"eplica"],[43744,4,""],[43744,0,"replica"],[43865,3,""],[43866,0,"eplica"],[44953,4,""],[44953,0,"Replica"],[45026,4,""],[45026,0,"Replica"],[46448,3,""],[46449,0,"eplica"],[46505,4,""],[46505,0,"replica"],[48975,4,""],[48975,0,"Replica"],[50587,5,""],[50587,0,"replics"],[50593,1,""],[50593,0,"as"],[50633,3,""],[50634,0,"eplica"],[50919,3,""],[50920,0,"eplica"],[50951,3,""],[50952,0,"eplica"],[50978,3,""],[50979,0,"eplica"],[51328,3,""],[51329,0,"eplica"],[51400,3,""],[51401,0,"eplica"],[51463,3,""],[51464,0,"eplica"],[58123,3,""],[58124,0,"eplica"],[59552,5,""],[59552,0,"replicas"],[59766,3,""],[59767,0,"eplica"],[44117,3,""],[44118,0,"eplica"],[37081,2,""],[37081,0,"q"],[37053,4,""],[37053,0,"q"],[42278,51,""],[42758,1,""],[42717,0," an"],[42730,1,""],[42701,16,""],[42701,0,"fter"],[42718,0," is"],[42731,4,""],[42731,0,"a"],[42747,0,", "],[42749,1,""],[42749,0,"it is applied locally"],[42733,0,"from "],[43240,0," for per"],[43241,1,""],[43247,0,"formed the register assignments"],[44080,0,"causally "],[44615,1,""],[16201,0,"."],[18549,0,"."],[20512,0,"."],[22183,0,"."],[25695,0,"."],[26128,0,"."],[36777,19,""],[36777,0,"s"],[36764,3,""],[36775,0,"."],[49427,0,"."],[57454,10,""],[57454,0,"applying insertion and assignment"],[57498,29,""],[57498,0,"."],[57498,0," to the state of a replica"],[57502,0,"update "],[64728,22,""],[64723,0,"applying "],[64737,0,"ion operations to replica state."],[64755,7,""],[64755,0,"update the "],[64765,1,""],[64771,0," of a replica"],[49471,7,""],[49965,12,""],[49965,0,"replica $p$"],[52675,0,"\\vspace{6pt}"],[53305,0,"\\vspace{6pt}"],[53920,0,"\\vspace{6pt}"],[54324,0,"\\vspace{6pt}"],[55050,0,"\\vspace{6pt}"],[55675,0,"\\vspace{6pt}"],[56290,0,"\\vspace{6pt}"],[56990,0,"\\vspace{6pt}"],[57842,0," The context is initially the replica state$"],[57885,1,""],[57885,0," $A-"],[57888,1,""],[57888,0,"_p$, but may refer to inner parts of the state as rules are recursively applied."],[57910,11,""],[57910,0,"subtrees"],[58990,0," primitive value to a"],[59980,0," Our approach for handling insertions is based on the RGA algorithm~\\cite{Roh:2011dw}."],[65318,0,", as illustrated in Figure~\\ref{fig:map-remove}"],[4322,1,""],[4322,0,"S"],[5713,1,""],[5713,0,"S"],[6951,1,""],[6951,0,"S"],[7856,1,""],[7856,0,"S"],[8258,1,""],[8258,0,"S"],[9345,1,""],[9345,0,"S"],[14871,1,""],[14871,0,"S"],[15320,1,""],[15320,0,"S"],[67329,0,"\n\\subsection{Convergence}\\label{sec:convergence}\n\n"],[5855,0,"lab"],[5855,3,""],[5855,0,"\\label{sec:intro-replication}"],[67408,0,"As outlined in Section~\\ref{sec:intro-replication}, we require that all replicas automatically converge towards the same state. Thi"],[67536,3,""],[67534,0," -- a key requirement of a CRDT"],[67567,0,"We now formalize this notion, and show that the rules in Figures~\\ref{fig:expr-rules} to "],[67655,1,""],[67655,0,"~\\ref{fig:clear-rules} satisfy this requirement."],[318,0,"\n% Theorem environments\n\\usepackage{amsthm}\n\n"],[362,0,"\\newtheorem{theorem}{Theorem}\n\\newtheorem{lemma}[theorem]{Lemma}"],[578,4,""],[578,0,"false"],[361,0,"\n\\newtheorem{definition}{Definition}"],[67849,0,"\n\n\\begin{definition}\n\\end{definition}"],[67869,0,"\nA \\emph{valid execution} is a se"],[67900,2,""],[67900,0,"set of operations generated by a set of replicas $\\{p_1, \\dots, p_k\\} = \\mathrm{ReplicaID}$, eah"],[67995,1,""],[67995,0,"ch reducing a sequence of commands $\\langle \\mathit{cmd}_1 \\mathbin{;} \\dots \\mathbin{;]"],[68082,1,""],[68082,0,"} \\mathit{cmd}_n \\rangle$."],[68107,0," without getting stuck"],[68147,0,"\n\nBy constraining the "],[68149,20,""],[68149,0,"A reduction gets stuck if its pre"],[68179,3,""],[68179,0,"premises canno"],[68175,18,""],[68175,0,"a premise in one of the rule applications cannot be satisfied. For example, the \\textsc"],[68255,0,"$"],[68263,0,"{Next}_{2,3}$ rules in Figure~\\ref{fig:expr-rules} get stuck if \\textsf{next} tries to iterate past the end of a list. By constraining exe"],[68398,3,""],[68398,0,"valid executions to those that do not get stuck, we ens"],[68381,0," (In a real implementation this would be a runtime error."],[68380,4,""],[68380,0,"; i"],[68437,0," "],[68437,1,""],[68509,0,"ure that operations only refer to list elements that actually exist.\n\n\\begin{definition}\nA \\emph{history} \n\\end{definition}"],[68615,0,"is the sequence of o"],[68618,3,""],[68618,0,"a"],[68633,0,"perations in the order it was applied at one particular replica $p$."],[68700,0,", by application of the rules \\textsc{Apply-Local} and \\textsc{Apply-Remote}"],[68794,0,"\n\nN"],[68796,1,""],[68796,0,"Even if two replicas applied the same set of operations"],[68816,0," $p$ and $q$"],[68863,0,", i.e. $A_p(\\mathsf{ops}) = A_q(\\mathsf{ops})$, they may have applied the operations in a different order."],[68933,3,""],[68933,0,"any concurrent"],[68869,0," if"],[68577,0," "],[68577,1,""],[68577,0,"\n\nNote that it is valid for an execution to never perform any network communication, either because it never uses t"],[68686,6,""],[68686,0,"invokes the \\textsf{yield} command, or because the nondeterministic execution of \\textsf{yield} never applies the \\textsc{Recv} rule. Thus, whether "],[68827,7,""],[68827,0,"e can check whether reductino "],[68854,3,""],[68854,0,"on "],[68820,7,""],[68820,0,"W"],[68823,9,""],[68823,0,"need only a replica's local state to determine"],[68888,0,"gets stuck."],[69305,0," Since the evaluation rules sequentially apply one operation at a time "],[69305,0," Due to the premise $\\mathit{op.id"],[69337,2,""],[69337,0,"deps} \\subseteq A_p(\\mathsf{ops})$ in \\textsc{Apply-Remote}"],[69305,0," Sinc eth"],[69310,4,""],[69310,0,"e the evaluation rules sequentially apply one operation at a time, the order is well-defined."],[69494,71,""],[69494,0,", the order is consistent with causality ("],[69496,9,""],[69496,0,"any history"],[69022,1,""],[69117,0,"Since the evaluation rules sequentia"],[69152,1,""],[69152,0,"ally apply one operation at a time, the order is well-defined. "],[69403,98,""],[69537,0,"every operation appears"],[69581,0," and further work"],[69551,9,""],[69537,5,""],[69537,0,"if an"],[69551,0,"n has causal dependencies, it appears at some point after those dependencies in the history)."],[68175,0,"there is no application of rules in which "],[68218,0,"ll"],[68228,0,"s"],[68230,42,""],[68230,0,"are "],[69543,1,""],[69542,0,":"],[69649,1,""],[69650,0,"\n\n\\begin{theorem*}\n\\end{theorem*}"],[69668,0,"\nFor any two replicas $p$ and $q$ that participated in a valid execution, if $A_p(\\mathsf{ops}) = $"],[69766,1,""],[69766,0,"A_q(\\mathsf{ops})$, then $p$ and $q$ have the same document state."],[69847,0,"\n\nThis theorem is proved in the appendix. It formalizes the safety property of convergence: if two replicas have processed the same set of operations, possibly in a different order, then they are in the same state. It needs to be coupled with a liveness property, namely that "],[70063,21,""],[70063,0,"n combination"],[70115,0,"every replica eventually processes all operations, we obtain the desired notion of convergence: all replicas eventually end up in the same state.\n\nThe liveness property depends on assumptions of replicas invoking \\ma"],[70329,2,""],[70329,0,"textsf{yield} sufficiently often, and all nondeterministic rules for tex"],[70398,3,""],[70398,0,"\\textsf{yield} being chosen fairly. We will not formalize the liveness property in this paper, but assert that it can be provided in practice, as network interruptions are usually of finite duration."],[70512,0,"usually "],[70512,8,""],[70515,0," usually"],[69650,0,"\n\n\\begin{definition}\n\\end{definition}"],[69670,0,"\nThe \\m"],[69676,1,""],[69676,0,"emph{document state} of a replica $p$ is the subtree of $A_p$ containing the document "],[69761,1,""],[69761,0,": that is, $A_p(\\mathsf{mapT}(\\mathsf{doc})$ or $A_p(\\mathsf{listT}(\\mathsf{doc})$ or $A_p(\\mathsf{regT}(\\mathsf{doc})$, whc"],[69884,1,""],[69884,0,"ichever is defined."],[69920,0,"\n\nThe document state excludes any variables defined with \\math"],[69978,4,""],[69978,0,"textsf{let}, since they are local to one replica, and not part of the state that is replicated."],[70047,0," replicated"],[70064,19,""],[69922,31,""],[69922,0,"$A_p$"],[69922,0,"We need this definition because "],[69959,0," contains"],[70006,10,""],[70006,0,"which"],[70075,0," T"],[69922,32,""],[70045,0,"he definition of document state excludes these variables."],[70118,1,""],[70296,1,""],[70296,0,"-unnumbered"],[70118,0,"-u"],[70113,7,""],[70113,0,"m:convergence"],[70299,16,""],[70299,0,"m-convergence-thm"],[70297,4,""],[70111,4,""],[70122,0,"-thm"],[462,0,"\n\\newtheorem*{convergence-thm}{Theorem}"],[69843,0,")"],[69881,0,")"],[69919,0,")"],[69232,0," at a given replica"],[69572,2,""],[69572,0,"are"],[69570,1,""],[69570,0,"ies"],[69560,4,""],[71172,16,""],[71172,0,"In this paper we demonstrated how to compose C"],[71217,1,""],[71217,0,"CRDTs for ordered lists, maps and registers into a compound CRDT with a JSON data model. It supports arbitrarily nested lists and maps, and it l"],[71360,1,""],[71360,0,"allows replicas to make arbitrary changes to the data without communicating with "],[71422,0,"any network "],[71445,2,""],[71445,0,"on"],[71421,0," reqioromg"],[71426,5,""],[71426,0,"ing"],[71426,0,"r"],[71426,0,"u"],[71425,2,""],[71425,0,"ui"],[71457,6,""],[71457,0,". Replicas asynchronously communicate cha"],[71495,3,""],[71495,0,"edits in the form"],[71495,5,""],[71495,0,"mutations"],[71483,11,""],[71483,0,"send"],[71497,0," to other replicas"],[71527,0," of operations. Concurrent operations are commutative, which ensures that replicas converge towards the same state without requiring any application-specific con"],[71659,4,""],[71684,0,"flict resolution logic.\n\nThis work focused on the formal semantics of the JSON CRDT, represented as a mathematical model. We have also created a practical implementation and will report on its performance characteristics in a separate paper. In "],[71908,16,""],[71908,0,"follow-on work"],[71927,0,"fact, we wrote the {\\LaTeX} source text of this paper using an experimental collaborative text editor using our implementation of this CRDT.\n\nFurther work will be needed to explore the semantics that application programmers expect and require of collaboratively editable data structures. Google Realtime API~\\cite{Google:2015vk}"],[72214,0," "],[72029,5,""],[72029,0,"that is based on"],[72078,0," We are making the character-by-character editing trace of this document available as supplemental data of this paper, in order to provide a dataset for the study"],[72235,0,"exp"],[72235,3,""],[72235,0,"empirical "],[72250,0," of collaborative editing algorithms."],[72435,0,"As illustrated in Figure~\\ref{fig:todo-item}, "],[72289,0,"As illustrated "],[72289,0,"Our principle of not losing input due to o"],[72330,1,""],[72330,0,"concurrent modifications appears reasonable, but as illustrated in Figure~\\ref{fig:todo-item}, "],[72425,2,""],[72425,0,"it leads to "],[72437,12,""],[72437,0,"surpr"],[72437,5,""],[72437,0,"merged document states that may be surprising to application programmers who are more familiar with sequential programs."],[72703,88,""],[72703,0,"\n"],[71152,0,"s"],[72706,0,"Two important feratu"],[72722,4,""],[72722,0,"atures"],[72707,21,""],[72707,0,"he CRDT defined in this paper supports insertion, deletion and assignment operations. In addition to these, it would be useful to support a \\emph{move} operation (to change the order of elements in an ordered list, or to move a subtree from one position in a document to another) and an \\emph{undo} operation. We plan to address these missing features in future work."],[71423,13,""],[71423,0,"waiting for"],[653,5,""],[653,0,"true"],[73238,0,"\n\\clearpage"],[73299,0,"\n\n"],[73300,0,"In this appendix we provide a proof of the theorem stated in se"],[73361,2,""],[73361,0,"Section~\\ref{sec:convergence}."],[73392,0,"\n\n"],[73393,0,"\\begin{lemma}\n\\end{lemma}"],[73406,0,"\nThe evaluat"],[73407,11,""],[73407,0,"If $\\mathit{id}_1$ appears before $\\mathit{id}_2$ in an ordered list, and the list is mutated according to the v"],[73518,1,""],[73518,0,"evaluation rules, "],[73426,14,""],[73426,0,"precedes"],[73530,0,"$\\mathit{id}_1$ also precedes $\\mathit{id}_2$ in all resulting "],[73583,10,""],[73583,0,"successive st"],[73594,2,""],[73594,0,"document states."],[73391,0,"\n\n\\begin{definition}\n\\end{definition}"],[73411,0,"\n"],[73391,0," We begin with some lemmas about ordered lists, and then work our way towards more comple "],[73480,1,""],[73480,0,"x composite documents."],[73492,0,"JSON "],[73528,0,"Lit"],[73530,1,""],[73530,0,"st elemen t "],[73539,3,""],[73539,0,"t $k_1$"],[73583,11,""],[73583,0,"k"],[73598,11,""],[73598,0,"k"],[73713,11,""],[73713,0,"k"],[73683,11,""],[73683,0,"k"],[73546,0," \\emph{precedes} list element $k_2$ in \\"],[73585,1,""],[73585,0,"$\\mathit{ctx}$ if "],[73579,1,""],[73579,0,"n"],[73603,0,"there exist $k_2, \\dots, k_{n-1}$ such that $\\mathit{ctx}(\\mathsf{next}(k_1)) = k_2 \\;\\wedge\\; \\mathit{ctx}(\\mathsf{next}(k_2"],[73648,0,"\\forall "],[73646,0," for all $i$ with $1 \\le i < n$,"],[73680,8,""],[73709,1,""],[73709,0,"i"],[73717,1,""],[73717,0,"{i+1}$."],[73724,42,""],[73584,0," the ordered list"],[73758,0,"\n\nThe notion of \\emph{preceding} corresponds to the order in which the \\textsc{Next} rules iterate over the list."],[74062,0,"\n\\begin{proof}\n\\end{proof}"],[74076,0,"\nThe only rule that modifies the \\textsf{next} entries in the context is $\\mathsf{"],[74151,7,""],[74151,0,"textsc{Insert}_1$, and it modifies "],[74177,9,""],[74177,0,"inserts a p"],[74187,1,""],[74187,0,"new list element between r"],[74212,1,""],[74212,0,"two exc"],[74218,1,""],[74218,0,"isting list elements (possibly \\mathsf{head} and/or \\"],[74250,4,""],[74250,0,"text"],[74271,0,"textsf{tail}). This modification preserves the precedence relatoins"],[74334,4,""],[74334,0,"ionship between any two existing list elements."],[73764,6,""],[73764,0,"definion"],[73770,2,""],[73770,0,"tion"],[74385,0," Since no other rule affects the list order, precedence is always preserved."],[74473,0,"\n\nNote that deletion of al"],[74498,1,""],[74498,0,"n element from a list does not remove it from the sequence of \\textsf{next} pointers"],[74127,7,""],[74127,0,"pointers"],[74583,0,", but only clears its presence set $\\mathsf{pres}(k)$."],[73890,0,"\\label{lem:list-pre"],[73906,3,""],[73906,0,"order}"],[73906,5,""],[73906,0,"precedes"],[74662,0,"\n\n\\begin{e"],[74671,1,""],[74671,0,"lemma}\n\\end{lemma}"],[74677,0,"\nIf one replica inserts a list element $k{"],[74718,1,""],[74718,0,"_\\mathit{new}$ between $k_1$ AND "],[74747,4,""],[74747,0,"and $k_2$, i.e. if $\\mathit{ctx}(ne"],[74780,2,""],[74780,0,"\\mathsf{next}(k_1)) = \\mathit{ctx}(\\ma"],[74802,16,""],[74802,0,"k_\\mathit{new}$ and $\\mathit{ctx}(\\mathsf{next}(k_\\mathit{new})) = k_2$ on the source replica after applying \\textsc{Apply-Local}, then $k_1$ precedes $k_\\mathit{new}$ and $k_\\mathit{new}$ precedes $k_2$ on every other replica where that operation is applied."],[75073,0,"\n\\begin{proof}"],[74091,0,"\n"],[75075,0,"\n"],[75089,0,"\n\\endPp"],[75094,2,""],[75094,0,"{}"],[75095,0,"proof"],[75089,0,"\nWhen the insertion operation is generated using the \\textsc{Make-Op} rule, its operation identifier contains a "],[75190,11,""],[75190,0,"is given a counter value \\"],[75215,1,""],[75215,0,"$\\mathit{ctr}$ that is greater than the counter of any existing operation ID in $\\"],[75296,1,""],[75296,0,"A-"],[75297,1,""],[75297,0,"_p(\\mathsf{ops})$. If $k_2$ is an operation identifier"],[75074,0,"\n\nT"],[75074,3,""],[74663,0," We now consider what happens when several replicas concurrently insert new elements int "],[74751,1,""],[74751,0,"o the same list."],[75455,0,", we must have $k_2 \\on"],[75476,2,""],[75476,0,"in A_p(\\mathsf{ops})$, since both \\textsc{Apply_"],[75523,1,""],[75523,0,"-Local} and \\textsc{Apply_"],[75548,1,""],[75548,0,"-Remote} add operation IDs to $A-"],[75580,1,""],[75580,0,"_p(\\mathsf{ops})$ when applying an insertion "],[75624,1,""],[75624,0,". Thus,"],[75626,5,""],[75626,0,"The only other po"],[75625,18,""],[75625,0," If $k_2$ is not an operation identifier, it must be \\textsf{tail}. "],[75193,0,"\nThe rules for generating list operations ensure that $k_1$ is either \\textsf{head} or an operation identifier, and $k_2$ is either \\textsc"],[75331,1,""],[75331,0,"f{tail} or an operation identifier."],[75366,1,""],[75366,0,"\n\n"],[75800,67,""],[75800,0,"Thus "],[75804,1,""],[75804,0,", either $k_2 < k_\\mathit{new}$ under the ordering relation $<$ for Lamport timestamps, or $k_2 = \\mathsf{tail}$.\n\nWhen the insertion operation is applied on other replicase"],[75976,1,""],[75976,0," using \\textsc{Apply-Remote} and $\\textsc{Insert}_{1,2}$, by L"],[76034,4,""],[76034,0,"$k_1$ precedes $k_2$ on that "],[75962,0,"an"],[75977,1,""],[76064,0,"replica (by Lemma~\\ref{lem:list-precedes} and causality)."],[74782,0,"\\label{lem:insert-between}"],[76147,0," $"],[76148,1,""],[76148,0,"\n"],[76148,1,""],[76148,0,"The cursor of the operation is $\\mathsf{cursor}(\\langle\\dots\\rangle, k_1)$. If other concurrent insertions occurred between $k_1$ and $k_2$, their operation ID may be greater than or less than $k_\\mathit{new}$, and thus either $\\math"],[76377,4,""],[76377,0,"textsc{Insert}_1$ or \\"],[76398,1,""],[76398,0,"$\\textsc{Insert}_2$ may apply. In particular, $\\textsc{Insert}_2$ skips over any list elements whose Lamport timestamp is greater than $k_\\mathit{new}$."],[76222,0,", so the rules start iterating the list at $k_1$ and never insert $k_\\mathit{new}$ at a position that precedes $k_1$"],[76339,0,"\n\n"],[76341,1,""],[76667,0," However, we know that $k_2 < k_\\mathit{new} \\vee k_2 = \\mathsf{tail}$, and so $\\textsc{Insert}_1$ will apply with $\\mathit{next}=k_2$ at the latest. The $\\math"],[76823,4,""],[76823,0,"math"],[76748,4,""],[76748,0,"math"],[76517,4,""],[76517,0,"math"],[76517,4,""],[76517,0,"text"],[76748,4,""],[76748,0,"text"],[76823,4,""],[76823,0,"textsc{Insert}_{1,2}$ rules thus never iterate past $k_2$, and thus always insert $k_\\mathit{new}$ at a p"],[76927,1,""],[76927,0,"list position that precedes $k_2$."],[76973,0,"\n\n\\begin{lemma}\\label{lem:insert-commute}\n\\end{lemma}"],[77015,0,"\n"],[77015,0,"Concurrent insertions into the same list are commutative."],[77084,0,"\n\n\\begin{proof}\n\\end{proof}"],[77099,0,"\nLet $\\mathit{op}_1$ and $\\mathit{op}_2$ be two commutative insertion operations"],[77149,9,""],[77149,0,"ncurrent"],[77178,0,", i.e. $\\mathit{op_"],[77196,1,""],[77196,0,"}_1.\\mathit{deps} \\"],[76973,0,"\n\n\\begin{definition}\\label{def:concurrent}\n\\end{definition}"],[77015,0,"\nTwo operations $\\mathit{op}_1$ and $\\mathit{"],[76974,104,""],[77178,37,""],[77178,0,". "],[76973,0,"\n\n\\begin{definition}\\label{def:comma"],[77008,1,""],[77008,0,"on-ancestor}\n\\end{definition}"],[77020,0,"\nFor two concurrent operations $\\mathit{op}_1$ and $\\mathit{op}_2$, the \\emph{common ancestor} is the document state resulting from applying all operations in $\\mathit{op}_1.\\mathit{deps} \\cup \\mathit{op}_2.\\mathit{deps}$, i.e. the most recent document state that causally precedes both operations, after which the document states diverged."],[76993,0,"[common ancest]r"],[77007,2,""],[77007,0,"or]"],[73527,0,"[list element precedence]"],[69726,0,"[document state]"],[68964,0,"[history]"],[67907,0,"[valid execution]"],[77668,0,"Let $k_1$ be the list element that most closely precedes"],[77666,0," with a common "],[77206,8,""],[77206,0,"replica"],[77347,8,""],[77347,0,"replica"],[77416,16,""],[77416,0,"y"],[77324,1,""],[77324,0,".\n\\end{definition}\n\n"],[77344,5,""],[77344,0,"In other words, the common ancestor is"],[77479,17,""],[77468,1,""],[77468,0," replicas"],[77487,0," There many be any number of operations between the common ancestor and $\\mathit{op}_{1,2}$."],[77799,0,"ancestor #$"],[77808,2,""],[77808,0,"$A\\"],[77810,1,""],[77810,0,"_\\mathit{anc}$"],[77834,0,"^\\mathit{b"],[77843,1,""],[77843,0,"before}"],[77851,0," and $k_2^&"],[77861,1,""],[77861,0,"\\mathit{before}$"],[77897,0,"s in $A_\\mathit{anc}$"],[77944,1,""],[77944,0," the insertion pisi"],[77960,3,""],[77960,0,"osition of $\\mathit{op}_1$ and $\\mathit{op})2"],[78003,2,""],[78003,0,"_2$ respectively, and let $k_1&"],[78033,1,""],[78033,0,"^\\mathit{after}$ and $k_2^\\mathit{after}$ be the list elements in $A_\\mathit{anc}$ most closely preceded by the insertion position of $\\mathit{op_"],[78178,1,""],[78178,0,"}_1$ and $\\mathit{op}_2$ respectively.\n\nBy Lemma~\\ref{lem:insert-between}, either "],[74964,0,"$k1"],[74966,1,""],[74966,0,"_1$ precedes $k_\\mathit{new} in the list and $k_\\mathit{new}$ precedes $k_2$ in the list "],[75055,108,""],[78243,0,"$k_1^\\mathit{before} = k_2^\\mathit{before} \\v"],[78287,1,""],[78287,0,"wedge k_1^\\mathit{after} = k_2^\\mathit{afgter"],[78328,4,""],[78328,0,"ter}$ (i.e. $\\mathit{op}_1$ and $\\mathit{op})_"],[78372,2,""],[78372,0,"_2$ are inserting into the same interval of list elements), or $k_2&"],[78439,1,""],[78439,0,"&"],[78439,1,""],[78439,0,"^\\mathit{before} \\not= k"],[78438,1,""],[78438,0,"1"],[78463,0,"_2^\\mathit{before} \\wedge k_1^\\mathit{after} \\not= k_2^\\mathit{after}$ (i.e. the operations are inserting into disjoint intervals of list elements). In the latter case, the two operations are trivially commutative, as they affect different parts of the list, and by Lemma~\\ref{lem:insert-between} they do not affect parts of the list outside of their respective ranges."],[74994,0,"$"],[78847,1993,""],[78833,0,"\n\nFor the rest of this proof, consider the case of $k^\\mathit{before} = k_1^\\mathit{before} = k_2^\\mathit{before}$ and $k^\\after"],[78956,0,"mathit{"],[78968,0,"} = k_1^\\mathit{after} = k_2^\\mathit{after}$. We need to show that "],[87587,0,":q\n"],[87587,3,""],[73342,207,""],[73342,0,"\\begin{theorem}\\label{thm:convergence}\nFor any two replicas $p$ and $q$ that participated in a valid execution, if $A_p(\\mathsf{ops}) = A_q(\\mathsf{ops})$, then $p4"],[73505,1,""],[73505,0,"$ and $q$ have the same document state.\n\\b"],[73546,1,""],[73546,0,"end{theorem}\n\n\\begin{proof}\n\\end{proof}"],[73573,0,"\nConsider the history "],[73593,2,""],[73593,0,"ies $H_p$ and $H_q$ at $p$ and $q$ respectively. "],[73640,0," (see Definition~\\ref{def:history})"],[69768,0,"\\label{def:doc-state}"],[68990,0,"\\label{def:history}"],[67924,0,"\\label{def:valid-exec}"],[73739,0,"\\textsc{Apply-Local} and \\textsc{Apply-Remote}"],[73738,0," The only rules that apply operations and that modify $A_p(\\mathsf{ops})$ and $A_q(\\mathsf{ops)"],[73832,1,""],[73832,0,"})$ are"],[73886,0,", and they maintain the variant that an "],[73923,3,""],[73923,0,"for any operation $\\mathit{op}$, $\\mathit{op} \\in "],[73886,5,""],[73886,5,""],[73900,0,"in"],[73915,7,""],[73915,0,"an"],[73928,32,""],[73928,0,"is added to $A_p(\\mathsf{ops}) "],[73958,1,""],[73958,0,"$ or $A_q(\\mathsf{ops})$ iff"],[73985,1,""],[73985,0," and only if it was applied to the document state."],[73754,86,""],[73743,5,""],[73944,0," Thus, if $A_p{\\"],[73958,2,""],[73958,0,"(\\mathsf{ops}) = A_q(\\mathsf{ops})$ then $H_p$ and $H_q$ contain the same set of operations, but potentially in a different order."],[73951,3,""],[73991,4,""],[73991,0,"if and only "],[73993,10,""],[73993,0,"f"],[74045,5,""],[74046,0,"("],[74079,0,")"],[74062,2,""],[74077,0,"s"],[74080,0,"\n\nWe can prove that "],[74082,18,""],[74082,0,"The fina. "],[74090,2,""],[74090,0,"l document state "],[74086,6,""],[74101,0,"at replica $p$ can "],[74116,4,""],[74116,0,"is determined entirely "],[74121,18,""],[74121,0,"rived from the history $H_p$ "],[74081,0,"\nThe history is a "],[74094,5,""],[74094,0,"at replica $p$ is a sequence of operations $H_p = o_1 \\dots o_n$, and the document state at $p$ is derived from $H_p$ by starting in the emps"],[74234,1,""],[74234,0,"ty state and apply "],[74252,1,""],[74252,0,"ing the operations in order. Like "],[74285,1,""],[74285,0,"wise, the document state at $q$ is derived from $H_q$, which is a permutation of $H_p$."],[74372,69,""],[74372,0," Both histories must be consistent with causality, i.e. for all #"],[74436,1,""],[74436,0,"$i$ with $1 \\e"],[74449,1,""],[74449,0,"le i \\le n$, $\\mathit"],[74463,7,""],[74463,0,"o_i.\\mathit{deps} \\subseteq { o_j.\\mathit{id} \\mid 1 \\e "],[74517,2,""],[74517,0,"le j < i"],[74491,0,"\\"],[74526,0," \\}"],[74526,1,""],[74493,1,""],[74527,0,"$."],[73943,0," at $p$ or $q$"],[74073,2,""],[74073,0,"ir"],[74073,2,""],[74073,0,"ordered"],[74090,7,""],[74090,0,"ly"],[74158,0,"\\langle "],[74179,0," \\rangle"],[74169,0,","],[74176,0,","],[74786,0," we require"],[74786,11,""],[74494,0,"we require "],[74572,0,"\n\nWe can prove the theorem by induction over histories"],[74617,9,""],[74617,0,"the length of history $n$.\n\n\\emph{Base case:} A histor"],[74664,7,""],[74664,0,"n empty history with $n=0$ describes the empty document state. The empty document is always the same, and so any two replicas that have not executed any operationsa r"],[74827,3,""],[74827,0," are by definition in the same state.\n\n\\emph{Induction step:} Given histories $H_p$ and $H_q$ of length $n$, such that $H_p = \\langle o_1, \\dots, o_n \\rangle$ and $H_q "],[74994,1,""],[74994,0,"$ is a permutation of $H_q"],[75019,1,""],[75019,0,"p$, and such that applying $H_p$ results in the same document state as applying $H-Q"],[75101,2,""],[75101,0,"_q$, we can construct new histories of length $n+1$ by inserting a new operation $o_{n+1}$ in any "],[75192,7,""],[75192,0,"at any causally ready position in either $H_p$ or $"],[75225,8,""],[75225,0," "],[75136,0," $H_p'$ and $H_q'$"],[75254,0,"H_q$ respectively. We must then show that for all the histories $H_p'$ and $H_q'$ constructed this way, applying the operations in order results in the same final "],[75411,6,""],[75411,0,"document state."],[75371,0,"sequence of "],[75438,0,"\n\nIn order to prove the induction step, we examine the insertion of $o_{n+1}$ into $H_p$ and $H_q$. Each history can be split into a prefix, which is the minimal subsequence $\\langle o_1, \\dots, o_j \\rangle$ such that $o_{n+1}.\\mathit{deps} \\subseteq \\{o_1.\\mathit{id}, \\dots, o_j.\\mathit{id}\\}$, and a prefix, which is the remaining sequence $\\langle o_{j+1}, \\dots, o_n \\rangle$. The earliest position where $o_{n+1}$ can be inserted into the history is between the prefix and the suffix; the latest position is at the end of the suffix; or it could be inserted at any point within the suffix."],[75741,3,""],[75741,0,"suf"],[75772,0,"sub"],[76036,0,"\n\nWe show that the effect on the document state is the same, regardless of the position at which $o_{n+1}$ is inserted, and regardless of whether it is inserted ino"],[76199,1,""],[76199,0,"to $H_pR$"],[76206,2,""],[76206,0,"$ or $H-"],[76213,1,""],[76213,0,"_q$. We do this by showing that $o_{n+1}$ is commutative with respect to all operations in the suffix, i.e. with respect to all operations that are concurrent to $O-"],[76376,2,""],[76376,0,"o_{n+1}$. We demonstrate this commutativity case-by-case dependon"],[76439,2,""],[76439,0,"ing on the type of mutation in $o_{n+1}$: insertions in Lemma~\\ref{lem:insert-commute}, deletions in Lemma~\\ref{lem:delete-commute}"],[76490,1,""],[76534,1,""],[76568,0,", and assignment in Lemma~\\ref{lem:assign-commute}."],[82130,0,"\n\\begin{em"],[82138,2,""],[82138,0,"lemma}\\label{lem:delete-commute}\nConcurre"],[82171,8,""],[82171,0,"Deletion is commutative with respect to other concurrent operations.\n\\end{lemma}\n\n\\begin{lemma}\\label{lem:assign-commute}\nAssignment is commutative with respect to other concurrent operations."],[82335,6,""],[82210,6,""],[82352,0,"\\end{lemma}\n"],[82391,618,""],[82389,1041,""],[74572,0," The causality invariant is maintained by the \\textsc{Apply-*} rules."],[76700,0,"\n\nBefore we can prove the commutativity of insertion, deletion and assignment, we must first prove some preliminary lemmas."],[76792,0," define some more terms and"],[73117,0," Moreover, garbage collection (tombstone removal) is required in order to prevent unbounded growth of the datastructure."],[2143,0,"i, "],[2143,3,""],[2143,0,", on mobile systems which suu"],[2171,1,""],[2171,0,"ffer from periods of disconnectivity,"],[2155,7,""],[2155,0,"devices"],[2145,0,"dwd"],[2144,67,""],[2197,0,"i"],[2197,1,""],[2197,0," Merging "],[2198,8,""],[2198,0,"The merging"],[2198,11,""],[2198,0,"Our solution is particularly "],[2197,30,""],[2197,0,"\n%TODO mention here som"],[2217,3,""],[2217,0,"that we should support "],[2222,18,""],[2222,0,"this is particularly useful for mobile systems wich "],[2270,4,""],[2270,0,"hich also s"],[2275,6,""],[2275,0,"supp"],[2277,2,""],[2277,0,"ffer periods of disconnet"],[2301,1,""],[2301,0,"ctivity and also use multiple interfaces (which messess w"],[2354,4,""],[2354,0," "],[2354,1,""],[2354,0,"s with ordering)?"],[2683,0,"ico"],[2683,3,""],[2683,0,"collaborative "],[2682,14,""],[3040,0,"i"],[3040,1,""],[3040,0," with these applications as well as"],[3040,35,""],[3128,0,"\n"],[3128,0,"TODO"],[3128,0,"%"],[3133,0," This seems like a c"],[3152,1,""],[3152,0,"false dico"],[3161,1,""],[3161,0,"hotomy to me: some text documents are for a single user merged across ther"],[3234,1,""],[3234,0,"ir device"],[3216,27,""],[3216,0,", replicated across their device, yet "],[3250,4,""],[3250,0,"ajd"],[3251,2,""],[3251,0,"nd calendars are often collaborative..."],[3448,0,"dw"],[3448,30,""],[3448,0,"T"],[3496,0," serializability,"],[3674,4,""],[3681,0," availability"],[3859,2,""],[3859,0,"to"],[3869,2,""],[3869,0,"e"],[3868,2,""],[3868,0,"e"],[3899,9,""],[3913,4,""],[3913,0,"when"],[3918,0,"a "],[3935,2,""],[3935,0,"s"],[3934,1,""],[4129,0,"i"],[4129,1,""],[4129,0," and therefore should be"],[4154,0,"avoided whev"],[4165,1,""],[4165,0,"never possible.\n"],[4180,61,""],[4642,0,"\n%TODO while it is true t"],[4662,5,""],[4662,0,"echnically tru "],[4676,1,""],[4676,0,"e that we automatically merge conncurrent mods, we do this by introduct"],[4746,1,""],[4746,0,"ing multi-valued registered"],[4771,2,""],[4771,0,"s which the"],[4779,3,""],[4779,0,"then require application speicif"],[4807,4,""],[4807,0,"cific solutions (and possibly user intervention). Can we conveu"],[4869,1,""],[4869,0,"y this c"],[4876,1,""],[4876,0,"subtl"],[4880,1,""],[4880,0,"elty a"],[4880,6,""],[4880,0,"lety at this point?"],[9072,0,"xxx"],[9072,23,""],[9072,0,"iN"],[9072,1,""],[9140,1,""],[9140,0,"."],[9221,0,"\n"],[9141,80,""],[9142,10,""],[9142,0,"Consequently the long-term goal of our work is to"],[9200,4,""],[9264,0,"i"],[9264,1,""],[9264,0,"i"],[9264,1,""],[9264,0," by providing a "],[9279,1,""],[9279,0,"n algorith m"],[9289,2,""],[9289,0,"m "],[9279,12,""],[9279,0," general algorithm t"],[9298,1,""],[9298,0,"for confi"],[9306,1,""],[9306,0,"lict resolution"],[9321,1,""],[9321,0," with "],[9321,6,""],[9321,0,". Such al"],[9329,1,""],[9329,0,"n algorithm needs to be "],[9341,12,""],[9341,0,"must be amenable to "],[9321,40,""],[9321,0," that is amenable to embedding "],[9343,9,""],[9343,0,"napsulation inside a library"],[9322,41,""],[9322,0,"whose details can largely be in"],[9351,2,""],[9351,0,"hidden inside an easy-to-use softa"],[9384,1,""],[9384,0,"ware"],[9396,0,"."],[9912,0,"\n\n"],[9908,6,""],[9950,3,""],[9950,0,"by"],[12218,6,""],[12218,0,"support"],[12236,2,""],[12243,2,""],[12243,0,"cation"],[74029,0," Thank you to Diana Vasile for comments on a draft of this paper."],[74043,0,"Dominic Orchard and "],[1544,25,""],[1616,0,", it is unclear what the semantics should be"],[2493,0,"Operational "],[7799,6,""],[7799,0,"define"],[7822,5,""],[7830,2,""],[7830,0,"ing"],[25262,17,""],[25262,0,"is key-value t"],[25275,1,""],[25275,0,"structure is"],[25310,0,","],[37783,12,""],[37783,0,"evaluation rules of"],[37824,26,""],[37871,5,""],[37871,0,"they"],[46504,1,""],[46482,9,""],[46482,0,"rules"],[46561,0,"already "],[51693,10,""],[51693,0,"ir effect"],[73348,0," understand the expectations of application programmers and to design data structures that are minimal s"],[73450,2,""],[73450,0,"ly surprising under concurrent modification"],[73493,114,""],[73157,0,"ii"],[73157,2,""],[3157,0,"s"],[17640,0," be"],[17657,3,""],[1136,8,""],[1136,0,"Martin Kleppmann"],[1158,7,""],[1158,0,"lastair R. Beresford"],[1187,29,""],[1187,0,"Computer Laboratory, University of Cambridge, UK.\\\\"],[1237,1,""],[1237,0,"protect\\\\\nEmail: \\url{mk428@cl.cam.ac.uk}"],[1231,0," Computer Laboratory"],[1252,0," Canmb"],[1255,3,""],[1255,0,"mbridge,"],[1187,20,""],[1187,0,"M. Kleppmann and A. B"],[1206,2,""],[1206,0," Beresford are with the"],[1299,1,""],[1330,0,", \\url{arb33@cl.cam.ac.uk"],[1357,0,"}"],[1206,0,"R."],[1358,0,"."],[75198,0," $n$"],[75166,0," $H_p$"],[75219,0,":"],[76961,0," The prefix contains all causally "],[76986,0,"operations that "],[77011,0,"precede $o_{n+1}$, and possiby"],[77040,1,""],[77040,0,"ly some operations c"],[77059,1,""],[77059,0,"that are concurrent with $o_{n+1}$; the suffix contains only operations that are concurrent with $o_{n+1}$."],[77384,0," need to"],[77692,0,"="],[77690,3,""],[77690,0,"ny"],[78230,1,""],[78230,0,"j"],[78299,1,""],[78299,0,"j"],[78343,1,""],[78343,0,"j"],[78166,11,""],[78166,0," succession"],[78195,1,""],[78195,0,"j"],[78204,3,""],[78204,0,"suc"],[78230,1,""],[78230,0,"1"],[78435,3,""],[78435,0,"succ"],[78438,1,""],[78573,1,""],[78573,0,"2"],[78576,3,""],[78576,0,"suc"],[78588,1,""],[78588,0,"1"],[78673,1,""],[78673,0,"2"],[78681,3,""],[78681,0,"suc"],[78693,1,""],[78693,0,"1"],[79000,10,""],[79000,0,"succession"],[79108,10,""],[79108,0,"succession"],[79579,0," succeeds $k_1$"],[79548,15,""],[78210,1,""],[78209,0,"e"],[78440,0,"e"],[78558,8,""],[78558,0,"succeeds"],[78583,1,""],[78582,0,"e"],[78686,0,"e"],[78689,1,""],[78704,10,""],[78704,0,"later"],[79591,0," $k_2$ succeeds"],[79624,15,""],[79700,15,""],[79716,0," succeeds $k_1$"],[79735,0," $k_2$ succeeds"],[79768,15,""],[78179,0,"In the ordered list $\\mathit{ctx}$, "],[78215,1,""],[78215,0,"l"],[78268,35,""],[78283,0," list "],[78283,6,""],[78283,0,"s a (possibly empty) sequence of list elements"],[78154,23,""],[78154,0,"occurring after"],[78232,8,""],[78232,0,"occurs after"],[78484,4,""],[78232,6,""],[78232,0,"appears"],[78154,9,""],[78154,0,"appearing"],[78479,6,""],[78479,0,"appearing after"],[78626,8,""],[78626,0,"appears after"],[78607,8,""],[78607,0,"after"],[80804,8,""],[80804,0,"after"],[78733,8,""],[78733,0,"appears after"],[79052,10,""],[79052,0,"appears-after"],[79163,10,""],[79163,0,"appears-after"],[79623,8,""],[79623,0,"appears after"],[79665,8,""],[79665,0,"appears after"],[79789,8,""],[79789,0,"appears after"],[79819,8,""],[79819,0,"appears after"],[78385,1,""],[78385,0,"\\le"],[78390,0,"-1"],[78390,2,""],[78385,3,""],[78385,0,"<"],[79372,104,""],[80673,1,""],[80673,0,"2"],[80676,8,""],[80676,0,"appears after"],[80693,1,""],[80693,0,"1"],[80886,6,""],[80913,1,""],[80913,0,"sp"],[80914,1,""],[80914,0,"ome"],[80927,13,""],[80927,0,"after"],[80886,6,""],[80881,0,","],[80887,0,"therefore"],[80914,0,"is inserted "],[81506,14,""],[81524,0,"is never inserted "],[81562,12,""],[81562,0,"hat appears after"],[81598,0,"\n\n% TODO workin gp"],[81611,5,""],[81611,0," in progress here"],[81601,0,"%%%%%%%%%%%"],[81639,0," %%%%%%%%%%%%%%%%%%%%%"],[81598,0,"\n\n\\begin{lemma}\\label{lem:insert-reorder}\n\\end{lemma}"],[81640,0,"\n"],[81640,0,"An insertion operation can be re"],[81640,0,"In an operation history, "],[81665,1,""],[81665,0,"a"],[81697,0,"ordered with respect to concurrent insertion operations to the same list without affecting "],[81688,16,""],[81688,0,"is commutative"],[81767,19,""],[81767,0,"."],[81780,0,"\n\n\\begin{proof}\n\\end{proof}"],[81795,1,""],[81795,0,"\n\n"],[81796,0,"Consider the operation $o_{n+1}$ bbeing "],[81830,6,""],[81830,0,"eing reordered with respect to concurrent operations in a history. $o_{n+1}$ is inserted between some $k_1$ and $k_2$ on the replica where it originated. If any concurrent operation j"],[82012,1,""],[82012,0,"inserts at a position that is not between $k_1$ and $k_2$, then by Lemma~\\ref{insert-between} the operations cannot affect each other, and so they have the same effect regardless of their order."],[81983,0,"\n\n"],[81985,1,""],[82207,0," For the rest of this proof, consider"],[82236,0,"we "],[82247,0," only concurrent operations that are "],[82280,4,""],[82280,0,"insert at a position between $k_1$ and $k_2$."],[82091,0,"lem:"],[78436,0," Moreover, $j"],[78448,1,""],[78448,0,"k_j$ appears \\emph{immediately after}"],[78467,0,"appear"],[78467,6,""],[78485,0," $k_1$ if that sequence is empty, i.e. $\\mathit{ctx}(\\mathsf{next})"],[78551,1,""],[78551,0,"(k_1))$"],[78557,1,""],[78557,0," = k_j$."],[78523,0," if"],[78446,0," we say"],[81737,0,"\n\n\\e"],[81740,1,""],[81740,0,"begin{definition}[comman"],[81762,2,""],[81762,0,"on ancestor]\\label{def:common-ancestor}\n\\end{definition}"],[81801,0,"\nIn a history $H$, the \\emph{common ancestor} of two operations $o_1$ and $o_2$%"],[81880,1,""],[81880,0," is the l"],[81888,1,""],[81888,0,"document state that "],[81888,0,"m"],[81888,1,""],[81888,0,"latest "],[81915,0,"causally precedes both $o_1$ and $o_2$."],[81972,0,"\n\n"],[81973,0,"The common ancestor can be defined more formally as the document state resulting from applying a prefix of operations in $H$"],[82070,9,""],[82070,0,"sequence of"],[82093,2,""],[82093,0,"th"],[82092,3,""],[82092,0,", namely the shortest prefix of"],[82127,0," that satisfies "],[81992,0," of $O"],[81997,1,""],[81997,0,"o_1$ and $o_2$"],[81868,1,""],[81868,0,"r"],[81878,1,""],[81878,0,"s"],[81941,1,""],[81941,0,"r"],[81951,1,""],[81951,0,"s"],[82009,1,""],[82009,0,"s"],[81999,1,""],[81999,0,"r"],[81868,1,""],[81868,0,"s"],[81878,1,""],[81878,0,"t"],[81878,1,""],[81878,0,"s"],[81868,1,""],[81868,0,"r"],[82111,0," $\\a"],[82114,1,""],[82114,0,"langle o_1, \\dots, o_j \\rangle$"],[82145,1,""],[82146,6,""],[82146,0,"that is"],[82196,0,"$(o_r.\\mathit{deps} \\cup o_s\\.mathit{deps}) \\subseteq \\{o_1.\\mathit{id}, \\dots, o_j.\\mathit{id}\\}$."],[83103,539,""],[82224,0,"."],[82226,1,""],[82327,1,""],[82327,0,"-"],[82217,3,""],[82217,0,"cap"],[81853,0," concurrent"],[82307,0,"\n\n"],[82308,0,"\\begin{definition}[insertion interval\n"],[82345,1,""],[82345,0,"]\\label{def:insert-interval}\n\\end{definition}"],[82374,0,"\n"],[82374,0,"T"],[82374,1,""],[82374,0,"Given two insert"],[82384,6,""],[82384,0,"operations $o_r$ and $o_s$ that insert into the same list, the \\emph{insertion interval} of th"],[82476,2,""],[82476,0,"$o_r$ is the pair of keys $(k_r^\\mathit{before}, k_r&"],[82528,1,""],[82528,0,"^\\mathit{after})$"],[82534,2,""],[82534,0,"rm"],[82513,2,""],[82513,0,"rm"],[82545,0," "],[82383,0," concurrent"],[82557,0,"such that $k_r&"],[82571,1,""],[82571,0,"^\\mathi"],[82577,1,""],[82577,0,"rm{before}$"],[82566,0," $o_r.\\mathit{id}$ appears after"],[82620,0," when $o_r$ has been applied, $k_r&"],[82654,1,""],[82654,0,"^\\mathrm{after}$ appears after $k_"],[82686,2,""],[82686,0,"o_r.\\mathit{id}$ a"],[82703,1,""],[82703,0,"when $o_r$ has been applied, and $k_r^\\mathrm{after} appears immediately after $k_r&"],[82786,1,""],[82786,0,"^\\mathrm{before}$"],[82755,0,"$"],[82804,0," in the common ancestor of $o_r$ and $o_s$. The insertion interval of $o_s$ is the pair of keys $(k_s^\\mathrm{before}, k_s^\\mathrm{after})$ defined al"],[82952,2,""],[82952,0,"similarly."],[82980,0,"\n\n"],[82981,0,"If "],[82982,2,""],[82982,0,"t may be the case that $K"],[83006,1,""],[83006,0,"k_r^\\mathrm{before}$ or $k_s^\\be"],[83036,2,""],[83036,0,"mathrm{before}$ is \\"],[83055,1,""],[83055,0,"$\\"],[83055,2,""],[83055,0,"\\textsf{head} "],[83068,1,""],[83068,0,", and that $k_r^\\mathrm{after}$ or $\\k"],[83104,2,""],[83104,0,"k_s^\\mathrm{after}$ is '"],[83127,1,""],[83127,0,"\\textsf{tail}. i"],[83142,1,""],[83142,0,"In particular, this is the case if $o_r$ and $o_s$ have no common causal history, i.e. if $o_r\\"],[83236,1,""],[83236,0,".\\mathit{deps} \\cap o_s.\\mathit{deps} = \\{\\}$ and so the common ancestor is the empty document."],[83142,13,""],[83142,0,"For example"],[83142,187,""],[83141,1,""],[83206,0," $H$"],[83342,0,"\nGiven any two concurrent insertion operations in $H$, we must show that the docume"],[83388,0," $o_r, $o_s$"],[83437,0,"nt state does not depend on the order in which $o_r$ and $o_s$ are applied.\n"],[83512,0,"\n\nEither $o_r$ and $o_s$ ahve "],[83537,5,""],[83537,0,"have the same insertion interval as d"],[83573,1,""],[83573,0,"defined in Definition~\\ref{def:insert-interval}, or they have different insertion intervals. If the insertion intervals are different, then by Lemma~\\ref{lem:insert-between} the operations cannot affect each other, and so they have the same effect regardless of their order. For the rest"],[83848,12,""],[83848,0,"A"],[83848,1,""],[83848,0,"So we need to only analyze the case in which they have the same insertion interval $(k^\\mathrm{before}, k&^"],[83953,2,""],[83953,0,"^\\mathrm{after})$."],[83973,44,""],[83973,489,""],[83973,0,"We distinguish four cases, based on which of t"],[84018,1,""],[84018,0,"#"],[84018,1,""],[84018,0,"$o_r$ and $o_s$ has the greater operation ID (lampo"],[84064,5,""],[84064,0,"Lamport timestamp), and which one fo the "],[84098,7,""],[84098,0,"of the two operations is applied first. We then shows "],[84150,2,""],[84150,0," that the final order of elements in the list depends only on the operation ID (which is the same on allr "],[84254,2,""],[84254,0," replicas), and not on the order in which the operations are applied.\n\n\\begin{enumerate}\n\\end{enumerage}"],[84355,3,""],[84355,0,"te}"],[84342,0,"\n\\item x"],[83395,1,""],[83971,0,"\n\n"],[83972,0,"Without loss of generality, sasume th"],[84000,0,"a"],[84002,1,""],[84009,0,"at $o_r.\\mathit{id} < o_s.\\mathit{id}$ according the "],[84059,3,""],[84059,0,"o the ordering relation on Lamport timestamps. (If the "],[84110,4,""],[84110,0,"the operation ID of $o_r$ were greater, $o_r$ and $o_s$ could be swapped in this por"],[84192,2,""],[84192,0,"roof.) We now distinguish two cases:"],[84606,1,""],[84606,0,"$o_r$ is applied before $o_s$ in $H$.\n\\item $o_s$ is applied before $o_r$ in $H$."],[84230,352,""],[84140,0,"="],[84136,5,""],[84136,0,"is"],[84165,4,""],[84165,0,"an"],[83858,3,""],[84143,0," thatn $"],[84147,4,""],[84147,0,"n $o_s$"],[84295,0," Thus, when $o_s$ is applied, $o_r$ and any causap d"],[84344,3,""],[84344,0,"l dependencies of "],[84345,17,""],[84339,0,"insertions "],[84356,0,"ly prior to $o_r$ in the same insertion interval have already been applied."],[84475,0," Thus, weh"],[84483,2,""],[84483,0,"hen $o"],[84488,1,""],[84488,0,"o_r$ is applied, $o_s$ and any insertions causally prior to $o_s$ in the same insertion interval have alra"],[84593,1,""],[84593,0,"eady been applied."],[84407,2,""],[84407,0,"s"],[84330,74,""],[84302,0,"at the time "],[84419,0,"at the time "],[84368,0," Since $o_r$ has a lesser operation ID, the rule $\\m"],[84419,1,""],[84419,0,"textsc{Insert}_1$ applies with $\\mathit{next} = o_r.\\mathit{id}$ at the latest; it is not possible for $\\m"],[84524,1,""],[84524,0,"textsc{Insert}_2$%"],[84541,1,""],[84541,0," to "],[84497,0,", so the insertion position of $o_s$ must appear before $o_r$"],[84369,0,"When applying $o_s$, "],[84390,1,""],[84390,0,"s"],[84579,1,""],[84579,0,"."],[84581,1,""],[84581,0,"I"],[84627,0,"skip past $o_r."],[84641,1,""],[84641,0,"$."],[84851,0,"\n\nIn both cases, the insertion position of $o_r$ appears after the insertion position of $o_s$. T"],[84945,3,""],[84945,0,", which shows that $o_r$ and $o_s$ are commutative."],[84945,1,""],[84945,0,". Since the argument applies to all pairs of concurrent operations $o_r, $o_"],[85017,4,""],[85017,0," o_s$ in $H$, we deduce that the final order of elements in the list depends only on the operation IDs but not the order of application,"],[85171,15,""],[85171,0,"concurrent insertions to the same list"],[83141,0,"\n\n\\begin{lemma}\\label{lem:insert-conflict}\n\\end{lemma}"],[83184,0,"\n"],[83184,0,"In an operation history $H$, g"],[83213,1,""],[83184,0,"For any two concurrent insertion operations $o_r, o_s$ "],[83239,1,""],[83239,0,"i"],[83243,1,""],[83244,11,""],[83244,0,"h"],[83257,0,"if the operations have the same cursor ($o_r.\\mathit{cur} = o_s.\\mathit{cur}$), then the order at which the insertions are "],[83376,4,""],[83376,0,"appear in the list is independent of the order in which the operations are applied."],[83471,0,"\n\n\\begin{proof}\nTODO\n\\end{proof}"],[83352,2,""],[83334,1,""],[83260,37,""],[83314,0,"at"],[83333,4,""],[83333,0,"ed elements"],[83366,0," deterministic and"],[83473,0,"\nWithout loss of generality, assume that $o_r.\\mathit{id} < o_s.\\mathit{id}$ according to the ordering relation on Lamport timestamps. (If the operation ID of $o_r$ is great "],[83646,1,""],[83646,0,"er than that of $o_s$, the two operations can be swapped in this proof.) We now distinguish t"],[83738,1,""],[83738,0,"the two possible orderings "],[83760,5,""],[83760,0,"s of applying the operations:\n\n\\begin{enumerate}"],[83809,4,""],[83809,0,"\\end{enumerate}"],[83808,0,"\n\\item $o_r$ is applied before $o_s$ in $H$"],[83363,0," after applyint "],[83377,2,""],[83377,0,"g $H$"],[83429,35,""],[83429,0,"of $o_r$ and $o_s$ in $H$"],[83860,0,". Thus, at the time when $o_s$ is applied, $o_r$ has already been applied. When applying $o_s$, since $o_r$ has a lesser operation ID, the \\"],[83999,1,""],[83999,0,"rule $\\textsc{Insert}_1$ applies with $\\mathit{next} = o_r.\\mathit{id}$ at the latest, so the insertion position of $o_s$ must appear before $o_r$. It is not possible for Insert"],[84170,0,"$\\math"],[84172,4,""],[84172,0,"textsc{"],[84185,0,"}_2$ to skip past o"],[84203,1,""],[84203,0,"$o_r$.\n\n\\item $o_s$ is applied before $o_r$ in $H$. Thus, at the time when $o_r$ is applied, $o_s$ has already been applied. TODO"],[84328,4,""],[84328,0,"When applying $o_r$, the rule $\\textsc{Insert_"],[84373,1,""],[84373,0,"}_2$ applies with $\\mathit{next} = o_s.\\mathit{id}$ "],[84424,1,""],[84424,0,", so the rule skips over $o_s$ and "],[84444,4,""],[84444,0,"past"],[84459,0,"inserts $o_r$ at a position after $o_s$. Moreover, any list elements between $o_s.\\mathit{cur}$ and $o"],[84527,0," that appear"],[84573,0,"_s$ at the time of inserting $o_r$ must have a Lamport timestamp greater thatn"],[84649,2,""],[84649,0,"n $o_s.\\mathit{id}$, because "],[84670,8,""],[84670,0,"so $'"],[84674,1,""],[84674,0,"\\textsc{Insert}_2$ also skips over those list elements when inserting $o_r$. Thus, the insertion position of $o_r$ must be after $o_s$."],[84826,0,"\n"],[84826,0,"\nIn both cases, the insertion position of $o_r$ appears after the insertion position of $o_s$. "],[84919,2,""],[84827,14,""],[84827,0,"Thus,"],[84910,0,", regardless of the order in which the two operations are applied. S"],[84977,1,""],[84977,0,"The ordering depends only on the operation IDs, and since these IDs are fixed at the tom"],[85063,2,""],[85063,0,"ime the operations are generated, the list order is determined by the IDs."],[86861,94,""],[85977,882,""],[85977,0,"Either "],[85977,7,""],[85977,0,"If $o_r.\\mathit{cur} = o_s.\\mathit{cur}$, then by Lemma~\\ref{lem:insert-conflict}, the operations are commutative. If $o_r.\\mathit{cur} \\not= o_s.\\mathit{cur}$, TODO\\dots"],[86138,9,""],[86090,0,", and the operation with the greater operation ID appears first in the list"],[86060,36,""],[86129,0,", regardless of the order in which the operation "],[86177,1,""],[86177,0,"s are applied"],[86238,0,"then one or both of the cursors must refer to a list element that appears between $k^\\mathrm{before}$ and $k^\\mathrm{after}$, and that was inserted "],[86373,13,""],[86373,0,"did not yet exist in the common ancestor (Definition~\\ref{def:common-ancestor}).\n\n"],[86475,0," above"],[86455,0,"Take eith"],[86460,4,""],[86460,0,"a cursor that differs from $k^\\mathrm{before}$. "],[86506,2,""],[86506,0,", "],[86506,2,""],[86506,0,": the list element it refers to was itself inserted by an operation within the same insertion interval. "],[86578,2,""],[86573,33,""],[86573,0,", whose cursor in turn refers to another prior operation"],[86562,1,""],[86562,0," prior"],[86542,7,""],[86627,0,", and so on"],[86640,0,"Following this chain of cursors leads to an operation whose cursor refers t"],[86660,0," for a finite number of steps"],[86690,11,""],[86660,0," of cursors"],[86744,0,"o $k&"],[86748,1,""],[86748,0,"^\\mathrm{before}$. Note that "],[86765,0," "],[86765,1,""],[86765,0,", since an insertion operation always inserts at a position after the cursor"],[86722,0," $o_\\mathrm{first}$"],[86784,1,""],[86785,0,"("],[86860,0,")"],[86873,0,"all of the operations in this chain are causally dependent on "],[86862,1,""],[86862,0,"\n\n"],[86936,0,"$o_\\mathrm{first}$, and so they must have an oper"],[86979,6,""],[86979,0," Lamport timestamp greater than $o_\\mathrm{first}$. Thus, we can apply the same argument as in Lemma~\\ref{lem:insert-conflict}f"],[87105,1,""],[87105,0,": if $\\textsc{Insert}_2$ skips over the list element inserted by $o_\\mathrm{first}$, it will also skip over all of the list elements that are causally dependent on it"],[87269,2,""],[87269,0,"$o_\\mat"],[87269,7,""],[87269,0,"it; if $\\textsc{Insert}_1$ inserts a new element before $o_\\mathrm{first}$, it is also inserted before the chain of operations that is based on it."],[87418,0," "],[87418,0,"Therefore, the order of $o_r "],[87446,1,""],[87446,0,"$ and $o_s$ in the final list depends on the Lamport timestamp of the first operation that "],[87522,15,""],[87522,0,"insertion "],[87508,0,"s"],[87532,0,"s "],[87476,10,""],[87476,0,"is determined by"],[87540,0,"into the insertion interval after the common ancestor"],[87577,0,"ir"],[87595,1,""],[87595,0,", in the chain of cursor rev"],[87622,1,""],[87622,0,"ferences of "],[87609,0,"s"],[87635,0,"the two operations."],[88017,1484,""],[93641,3788,""],[90463,3177,""],[88131,0,"\n\n\\begin{proof}\n\\end{proof}"],[88146,0,"\nThe rules in Figure~\\ref{fig:clear_"],[88181,1,""],[88181,0,"-ruoes"],[88184,3,""],[88184,0,"les} define how a deletion operation is applied: starting at the cursor position identified in "],[88256,23,""],[88256,0,"in the operation, they recursively descend the tree"],[88220,0," $o_\\mathrm{del}$"],[88324,0,", removing $o_\\mathrm{del}.\\mathit{deps}$ from "],[88320,0,"sub"],[88374,0,"all bran"],[88373,0," the presence set $\\mathsf{pres}(k)$ at"],[88421,0,"ch nodes in the subtree"],[87952,63,""],[88381,0,", and updating all registers to remove any values written by operations in $o_\\mathrm{del}.\\mathit{deps}$."],[53419,0,", \\mathit{mut}"],[54991,9,""],[54991,0,"center"],[55361,9,""],[55361,0,"center"],[55355,0,"\n\\Displauy"],[55363,2,""],[55363,0,"yProof\\hspace{3em}\n%\n"],[55252,0,", \\mathit{mut}"],[55182,1,""],[55182,0,"Tr"],[54998,0,"\n\\AxiomC{$\\mathit{mut} \\not= \\mathsf{delete}$}"],[55445,0,"\\AxiomC{$\\mathit{mut} = \\mathsf{delete}$}\n\\"],[55210,0,"$"],[55226,0,"_1$"],[55492,0,"LeftLabel{$\\Text"],[55504,4,""],[55504,0,"textsc{Add-ID}_2$}\n\\UnaryInfC{$\\mathit{ctx},\\, \\mathsf{addId}(k_\\mathit{tag}, \\mathit{id}, \\mathit{mut}) \\evalto \\mathit{ctx}$}\n\\DisplayProof\\proofSkipAmount"],[55988,0,", \\mathsf{assign}(\\mathit{val})"],[56020,0,"\n   "],[56692,0,", \\mathsf{assign}(\\mathit{val})"],[56724,0,"\n   "],[57339,0,", \\mathsf{assign}(\\mathit{val})"],[57371,0,"\n   "],[78287,7,""],[78287,0,"reorder"],[59993,0,"$"],[60009,0,"_{1,2}$"],[88510,0,"\nGiven a deletion operation $o_d$ "],[88541,1,""],[88541,0,"\\mathrm{del}"],[88421,0,"In an operation history $H$, "],[88450,1,""],[88450,0,"d"],[88450,0,"a "],[88460,0," operation"],[88425,11,""],[88585,0,"and any other concurrent operation $o_c$\n"],[88576,2,""],[88576,0,"it"],[89007,2,""],[89007,0,"it"],[88709,2,""],[88580,3,""],[88571,8,""],[88693,6,""],[88694,3,""],[88808,3,""],[88799,8,""],[88969,8,""],[88970,3,""],[88614,0,", we must show that the document state after applying both operations does not depend on the order in which $o_d$ and $o_c$ were applied."],[89123,0," "],[89123,1,""],[89123,0,"\n\nSince $o_c$ is concurrent with $o_d$, we know that $o_c.\\mathit{id} \\notin o_d.\\mathit{deps}$. If $o_c$ is an assignment or insertion operation, the \\textsc{Assign}, \\textsc{Empty-Map} and \\textsc{"],[89289,1,""],[89289,0," rule adds $o_c.\\mathit{id}$ to he "],[89321,3,""],[89321,0,"the set of "],[89325,7,""],[89325,0,"mapping from operation ID to value for a register, and the \\textsc{Descend}, \\textsc{Assign},"],[89450,0,"Empty-List} rules add $o_c.\\mathit{id}$ to the presence sets $\\mathsf{pres}(k)$ along the path through the document tree described bh "],[89582,2,""],[89582,0,"y the cursor.\n\nSince $o_c$ is concurrent with $o_d$, we know that $o_c.\\mathit{id} \\notin o_d.\\mathit{deps}$."],[89125,95,""],[89596,0," Thus, if $o_c$ is applied before $o_d$ in h"],[89639,1,""],[89639,0,"the history"],[89500,0,"\n\nIf $o_c$ d"],[89509,0,".\\mathit{cur}"],[89525,0,"oes not fall within "],[89504,0," "],[89504,1,""],[89504,0," $o_d.\\mathit{cur}$ is not a prefix of"],[89561,22,""],[89561,0,", the o"],[89567,1,""],[89567,0,"operations affect disjoint subtrees of the document, and so they are trivially commutative. For the rest of this proof "],[89685,1,""],[89685,0,", we focus on the case where $o_d.\\mathit{cur} is "],[89731,4,""],[89731,0,"$ is a prefix of $o_c.\\mathit{cur}$."],[89917,0,", the \\textsc{Clear-*} rules applying $"],[89946,10,""],[89946,0,"evaluating $o_d$ will leave any occurrences of $o_c.\\mathit{id}$ undist"],[90011,0,"in the document state "],[90039,0,"urbed. The effect of of app"],[90060,6,""],[90060,0,"applying "],[89965,2,""],[89965,0,"ll"],[90069,0,"$o_c$ before $o_d$ is thus the same as applying $o_d$ before $o_c$, so the operations commute."],[89866,2,""],[89866,0,"erefore"],[90049,0,", while removing any occurrences of operations in $o_d.\\mathit{deps}$"],[89658,0," Any state changes by \\textsc{Descend} and $\\textsc{Add-ID}_1$ along the sh"],[89731,2,""],[89731,0,"shared part of the cursor path are applied using the set union operator $\\cup$, which is commutative.\n\n"],[89834,40,""],[89834,0,"Now consider"],[89915,2,""],[89915,0," "],[90266,1,""],[90266,0,"\n\n"],[90266,0,"\n\nIf $o_c$ is applied after $o_d$, "],[90274,1,""],[90274,0,"d"],[90288,5,""],[90288,0,"before"],[90298,1,""],[90298,0,"c"],[90302,0,"the effect on presence sets and registers is the same as if they had been execute"],[90376,7,""],[90376,0,"applied in the reverse order, due to the "],[90403,14,""],[90403,0,"r. Moreover "],[90414,1,""],[90414,0,", $o_c$ is still able to execute"],[90422,24,""],[90422,0,"applies in the same was"],[90444,1,""],[90444,0,"y as if $o_d$ had not been applied previously, because $o_d$ "],[90499,6,""],[90499,0,"a "],[90499,2,""],[90499,0,"$o_d$ "],[90499,6,""],[90499,0,"applying a deletion only modifies presence sets and registers, but does not actually remove any map keys or list items"],[90612,5,""],[90612,0,"elements."],[90620,0,", and because the rules for applying an operation are not conditional on the previous content of presence sets and registers"],[90562,12,""],[90562,0,"without"],[90584,1,""],[90584,0,"ing"],[90587,4,""],[90740,0,"Thus, "],[90746,1,""],[90746,0,"t"],[90790,5,""],[90988,2215,""],[90988,0,"\n"],[90995,11,""],[90995,0," include "],[91003,1,""],[91003,0,"appendix"],[631,10,""],[631,0,"includeappendix"],[648,10,""],[648,0,"includeappendix"],[74828,10,""],[74828,0,"includeappendix"],[90927,0,"In a history $H$, an "],[90948,1,""],[90948,0,"a"],[90958,0," operation"],[91034,0,"\n\n\\begin{proof}\n\\end{proof}"],[91049,0,"\nGiven an assignment $o_a$ and any other concurrent operation $o_c$, we must show that the document state after applying both operations does not depend on the order in which o"],[91224,1,""],[91224,0,"$o_a$ and $o_c$ were applied.\n\nThe rules \\textsc{Assign}, \\textsc{Empty-Map} and \\textsc{Empty-List} define how an assignment operation $o_a$ is applied, depending on the value being assigned. All three rules first clear any causally prior state from the cursor at which the assignment is occurring; by Lemma~\\ref{lem:delete-commute}, this clearing operation is commutative with concurrent operations, and leaves updates by concurrent operations untouched."],[91681,0,"\n"],[91681,0,"\n"],[33674,1,""],[33674,0,"Bi"],[33647,0,"\n\\AxiomC{$k_n \\not= \\mathsf{head}$}"],[91718,0,"The rules also add $o_a.\\mathit{id}$ to the presence set identified by the cursor, and \\textsc{Descend} adds $o_a.\\mathit{id}$ to the presence sets al"],[91866,2,""],[91866,0,"on the path from the root of the document tree described by the cursor. These state changes are applied using the set union operator $\\cup$, which is commutative.\n\nFinally "],[92037,1,""],[92037,0,", in the case where the assigned value is a primitive and the \\textsc{Assign} rule applies"],[92056,0," value assigned by $o_a$"],[92081,19,""],[92132,0,", the mapping from operation ID to value is added to the register using "],[92197,7,""],[92197,0,": #"],[92199,1,""],[92199,0,"$\\mathit{child}[\\,\\mathit{id} \\mapsto \\mathit{val}\\,]$."],[92197,1,""],[92197,0," by the expression"],[92271,0," Since operation IDs (Lamport timestamps) are unique, and concurrent deletion operations do not remove \\mathit{id} from the mapping, a concurrent operation cannot affect the mapping of #"],[92456,1,""],[92456,0,"$\\mathit{id}$."],[92271,0," "],[92271,1,""],[92469,0,", regardless of whether it is applied before or after"],[92427,6,""],[92427,0,"does"],[92520,0," $o_a$"],[92527,0,"\n\nIf $o_a.\\mathit{cursor} \\not= o_c.\\mathit{cursor}$, the updates "],[92585,8,""],[92585,0,"operations apply to "],[92531,0," $o_c$ is not an assignment operation or if"],[92639,9,""],[92639,0,"are independent and thus trivially commutative. If $o_a$ and $o_c$ are assignments to the same cursor, we use the fact that the order of updates to a partial function"],[92763,13,""],[92763,29,""],[92763,0,"$\\mathit{child}[\\,\\mathit{id}_1 \\mapsto \\mathit{val_"],[92814,1,""],[92814,0,"}_1\\,][,"],[92821,1,""],[92821,0,"\\,\\mathit{id}_2 \\mapsto \\mathit{val}_2\\,] = \\mathit{child}[\\,\\mathit{id}_2 \\mapsto \\mathit{val}_2\\,]["],[92820,0,"\\,"],[92923,0,"\\,"],[92926,0,"\\,\\mathit{id}_1 \\mapsto \\mathit{val}_1]"],[92964,1,""],[92964,0,"\\,]$ provided that $\\mathit{id}_1 \\not= \\mathit{kid"],[93012,3,""],[93012,0,"id}_2$."],[92374,0,"$"],[92386,0,"$"],[92755,9,""],[92755,0,"commutativity of indepd"],[92777,1,""],[92777,0,"endent updates to a partial function:"],[93071,0,"\n\nThus, for all "],[93079,8,""],[93079,0,"all parts of the process of applying $o_c"],[93119,1,""],[93119,0,"a$ have the same effect, regardless of whether $o_c$ was applied before or after $o_a$."],[93142,0," on the document state"],[93194,3,""],[93194,0,"is"],[93226,0,", so the opp"],[93237,1,""],[93237,0,"erations commute"],[93071,0," Since operation IDs (Lamport timestamps) are unique, two concurrent assignments add two different keys to the mapping."],[93189,0,", and their order is immaterial"],[92272,259,""],[92429,1,""],[92429,0,"\n\n"],[92514,12,""],[93146,0,"\n\n\\begin{lemma}\\label{lem:op-commute}\n\\end{lemma}"],[93183,0,"\ninsertion to the same list: Lemma~\\ref{lem:insert-reorder}; deletion: Lemma~\\ref{:"],[93265,1,""],[93265,0,"lem:delete-commute}; assignment: Lemma~\\ref{lem:assign-commute}."],[78214,0,", in Lemma~\\ref{"],[78058,0," in Lemma~\\ref{lem:op-commute}"],[78244,251,""],[78244,0,"."],[78300,34,""],[78300,0,"operations"],[92955,0,"\n\\end{lemma}\n\n\\begin{proof}"],[93134,5,""],[93134,0,"proof"],[92956,0,"\n"],[92956,0,"Given an operation historh $"],[92981,3,""],[92981,0,"y $H=\\langle o_1, \\dots, o_n \\rangle$, a new operation "],[93018,0," from a valid execution"],[93059,0,"$o_{n+1}$ from that execution can be inserted at any point in $H$ where the causal dependencies "],[93124,31,""],[93124,0," after $o{"],[93133,1,""],[93133,0,"_{n+1}.\\mathit{deps}$ have been applied. T"],[93174,1,""],[93174,0,"All resulting "],[93177,11,""],[93177,0," histories that "],[93174,0,"For "],[93178,1,""],[93178,0,"a"],[93197,0,"can be constructed this way, the document state resulting from "],[93192,0,"$H'$ "],[93265,0,"applying the operations in $H'$ in order is the same, and independent of the ordering of any concurrent operations in $H$."],[93414,0,"\n\n"],[93415,0,"We prove the lemma case-by-case, depending on the thype "],[93466,5,""],[93466,0,"ype of mutation in $o_{n+1}$. "],[93414,0,"\n$H$ can be split into a prefix and a suffix, as described in the proof of Theorem~\\ref{thm:convergence}. We allow $o_{n+1}$ to be inserted at any point after the prefix, "],[93519,0," The suffix contains only operations that are concurrent with $o_{n+1}$."],[93590,3,""],[93590,0,", and w"],[93659,2,""],[93659,0,". "],[93661,1,""],[93663,0," then"],[93748,0,"\n\n"],[93749,0,"If $o_n{"],[93755,2,""],[93755,0,"{n+1}$ is a deletion, by Lemma~\\ref{lem:delete-commute} it is concurrent with all ope"],[93819,21,""],[93819,0,"mmutative with all operations in the suffix, and so $#"],[93872,1,""],[93872,0,"o_{n+1}$ can be inserted at any point within, before, or after the suffix without changing itse"],[93966,1,""],[93966,0," effect on the final document state. Similarly, if $o_{n+1}$ is an assignment, by Lemma~\\ref{lem:assign-commute} it is commutative with all operations in the suffix.\n\nIf $o_["],[94139,1,""],[94139,0,"{n+1}$ is an insertion, let $o_c$ be any operation in the suffix, and consider the cases wheth"],[94228,5,""],[94228,0,"of $o_{n+1}$ being inserted before and after $o_c$ in the history. If $o_c$ is a deletion or assignment, it is commutative with $o_{n+1}$ by Lemma~\\ref{lem:ass"],[94384,3,""],[94384,0,"delete-commute} or Lemma~\\ref{lem:assign-commute} respectively. If $o_c$ is an insertion into a different list in the document, its effect is independent from $o_{n+1}$ and so the two operations can be applied in any order. If $o_c$ is an insertion into "],[94510,0," tha"],[94510,4,""],[94510,0," "],[94510,1,""],[94447,0," If $o_c$ is an insertion into the same list as $o_{n+2"],[94501,1,""],[94501,0,"1}$, then by Lemma~\\ref{lem:insert-reorder} the operations are commutative."],[94736,31,""],[94738,145,""],[94738,0,"Thus, the "],[94743,5,""],[94743,0," $o_{n+21"],[94750,2,""],[94750,0,"1}$ is commutative with respect to any concurrent operation in $H$, and therefore "],[94844,0,"\n\nThis completes the induction step in the proof of Theorem~\\ref{thm:convergence}, and thus proves convergence of our datatype."],[94832,0,"$"],[94816,6,""],[94816,0,". "],[94818,1,""],[94818,0,"T"],[94827,0,","],[94830,0,"o_{n+1}$ can be inserted at any point after p"],[94874,1,""],[94874,0,"its causal dependencies, and the "],[94854,0," into $H$"],[94916,0,"effect on the final document state is independent of the position at which the operation is inserted."],[4606,25,""],[4606,0,"supports "],[4833,256,""],[4668,0,"i "],[4668,2,""],[4668,0," As we shall see later, in some cases we need to support"],[4706,18,""],[4706,0,"support a"],[4692,23,""],[4692,0,"our approach requires the use of a multi-va"],[4734,1,""],[4734,0,"alue regite"],[4743,2,""],[4743,0,"ster"],[4705,42,""],[4705,0,"may require a multi-vale"],[4727,2,""],[4727,0,"lue resg"],[4733,2,""],[4733,0,"gister to record potential conflicts"],[4704,0," typically s"],[4715,1,""],[4715,0,"supports the mergin"],[4728,6,""],[4728,0,"automatic merging of modifications into a JSON data structure. Oura "],[4794,2,""],[4794,0," approach"],[4804,3,""],[4804,10,""],[4804,0,"introduces a"],[4847,10,""],[4856,1,""],[4856,0,"ing udp"],[4861,2,""],[4861,0,"pdates "],[4804,10,""],[4804,0,"uses"],[4861,0," to leaf"],[4749,0,"concurrent "],[4815,7,""],[4815,0,"introduces a general mechansim (a "],[4869,0,")"],[4908,0," nd"],[4910,1,""],[4910,0,"odes, providing a general abstraction for "],[4914,0," in the J"],[4922,1,""],[4922,0,"Ja"],[4923,1,""],[4923,0,"SON data structure"],[4975,4,""],[4975,0,"met"],[4977,1,""],[4977,0,"chansism"],[4983,2,""],[4983,0,"ms which "],[4984,8,""],[4984,0," which applications can then resolve either auth"],[5031,1,""],[5031,0,"omt"],[5033,1,""],[5033,0,"atically or manually depending on their semantics."],[4943,31,""],[4943,0,"this"],[4958,5,""],[4958,0,"then proi"],[4966,1,""],[4966,0,"vides a strctu"],[4977,3,""],[4977,0,"ucture on which"],[5023,6,""],[5023,0,"such conflicts"],[5051,0,","],[5064,0,","],[5261,1,""],[4941,1,""],[4941,0,"."],[4943,1,""],[4943,0,"T"],[4974,9,""],[4974,0,"consistent basis"],[5016,5,""],[5024,5,""],[5024,0," any remaining"],[5049,27,""],[5049,0,"throug "],[5055,1,""],[5055,0,"h automatic or manual means"],[5082,29,""],[5066,0," (programmatic)"],[5057,27,""],[5057,0,"programmatic means or"],[5079,12,""],[5079,0,"further user input"],[5079,0,"via "],[4802,12,""],[4802,0,"We"],[4814,1,""],[4859,0," into our model"],[4816,0," single,"],[5087,0,","],[6881,12,""],[6881,0,"describe four more complex"],[7929,3,""],[7929,0,"or"],[7929,0,"and"],[7929,5,""],[7929,0,"as well as"],[8014,12,""],[8014,0,". T"],[16732,5,""],[16733,1,""],[16733,0,"``"],[16738,1,""],[16738,0,"''"],[16741,0," "],[16742,1,""],[16742,0,"z"],[16742,1,""],[16742,0,"``"],[16745,1,""],[16745,0,"''\\"],[16749,1,""],[16780,5,""],[16781,1,""],[16781,0,"``"],[16786,1,""],[16786,0,"''"],[16789,0," "],[16790,1,""],[16790,0,"``"],[16793,1,""],[16793,0,"''\\"],[16797,1,""],[16844,1,""],[16843,0,"\\"],[16842,1,""],[16842,0,"''"],[16840,1,""],[16840,0," ``"],[16838,1,""],[16838,0,"''"],[16834,1,""],[16834,0,"``"],[16828,5,""],[16874,5,""],[16921,5,""],[16875,1,""],[16875,0,"``"],[16923,1,""],[16923,0,"''"],[16880,1,""],[16880,0,"``"],[16880,2,""],[16880,0,"''"],[16924,2,""],[16924,0,"``"],[16929,1,""],[16929,0,"''"],[16932,0," "],[16883,0," "],[16885,1,""],[16885,0,"``"],[16936,1,""],[16936,0,"``"],[16888,1,""],[16888,0,"''"],[16940,1,""],[16940,0,"''"],[16943,1,""],[16891,1,""],[16891,0," ``"],[16945,0," ``"],[16949,1,""],[16949,0,"''"],[16895,1,""],[16895,0,"''\\"],[16899,0,"\\"],[16901,1,""],[16955,1,""],[16954,0,"\\"],[16953,0,"\\"],[17015,14,""],[17104,14,""],[16725,1,""],[16725,0,"0"],[16718,0,"1"],[16720,1,""],[16751,0,"\n\\node (start2) at (4,3) {\\{``key'' "],[16786,1,""],[16786,0,": ``A'']"],[16793,1,""],[16793,0,"\\}};"],[17029,0,"1"],[16713,6,""],[16713,0,"left0"],[16758,6,""],[16758,0,"right1"],[16763,1,""],[16763,0,"0"],[17023,6,""],[17023,0,"left0"],[17111,5,""],[17111,0,"right0"],[16929,0,"\\"],[16986,0,"\\"],[17270,0,",dashed"],[17316,0,"dashed,"],[17526,0,"*"],[16667,0,"*"],[16727,1,""],[16727,0,"4"],[16773,1,""],[16773,0,"4"],[16819,3,""],[16819,0,"2"],[16865,3,""],[16865,0,"2"],[17419,0,"\n"],[17419,1,""],[16706,0,"\n\\path [draw="],[16718,1,""],[16718,0,"] (2,0) -- (2,4);"],[16718,0,",dash"],[16720,3,""],[16720,0,"otted"],[17004,1,""],[17004,0,"1"],[16947,1,""],[16947,0,"1"],[16901,1,""],[16901,0,"3"],[16855,1,""],[16855,0,"3"],[16809,1,""],[16809,0,"4"],[16809,1,""],[16809,0,"5"],[16763,1,""],[16763,0,"5"],[16757,0," "],[16739,1,""],[16739,0,"6"],[16742,0,"\n\\node (rep"],[16750,3,""],[16750,0,"leftR)  at (0,6) {Rp"],[16769,1,""],[16769,0,"eplica p"],[16776,1,""],[16776,0,"$p_1$:}\n\\node (rightR) at (4,6) {Replica $p_2$:}"],[16848,0," [rectangle,draw]"],[16911,0," [rectangle,draw]"],[16974,0," [rectangle,draw]"],[17037,0," [rectangle,draw]"],[17100,0," [rectangle,draw]"],[17174,0," [rectangle,draw]"],[16783,0,";"],[16825,0,";"],[16778,2,""],[16817,3,""],[16817,0,"q"],[17435,30,""],[17568,31,""],[16737,1,""],[16737,0,"3"],[16728,1,""],[16728,0,"3"],[16802,1,""],[16802,0,"6"],[16905,1,""],[16905,0,"6"],[17031,1,""],[17031,0,"6"],[17168,1,""],[17168,0,"6"],[17486,0,".north east"],[17542,0,".north west"],[17427,7,""],[17427,0,"--"],[17471,2,""],[17471,0,"--"],[17528,2,""],[17528,0,"--"],[17577,7,""],[17577,0,"--"],[17488,4,""],[17488,0,"west"],[17544,4,""],[17544,0,"east"],[17469,0,".south east"],[17537,0,".south west"],[17222,0,"\n\\node (comms)  at (3,2.5) {network communication};"],[17257,0,"\\\\"],[17259,1,""],[17250,0,"\\footnotesize "],[17271,2,""],[17271,0," "],[17246,1,""],[17246,0,"8"],[17524,0,"blue,"],[17596,0,"blue,"],[17248,0," [text=blue]"],[16731,0,".5"],[16742,0,".5"],[19807,31,""],[19851,31,""],[19789,0,",dashed,blue"],[19844,0,",dashed,blue"],[19787,3,""],[19839,3,""],[19798,0,",->"],[19853,0,",->"],[19341,5,""],[19389,5,""],[19389,0,"{"],[19342,1,""],[19342,0,"``"],[19391,1,""],[19391,0,"``"],[19398,1,""],[19398,0,"''"],[19350,1,""],[19350,0,"''"],[19354,0,"\\"],[19356,1,""],[19356,0,"``"],[19361,1,""],[19361,0,"''"],[19365,1,""],[19365,0,"``"],[19374,1,""],[19374,0,"''"],[19408,1,""],[19408,0,"``"],[19417,1,""],[19417,0,"''\\"],[19421,0,"\\"],[19423,1,""],[19377,1,""],[19394,2,""],[19258,7,""],[19258,0,"``"],[19265,1,""],[19265,0,"''"],[19269,1,""],[19269,0,"``"],[19278,1,""],[19278,0,"''\\"],[19282,0,"\\"],[19284,1,""],[19240,1,""],[19238,1,""],[19238,0,"''"],[19230,1,""],[19230,0,"``"],[19227,1,""],[19227,0,"''"],[19223,1,""],[19223,0,"``"],[19222,0,"\\"],[19219,1,""],[19219,0,"''"],[19212,1,""],[19212,0,"``"],[19206,5,""],[19119,5,""],[19120,1,""],[19120,0,"``"],[19128,1,""],[19128,0,"''"],[19132,0,"\\"],[19134,1,""],[19134,0,"``"],[19141,1,""],[19141,0,"''"],[19145,1,""],[19145,0,"``"],[19154,1,""],[19154,0,"''\\"],[19158,0,"\\"],[19160,1,""],[19087,1,""],[19086,0,"\\"],[19085,0,"\\"],[19084,0,"\\"],[19074,1,""],[19074,0,"``"],[19082,1,""],[19082,0,"''"],[19068,5,""],[19032,1,""],[19031,0,"\\"],[19030,0,"\\"],[19029,1,""],[19029,0,"''"],[19021,1,""],[19021,0,"``"],[19008,7,""],[19008,0,"``"],[19013,1,""],[19013,0,"''"],[18955,5,""],[18956,1,""],[18956,0,"``"],[18964,1,""],[18964,0,"''"],[18968,0,"\\"],[18970,1,""],[18970,0,"``"],[18976,1,""],[18976,0,"''"],[18980,1,""],[18980,0,"``"],[18989,1,""],[18989,0,"''"],[18992,1,""],[18905,1,""],[18904,0,"\\"],[18903,0,"\\"],[18902,1,""],[18902,0,"''"],[18894,1,""],[18894,0,"``"],[18891,1,""],[18891,0,"''"],[18886,1,""],[18886,0,"``"],[18875,1,""],[18875,0,"``"],[18883,1,""],[18883,0,"''"],[18887,0,"\\"],[18869,5,""],[18896,0,"\\"],[18986,0,"\\"],[19025,0,"\\"],[19152,0,"\\\\"],[19153,1,""],[19241,0,"\\\\"],[19283,0,"\\"],[19242,1,""],[19378,0,"\\"],[19419,0,"\\"],[19501,14,""],[19612,14,""],[18851,5,""],[18851,0,"left0"],[18862,1,""],[18862,0,"0"],[18912,0,"\n\\node (right0) at (8,4) {["],[18858,0," "],[18939,1,""],[18939,0,"\\{``colors'': \\{``blue'': ``\\#0000ff''\\}\\}};"],[19531,5,""],[19531,0,"left0"],[19642,5,""],[19642,0,"right0"],[19649,1,""],[19871,5,""],[19921,5,""],[19944,0,"dashed,blue,-"],[19956,1,""],[19893,12,""],[19843,12,""],[19971,0,"dashed,blue,"],[19761,14,""],[18867,0," [rectangle,draw]"],[18954,0," [rectangle,draw]"],[19049,0," [rectangle,draw]"],[19193,0," [rectangle,draw]"],[19260,0," [rectangle,draw]"],[19356,0," [rectangle,draw]"],[19510,0," [rectangle,draw]"],[20047,0,".south east"],[20110,0,".south west"],[20071,0,".north west"],[20143,0,".north east"],[18950,1,""],[18950,0,"6"],[19189,1,""],[19189,0,"6"],[19254,1,""],[19254,0,"6"],[19506,1,""],[19506,0,"6"],[18843,0,"\n\\path [draw,dotted] (3,-0.5) -- (3,5);"],[19295,3,""],[19295,0,"2"],[19230,1,""],[19230,0,"4"],[18991,1,""],[18991,0,"6"],[18904,1,""],[18904,0,"6"],[19086,1,""],[19086,0,"3"],[18842,0,",scale=0.8"],[16705,0,",scale=0.8"],[16816,1,""],[16816,0,"8"],[16919,1,""],[16919,0,"8"],[17045,1,""],[17045,0,"8"],[17182,1,""],[17182,0,"8"],[17256,1,""],[17256,0,"4"],[18885,1,""],[18885,0,"4"],[18897,1,""],[18897,0,"4"],[18888,3,""],[18888,0,"1"],[18897,1,""],[18897,0,"6.5"],[19009,1,""],[19009,0,"8"],[19248,1,""],[19248,0,"8"],[19313,1,""],[19313,0,"8"],[19563,1,""],[19563,0,"8"],[20865,0,",scale=0.8"],[20904,6,""],[20904,0,"\\"],[20906,0,"\\"],[20908,1,""],[20884,5,""],[20884,0,"left0"],[20910,0,"\n\\node (right0) at (8,6.0) {\\{\\}};"],[20896,1,""],[20896,0,"0"],[21431,5,""],[21431,0,"left0"],[21534,5,""],[21534,0,"right0"],[21541,1,""],[19840,16,""],[19728,17,""],[19729,0," "],[17352,14,""],[17428,14,""],[17352,0,", inner sep=8pt"],[17353,1,""],[17442,0,",inner sep=8pt"],[20941,5,""],[20942,1,""],[20942,0,"``"],[20947,1,""],[20947,0,"''"],[20950,0," "],[20953,0,"\\"],[20955,1,""],[21000,0,"\\"],[20998,0," "],[20996,1,""],[20996,0,"''"],[20992,1,""],[20992,0,"``"],[20986,5,""],[21032,5,""],[21033,1,""],[21033,0,"``"],[21081,5,""],[21135,5,""],[21183,5,""],[21239,5,""],[21308,5,""],[21082,1,""],[21135,1,""],[21182,1,""],[21237,1,""],[21305,1,""],[21082,0,"``"],[21137,0,"``"],[21186,0,"``"],[21243,0,"``"],[21313,0,"``"],[21038,1,""],[21038,0,"''"],[21088,1,""],[21088,0,"''"],[21144,1,""],[21144,0,"''"],[21194,1,""],[21194,0,"''"],[21252,1,""],[21252,0,"''"],[21323,1,""],[21323,0,"''"],[21041,0," "],[21092,0," "],[21149,0," "],[21200,0," "],[21259,0," "],[21331,0," "],[21043,1,""],[21043,0,"``"],[21095,1,""],[21095,0,"``"],[21153,1,""],[21153,0,"``"],[21205,1,""],[21205,0,"``"],[21265,1,""],[21265,0,"``"],[21338,1,""],[21338,0,"``"],[21049,1,""],[21049,0,"''"],[21102,1,""],[21102,0,"''"],[21105,0," "],[21106,1,""],[21106,0,"``"],[21111,1,""],[21111,0,"''"],[21164,1,""],[21164,0,"''"],[21217,1,""],[21217,0,"''"],[21220,0," "],[21221,1,""],[21221,0,"``"],[21228,1,""],[21228,0,"''"],[21281,1,""],[21281,0,"''"],[21284,0," "],[21285,1,""],[21285,0,"``"],[21290,1,""],[21290,0,"''"],[21293,0," "],[21294,1,""],[21294,0,"``"],[21300,1,""],[21300,0,"''"],[21303,0," "],[21304,1,""],[21304,0,"``"],[21311,1,""],[21311,0,"''"],[21364,1,""],[21364,0,"''"],[21367,0," "],[21368,1,""],[21368,0,"``"],[21373,1,""],[21373,0,"'' "],[21375,1,""],[21376,0," "],[21377,1,""],[21377,0,"``"],[21383,1,""],[21383,0,"''"],[21386,0," "],[21387,1,""],[21387,0,"``"],[21394,1,""],[21394,0,"''"],[21397,0,"\\"],[21314,0,"\\"],[21316,1,""],[21399,1,""],[21232,1,""],[21231,0,"\\"],[21168,1,""],[21167,0,"\\"],[21115,1,""],[21114,0,"\\"],[21053,1,""],[21052,0,"\\"],[21000,1,""],[21440,17,""],[21527,16,""],[21442,0," "],[21444,14,""],[21517,14,""],[21591,14,""],[21680,14,""],[21770,14,""],[21845,14,""],[21909,36,""],[21947,36,""],[21970,0,"dashed,blue,"],[22021,0,"dashed,blue,"],[20870,0," [rectangle,draw]"],[20921,0," [rectangle,draw]"],[20972,0," [rectangle,draw]"],[21034,0," [rectangle,draw]"],[21096,0," [rectangle,draw]"],[21166,0," [rectangle,draw]"],[21246,0,"[rectangle,draw] "],[21315,0," [rectna"],[21321,2,""],[21321,0,"angle,draw]"],[21397,0," "],[21397,1,""],[21397,0,"[rectangle,draw] "],[21496,0," [rectangle,draw]"],[21493,2,""],[21393,2,""],[21311,3,""],[21311,0,"2"],[21241,3,""],[21241,0,"4"],[21162,3,""],[21162,0,"2"],[21092,3,""],[21092,0,"4"],[21030,3,""],[21030,0,"6"],[20968,3,""],[20968,0,"6"],[20917,3,""],[20917,0,"8"],[20866,3,""],[20866,0,"8"],[20913,1,""],[20913,0,"10"],[20864,0," "],[20964,0," "],[21025,1,""],[21025,0,"20"],[21025,2,""],[21025,0,"10"],[21086,0," "],[21086,1,""],[21085,0," "],[20964,1,""],[20963,0," "],[20864,1,""],[20863,0," "],[21154,0," "],[21233,1,""],[21233,0,"10"],[21302,1,""],[21302,0,"20"],[21302,2,""],[21302,0,"10"],[21381,0," "],[21481,1,""],[21481,0,"10"],[22152,0,".south east"],[22176,0,".south west"],[22226,0,".north west"],[22233,4,""],[22233,0,"east"],[22248,0,".no"],[22177,5,""],[22177,0,"north"],[22227,5,""],[22227,0,"south west"],[22237,5,""],[22251,0,"rth east"],[20844,0,"\n\\path [draw,dotted] (5,-0.5) -- (5,8.5);"],[22199,5,""],[22268,5,""],[22204,0," [out=180]"],[22282,0," [out=180]"],[22210,2,""],[22210,0,"9"],[22287,2,""],[22287,0,"9"],[22287,1,""],[22287,0,"27"],[22210,1,""],[22210,0,"27"],[22213,0,",in=45"],[22297,0,",in=135"],[22217,2,""],[22217,0,"135"],[22302,3,""],[22302,0,"45"],[20078,5,""],[20147,5,""],[20083,0," [out=270,in=135]"],[20168,0," [out"],[20172,1,""],[20172,0,"="],[20172,1,""],[20172,0,"t=278"],[20176,1,""],[20176,0,"0,in=45] "],[22330,0," "],[19315,1,""],[19315,0,"3"],[19250,1,""],[19250,0,"5"],[19106,1,""],[19106,0,"4"],[19011,1,""],[19011,0,"7"],[18924,1,""],[18924,0,"7"],[18897,1,""],[18897,0,"7"],[17578,2,""],[17578,0," to "],[17581,1,""],[17652,2,""],[17652,0,"to"],[17581,0," [out=280"],[17587,3,""],[17587,0,"180]"],[17571,5,""],[17650,5,""],[17654,0," [out="],[17659,1,""],[17659,0,"=180]"],[17585,0,",in=135"],[17670,0,",in=45"],[17677,0," "],[17260,1,""],[17260,0,"5"],[17582,2,""],[17582,0,"27"],[17667,2,""],[17667,0,"27"],[17110,1,""],[17110,0,"0.5"],[17186,1,""],[17186,0,"0.5"],[16738,1,""],[16738,0,"4"],[16741,2,""],[16747,1,""],[16747,0,"4"],[17261,2,""],[17109,2,""],[17183,2,""],[16740,0,"-"],[16742,0,".5"],[17259,1,""],[17259,0,"1.8"],[19714,0,"\n\\node (comms)  at (4,1.8) [text=blue] {\\footnotesize network communication};"],[19729,1,""],[19735,3,""],[19735,0,"2.5"],[19736,2,""],[19736,0,".1"],[21727,0,"\n\\node (comms) at ("],[21745,1,""],[21745,0," "],[21742,0," "],[21746,1,""],[21746,0," (5,1.8) [text=blue] {\\footnotesize network communication};"],[21752,1,""],[21752,0,"2"],[21752,1,""],[21752,0,"4"],[17261,1,""],[17261,0,"6"],[23374,0,",scale=0.8"],[23407,3,""],[23407,0,"4"],[23490,3,""],[23490,0,"2"],[23537,3,""],[23537,0,"2"],[23620,2,""],[23681,2,""],[23412,5,""],[23490,5,""],[23532,5,""],[23609,5,""],[23665,5,""],[23413,1,""],[23413,0,"``"],[23492,1,""],[23492,0,"``"],[23535,1,""],[23535,0,"``"],[23613,1,""],[23613,0,"``"],[23670,1,""],[23670,0,"``"],[23419,1,""],[23419,0,"''"],[23499,1,""],[23499,0,"''"],[23543,1,""],[23543,0,"''"],[23622,1,""],[23622,0,"''"],[23680,1,""],[23680,0,"''"],[23424,0,"\\"],[23426,1,""],[23426,0,"``"],[23433,1,""],[23433,0,"''"],[23437,1,""],[23437,0,"``"],[23447,1,""],[23447,0,"''"],[23451,1,""],[23451,0,"``"],[23457,1,""],[23457,0,"''"],[23466,0,"\\"],[23469,0,"\\"],[23471,1,""],[23514,1,""],[23513,0,"\\"],[23556,0,"\\"],[23558,1,""],[23558,0,"``"],[23565,1,""],[23565,0,"''"],[23569,1,""],[23569,0,"``"],[23579,1,""],[23579,0,"''"],[23583,1,""],[23583,0,"``"],[23589,1,""],[23589,0,"''"],[23597,0,"\\"],[23600,0,"\\"],[23602,1,""],[23643,0,"\\"],[23702,0,"\\"],[23645,1,""],[23645,0,"``"],[23705,1,""],[23705,0,"``"],[23651,1,""],[23651,0,"''"],[23713,0,"="],[23712,2,""],[23712,0,"''"],[23659,0,"\\"],[23721,0,"\\"],[23662,0,"\\"],[23725,0,"\\"],[23727,1,""],[23664,1,""],[23768,17,""],[23769,0," "],[23868,16,""],[23772,14,""],[23857,14,""],[23954,3,""],[23940,33,""],[23978,36,""],[24001,0,"dashed,blue,"],[24052,0,"dashed,blue,"],[24023,0,".south"],[24081,0,".south"],[24034,0," [out=280"],[24041,2,""],[24041,0,"70]"],[24043,1,""],[24043,0,",in=135]"],[24108,0," [out=270,in=45] "],[24059,0,".north west"],[24143,0,".north east"],[23409,0," [rectangle,draw]"],[23514,0," [rectangle,draw]"],[23575,0," [rectangle,draw]"],[23679,0," [rectangle,draw]"],[23758,0," [rectangle,draw]"],[23405,1,""],[23405,0,"0"],[23407,1,""],[23407,0,"4"],[23490,0,"\n\\node (right0)"],[23393,5,""],[23393,0,"left0"],[23505,0," at (8,4) [rectangle,draw] {\\{``todo'': [\\{``title'': ``buy milk'', ``done'': false\\}]\\}]"],[23593,1,""],[23593,0,"}'"],[23594,1,""],[23594,0,";"],[23937,5,""],[23937,0,"left0"],[24022,5,""],[24022,0,"right0"],[24029,1,""],[23391,0," [matrix]"],[23505,0," [matrix]"],[23408,1,""],[23436,0,"\n    \\node {"],[23487,0,"}; \\\\\n    \\\\nod"],[23498,4,""],[23498,0,"node {"],[23504,1,""],[23526,0," \\\\\n};"],[23584,0,"\n    \\node {"],[23635,0,"}; \\\\\n  "],[23644,0," \\node {"],[23674,0," \\\\\n};"],[23563,1,""],[23563,0,"5"],[23415,1,""],[23415,0,"5"],[23763,1,""],[23763,0,"3"],[23702,1,""],[23702,0,"3"],[23563,1,""],[23563,0,"6"],[23415,1,""],[23415,0,"6"],[23747,0," [matrix]"],[23793,0,"\n    \\node {"],[23844,1,""],[23844,0,"}; \\\\\n    \\node {"],[23882,0," \\\\\n};"],[23385,0,"\n\\node (leftR) at 9"],[23403,1,""],[23403,0,"(0."],[23405,1,""],[23405,0,",8) {Replica $p$:};\n\\node (rightR) "],[23400,0," "],[23441,0,"at (8,8) {Replica $q$:};"],[23447,1,""],[23447,0,"7.5"],[23407,1,""],[23407,0,"7.5"],[23469,0,"\n\\"],[23469,2,""],[23385,0,"\n\\path [draw,dotted] (4,-0.5) -- (4,8);"],[24169,0,"\n\\node (comms)  at (4,1.4) [text=blue] {\\footnotesize network communication};"],[24193,1,""],[24193,0,"6"],[4966,0,"i"],[4968,1,""],[18031,0," In the example there are two re"],[18035,28,""],[18035,0,"all examples "],[18035,13,""],[18035,0,"al our"],[18037,4,""],[18037,0,"l a"],[18039,1,""],[18039,0,"our examples inthis "],[18054,5,""],[18054,0," this paper we assume two devices"],[18080,7,""],[18080,0,"comptu"],[18084,2,""],[18084,0,"uter d"],[18086,4,""],[18086,0,"ing devices labelled as replica's $p$ and $q$."],[18060,5,""],[18060,0,"section"],[18051,16,""],[18031,87,""],[17966,0," "],[17966,1,""],[17966,0," In all examples we assume two computing devices "],[18014,1,""],[18014,0,", or '"],[18019,1,""],[18019,0,"\\emph{replicas} with "],[18035,5,""],[18035,0,"labelled as $p$ and"],[18051,3,""],[18051,0,"(drawn on the left-hand size)"],[18077,3,""],[18077,0,"de) and $q$ (right-hand size"],[18102,3,""],[18102,0,"de"],[18102,2,""],[18102,0,"ide). Replicas process data locally "],[18117,21,""],[18117,0,"mutate state locally"],[18134,3,""],[18134,0,"lly and "],[18138,4,""],[18138,0,"choose when to perfm"],[18157,1,""],[18157,0,"orm network connection with their pie"],[18192,2,""],[18192,0,"eers"],[18107,0," The choice of two rel"],[18128,1,""],[18128,0,"plicas is purely for presentational purposes, our "],[18172,6,""],[18172,0," and our algorithm functions for"],[18191,13,""],[18191,0,"works with an "],[18107,98,""],[18095,1,""],[18069,1,""],[18135,0," and can"],[18202,0," in order to share any "],[17993,32,""],[18001,1,""],[17993,0,"two "],[18005,0,","],[18015,3,""],[18094,100,""],[18094,0,"te locally and neto"],[18112,1,""],[18112,0,"work "],[18097,20,""],[18097,0,"on their local "],[18075,37,""],[18075,0,"Since replicas mutate te"],[18098,1,""],[18098,0,"heir local state"],[18097,17,""],[18097,0,"only their local state, en"],[18121,2,""],[18121,0,"network "],[18121,8,""],[18121,0,"periods od "],[18130,2,""],[18130,0,"f network communication ar"],[18154,2,""],[18154,0,"b"],[18153,2,""],[18153,0,", when changes prope"],[18172,1,""],[18172,0,"age"],[18173,2,""],[18173,0,"gate between replicas, are shown separately on the "],[18217,7,""],[18217,0,"in the examples."],[18073,1,""],[18073,0,", with states drawn "],[18080,13,""],[18080,0,"local state d"],[18091,2,""],[18091,0," drawn in boxed"],[18105,1,""],[18105,0,"s and modifications shown with labelled slo"],[18146,2,""],[18146,0,"olid arrows and time running down the apge."],[18184,5,""],[18184,0,"page."],[18211,12,""],[18211,0," "],[18205,0,"only "],[18228,1,""],[18228,0,", "],[18125,0,"to local stat "],[18138,1,""],[18138,0,"e "],[18172,4,""],[18172,0,";"],[18182,4,""],[18182,0,"s"],[18238,0," communication of these changes is "],[18073,6,""],[18073,0,". "],[18075,3,""],[18075,0,"Lo"],[18087,0,"for a replica is "],[18285,0,"exmpl"],[18287,3,""],[18287,0,"picit"],[18287,5,""],[18287,0,"plicit in our model and is shown with "],[18314,11,""],[18314,0,"depicted with dashed arrows.\n\n"],[18342,116,""],[18271,2,""],[18279,0," to local state betwe"],[18293,7,""],[18293,0,"e"],[18264,0," between replicas"],[18643,0," via network communication"],[19213,0," the developer in automatically resolving such confic"],[19264,2,""],[19264,0,"licst"],[19267,2,""],[19267,0,"ts or pten"],[19274,3,""],[19274,0,"otentially defering to"],[19303,4,""],[19303,0,"for"],[19313,0," reol"],[19316,2,""],[19316,0,"soli"],[19319,1,""],[19319,0,"ution.\n"],[19325,27,""],[19269,0," in an application-specific way,"],[19304,12,""],[19309,0,"r"],[18501,4,""],[18509,0," $p$"],[18561,7,""],[18561,0,"replica $q$"],[18250,0," we make"],[18273,0,"of state cah"],[18283,2,""],[18283,0,"hanges "],[18306,33,""],[18328,0,"."],[18330,3,""],[18330,0,"This"],[18330,4,""],[18330,0,"Neto"],[18333,1,""],[18333,0,"work communication"],[17791,2,""],[17799,0," \\{``key'': ``A''\\}"],[17800,18,""],[17800,0,"at "],[17791,12,""],[17791,0,"the register at doc[``key''] by register"],[17825,6,""],[17825,0,"plicas $p$ and $q$"],[15776,0,"i"],[15776,1,""],[15776,0," For example, concurrent edit "],[15805,1,""],[15805,0,"s to a password manage "],[15827,1,""],[15827,0,"r on two devices"],[15776,67,""],[26001,9,""],[26184,0," We leave te"],[26195,1,""],[26195,0,"he design of a"],[26208,1,""],[26208,0,"such a aschem"],[26215,6,""],[26215,0,"schema lanagu"],[26225,3,""],[26225,0,"guage t"],[26231,1,""],[26231,0,"as future work."],[26197,0," analysis of whether ex[l"],[26220,2,""],[26220,0,"plci"],[26222,2,""],[26222,0,"icit "],[26207,20,""],[26207,0,"and "],[26210,1,""],[26206,0," of developer expectation"],[26235,0," the"],[26235,4,""],[26236,14,""],[26236,0,"the need for such"],[26231,0,"s"],[26245,0," (or otherwise)"],[26264,5,""],[26298,259,""],[28216,5,""],[28216,0,"$$"],[28217,0,"\\mathtt{key}"],[28209,6,""],[28209,1,""],[28210,0,"["],[28223,0,"["],[28225,2,""],[28223,1,""],[28223,0,"]"],[27858,2,""],[27858,0,"tt"],[27926,0,"\\texttt{"],[27936,0,"}"],[27990,0,"$"],[27992,6,""],[27992,0,"texttt"],[28007,0,"$"],[28009,0,"$"],[28011,1,""],[27989,2,""],[27989,0,"$"],[27998,0,"."],[28060,1,""],[28060,0,"$"],[28062,6,""],[28062,0,"texttt"],[28069,0,"."],[28077,1,""],[28094,2,""],[28094,0,"tt"],[28159,1,""],[28159,0,"t"],[28160,1,""],[28160,0,"t"],[28227,2,""],[28227,0,"rm"],[28245,2,""],[28245,0,"rm"],[28289,1,""],[28294,2,""],[28294,0,"tt"],[28297,0,"."],[28328,0,"."],[28359,0,"."],[28325,2,""],[28325,0,"tt"],[28357,1,""],[28357,0,"tt"],[28356,3,""],[28356,0,"tt"],[28387,2,""],[28387,0,"tt"],[28319,1,""],[28349,1,""],[28379,1,""],[28444,14,""],[28444,0,"& $x_1$"],[28430,5,""],[28427,2,""],[28425,1,""],[28426,8,""],[28431,3,""],[28431,0,"x \\in \\mathrm{String}"],[28445,0,"Var"],[28523,1,""],[28523,0,"}"],[28522,1,""],[28513,6,""],[28513,0,"mathrm{"],[28512,0,"$"],[28525,0,"$"],[28535,2,""],[28535,0,"rm"],[28576,5,""],[28576,0,"texttt{"],[28587,1,""],[28587,0,"}"],[28594,4,""],[28594,0,"texttt"],[28600,1,""],[28600,0,"{"],[28606,1,""],[28606,0,"}"],[28613,4,""],[28613,0,"texttt"],[28619,1,""],[28619,0,"{"],[28624,1,""],[28624,0,"}"],[27870,0,"\\texttt{"],[27879,0,"}"],[27934,0,"$"],[27948,0,"$"],[28016,0,"("],[28018,1,""],[28021,0,"\\texttt{"],[28030,0,"}"],[28240,1,""],[28240,0,"\\texttt{"],[28249,0,"}$"],[28263,0,"$"],[28265,1,""],[28264,0,"\\tet"],[28267,1,""],[28267,0,"xttt{"],[28273,0,"}"],[28425,0,"."],[28138,0,"\\txt"],[28140,2,""],[28140,0,"exttt{"],[28147,0,"}"],[30613,2,""],[30613,0,"tt"],[30726,2,""],[30726,0,"tt"],[30854,5,""],[30854,0,"texttt{"],[30862,0,"}$l"],[30864,1,""],[30864,0,"m"],[30864,1,""],[30864,0,"\\mathrm{"],[30872,1,""],[30875,1,""],[30875,0,"}\\texttt{"],[30885,0,"}"],[30886,1,""],[30876,0,"$"],[30921,2,""],[30921,0,"tt"],[30977,2,""],[30977,0,"tt"],[31110,2,""],[31110,0,"tt"],[31186,2,""],[31186,0,"tt"],[31260,2,""],[31260,0,"tt"],[31389,2,""],[31389,0,"tt"],[31436,2,""],[31436,0,"tt"],[31569,0,"\\texttt{"],[31579,0,"}"],[31625,2,""],[31625,0,"tt"],[31691,2,""],[31691,0,"tt"],[31947,2,""],[31947,0,"tt"],[31966,5,""],[31966,0,"texttt{"],[31966,7,""],[31966,0,"verb|"],[32037,5,""],[32037,0,"texttt{"],[32054,1,""],[32054,0,"}"],[32071,2,""],[32071,0,"tt"],[32297,2,""],[32297,0,"tt"],[32453,5,""],[32453,0,"texttt{"],[32464,1,""],[32464,0,"}"],[32548,1,""],[32548,0,"}"],[32539,5,""],[32539,0,"texttt{"],[32905,2,""],[32905,0,"tt"],[30743,44,""],[30743,0,"The expression defines the path"],[30786,2,""],[30786,0,"takes as it"],[30806,1,""],[30806,0,"s"],[30765,0,", lef "],[30770,1,""],[30770,0,"t to righ,"],[30779,0,"t"],[30807,0,", root towards leaf,"],[30807,20,""],[30840,0," from t"],[30841,6,""],[30841,0,"tw"],[30842,1,""],[30842,0,"owards the "],[30849,4,""],[30849,0,"the leaves"],[32091,5,""],[32091,0,"executes"],[32091,8,""],[32091,0,"performs"],[32194,2,""],[32194,0,"Since"],[42901,1,""],[42924,1,""],[55192,19,""],[55192,0,"next"],[71434,22,""],[75547,0,"\n%TODO: ww"],[75556,1,""],[75556,0,"e should put this in as part"],[75555,29,""],[75555,0,"this doesn't seem to be particularly relevant to this paper i"],[75615,1,""],[75615,0,"unless we analyse some of the data? \""],[75860,0,"\""],[76308,0," It is possible that a schema language is required"],[76347,11,""],[76347,0,"will be required ino"],[76366,1,""],[76366,0," o"],[76364,4,""],[76364,0,"to help"],[76367,4,""],[76367,0,"manage complexity."],[76352,33,""],[76352,0,"help manage compleixty"],[76370,4,""],[76370,0,"xity."],[76312,11,""],[76312,0,"may ti"],[76317,1,""],[76317,0,"urn out"],[76353,4,""],[76353,0,"be instruc"],[76362,1,""],[76362,0,"mental in the"],[76382,0,"ment of upda"],[76387,7,""],[76387,0,"such "],[76356,36,""],[76356,0,"required for more "],[76374,1,""],[76381,3,""],[76381,0," applications"],[76365,8,""],[76365,0,"to support more"],[75547,105,""],[75755,1,""],[71434,0,"$"],[18080,0,"-"],[18106,0,"-"],[21739,3,""],[21739,0,"gri"],[21741,1,""],[21741,0,"oceries"],[21806,3,""],[21806,0,"groceries"],[21873,3,""],[21873,0,"groceries"],[21948,3,""],[21948,0,"groceries"],[22032,3,""],[22032,0,"groceries"],[22107,3,""],[22107,0,"groceries"],[22193,3,""],[22193,0,"cro"],[22193,3,""],[22193,0,"groceries"],[22298,3,""],[22298,0,"groceries"],[22483,3,""],[22483,0,"groceries"],[22562,2,""],[22562,1,""],[22562,0,"groceries"],[22642,3,""],[22642,0,"groceries"],[22737,3,""],[22737,0,"groceries"],[23446,3,""],[23446,0,"groceries"],[23507,10,""],[23507,0,"communicate"],[23498,20,""],[23498,0,"modifications are combined"],[23553,5,""],[26323,23,""],[26323,0,"development of"],[28338,2,""],[28338,0,"it"],[28365,2,""],[28365,0,"it"],[28656,2,""],[28656,0,"it"],[28639,2,""],[28639,0,"it"],[30973,2,""],[30973,0,"it"],[31318,0,"s"],[31313,6,""],[31313,0,"contents"],[31328,0," multi-value"],[76385,0," A schema language could also support semantic annotations, such as indicating that a number should be treated as a counter rather than a register."],[2284,0," making is "],[2293,2,""],[2293,0,"t suitable for mobile devices that suffer periods"],[2323,19,""],[2323,0,"with poor network connectivity"],[2308,0,"cep"],[2308,3,""],[2308,0,"deployment on "],[2367,27,""],[2367,0,","],[2447,174,""],[3216,163,""],[3115,16,""],[3115,0,"ive editing of"],[3075,29,""],[3075,0,"Similarly,"],[3194,0," is "],[3097,2,""],[3097,0,"ve work often requires several people to work on the same"],[3154,11,""],[3238,4,""],[3238,0,"; "],[3138,7,""],[3138,0,"edit"],[3237,0,"if each person uses their own device, edits ma"],[3138,0,"simultaneously "],[3180,1,""],[3193,1,""],[3207,1,""],[3216,1,""],[3245,1,""],[3245,38,""],[3246,0," with one pers"],[3252,8,""],[3252,0,"each person's "],[3265,1,""],[3272,2,""],[3272,0,"synchroniz"],[3272,10,""],[3272,0,"reflected on the other collaborators' copies of the document with minimal delay"],[9033,0,"\n\nIn Section~\\ref{sec:convergence} and the appendix "],[9084,1,""],[9084,0,"."],[9035,0," "],[9035,0,"A key requirement of conflict resolution is that replicas converge towards the same state, or more formally, any two replicas that have processed the same set of oper"],[9084,0,"all "],[9096,0," eventually"],[9141,75,""],[9083,0," after any sequence of concurrent modifications,"],[9187,2,""],[9187,0,"."],[9238,0," we prove that our algorithm satisfies this requirement"],[9247,0," a theorem to show"],[9032,0," that can be deployed on any network topology"],[9710,1,""],[9710,0," "],[9723,0,","],[15315,0," -- in other words, the only datatype it supports is a multi-value register"],[21995,9,""],[21995,0,"shopping"],[22061,9,""],[22061,0,"shopping"],[22127,9,""],[22127,0,"shopping"],[22201,9,""],[22201,0,"shopping"],[22284,9,""],[22284,0,"shopping"],[22358,9,""],[22358,0,"shopping"],[22443,9,""],[22443,0,"shopping"],[22547,9,""],[22547,0,"shopping"],[22731,9,""],[22731,0,"shopping"],[22809,9,""],[22809,0,"shopping"],[22888,9,""],[22888,0,"shopping"],[22982,9,""],[22982,0,"shopping"],[23690,9,""],[23690,0,"shopping"],[23690,8,""],[23690,0,"groceryt"],[23697,1,""],[22982,8,""],[22982,0,"grocery"],[22888,8,""],[22888,0,"grocery"],[22809,8,""],[22809,0,"grocery"],[22731,8,""],[22731,0,"grocery"],[22547,8,""],[22547,0,"grocery"],[22443,8,""],[22443,0,"grocery"],[22358,8,""],[22358,0,"grocery"],[22284,8,""],[22284,0,"grocery"],[22201,8,""],[22201,0,"grocery"],[22127,8,""],[22127,0,"grocery"],[22061,8,""],[22061,0,"grocery"],[21995,8,""],[21995,0,"grocery"],[26084,9,""],[26092,0," $p$"],[26101,7,""],[26101,0,"ving"],[26315,7,""],[26315,0,"case"],[25714,5,""],[25714,0,"F"],[25719,0,"ly,"],[25723,11,""],[26563,2,""],[26563,0,"for"],[30028,0," asynchronous"],[30074,0,"b"],[30074,1,""],[29964,0,"immediately "],[46,0,"\n\\PassOptionsToPackage{hyphens}{url}"],[275,26,""],[275,0,"\n\\usepackage{url}"],[287,0,"[hyphens]"],[47,0,"%"],[46,37,""],[239,0,"\n\\usepackage[hyphenbreaks]{breakurl} % Fix URL line breaking when using dvips (e.g. arxiv.org)"],[333,26,""],[239,0,"\n\\usepackage[hyphens]{url}"],[239,0,"\n\\usepackage{hyperref}"],[239,22,""],[46,0,"\n\\PassOptionsToPackage{hyphens}{url}"],[276,26,""],[276,0,"\n"],[276,0,"\\usepackage{hyperref}"],[391,22,""],[13583,0," Attiya et al.~\\cite{Attiya:2016kh} further analyze "],[13619,8,""],[13627,0,"the problem of collaborative editing of ordered lists, and provide a correctness proof of the RGA protocol."],[13631,10,""],[13631,0,"metadata overhead of"],[13665,0,"ly"],[13672,3,""],[13672,0,"ed"],[13675,3,""],[13782,4,""],[13782,0,"all of these algorithms"],[13792,2,""],[13792,0," existing"],[13812,0," for CRDT lists and maps"],[13793,8,""],[13793,0,"aforementioned"],[13868,24,""],[13855,3,""],[13855,0,"each of its"],[13876,3,""],[13876,0,"is a"],[13896,1,""],[13863,3,""],[13863,0,"their"],[15002,0,"\n\nMartin et al.~\\cite{Martin:2010ih} generalize Logoot~\\cite{Weiss:2010hx} to support collaborative editing of XML documents~-- that is, a tree of nested ordered lists. As discussed"],[15004,0,"On the other hand, "],[15202,0," in Section~\\ref{sec:json-xml}, such "],[15188,0,"~-- without a map data"],[15200,10,""],[15200,0,"nested maps"],[15188,3,""],[15259,0,"a structure does not capture the expressivity of JSON."],[15301,3,""],[15301,0,"eness"],[41134,0," do not depend on $A_q$ (the state of any other replica $q\\"],[41192,0," "],[41194,0,"neq q"],[41198,1,""],[41198,0,"p$)"],[41201,60,""],[78117,0,"\n\n\\begin{IEEEbiography}{Martin Kleppmann}\nTODO\n\\end{IEEEbiography}\n\n\\begin{IEEEbiography}{Alastair R. "],[78218,1,""],[78218,0,"\\ Beresford}"],[78218,1,""],[78229,0,"\n\\end{IEEEbiography}"],[78230,0,"\n"],[78230,0,"TODO"],[78140,0,"[{\\includegraphics[]{mk428.jpg}}]"],[78159,0,"width=1in"],[78248,0,"[]"],[78249,0,"{}"],[78250,0,"\\includegraphics[width=1in]{arb33.jpg}"],[78287,1,""],[78287,0,"}"],[78314,4,""],[78314,0,"is a se"],[78319,2,""],[78319,0,"Senior Lecturer in the Computer Laboratory at the University of Cambridge. He obtained his PhD from the University of Cambridge, working at the intersection of mobile computing and computer security. TODO more text"],[78201,4,""],[78201,0,"is a Research Associate at"],[78225,2,""],[78225,0,"in the Computer Laboratory at the University of Cambridge. In his curre"],[78284,12,""],[78284,0,"H"],[78284,1,""],[78284,0,"In this current research "],[78284,5,""],[78284,0,"H"],[78305,0,"project, TRVE Data, is working towards better security and privacy in cloud applications"],[78375,0,"collaborative "],[78324,3,""],[78329,3,""],[78329,0,"s"],[78402,0," by applying end-to-end encryption "],[78370,14,""],[78423,0,"to collaboratively editable "],[78391,0," maintaining "],[78391,13,""],[78451,0,"application data. He previously "],[78470,13,""],[78470,0,"is book \\emph{Designing Data-Intensive Applications} was published by O'Reilly Media in 2007."],[78562,1,""],[78562,0,"."],[78560,1,""],[78560,0,"1"],[78563,0," Previously "],[78574,1,""],[78574,0,", e"],[78576,1,""],[78576,0,"he workd"],[78583,1,""],[78583,0,"ed as a software engineer and entrepreneur at several internet companies."],[79005,0,"\n\\vfill\n"],[4295,0," and error-prone,"],[8427,0," (a requirement known as \\emph{strong eventual consistency}~\\cite{Shapiro:2011un})"],[11111,0,",Mehdi:2011ke"],[13272,8,""],[13329,6,""],[13329,0,"ell-"],[13835,8,""],[13835,0,"algorithm"],[17073,0," This approach has the advantage of being able to express global invariants such as uniqueness constraints, which require serialization and cannot be expressed using CRDTs. However, it requires atomic broadcast, which "],[17246,45,""],[17246,0,"The downside is that tentative transactions may be rolled back, requiring the application to explicitly handle rollbacks, whereas CRDTs are defined such that operations cannot fail after they have been performed on one replica."],[17473,252,""],[17074,13,""],[17074,0,"Bayou"],[17236,0,"~\\cite{Bailis:2014th}"],[16533,13,""],[16533,0,"LWW"],[16636,3,""],[16636,0,"It"],[15880,0," and CouchDB"],[16578,68,""],[16578,0,"for example"],[17203,3,""],[17203,0,"Bayou's"],[17281,19,""],[17289,2,""],[17295,1,""],[17295,0,"ing"],[17299,9,""],[17299,0,"by the application"],[78205,4,""],[78205,0,","],[78219,0,", and the anonymous reviewers"],[78262,13,""],[78262,0,"that improved"],[25031,0,"\n\n\\begin{figure*}\n\\centering\n\\begin{tikzpicture}[auto,scale=0.8]\n\\end{tikzpicture}\n\\caption{Concurrent editing of an ordered list of characters (i.e., a text document).}\n\\end{figure*}"],[25095,0,"\n\\node (left1) at (0,0) [rectangle,draw] {\\{``text'': [zz"],[25150,2,""],[25150,0,"``h'', ``i'']\\}]"],[25165,1,""],[25165,0,"]"],[25165,1,""],[25165,0,"};"],[25152,1,""],[25152,0,"a"],[25159,1,""],[25159,0,"b"],[25162,0,", ``c''"],[29708,4,""],[29708,0,"at("],[29712,0,"$n$\\texttt{)} & $n /ge"],[29731,3,""],[29731,0,"\\ge 0$"],[29740,30,""],[29620,1,""],[29620,0,".get("],[29712,2,""],[29712,0,"idx"],[29648,1,""],[29648,0,")"],[30257,4,""],[30257,0,"head"],[30280,4,""],[30280,0,"idx(0)"],[30267,1,""],[30267,0,".get("],[30282,1,""],[30282,0,")"],[30292,4,""],[30292,0,"head"],[30324,9,""],[30324,0,"doc.get(\"shopping\").idx(1)"],[30373,4,""],[30373,0,"head"],[37567,3,""],[37567,0,"dx"],[37558,0,"$"],[37571,0,"_1$"],[37909,1,""],[37909,0,"2"],[37903,4,""],[37903,0,"Idx"],[38174,4,""],[38174,0,"Idx"],[38179,1,""],[38179,0,"3"],[38608,1,""],[38608,0,"4"],[38602,4,""],[38602,0,"Idx"],[38996,4,""],[38996,0,"Idx"],[39001,1,""],[39001,0,"5"],[37618,3,""],[37618,0,"dx("],[37622,0,"n\\mathsf{)}"],[37577,1,""],[37577,0,"Bi"],[37546,0,"\n\\AxiomC{$A_p,\\, \\mathsf{cursor}(\\langle k_1, \\dots, k_{n-1}, \\mathsf{listT}(k_n) \\rangle,\\, \\mathsf{head})%"],[37653,1,""],[37653,0,"$}"],[37653,0," \\evalto "],[37653,1,""],[37653,0,"\n    "],[37666,0,"\\mathit{cur}'"],[37653,0,".\\mathsf{idx(}"],[37638,0,"\n   "],[37671,4,""],[37671,0,"n\\mathsf{}"],[37680,1,""],[37680,0,")}"],[37802,0," \\mathit{cur}'$}"],[37818,97,""],[38045,4,""],[38045,0,"idx("],[38050,0,"n\\mathsf{)}"],[38016,3,""],[38016,0,"\\at"],[38017,2,""],[38017,0,"mathit{ctx}"],[38037,2,""],[38037,0,"sf"],[38040,4,""],[38040,0,"cursor"],[37781,1,""],[37782,0,"("],[37784,0,")"],[37785,11,""],[37785,0," "],[37681,1,""],[37678,2,""],[37672,6,""],[37670,1,""],[37669,0,"}"],[37281,2,""],[37281,0,"sf"],[37284,1,""],[37284,0,"get"],[37288,0,"("],[37301,0,")"],[37302,10,""],[38023,0,"(\\langle\\rangle,\\, k)"],[38056,1,""],[38057,0,"("],[38058,1,""],[38058,0,"0"],[38056,0,"(0)"],[38060,12,""],[38056,3,""],[38057,0,"(0)"],[38058,1,""],[38058,0,"n"],[37882,67,""],[37839,41,""],[37839,0,"n=0"],[37963,1,""],[37963,0,"\n    "],[37973,2,""],[37973,0,"sf"],[37979,0,"sor"],[37983,1,""],[37983,0,"(\\langle\\rangle,\\, k)"],[38041,0,"\n\\AxiomC{$\\mathit{"],[38051,8,""],[38051,0,"n>0$}"],[38295,4,""],[38295,0,"idx"],[38299,0,"(n)"],[38191,0,"\n"],[38066,0,"n>0 ,"],[38070,1,""],[38070,0,"\\,\n"],[38072,1,""],[38072,0,"\\wedge\\, "],[38041,15,""],[38192,0,"\\Ax"],[38226,1,""],[38226,0,"R"],[38226,1,""],[38226,0,"Tr"],[38195,0,"iomC{$\\mathit{ctx},\\, \\mathsf{cursor}"],[38352,0," \\mathit{ctx}'$}"],[38232,0,"(\\langle\\rangle,\\, k').\\mathsf{idx}(n-1) \\evalto \\mathit{ctx}'$}"],[38432,44,""],[37875,2,""],[37875,0,"U"],[37277,4,""],[37277,0,"math"],[38476,0,"n>0 \\,\\wedge\\, "],[38684,4,""],[38684,0,"idx"],[38688,0,"(n-"],[38690,1,""],[38690,0,")"],[38820,4,""],[38820,0,"idx"],[38824,0,"(n)"],[39031,4,""],[39031,0,"idx"],[39035,0,"(n)"],[39245,4,""],[39245,0,"idx"],[39249,0,"(n)"],[39250,1,""],[39250,0,"i"],[39036,1,""],[39036,0,"i"],[38825,1,""],[38825,0,"i"],[38689,1,""],[38689,0,"i"],[38405,1,""],[38405,0,"i"],[38267,1,""],[38267,0,"i"],[38476,1,""],[38476,0,"i"],[38050,1,""],[38050,0,"i"],[37952,1,""],[37952,0,"i"],[37839,1,""],[37839,0,"i"],[37768,1,""],[37768,0,"i"],[37665,1,""],[37665,0,"i"],[29718,1,""],[29718,0,"i"],[29734,1,""],[29734,0,"i"],[37810,0,"\n\n\\begin{prooftree}\n\\end{prooftree}"],[37829,0,"\n\\AxiomC{$k_1 \\in \\mathrm{dom}(\\mathit{ctx})$}\n\\AxiomC{$\\mathit{ctx}(k_1),\\, \\mathsf{cursor}(\\langle k_2, \\dots, k_{n-1} \\rangle,\\, k_n).\\mathsf{idx}(i)\n    \\evalto \\mathsf{cursor}(\\langle k_2, \\dots, k_{n-1} \\rangle,\\, k_n')$}\n\\LeftLabel{$\\textsc{Idx}_2$\\"],[38084,1,""],[38084,0,"}\n\\BinaryInfC{$\\mathit{ctx},\\, \\at"],[38116,2,""],[38116,0,"mathsf{cursor}(\\langle k1"],[38140,1,""],[38140,0,"_1, k_2, \\dots, k_n-1"],[38158,3,""],[38158,0,"{n-1} \\rangle,\\, k_n)\\"],[38179,1,""],[38179,0,".\\mathsf{idx}(i)\n    \\evalto \\mathsf{cursor} "],[38223,1,""],[38223,0,"(\\langle k_1, k_2, \\dots, k_{n-1} \\rangle,\\, k_n')$}"],[39350,481,""],[39348,0,"\n\n\\begin{prooftree}\n\\AxiomC{$i=0$}\n\\LeftLabel{$\\textsc{Idx}_5$}\n\\UnaryInfC{$\\mathit{ctx},\\, \\mathsf{cursor}(\\langle\\rangle,\\, k).\\mathsf{idx}(i) \\evalto\n    \\mathsf{cursor}(\\langle\\rangle,\\, k)$}\n\\end{prooftree}"],[38291,211,""],[33493,0,"{{{{{{{"],[33493,7,""],[30252,0,"\ndoc.get(\"shopping\") := [];"],[30344,4,""],[30344,0,"tail"],[30379,4,""],[30379,0,"tail"],[30423,0,"tail.insert(\"milk\");\n"],[30378,21,""],[30480,80,""],[18448,1,""],[18448,0,"c"],[18449,1,""],[18449,0,".get("],[18461,1,""],[18461,0,")"],[18543,1,""],[18543,0,".get("],[18555,1,""],[18555,0,")"],[21501,1,""],[21501,0,".get("],[21516,2,""],[21516,0,").get("],[21529,1,""],[21529,0,")"],[21604,1,""],[21604,0,".get("],[21619,1,""],[21619,0,")"],[21686,1,""],[21686,0,".do"],[21687,2,""],[21687,0,"get("],[21701,2,""],[21701,0,")("],[21712,1,""],[21712,0,")"],[21702,0,".get"],[21621,0,":"],[21745,0,"\nnode [right,text width=3"],[21769,1,""],[21769,0,"1cm,text centered] {doc.get(``colors'').get(``green'') := ``\\#00ff00'';}"],[21669,67,""],[21719,0,",midway"],[21711,8,""],[21711,0,"re"],[21712,1,""],[21712,0,"agged"],[21711,6,""],[21711,0,"centered"],[21667,2,""],[21667,0,"--"],[21702,1,""],[21702,0,"2"],[21679,0,"    "],[21481,0,"-- (left1)\n    "],[21496,3,""],[21506,0,",text width=2cm,text centered,midway"],[21596,8,""],[21755,8,""],[21755,0,"ragged"],[21755,6,""],[21755,0,"centered"],[21746,1,""],[21746,0,"4"],[21518,1,""],[21518,0,"4"],[21747,0,".2"],[21519,0,".2"],[20940,1,""],[20940,0,"6"],[20701,1,""],[20701,0,"8"],[20614,1,""],[20614,0,"8"],[20587,1,""],[20587,0,"8"],[23653,1,""],[23653,0,".get("],[23734,1,""],[23734,0,".get("],[23816,1,""],[23816,0,".get("],[23913,1,""],[23913,0,".get("],[23669,1,""],[23669,0,")"],[23750,1,""],[23750,0,")"],[23832,1,""],[23832,0,")"],[23929,1,""],[23929,0,")"],[23835,3,""],[23835,0,"dx(0)"],[23934,3,""],[23934,0,"dx(0)"],[24012,4,""],[24012,0,"doc.get(``grocery'').idx(1)"],[24110,4,""],[24110,0,"doc.get(z`"],[24118,2,""],[24118,0,"``grocy"],[24124,1,""],[24124,0,"ery'').idx(1)"],[23796,2,""],[23796,0,"-- (left2)\n   "],[23821,0,",text widh"],[23830,1,""],[23830,0,"th=4cm,text centered,midway"],[23858,1,""],[23858,0," "],[23888,0," "],[23908,8,""],[23936,0,"-- (right2)\n    "],[23952,3,""],[23963,0,",text width=4cm,text centered,midway"],[24048,9,""],[24076,0,"-- (left3)\n"],[24087,2,""],[24087,0,"   "],[24101,0,",text width=3"],[24113,1,""],[24113,0,"4cm,text centered,midway"],[24029,0," "],[24169,0," "],[24188,8,""],[24216,0,"-- (right3)\n    "],[24232,3,""],[24243,0,",text width=4cm,text centered,midway"],[24309,0," "],[24330,9,""],[20588,2,""],[20612,1,""],[20612,0,"7.5"],[20701,1,""],[20701,0,"7.5"],[20942,1,""],[20942,0,"5.5"],[23193,0,".5"],[23268,0,".0"],[23354,0,".0"],[23459,0,".0"],[23111,0,".0"],[23038,0,".5"],[22972,1,""],[22972,0,"7.0"],[22907,1,""],[22907,0,"7.0"],[22857,1,""],[22857,0,"9.0"],[22807,1,""],[22807,0,"9.0"],[22779,1,""],[22779,0,"9"],[23281,1,""],[23281,0,"5"],[23204,3,""],[23204,0,"5.0"],[23122,1,""],[23122,0,"5"],[23045,3,""],[23045,0,"5.0"],[22980,1,""],[22980,0,"5"],[22913,1,""],[22913,0,"5"],[22861,1,""],[22861,0,"5"],[22809,1,""],[22809,0,"5"],[22779,3,""],[22779,0,"10"],[25503,12,""],[25524,2,""],[25526,0,"\n\\node (right1) "],[25476,0," "],[25543,0,"at (8."],[25548,1,""],[25548,0,",0) [rectangle,draw] {[``a'', ``b'', ``c'']};"],[25483,1,""],[25483,0,"8"],[25549,1,""],[25549,0,"8"],[25593,0,"\n\\node (left2)  at (0,6) [rectangle,draw] {[``a'', ``c'']};\n\\node (\n\\node (right1) at (9"],[25680,1,""],[25680,0,"8,8) [rectangle,draw] {[``a'', ''"],[25711,2,""],[25711,0,"aa`"],[25711,3,""],[25711,0,"a"],[25711,1,""],[25711,0,"``b'', ``c'']};"],[25527,66,""],[25594,0,"left3)  at (0,4) [rectangle,draw] {[``a'', ``x'', ``c'']};"],[25718,0,"\n\\node (right2) at (8,6) [rectangle,draw] {[``y'', ''"],[25769,2,""],[25769,0,"``a'', ``b'', ``c'']};\n\\node )("],[25798,2,""],[25798,0,"(right3) at (8,5"],[25813,1,""],[25813,0,"4) [rectangle,draw] {[``y'', ``a'', ``z'' "],[25854,1,""],[25854,0,", ``b'', ``c'']};"],[25652,0,"\n\\node (left4)  at (0,0) [rectangle,draw] ["],[25694,1,""],[25694,0,"{[``y'', ``a'', ``x'', ``z'', ``c'']};"],[25951,0,"\n\\node (right3)"],[25964,2,""],[25964,0,"4) at (8,0) [rectangle,draw] {[``y'', '"],[26002,1,""],[26002,0,"``a'', ``x'', ``z'', ``c'']};\n\\draw [thick,->] (left1)  to node [left]  {doc.idx(2).delete;} (left2);\n\\draw [thick,->] (left2 "],[26127,1,""],[26127,0,")  to node [left]  {doc.idx(1).insert(``x'');} (left3);\n\\draw [thick,->] (right1) to node [right] {doc.idx(1"],[26234,1,""],[26234,0,"0).insert(``y'');} (right2);\n\\draw["],[26268,1,""],[26268,0," [thick,->] (right2) to node [right] {doc.idx(2).insert(``z'');} (right3);"],[25893,1,""],[25893,0,"3"],[25820,1,""],[25820,0,"5"],[25754,1,""],[25754,0,"7"],[25608,1,""],[25608,0,"3"],[25549,1,""],[25549,0,"5"],[25483,1,""],[25483,0,"7"],[26342,0,"\n\\draw [thick,dashed,blue,->] (left3.south)  to [out=270,in=135] (right4.north west);\n\\draw [thick,dashed,blue,-> (right3.sou"],[26455,0,"]"],[26468,0,"th) to [out=270,in=45]  (left4.north east);"],[26031,0,"\n\\node (comms)  at (5, 1.4) [text=blue] {\\footnotesize network communication};"],[25461,0,"\n\\draw [path"],[25463,10,""],[25463,0,"path [draw,dotted] (4,-05"],[25487,1,""],[25487,0,".5) -- (4,7.5);\n\\node (leftR)  at (0,8.5"],[25497,3,""],[25497,0,"9"],[25525,0,") {Replica $p$:};\n\\node (rightR) at (8,8.5) {Replica $q$:};"],[26931,1,""],[26931,0,"6.5"],[26936,84,""],[26174,1,""],[26174,0,"4"],[26179,1,""],[26179,0,"5"],[25565,2,""],[25523,2,""],[25497,1,""],[25497,0,"8.5"],[26710,0,"\n\\dr"],[26710,4,""],[26541,0,"\n\\draw [thick,-> ("],[26557,2,""],[26557,0,"] (left3) to "],[26567,0," "],[26571,0,"(left4);\n\\draw [thick,->] (right3) to (right3"],[26615,1,""],[26615,0,"4);"],[27006,3,""],[27006,0,"7.0"],[27796,1,""],[27796,0,".get("],[27885,1,""],[27885,0,".get("],[27809,1,""],[27809,0,").idx(1)"],[27817,10,""],[27895,6,""],[27895,0,")"],[27897,0,"idx(1)."],[27904,5,""],[27904,0,"get("],[27916,1,""],[27916,0,")"],[26906,0,"\n\n\\begin{figure*}\n\\centering\n\\begin{tikzpicture}[auto,scale=0.8]\n\\end{tikzpicture}\n\\caption{Concurrently assigning values of different types to the same map key.}\n\\end{figure*}"],[26970,0,"\n\\path [draw,dotted] (4,-0.5) -- (4,8.5);\n\\node (left1)  at (0,7) [rectangle,draw}"],[27051,1,""],[27051,0,"] {\\{\\}};\n\\node (right1) at (0"],[27080,1,""],[27080,0,"8,7) [rectangle,draw] {\\{\\}};"],[27060,0,"\n\\node (left2)  at (0,5) [rectangle,draw] {\\{``a'': \\{\\}\\}};\n\\node (left3)  at (0,4"],[27142,1,""],[27142,0,"3) [rectangle,drwaw"],[27158,3,""],[27158,0,"aw] {\\{``a'': \\{``x'': ``y''\\}\\}};"],[27241,0,"\n\\node (right2) at (8,5) [rectangle,draw] ["],[27283,1,""],[27283,0,"{\\{``a'': []\\}};\n\\node (right3) at (8,4"],[27321,1,""],[27321,0,"3) [rectangle,draw] {\\{``a'': [``z'']\\}];"],[27360,1,""],[27360,0,"\n"],[27360,1,""],[27360,0,"}"],[27192,0,"\n\\node (left3"],[27204,1,""],[27204,0,"4)  at (0,0) [rectangle,draw] {\\_"],[27236,1,""],[27236,0,"{``a'"],[27237,0,"mapT("],[27246,0,"'): \\{``x'': ``y''\\}, listT(``a''"],[27278,1,""],[27278,0,"'): [``z'']\\}};"],[27198,0," [matrix]"],[27216,1,""],[27243,0,"\n    \\node {"],[27287,0,"}; \\\\\n    \\node {"],[27304,1,""],[27329,0," \\\\\n};"],[27505,0,"\n\\node [matrix] (right43"],[27528,1,""],[27528,0,") at (8,0) [rectangle,draw] {\n    \\node {\\{mapT(``a''): `{"],[27584,2,""],[27584,0,"\\{``x'': ``y''\\},}; \\\\\n    \\node {listT(``a''): [``z'']\\}}; \\\\\n};\n\\draw [thick,-> "],[27665,1,""],[27665,0,"] (left1)  to node [left "],[27689,1,""],[27689,0,"]  {doc.get(``a'') := \\{\\};} (left2);\n\\draw [thick,-> "],[27742,1,""],[27742,0,"] (left2)  to node [left]  (doc.get(``a'').get(``x'') := ``y'';} (left3);\n\\draw [thick,-> "],[27831,1,""],[27831,0,"] (right1) to node [right] "],[27769,1,""],[27769,0,"{"],[27858,0,"{doc.get(``a'') := [];} (right2);\n\\draw [thick,-> ]"],[27907,2,""],[27907,0,"] (right2) to node [right] {doc.get(``a'') "],[27949,1,""],[27949,0,".idx(0).insert(``z'');} (right3);\n\\draw [thick,->] (left3)  to n"],[28012,1,""],[28012,0,"(left4);\n\\draw [thick,->] (l"],[28039,1,""],[28039,0,"right3) to (right4);\n\\draw [thick,dashed,blue,->] (left3.south)  to [out=270,in=135] (right4.north west);\n\\draw [thick,dashed,blue,-> ["],[28172,2,""],[28172,0,"] (right3.south) to [out=270,in=45]  (left4.north east);"],[27006,1,""],[27006,0,"7"],[26995,3,""],[26995,0,"1"],[27647,0,"\n\\node (comms)  at (4,1.5) [text=blue] {\\footnotesize network communication};"],[27669,3,""],[27669,0,"2.0"],[79206,0,"/Beresford\n"],[79206,10,""],[79206,1,""],[82614,0,"dw"],[82614,16,""],[82614,0,"More recently he h"],[82614,18,""],[82614,0,"His current research wit"],[82635,3,""],[82635,0,"intereste"],[82643,1,""],[82643,0,"s cover "],[82644,7,""],[82644,0," include"],[82646,6,""],[82646,0,"fo"],[82635,13,""],[82635,0,"work expore"],[82643,3,""],[82643,0,"lores the security and privacy of large-scale distributed systems, with p"],[82715,1,""],[82715,0,"a particular focus on mobi"],[82737,4,""],[82737,0,"netowkr"],[82740,4,""],[82740,0,"worked moil"],[82749,2,""],[82749,0,"bile devices such as smartphones "],[82781,1,""],[82781,0,", tablets and lab"],[82797,1,""],[82797,0,"ptops."],[82543,69,""],[82543,0,"explored the effectiveness of anonymity as a means of provide"],[82603,1,""],[82603,0,"ing location prova"],[82618,3,""],[82618,0,"ivacy in a mobile computing setting"],[82543,0,"whihc"],[82546,2,""],[82546,0,"ch "],[82488,172,""],[82492,8,""],[82670,0," He looks at this domain freom three angles"],[82685,28,""],[82685,0,"e security and privacy of the devices themselves, as well as the seucr"],[82752,3,""],[82752,0,"curity and prov"],[82765,2,""],[82765,0,"ivacy problems induced by the interaction between mobile devices and cloub"],[82838,1,""],[82838,0,"d-based Internet services."],[81968,0," is"],[81976,1,""],[81976,0,"ing"],[82304,0,", including Rapportive and LinkedIn"],[17586,0,", and give some examples of "],[17592,22,""],[17592,0,"illustrate some peculiarities of concurrent nested structures that do not arise under "],[17672,6,""],[17672,0,"in sequential executions"],[17643,0,"data "],[27007,0,"\\label{fig:text-edit}"],[28537,0,"\\label{fig;typ"],[28547,4,""],[28547,0,":type-clash}"],[19086,0,"\n\n"],[17658,43,""],[19044,0,"The difficulty of defining a JSON "],[19073,5,""],[19073,0,"CRDT for JSON data is due to the interaction between "],[19043,0,"\n\n"],[19044,0,"The sequential semantics of editing a JSON data structure are well-known, and the semantics of concurrently editing a flat map or list data structure have been thoroughly explored in the literature (see Section~\\ref{})."],[17828,0,"}}"],[17828,2,""],[19260,0,"sec:related"],[19274,0," However, "],[19284,19,""],[19284,0,"when"],[19318,0,", difficulties arise"],[19338,3,""],[19370,0,"concurrency and nested data structures. "],[19409,1,""],[19411,0,"In th efol"],[19416,5,""],[19416,0,"e following examples we illustrate"],[19440,10,""],[19440,0,"show "],[19445,14,""],[19449,0," situations that can occur"],[19475,29,""],[19523,24,""],[19523,0,"and demonstrate how they are handled i"],[19560,1,""],[19560,0,"by our algorithm"],[19361,0,"s"],[19467,3,""],[19467,0,"mgi"],[19468,2,""],[19468,0,"ight"],[19734,0,","],[19768,0," are"],[20716,0,"\n\n"],[20715,1,""],[20715,0,"\n\nA multi="],[20724,1,""],[20724,0,"-value register is hardly an impressive CRDT, since it does not actually perform any conflict resolution. Its "],[20830,4,""],[20830,0,"We use it only for primitive values for which no other merge "],[20879,5,""],[20879,0,"automai"],[20885,1,""],[20885,0,"tic"],[20895,0,"function is defined. Other CRDTs could be substituted in its place: for example, a cout"],[20981,1,""],[20981,0,"nter CRDT for a number that can only be incremented and decremented, or an ordered list of characters for a collaboratively editable string (see also Figure~\\ref{fig:text-edit}). "],[21159,1,""],[21161,266,""],[21159,2,""],[18966,1,""],[18966,0,".get("],[18978,1,""],[18978,0,")"],[22909,28,""],[22936,0," gives an example of concurrent edits at different levels of the tree"],[23159,0," Instead of assigning an empty map"],[23013,4,""],[23020,0," $p$"],[23076,15,""],[23064,0,"replica $q$ "],[23190,0,", $q$ could equivalently remove the entire key ``colors'' from the outer map, and then assign a new empty map to that key.\n\n"],[23312,0," The difficulty in this example "],[23582,0,"\n\n"],[23583,0,"The behavior we define is "],[23606,3,""],[23606,0,"matches that of CRDT maps in Riak~\\cite{Brown:2014hs,Brown:2013wy}."],[23344,0,"is that the addition of ``red'' occurs at a lower level of the tree, while concurrently the removal of the map of colors occurs at a higher level of the tree.\n\nOne possible way of handling such a conflict would be to let edits at higher levels of a tree always override concurrent edits within that subtree (in this case, that would mean the addition of ``red'' would be discarded, since it would be overridden by the blanking-out of the entire map of colors). However, that behavior would not meet our requirement of "],[23859,3,""],[23859,0,"that edits "],[23864,6,""],[23864,0,"no user input should be lost due to concurrent modifications. Instead, we define a m"],[23945,3,""],[23945,0,"merge semantics that preserve all changes:"],[23987,68,""],[24156,2,""],[24156,0," "],[24159,1,""],[24159,0,"is"],[24171,13,""],[24171,0,"mat"],[23986,0,", as shown in Figure~\\ref{fig:map-remove}"],[24296,0,"[p]"],[21180,0,"[p]"],[17817,0,"[p]"],[27023,0,"[p]"],[28556,0,"[p]"],[30090,0,"[p]"],[26002,0,"jjjj"],[26005,1,""],[26002,3,""],[26345,663,""],[30825,0,"j"],[30825,1,""],[30839,0,"\n\n"],[30840,0,"Figure~\\ref{fig:map-remove} gives an example of concurrent edits at different levels of the JSON tree. Here, replica $p$ adds ``red'' to a map of colors, while replica $q$ concurrently blanks out the entire map of colors, and then adds "],[31060,1,""],[31075,0,"``green''. Insteade"],[31093,1,""],[31093,0," of assigning an empty map, $q$ could equivalently remove the entire key ``colors'' from the outer map, and then assign a new emt"],[31221,1,""],[31221,0,"pty map to that key. The difficulty in this example is that the addition of ``red'' occurs at a lower level of the tree, while concurrently the removal of the map of colors occurs at a higher level of the tree.\n\nOne possible way of handling such a conflict would be to let edits at higher levels of the tree always override concurrent edits within that subtree. In this case, that would mean the addition of ``red'' would be discarded, since it would be overridden by the blanking-out of the entire map of colors. However, that behavior would not meet our requirement that "],[31764,8,""],[31764,0,"violate"],[31793,0,"no user input should be lost due to concurrent modifications. Instead, we e"],[31867,1,""],[31867,0,"define merge semantics that preserve all changes, as shown in Figure~\\ref{fig:map-remove}: ``blue'' must be absent from the final map, since it was removed by blanking out the map, while ``red'' and ``green'' must be present "],[32091,1,""],[32091,0,", since they were explicitly added. This behavior matches that of CRDT maps in Riak~\\cite{Brown:2014hs,Brown:2013wy}."],[22913,1372,""],[19533,4,""],[19582,0,", and explain the rationale for our design decisions"],[30884,0,"\n\nFigure~\\ref{fig:two-lists} illustrates another problem with maps: two replicas can concurrently insert the same map key. Here, $p$ and $q$ each independently create a new shopping list under the same map key ``grocery'', and add items to the list. In the case of Figure~\\ref{fig:register-assign}, concurrent assignments to the same map key were left to be resolved by the application, but in Figure~\\ref{fig:two-lists}, both values are lists and so they can be merged automatically. We preserve the ordering and adjacency of items inserted at each replica, so ``ham'' appears after ``eggs'', and ``flour'' appears after ``milk'' in the merged result. There is no information on which replica's items should appear first in the merged result, so the algorithm can make an arbitrary choice between ``eggs, ham, milk, flour'' and ``milk, flour, eggs, ham'', provided that all replicas end up with the same order."],[31783,0," items in the"],[31808,0,"\n\nFigure~\\ref{fig:text-edit} shows how a collaborative text editor can be implemented, using a "],[31895,8,""],[31895,0,"by treating the document as a list of characters. ``y'' is inserted before ``a'', ``b'' is deleted, and "],[31975,1,""],[31975,0,";"],[31944,0," All changes are preserved in the merged result:"],[32041,1,""],[32041,0,";"],[32047,0,"zz"],[32047,2,""],[32047,0,"``"],[32041,8,""],[32024,0," ``x'' and ``z'' are insertec "],[32052,2,""],[32052,0,"d between aa"],[32062,2,""],[32062,0,"``a'' and ``c''; and"],[32099,0,".\n\nFigure~\\ref{fig:type-clash} demonstrates a variant of the situation in Figure~\\ref{fig:two-lists}, where $"],[32207,1,""],[32207,0,"two replicas concurrently insert the same map key, but they do so with different datatypes as values: $q"],[32310,1,""],[32310,0,"p$ inserts a nested map, whereas $q$ inserts a list. These datatypes cannot meaningfully be merged, so we preserve both values separately. We do this by adding a type tag "],[32462,19,""],[32462,0," tagging each map key with a type annotation (\\textsf{mapT} or \\textsf{re"],[32533,2,""],[32533,0,"listT}"],[32521,3,""],[32521,0,","],[32537,0,", or \\textsf{regT} for a map, list, or register value respectively), so each type inhabits a separate namespace. The app"],[32649,8,""],[34419,0,"s"],[34430,0,"s"],[34451,0," and~\\ref{fig:type-clash}"],[34412,8,""],[34412,0,"scenarios"],[38105,10,""],[38122,1,""],[38122,0,".get("],[38150,1,""],[38150,0,")"],[38180,0," and "],[38184,1,""],[38193,4,""],[38193,0,".idx("],[38199,0,"$\\mathit{n}"],[38200,10,""],[38200,0,"n$\\texttt{)} sl"],[38214,1,""],[38214,0,"ee"],[38215,1,""],[38215,0,"lects the $n$th"],[38231,74,""],[38258,0," Lists are indexed starting from 1, and \\texttt{.idx(0)} is a special cursor indicating the head of a list."],[38984,0," places a new element after the position identified by the cursor, and \\texttt{.idx(0).insert} inserts at the head of a list"],[39174,0," removes the ite"],[39187,3,""],[39187,0,"element identified by the cursor"],[38888,6,""],[38892,11,""],[38912,0," sets the value of the register identified by the cursor"],[38853,22,""],[38853,0,"writing to"],[38901,4,""],[38901,0,"assigns"],[39036,0,"\\emph{"],[39047,0,"}"],[39053,8,""],[39053,0,"existing list element"],[39049,3,""],[39049,0,"an"],[39270,106,""],[39458,0,", and then the key ``h"],[39477,3,""],[39477,0,"\\texttt{\"shopping\"}"],[39495,1,""],[39495,0,"|"],[39478,7,""],[39478,0,"verb|"],[39494,0," within that map is set to the empty list \\verb|[]|"],[39551,6,""],[39551,0,"third"],[39584,7,""],[39584,0,"verb|"],[39599,1,""],[39599,0,"|"],[39601,73,""],[39633,82,""],[39633,0,", placing the cursor in a variable called \\texttt{head}"],[39689,0,"\n\n"],[39689,0," The list element ``eggs'' is inserted at the head of the list. In line 5, "],[24204,0,"After"],[24350,0,"After"],[24495,0,"After"],[24640,0,"After"],[26008,0,"AFter"],[26009,4,""],[26009,0,"fter"],[26092,0,"After"],[26177,0,"After"],[27722,0,"After"],[35302,0,"After"],[36258,0,"After"],[36323,0,"After"],[36351,0,"After"],[39073,0,"After"],[39101,6,""],[39106,1,""],[39184,0,"After"],[32425,0,"b"],[32425,1,""],[32425,0," be"],[32441,3,""],[38424,0," (a virtual position before the first list element)"],[39158,2,""],[39158,0,"the"],[39879,0,"the variable \\texttt{tail} is set to a cursor pointing at the list element ``eggs''. "],[36277,4,""],[36277,0,"eggs"],[36340,4,""],[36340,0,"eggs"],[39900,4,""],[39900,0,"eggs"],[39964,0,"Then two more list elements are inserted: ``cheese'' is inser"],[40017,8,""],[40017,0,"at the head, and ``milk'' after ``eggs''. Note that the cursor identi"],[40080,6,""],[40080,0,"\\texttt{eggs} identifies the list element by identity, not by its index: after the insertion of ``cheese'', the element ``eggs'' has index 2, but the "],[40226,4,""],[40226,0,"``milk'' is nevertheless af"],[40251,2,""],[40251,0,"inserted after ``eggs''."],[40058,1,""],[40058,0,"\n\n"],[40276,0," This "],[40277,5,""],[40277,0,"As we shall see later, this feature is helpful for achieving desirable semantics in the presence of concurrent modifications."],[40404,600,""],[40210,3,""],[40210,0,"moves from index 1 to"],[40232,6,""],[40416,324,""],[47380,0,"H"],[47380,1,""],[47380,0,"We now explain formally how to achieve the concurrent semantics outlined in Section~\\ref{sec:composing}. "],[40415,1560,""],[45818,0,"\n\n\\section{Formal semantics}\\label{sec:semantics}"],[45836,1,""],[45836,0,"S"],[5276,1,""],[5276,0,"D"],[5281,1,""],[5281,0,"M"],[6964,1,""],[6964,0,"C"],[6973,1,""],[6973,0,"R"],[8789,1,""],[8789,0,"C"],[10189,1,""],[10189,0,"W"],[10361,1,""],[10361,0,"T"],[15659,1,""],[15659,0," "],[15660,1,""],[15660,0,"A"],[17446,1,""],[17446,0,"D"],[17451,1,""],[17451,0,"S"],[17763,1,""],[17763,0,"E"],[17771,1,""],[17771,0,"E"],[33575,1,""],[33575,0,"V"],[35042,1,""],[35042,0,"E"],[47234,1,""],[47234,0,"E"],[51434,1,""],[51434,0,"O"],[51993,1,""],[51993,0,"T"],[53963,1,""],[53963,0,"S"],[55789,1,""],[55789,0,"G"],[55800,1,""],[55800,0,"O"],[61177,0,"o"],[61177,2,""],[61177,0,"O"],[69734,1,""],[69734,0,"P"],[69740,1,""],[69740,0,"S"],[80585,1,""],[80585,0,"F"],[80593,1,""],[80593,0,"W"],[84376,1,""],[84376,0,"C"],[46411,798,""],[47619,0," local replica state"],[47649,0," $A_p$"],[47655,34,""],[51491,1,""],[51491,0,"I"],[51498,0,", whenever an element is inserted into a list or a value is assigned to a register, the operation "],[51586,10,""],[51586,0,"new list element or register value is identified by the identifier of the operation that created it"],[51685,104,""],[51500,1,""],[51500,0,"W"],[51308,192,""],[48640,1,""],[48640,0,".get("],[48655,1,""],[48655,0,")"],[48844,1,""],[48844,0,".get("],[48852,1,""],[48852,0,")"],[46811,7,""],[46811,0,". T"],[46811,0," (the notation $A_p[\\,x \\,\\mapsto\\, \\mathit{cur}\\,]$ denotes a partial function that is the same as $A_p$, except that $A_p(x) = \\mathit{cur}$)"],[47071,0," following"],[51355,0,"\\label{sec:lamport}"],[51373,0,"-ts"],[47723,0,", assuming that $\\mathit{id}_1$ is the unique identifier of the operation that inserted this list element (we will discuss in Section~\\ref{sec:lamport-ts} how to generate these identifiers)"],[47914,2,""],[47914,0,"The cursor"],[48183,4,""],[48183,0,"that has"],[48629,0," being traversed"],[49333,0," rules"],[49340,0,"$"],[49353,0,"=="],[49350,5,""],[49350,0,"dx"],[49353,0,"_{1\\"],[49356,1,""],[49356,0," \\dots 5}$ define how to evaluate the expression \\verb|doc.idx(|$n$"],[49422,1,""],[49422,0,"$\\verb|)|\n\n"],[49431,0,", moving the cursor to a particular element of a list. First, \\"],[49493,1,""],[49493,0,"$\\textsc{Idx}_1$ constructs a cursor representing the head of the list, "],[49486,7,""],[49558,0,"and delegates to the subsequent rules to scan over the list. $\\textsc{Idx}_2$ recursively descends the local state according to the vector of keys in the cursor. When the vector of keys is empty, the context $\\mathit{ctx}$ is the subtree of $A_p$ representing "],[49805,13,""],[49805,0,"that stores the list in question, and the rules $\\textsc{Idx}_{3,4,5}$ iterate over that list until the desired element is fin"],[49929,2,""],[49929,0,"ound.\n\n$\\textsc{Idx}_5$ terminates the iteration when the index reaches zero, while $\\textsc{Idx}_3$ moves to the next element and decrements the index, and $\\textsc{Idx}_4$ skips over deleted list elements. The list structure resembled"],[50164,1,""],[50164,0,"s a linked list"],[50141,5,""],[50174,0,": each list element has a unique identifier $k$, and the partial function representing local state mas"],[50275,1,""],[50275,0,"ps $\\mathsf{next}(k)$ to the ID of the list element that follows $k$. When a list "],[50345,12,""],[50345,0,"Each list elemment"],[50359,4,""],[50359,0,"enbt "],[50361,3,""],[50361,0,"t also has "],[50114,8,""],[50127,0," that are marked as deleted"],[50363,0," Deleted list elements are never removed from the"],[50371,5,""],[50407,0," linked list structure"],[50363,1,""],[50363,0,"\n\n"],[50430,28,""],[50430,0,", but only marked as deleted. To this end, the local state contains a \\emph{presence set} $\\mathsf{pres}(k)$ for each list element with ID $k$."],[50543,4,""],[50543,0,"a"],[50489,3,""],[50489,0,"main"],[50544,1,""],[50544,0,"the"],[50573,0," This s"],[50574,6,""],[50574,0,"Th"],[50573,3,""],[50573,0," It is the set of all operations that have asserted the existence of the list element. When a list element is deleted, the prece"],[50699,2,""],[50699,0,"sence set is set to the empty set, marking it as deleted; however, a concurrent operation that references the list element can cause the presence set to be come non-empty again (leading to the situations in Figures~\\ref{fig:map-remove} and "],[50938,1,""],[50938,0,"~\\ref{fig:todo-item})."],[50572,4,""],[50572,0,", which"],[50647,1,""],[50647,0,"is"],[50742,3,""],[50742,0,"s"],[50738,0,"which "],[50968,0," $"],[50969,1,""],[50969,0,"Rule $\\textsc{Idx}_4$ handles list element "],[51011,1,""],[51011,0,"s with empty presence"],[51018,0,"an "],[51035,0," set by moving to the next list element without decrementing the index."],[51108,811,""],[47846,0,"these identifiers "],[47895,34,""],[49395,3,""],[51086,0,", i.e. not counting them as list elements"],[51585,4,""],[51585,0,"Idx"],[51679,96,""],[52207,0,"same "],[52277,139,""],[52488,0,","],[54900,0,"\\emph{"],[54925,0,"}"],[54943,0,". A c"],[54946,2,""],[54946,0," causal dependency is "],[54965,3,""],[54965,0,"of operation $o_2$ is any operation $o_1$ that had been applied at the replica where $o_2$ was "],[55015,0," already"],[54944,0," If operation $o_2$ was generated by replica $p$, then"],[54999,1,""],[54999,0,"a"],[55021,10,""],[55080,0," on $p$ at the time when $o_2$ was generated. In this paper, we defined"],[55150,1,""],[55150,0," the "],[55151,4,""],[55151,0,"\\ma"],[55151,3,""],[55151,0,"$\\mathit{deps}$ as the set of Lamport timestamps of all causal dependencies."],[55228,237,""],[54944,0," It is defined as follows:"],[54971,1,""],[54971,0,"i"],[56788,0,"After"],[78012,4,""],[78012,0,"Idx"],[78082,4,""],[78082,0,"idx"],[78074,0,"$"],[78087,0,"(n)$"],[78075,5,""],[78075,0,"\\math"],[78076,4,""],[78076,0,"tex"],[78076,3,""],[78076,0,"math"],[78018,2,""],[78019,0,",4"],[88740,4,""],[88740,0,"Idx"],[78131,0," because $n$ is greater than the number of non-deleted elements in the list"],[78131,8,""],[78131,0,", which would happen if"],[51086,1,""],[51086,0," "],[51087,1,""],[51087,0,"("],[51092,0,","],[51128,0,")"],[56024,1,""],[56025,0,"("],[56030,0,","],[56067,1,""],[56067,0,")"],[56067,0," in either direction"],[68780,4,""],[68780,0,"which is the case"],[59845,13,""],[59845,0,"its"],[59845,3,""],[59845,0,"the"],[61337,10,""],[61333,3,""],[61333,0,"its"],[60398,17,""],[61431,10,""],[61431,0,"applying"],[61242,9,""],[61242,0,"applies"],[67598,8,""],[67598,0,"apply"],[67631,6,""],[67631,0,"to"],[67659,4,""],[67666,1,""],[67666,0,"ing"],[67963,2,""],[67970,0,"'s vector of keys is non-empty,"],[68002,68,""],[68085,51,""],[68085,0,"by following the path described by these keys"],[68123,2,""],[76500,0,","],[81608,0,"\n\n"],[81608,0,"are also working on a practical implementation of the algorithm, and will report on its performance characteristics in follow-on work."],[81744,480,""],[50439,0," (this "],[50441,5,""],[50441,0,"they become \\emph{tombstones})"],[50453,0,"so-c"],[50456,1,""],[50455,0,"c"],[50455,1,""],[50456,0,"called "],[51257,17,""],[81843,0,"at first glance to be "],[82145,0,","],[83232,0,"\n\\vfill"],[83231,1,""],[83238,0,"\n"],[84403,8,""],[12217,8,""],[12217,0,"quorum"],[12474,0,"struggle to reach a quorum and "],[12393,20,""],[12393,0,"e offline at any one"],[12359,18,""],[12359,0,"many"],[12511,0,"Without quorums, "],[12528,1,""],[12528,0,"t"],[12552,5,""],[12006,0," without using a single server"],[12097,41,""],[12232,11,""],[12300,0," participants"],[12313,3,""],[12376,16,""],[12332,36,""],[16660,0,"\n\nResolving concurrent updates on tree structures has been studied in the context of filesystem synchronization~\\cite{Balasubramaniam:1998jh,Ramsey:2001ce,"],[16814,1,""],[16814,0,"}."],[16749,6,""],[13003,5,""],[13118,4,""],[13027,5,""],[13726,8,""],[13602,0,","],[13263,0,","],[13865,24,""],[4816,2,""],[4816,0,"is"],[60611,0,"s"],[61308,1,""],[82969,0," "],[2167,0," (a conflict-free replicated datatype or CRDT)"]]}]