{"txns":[{"span":[0,380],"parents":[],"agent":"Avery Pennarun","seqStart":0,"ops":[[0,0,"default:\n\t@echo \"git-subtree doesn't need to be built.\"\n\t@echo\n\t@echo \"Try: make doc\"\n\t@false\n\ndoc: git-subtree.1\n\n%.1: %.xml\n\txmlto -m manpage-normal.xsl  man $^\n\n%.xml: %.txt\n\tasciidoc -b docbook -d manpage -f asciidoc.conf \\\n\t\t-agit_version=1.6.3 $^\n\nclean:\n\trm -f *~ *.xml *.html *.1\n\trm -rf subproj mainline\n"],[62,0," \"Just copy it somewhere on your PATH, like /usr/local/bin.\"\n\t@echo"]]},{"span":[380,989],"parents":[379],"agent":"Ben Walton","seqStart":0,"ops":[[0,0,"prefix ?= /usr/local\nman"],[25,0,"ir ?= $(pr"],[37,0,"ix)/share/man\ngitdir ?= $(shell git --exec-p"],[82,0,"th)\n\n# this sho"],[99,0,"d be set to a 'standard' bsd-type install program\nINSTALL ?= ins"],[164,0,"all\nINSTALL_DATA = $(INSTALL) -c -m 0644\nINSTALL_EXE = $(INSTALL) -c -m 0755\nINSTALL_DIR = $(INSTALL) -c -d -m 0755\n\ndefault"],[443,0,"install: install-exe install-doc\n\ninstall-exe: git-subtree.sh\n\t$(INSTALL_DIR) $(DESTDIR)/$(gitdir)\n\t$(INSTALL_EXE) $< $(DESTDIR)/$(gitdir)/git-subtree\n\ninstall-doc: git-subtree.1\n\t$(INSTALL_DIR) $(DESTDIR)/$(mandir)/man1/\n\t$(INSTALL_DATA) $< $(DESTDIR)/$(mandir)/man1/\n\n"],[87,0,"gitver ?= $(word 3,$(shell git --version))\n\n"],[906,5,""],[906,0,"$(gitver)"]]},{"span":[989,1033],"parents":[988],"agent":"Avery Pennarun","seqStart":380,"ops":[[480,0,"echo \" or: make test\"\n\t@"],[943,0,"\t\t\ntest:\n\t./test.sh\n"]]},{"span":[1033,2711],"parents":[],"agent":"Linus Torvalds","seqStart":0,"ops":[[0,0,"CFLAGS=-g\nCC=gcc\n\nPROG=update-cache show-diff init-db write-tree read-tree commit-tree cat-file\n\nall: $(PROG)\n\ninstall: $(PROG)\n\tinstall $(PROG) $(HOME)/bin/\n\nLIBS= -lssl\n\ninit-db: init-db.o\n\nupdate-cache: update-cache.o read-cache.o\n\t$(CC) $(CFLAGS) -o update-cache update-cache.o read-cache.o $(LIBS)\n\nshow-diff: show-diff.o read-cache.o\n\t$(CC) $(CFLAGS) -o show-diff show-diff.o read-cache.o $(LIBS)\n\nwrite-tree: write-tree.o read-cache.o\n\t$(CC) $(CFLAGS) -o write-tree write-tree.o read-cache.o $(LIBS)\n\nread-tree: read-tree.o read-cache.o\n\t$(CC) $(CFLAGS) -o read-tree read-tree.o read-cache.o $(LIBS)\n\ncommit-tree: commit-tree.o read-cache.o\n\t$(CC) $(CFLAGS) -o commit-tree commit-tree.o read-cache.o $(LIBS)\n\ncat-file: cat-file.o read-cache.o\n\t$(CC) $(CFLAGS) -o cat-file cat-file.o read-cache.o $(LIBS)\n\nread-cache.o: cache.h\nshow-diff.o: cache.h\n\nclean:\n\trm -f *.o $(PROG) temp_git_file_*\n\nbackup: clean\n\tcd .. ; tar czvf dircache.tar.gz dir-cache\n"],[9,0," -O3 -Wall"],[105,0," fsck-cache"],[833,0,"fsck-cache: fsck-cache.o read-cache.o\n\t$(CC) $(CFLAGS) -o fsck-cache fsck-cache.o read-cache.o $(LIBS)\n\n"],[191,0," -lz"],[33,0,"\t"],[98,0,"\\\n\t"],[120,0," checkout-cache"],[960,0,"checkout-cache: checkout-cache.o read-cache.o\n\t$(CC) $(CFLAGS) -o checkout-cache checkout-cache.o read-cache.o $(LIBS)\n\n"],[135,0," diff-tree"],[1090,0,"diff-tree: diff-tree.o read-cache.o\n\t$(CC) $(CFLAGS) -o diff-tree diff-tree.o read-cache.o $(LIBS)\n\n"],[145,0," rev-tree"],[1201,0,"v-tree: rev-tree.o read-cache.o\n\t$(CC) $(CFLAGS) -o rev-tree rev-tree.o read-cache.o $(LIBS)\n\nre"],[154,0," show-files"],[1306,0,"show-files: show-files.o read-cache.o\n\t$(CC) $(CFLAGS) -o show-files show-files.o read-cache.o $(LIBS)\n\n"],[165,0," \\\n\tcheck-files"],[1425,0,"check-files: check-files.o read-cache.o\n\t$(CC) $(CFLAGS) -o check-files check-files.o read-cache.o $(LIBS)\n\n"]]},{"span":[2711,3337],"parents":[2710],"agent":"Petr Baudis","seqStart":0,"ops":[[33,1,""],[33,0,"   "],[182,0," ls-tree"],[1543,0,"ls-tree: ls-tree.o read-cache.o\n\t$(CC) $(CFLAGS) -o ls-tree ls-tree.o read-cache.o $(LIBS)\n\n"],[0,0,"# -D"],[5,0,"OLLISION_CHECK if you believe that SHA1's\n# 1461501637330902918203684832716283019655932542976 hashes do not give you\n# enough guarantees about no collisions between objects ever hapenning.\nC"],[214,0,"\n"],[194,0,"#\n# -DNSE"],[204,0," if you want git to care about sub-second file mtimes and ctimes.\n# Note that you need some new glibc (at least >2.2.4) for this, and it will\n# BREAK YOUR LOCAL DIF"],[369,0,"S! show-diff and anything using it will likely randomly\n# break unless your underlying filesystem supports those sub-second times\n# (my ext3 doesn't).\nCF"],[549,0,"\n"]]},{"span":[3337,3353],"parents":[3336],"agent":"Junio C Hamano","seqStart":0,"ops":[[2226,16,""]]},{"span":[3353,3698],"parents":[3352],"agent":"Linus Torvalds","seqStart":1678,"ops":[[712,0," merge-tree"],[2168,0,"merge-tree: merge-tree.o read-cache.o\n\t$(CC) $(CFLAGS) -o merge-tree merge-tree.o read-cache.o $(LIBS)\n\n"],[712,11,""],[2127,104,""],[712,0," merge-base"],[2168,0,"merge-base: merge-base.o read-cache.o\n\t$(CC) $(CFLAGS) -o merge-base merge-base.o read-cache.o $(LIBS)\n\n"]]},{"span":[3698,3818],"parents":[3697],"agent":"Linus Torvalds","seqStart":2023,"ops":[[723,0," merge-cache"],[2284,0,"merge-cache: merge-cache.o read-cache.o\n\t$(CC) $(CFLAGS) -o merge-cache merge-cache.o read-cache.o $(LIBS)\n\n"]]},{"span":[3818,4010],"parents":[3697],"agent":"Daniel Barkalow","seqStart":0,"ops":[[1801,0," object.o commit.o tree.o blob.o"],[1887,0,"object.o commit.o tree.o blob.o "],[1481,0," object.o commit.o tree.o blob.o"],[1571,0,"object.o commit.o tree.o blob.o "],[2333,0," object.o commit.o tree.o blob.o"],[2423,0,"object.o commit.o tree.o blob.o "]]},{"span":[4010,5829],"parents":[3817,4009],"agent":"Linus Torvalds","seqStart":2143,"ops":[[548,0,"AR=ar\n"],[808,0,"_OBJS=read-cache.o object.o commit.o tree.o blob.o\nLIB_FILE=libgit.a\n\n$(LIB_FILE): $(LIB_OBJS)\n\t$(AR) rcs $@ $(LIB_OBJS)\n\nLIB"],[936,0,"$(LIB_FILE) "],[1008,12,""],[1008,0,"$(LIB_FILE)"],[1068,13,""],[1100,12,""],[1100,0,"$(LIB_FILE)"],[1154,13,""],[1188,12,""],[1188,0,"$(LIB_FILE)"],[1244,13,""],[1276,12,""],[1276,0,"$(LIB_FILE)"],[1324,6,""],[1326,7,""],[1366,12,""],[1366,0,"$(LIB_FILE)"],[1420,13,""],[1454,12,""],[1454,0,"$(LIB_FILE)"],[1506,13,""],[1540,12,""],[1540,0,"$(LIB_FILE)"],[1619,13,""],[1628,32,""],[1670,12,""],[1670,0,"$(LIB_FILE)"],[1734,13,""],[1766,12,""],[1766,0,"$(LIB_FILE)"],[1814,6,""],[1816,7,""],[1850,12,""],[1850,0,"$(LIB_FILE)"],[1934,45,""],[1968,12,""],[1968,0,"$(LIB_FILE)"],[2024,13,""],[2060,12,""],[2060,0,"$(LIB_FILE)"],[2118,13,""],[2146,12,""],[2146,0,"$(LIB_FILE)"],[2196,13,""],[2230,12,""],[2230,0,"$(LIB_FILE)"],[2314,20,""],[2315,25,""],[2354,12,""],[2354,0,"$(LIB_FILE)"],[2412,13,""],[2490,0," $(LIB_FILE)"],[827,0,"sha1_file.o usage.o "],[897,0,"LIB_H=cache.h object.h\n"],[2464,0,"blob.o: $(LIB_H)\ncat-file.o: $(LIB_H)\ncheck-files.o: $(LIB_H)\ncheckout-cache.o: $(LIB_H)\ncommit.o: $(LIB_H)\ncommit-tree.o: $(LIB_H)\ndiff-t"],[2604,0,"e.o: $(LIB_H)\nfsck-c"],[2625,0,"che.o: $(LIB_H)\ninit-"],[2647,0,"b.o: $(LIB_H)\nls-tree.o: $(LIB_H)\nmerge"],[2687,0,"base.o: $(LIB_H)\nmerge-"],[2719,0,"$(LIB_H)\nobject.o: $(LIB_H)\nread-"],[2758,0,"o: $(LIB_H)\nread-tree.o: $(LIB_H)\nrev-tree.o: $(LIB_H)\ns"],[2815,0,"a1_file.o: $(LIB_H)"],[2848,0,"$(LIB_H)\nshow-files.o: $(LIB_H)\ntree.o: $(LIB_H)\nupdate-"],[2910,1,""],[2910,0,"o: $(LIB_H)\nusage.o: $(LIB_H)\nwrite-tree.o: $(LIB_H)"],[741,0," unpack-file"],[2476,0,"unpack-file: unpack-file.o $(LIB_FILE)\n\t$(CC) $(CFLAGS) -o unpack-file unpack-file.o $(LIBS)\n\n"],[3046,0,"unpack-file.o: $(LIB_H)\n"],[753,0," git-export"],[2581,0,"git-export: git-export.o $(LIB_FILE)\n\t$(CC) $(CFLAGS) -o git-export git-export.o $(LIBS)\n\n"],[2848,0,"git_export.o: $(LIB_H)\n"],[764,0," \\\n\tdiff-cache"],[2685,0,"diff-cache: diff-cache.o $(LIB_FILE)\n\t$(CC) $(CFLAGS) -o diff-cache diff-cache.o $(LIBS)\n\n"],[2912,0,"cache.o: $(LIB_H)\ndiff-"],[2978,1,""],[2978,0,"-"],[778,0," convert-cache"],[2789,0,"convert-cache: convert-cache.o $(LIB_FILE)\n\t$(CC) $(CFLAGS) -o convert-cache convert-cache.o $(LIBS)\n\n"],[3023,0,"convert-cache.o: $(LIB_H)\n"],[532,1,""],[532,0,"2"]]},{"span":[5829,7243],"parents":[5828],"agent":"Andre Noll","seqStart":0,"ops":[[1073,161,""],[1074,1,""],[1075,196,""],[1076,178,""],[1175,94,""],[1176,9,""],[1177,3,""],[1182,76,""],[1183,10,""],[1292,163,""],[1293,49,""],[1305,21,""],[1307,29,""],[1430,39,""],[1431,249,""],[1431,0,"%"],[1434,10,""],[1434,0,"%"],[1466,14,""],[1467,4,""],[1468,6,""],[1471,38,""],[1471,0,"@"],[1474,60,""],[1474,0,"<"]]},{"span":[7243,7844],"parents":[7242],"agent":"Linus Torvalds","seqStart":3962,"ops":[[972,0,"LIBS = "],[990,0,"\nLIBS += -lz\nLIBS += -lssl\n\n$(LIB_FILE)"],[1068,29,""],[1003,13,""],[1004,8,""],[1004,0,"ifdef MOZ"],[1015,6,""],[1016,2,""],[1016,0,"A"],[1018,3,""],[1019,1,""],[1019,0,"HA1"],[1023,3,""],[1023,0,"  SHA1_HE"],[1033,0,"DE"],[1036,4,""],[1036,0,"=\"mozilla-"],[1047,0,"ha1/sha1.h\"\n"],[1060,2,""],[1061,2,""],[1069,11,""],[1070,2,""],[1070,0,"+= moz"],[1077,1,""],[1077,0,"lla"],[1081,7,""],[1082,6,""],[1083,9,""],[1084,1,""],[1084,0,"1/s"],[1088,1,""],[1088,0,"a1"],[1092,0,"\nelse\n"],[1099,5,""],[1099,0," SHA1"],[1105,3,""],[1105,0,"HEAD"],[1110,2,""],[1110,0,"R=<"],[1114,2,""],[1114,0,"p"],[1116,2,""],[1116,0,"nssl/sha"],[1125,1,""],[1125,0,"h>\n"],[1129,8,""],[1130,6,""],[1130,0,"LIBS"],[1135,1,""],[1135,0,"+= -"],[1140,4,""],[1140,0,"ssl"],[1144,9,""],[1144,0,"endif\n\n"],[1157,1,""],[1158,2,""],[1158,0,"+="],[1161,4,""],[1161,0,"'"],[1163,19,""],[1163,0,"DSHA1_HEADER="],[1178,3,""],[1179,0,"HA1_HEADER"],[1190,0,"'"],[1193,21,""],[1204,18,""],[1204,0,":"],[1206,15,""],[1208,2,""],[1208,0,"LIB_OBJS"],[1217,1,""],[1217,0,"\n\t"],[1221,3,""],[1222,2,""],[1222,0,"R"],[1225,8,""],[1226,2,""],[1226,0,"cs"],[1229,10,""],[1229,0,"$@"],[1237,0,"_OBJ"],[1245,5,""],[1245,0,"init"],[1250,0,"d"],[1252,3,""],[1254,38,""],[1255,0,"ni"],[1258,34,""],[1259,19,""],[1259,0,"d"],[1261,3,""],[1263,8,""],[1933,0,"mozilla-sha1/*.o "]]},{"span":[7844,7944],"parents":[7843],"agent":"Paul Mackerras","seqStart":0,"ops":[[1098,0,"ifdef PPC_SHA1\n  SHA1_HEADER=\"ppc/sha1.h\"\n  LIB_OBJS += ppc/sha1.o ppc/sha1ppc.o\nelse\n"],[1236,0,"endif\n"],[2042,0,"ppc/*.o "]]},{"span":[7944,7946],"parents":[7943],"agent":"Jonas Fonseca","seqStart":0,"ops":[[1362,1,""],[1362,0,"c"]]},{"span":[7946,8097],"parents":[7945],"agent":"Daniel Barkalow","seqStart":192,"ops":[[792,0," http-pull rpush rpull"],[1422,1,""],[1422,0,"(filter %.c,$^)"],[1447,0,"rpush: rsh.c\n\nrpull: rsh.c\n\nhttp-pull: LIBS += -lcurl\n\n"],[2097,0,"http-pull.o: $(LIB_H)\nrpull.o: $(LIB_H)\nrpush.o: $(LIB_H)\n"]]},{"span":[8097,8220],"parents":[8096],"agent":"Linus Torvalds","seqStart":4563,"ops":[[814,0," rev-list git-mktag"],[555,0,"SCRIPTS=git-merge-one-file-script git-prune-script git-pull-script git-tag-script\n"],[947,0," $(SCRIPTS)"],[978,0,"SCRIPTS) $("]]},{"span":[8220,8333],"parents":[8219],"agent":"Junio C Hamano","seqStart":16,"ops":[[1120,0,"_H += diff.h\nLIB_OBJ"],[1142,0,"+"],[1145,0,"diff.o\n\nLIBS = "],[1823,0,".o: $(LIB_H)\ndiff"],[915,0," \\\n\tdiff-tree-helper"],[1146,0,"strbuf.h\nLIB_OBJS += strbuf.o\n\nLIB_H += "]]},{"span":[8333,8339],"parents":[8332],"agent":"Daniel Barkalow","seqStart":343,"ops":[[1094,0," tag.o"]]},{"span":[8339,8368],"parents":[8338],"agent":"Linus Torvalds","seqStart":4686,"ops":[[1141,0," blob.h tree.h commit.h tag.h"]]},{"span":[8368,8377],"parents":[8367],"agent":"Rene Scharfe","seqStart":0,"ops":[[935,0," tar-tree"]]},{"span":[8377,9503],"parents":[8376],"agent":"Linus Torvalds","seqStart":4715,"ops":[[622,0,"\\\n\t"],[649,0,"git-"],[666,4,""],[666,0,"git"],[674,0,"-files"],[681,0,"g"],[683,0,"t-i"],[693,0,"git-"],[708,0,"\\\n\tgit-"],[725,0,"git-"],[741,3,""],[741,0,"git-"],[754,0,"git-"],[769,0,"\\\n\tgit-"],[791,0,"git-"],[805,0,"git-"],[818,0,"git-"],[836,0,"git-"],[852,0,"git-"],[864,0,"git-"],[879,0,"git-"],[895,0,"\\\n\tgit-"],[925,3,""],[925,0,"git-"],[940,0,"git-"],[958,0,"\\\n\tgit-"],[975,0,"git-"],[985,0,"git-"],[995,0,"git-"],[1021,0,"git-"],[1042,0,"gi"],[1045,0,"-t"],[1752,0,"git-"],[1824,1,""],[1824,0,"git-u"],[1830,2,""],[1830,0,"date-cac"],[1839,0,"e"],[1842,2,""],[1842,0,"update-cac"],[1853,0,"e"],[1857,5,""],[1857,0,"git-diff-fi"],[1869,0,"es"],[1873,1,""],[1873,0,"diff-file"],[1883,1,""],[1886,2,""],[1886,0,"gi"],[1889,0,"-ini"],[1894,1,""],[1895,4,""],[1895,0,"db"],[1899,4,""],[1899,0,"init-db.c\ngit-write-tree:"],[1925,2,""],[1925,0,"write-tree.c\ngit-read-tree:"],[1953,0,"read"],[1958,3,""],[1958,0,"t"],[1960,7,""],[1960,0,"ee"],[1963,0,"c\ngit-c"],[1971,0,"mmit-tree"],[1982,8,""],[1982,0,"commit-tree.c"],[1996,0,"git-"],[2008,2,""],[2010,9,""],[2011,4,""],[2011,0,"at"],[2018,1,""],[2019,11,""],[2019,0,"c"],[2021,0,"git-fsck-ca"],[2035,0,": fs"],[2041,3,""],[2048,11,""],[2048,0,"c"],[2050,4,""],[2050,0,"g"],[2053,13,""],[2053,0,"-che"],[2058,0,"k"],[2060,3,""],[2060,0,"u"],[2063,3,""],[2063,0,"cach"],[2068,2,""],[2070,9,""],[2071,0,"heck"],[2076,4,""],[2076,0,"u"],[2085,11,""],[2085,0,"c"],[2087,0,"git-"],[2095,2,""],[2095,0,"-tree"],[2102,9,""],[2107,4,""],[2107,0,"tre"],[2112,1,""],[2112,0,"c\ngit-rev-tree"],[2128,13,""],[2128,0,"rev"],[2137,0,"c\ngit-sh"],[2146,0,"w-files"],[2155,9,""],[2155,0,"show-"],[2161,0,"ile"],[2165,0,"."],[2167,1,""],[2167,0,"\ngit"],[2173,2,""],[2175,2,""],[2175,0,"ck-files"],[2185,10,""],[2185,0,"check-f"],[2193,2,""],[2193,0,"l"],[2195,5,""],[2195,0,"s"],[2197,11,""],[2197,0,"c"],[2199,2,""],[2199,0,"g"],[2203,4,""],[2203,0,"ls-tree"],[2212,9,""],[2220,1,""],[2220,0,"c\ngit-merge-base"],[2238,9,""],[2249,1,""],[2249,0,"c\ngit-merge-cache"],[2268,9,""],[2280,1,""],[2280,0,"c\ngit-unpack-file"],[2299,12,""],[2299,0,"unpack-fil"],[2310,0,"."],[2312,0,"\ngi"],[2316,1,""],[2316,0,"-exp"],[2321,0,"rt"],[2325,9,""],[2325,0,"expo"],[2330,1,""],[2330,0,"t.c\ngit-diff-c"],[2345,0,"che: "],[2351,0,"iff"],[2361,0,"c\ngit-c"],[2369,0,"nvert-cache"],[2382,9,""],[2382,0,"conve"],[2388,0,"t-cach"],[2395,2,""],[2395,0,".c\ngit-http-pull: http"],[2418,0,"pull.c\ngi"],[2428,0,"-"],[2430,2,""],[2430,0,"push: rsh"],[2440,1,""],[2440,0,"c\ngit-rpull"],[2453,8,""],[2453,0,"rsh.c"],[2459,0,"git-"],[2467,0,"lis"],[2471,0,": "],[2474,1,""],[2475,0,"v-list"],[2482,1,""],[2482,0,"c\ngit-mktag"],[2495,11,""],[2495,0,"mkt"],[2499,3,""],[2499,0,"g.c\ngit-d"],[2509,0,"ff-tree-he"],[2520,0,"p"],[2522,2,""],[2522,0,"r"],[2525,14,""],[2529,0,"-tree-helper"],[2542,1,""],[2542,0,"c\ngit-tar-tree"],[2558,2,""],[2558,0,"tar-tree.c\n\ngit-http-pull: "],[2588,3,""],[2588,0,"S += -lcurl"],[2600,2,""],[2600,0,"\n# Library "],[2612,5,""],[2612,0,"bj"],[2615,0,"ct"],[2619,0,".\nblob."],[2655,4,""],[2655,0,"commi"],[2661,7,""],[2674,2,""],[2674,0,"t"],[2677,1,""],[2690,10,""],[2690,0,"obj"],[2694,0,"ct"],[2709,1,""],[2710,2,""],[2711,0,"ad"],[2714,3,""],[2714,0,"cach"],[2732,0,"s"],[2734,6,""],[2734,0,"a1_fi"],[2740,1,""],[2740,0,"e"],[2754,2,""],[2755,2,""],[2755,0,"sage"],[2772,5,""],[2772,0,"diff"]]},{"span":[9503,9542],"parents":[9502],"agent":"Junio C Hamano","seqStart":129,"ops":[[1732,20,""],[2769,0,"strbuf.o: $(LIB_H)\n"]]},{"span":[9542,9574],"parents":[9541],"agent":"tony.luck@intel.com","seqStart":0,"ops":[[2580,0,"git-commit-tree: LIBS += -lcurl\n"]]},{"span":[9574,9617],"parents":[9573],"agent":"Edgar Toernig","seqStart":0,"ops":[[1214,0,"\\\n\t "],[1223,0," date.o"],[2574,32,""]]},{"span":[9617,9702],"parents":[9616],"agent":"Linus Torvalds","seqStart":5841,"ops":[[822,0,"l"],[824,3,""],[2132,0,"l"],[2134,3,""],[2142,0,"l"],[2144,3,""],[1741,0,"test-date: test-date.c date.o\n\t$(CC) $(CFLAGS) -o $@ test-date.c date.o\n\n"]]},{"span":[9702,9716],"parents":[9701],"agent":"Daniel Barkalow","seqStart":349,"ops":[[2482,0," pull.c"],[2523,0," pull.c"]]},{"span":[9716,9840],"parents":[9715],"agent":"Junio C Hamano","seqStart":168,"ops":[[567,0,"apply-patch-script git-"],[629,0,"\\\n\t"],[648,3,""],[1075,0," git-local-pull"],[2532,0,"local-pull: local-pull.c pull.c\ngit-"],[1090,0," git-write-blob"],[2730,0,"git-write-blob: write-blob.c\n"]]},{"span":[9840,9859],"parents":[9839],"agent":"Linus Torvalds","seqStart":5926,"ops":[[662,0," git-resolve-script"]]},{"span":[9859,9966],"parents":[9858],"agent":"Thomas Glanzmann","seqStart":0,"ops":[[521,0,"OPTS=-O2\nC"],[540,1,""],[540,0,"$(C"],[544,1,""],[544,0,"PTS)"],[556,0,"prefix=$(HOME)\nbin=$(prefix)/bin\n# dest=\n\n"],[611,0,"INSTALL=install\n"],[1242,7,""],[1242,0,"$(INSTALL)"],[1274,4,""],[1274,0,"dest"],[1279,1,""],[1279,0,"$("],[1284,1,""],[1284,0,")"]]},{"span":[9966,10041],"parents":[9965],"agent":"Junio C Hamano","seqStart":292,"ops":[[1197,0," \\\n\tgit-get-tar-commit-id"],[1553,0,"_OBJ"],[1559,0,"+"],[1562,0,"gitenv.o\n\nLIBS = "],[3141,0,"gitenv.o: $(LIB_H)\n"],[1826,3,""],[1826,0,"crypto"]]},{"span":[10041,10064],"parents":[10040],"agent":"Petr Baudis","seqStart":626,"ops":[[3164,0,"test:\n\tmake -C t/ all\n\n"]]},{"span":[10064,10083],"parents":[10063],"agent":"Junio C Hamano","seqStart":367,"ops":[[1143,5,""],[2814,5,""],[2826,5,""],[3154,0," all"]]},{"span":[10083,10099],"parents":[10082],"agent":"Linus Torvalds","seqStart":5945,"ops":[[754,0," git-whatchanged"]]},{"span":[10099,10213],"parents":[10098],"agent":"Nicolas Pitre","seqStart":0,"ops":[[1413,0," diff-delta.o patch-delta.o"],[1510,0," delta.h"],[2059,0,"test-delta: test-delta.c diff-delta.o patch-delta.o\n\t$(CC) $(CFLAGS) -o $@ $^\n\n"]]},{"span":[10213,10221],"parents":[10212],"agent":"Junio C Hamano","seqStart":386,"ops":[[1414,0,"index.o "]]},{"span":[10221,10286],"parents":[10220],"agent":"Nicolas Pitre","seqStart":114,"ops":[[1408,0,"elta.o d"],[770,0," \\"],[773,0,"\tgit-deltafy-script\n"],[1255,0," git-mkdelta"],[3070,0,"git-mkdelta: mkdelta.c\n"]]},{"span":[10286,10402],"parents":[10285],"agent":"Junio C Hamano","seqStart":394,"ops":[[1644,0," diffcore-rename.o"],[3314,3,""],[3314,0,"strbu"],[3333,1,""],[3333,0,"gi"],[3336,3,""],[3336,0,"env.o: $(LIB_H)\ndif"],[3369,1,""],[3369,0,"d"],[3371,1,""],[3371,0,"ffcore-r"],[3381,1,""],[3381,0,"ame"],[3386,0," "],[1662,0," diffcore-pickaxe.o"],[3417,0,"diffcore-pickaxe.o : $(LIB_H)\n"]]},{"span":[10402,10432],"parents":[10401],"agent":"Linus Torvalds","seqStart":5961,"ops":[[3538,0,"\tmake -C Documentation/ clean\n"]]},{"span":[10432,10527],"parents":[10431],"agent":"Junio C Hamano","seqStart":510,"ops":[[1681,0," diffcore-pathspec.o"],[3407,0," diffcore.h"],[3447,0," diffcore.h"],[3469,0,"athspec.o : $(LIB_H) d"],[3492,0,"ff"],[3495,0,"ore.h\ndiffcore-pic"],[3530,0," diffcore.h"]]},{"span":[10527,10544],"parents":[10526],"agent":"Linus Torvalds","seqStart":5991,"ops":[[792,0," git-fetch-script"]]},{"span":[10544,10566],"parents":[10543],"agent":"Thomas Glanzmann","seqStart":107,"ops":[[3571,4,""],[3571,0,"$(MAKE)"],[3654,4,""],[3654,0,"$(MAKE)"]]},{"span":[10566,10642],"parents":[10565],"agent":"Linus Torvalds","seqStart":6008,"ops":[[200,0,"USE_"],[276,0,"-DUSE_STDEV if you want git to care about st_dev changing\n#\n# "],[1350,0," git-apply"]]},{"span":[10642,10729],"parents":[10641],"agent":"Junio C Hamano","seqStart":605,"ops":[[1718,0," count-delta.h"],[1808,0," \\\n\tcount-delta.o diffcore-break.o"],[3683,0,"diffcore-break.o : $(LIB_H) diffcore.h\n"]]},{"span":[10729,10809],"parents":[10728],"agent":"Linus Torvalds","seqStart":6084,"ops":[[875,0," git-status-script git-commit-script"],[1396,0," git-stripspace"],[3342,0,"git-stripspace: stripspace.c\n"]]},{"span":[10809,10865],"parents":[10808],"agent":"Junio C Hamano","seqStart":692,"ops":[[1893,0," diffcore-order.o"],[3819,0,"diffcore-order.o : $(LIB_H) diffcore.h\n"]]},{"span":[10865,10900],"parents":[10864],"agent":"Linus Torvalds","seqStart":6164,"ops":[[705,0," git"],[915,0," \\\n\tgit-log-script git-shortlog"]]},{"span":[10900,10920],"parents":[10899],"agent":"Junio C Hamano","seqStart":748,"ops":[[1284,1,""],[1284,0,"ssh-"],[1297,1,""],[1297,0,"ssh-"],[3211,1,""],[3211,0,"ssh-"],[3231,1,""],[3231,0,"ssh-"]]},{"span":[10920,10946],"parents":[10919],"agent":"Linus Torvalds","seqStart":6199,"ops":[[1675,0," entry.o"],[3684,0,"entry.o: $(LIB_H)\n"]]},{"span":[10946,10980],"parents":[10945],"agent":"jon@blackcubes.dyndns.org","seqStart":0,"ops":[[1683,0," epoch.o"],[1769,0," epoch.h"],[3947,0,"epoch.o: $(LIB_H)\n"]]},{"span":[10980,11008],"parents":[10979],"agent":"Linus Torvalds","seqStart":6225,"ops":[[3490,0,"git-rev-list: LIBS += -lssl\n"]]},{"span":[11008,11019],"parents":[11007],"agent":"Daniel Barkalow","seqStart":363,"ops":[[1684,0,"\\\n\t "],[1695,0," refs.o"]]},{"span":[11019,11078],"parents":[11018],"agent":"Linus Torvalds","seqStart":6253,"ops":[[946,0," git-cvsimport-script"],[1473,0," \\"],[1476,0,"\tgit-cvs2git\n"],[3506,0,"git-cvs2git: cvs2git.c\n"]]},{"span":[11078,11125],"parents":[11077],"agent":"Junio C Hamano","seqStart":768,"ops":[[1488,0," git-diff-stages"],[3545,0,"git-diff-stages: diff-stages.c\n"]]},{"span":[11125,11237],"parents":[11124],"agent":"Linus Torvalds","seqStart":6312,"ops":[[1504,0," git-rev-parse"],[3590,0,"git-rev-parse: rev-parse.c\n"],[967,0," git-diff-script \\\n\tgit-reset-script git-add-script git-checkout-script"]]},{"span":[11237,11409],"parents":[11236],"agent":"Linus Torvalds","seqStart":6673,"ops":[[1038,0," gitk"],[1042,0,"-clone-script \\\n\tgit"],[1614,0," git-patch-id"],[3726,0,"git-patch-id: patch-id.c\n"],[1627,0," \\"],[1630,0,"\tgit-pack-objects\n"],[3771,0,"git-pack-objects: pack-objects.c\n"],[1647,0," git-unpack-objects"],[3823,0,"git-unpack-objects: unpack-objects.c\n"]]},{"span":[11409,11438],"parents":[11408],"agent":"Junio C Hamano","seqStart":815,"ops":[[1063,0," git-cherry git-rebase-script"]]},{"span":[11438,11456],"parents":[11437],"agent":"Ryan Anderson","seqStart":0,"ops":[[1092,0," git-relink-script"]]},{"span":[11456,11480],"parents":[11455],"agent":"Linus Torvalds","seqStart":6845,"ops":[[1963,0," csum-file.o"],[2061,0," csum-file.h"]]},{"span":[11480,11542],"parents":[11479],"agent":"Junio C Hamano","seqStart":844,"ops":[[848,5,""],[849,14,""],[1560,12,""],[1857,8,""],[3661,23,""]]},{"span":[11542,11549],"parents":[11541],"agent":"Linus Torvalds","seqStart":6869,"ops":[[2034,0," pack.h"]]},{"span":[11549,11610],"parents":[11548],"agent":"Junio C Hamano","seqStart":906,"ops":[[1682,0," git-verify-pack"],[1952,0," verify_pack.o"],[3906,0,"git-verify-pack: verify-pack.c\n"]]},{"span":[11610,11735],"parents":[11609],"agent":"Linus Torvalds","seqStart":6876,"ops":[[1698,0," \\"],[1701,0,"\tgit-receive-pack\n"],[3957,0,"git-receive-pack: receive-pack.c\n"],[1718,0," git-send-pack"],[4004,0,"git-send-pack: send-pack.c\n"],[592,3,""],[1997,0," pkt-line.o"],[2107,0,"\\\n\t"],[2116,0," pkt-line.h"],[592,0,"-O2"]]},{"span":[11735,11748],"parents":[11734],"agent":"Junio C Hamano","seqStart":967,"ops":[[1987,7,""],[1991,0,"-check"]]},{"span":[11748,12168],"parents":[11747],"agent":"Linus Torvalds","seqStart":7001,"ops":[[694,0,"#\n# sparse is architecture-neutral, which means that we need to tell it\n# explicitly what architecture to check for. Fix this up for yours..\n#\nSPARSE_FLAGS=-D__BIG_ENDIAN__ -D__powerpc__\n\n"],[2317,0," refs.h"],[2914,0,"check:\n\tfor i in *.c; do sparse $(CFLAGS) $(SPARSE_FLAGS) $$i; done\n\n"],[1279,0," git-repack-script"],[1938,0," git-prune-packed"],[4354,0,"git-prune-packed: prune-packed.c\n"],[2233,0," connect.o"],[1792,3,""],[1804,0,"\\\n\t"],[1850,3,""],[1867,0,"\\\n\t"],[1905,3,""],[1936,0,"\\\n\t"],[1955,0," git-fetch-pack git-upload-pack"],[4428,0,"git-fetch-pack: fetch-pack.c\n"]]},{"span":[12168,12203],"parents":[11541],"agent":"Matthias Urlichs","seqStart":0,"ops":[[1593,12,""],[3678,23,""]]},{"span":[12203,12209],"parents":[12167,12202],"agent":"Matthias Urlichs","seqStart":35,"ops":[[1792,0,"\\\n\t"],[1799,3,""]]},{"span":[12209,12242],"parents":[12208],"agent":"Linus Torvalds","seqStart":7421,"ops":[[1974,0," git-clone-pack \\\n\tgit-show-index"]]},{"span":[12242,12680],"parents":[12241],"agent":"Chris Wright","seqStart":0,"ops":[[586,0,"GIT_VERSION=0.99\n\n"],[2081,0,"-m755 -d "],[2092,0,"dest)$(bin)\n\t$(INSTALL) $("],[5043,0,"git.spec: git.spec.in\n\tsed -e 's/@@VERSION@@/$(GIT_VERSION)/g' < $< > $@\n\nGIT_TARNAME=git-$(GIT_VERSION)\ndist: git.spec\n\tgit-tar-tree HEAD $(GIT_TARNAME) > $(GIT_TARNAME).tar\n\t@mkdir -p $(GIT_TARNAME)\n\t@cp git.spec $(GIT_TARNAME)\n\ttar rf $(GIT_TARNAME).tar $(GIT_TARNAME)/git.spec\n\t@rm -rf $(GIT_TARNAME)\n\tgzip -9 $(GIT_TARNAME).tar\n\nrpm: dist\n\trpmbuild -ta git-$(GIT_VERSION).tar.gz\n\n"]]},{"span":[12680,12707],"parents":[12679],"agent":"Junio C Hamano","seqStart":980,"ops":[[1315,0," \\\n\tgit-format-patch-script"]]},{"span":[12707,12727],"parents":[12706],"agent":"Linus Torvalds","seqStart":7454,"ops":[[1342,0," git-sh-setup-script"]]},{"span":[12727,12766],"parents":[12726],"agent":"Junio C Hamano","seqStart":1007,"ops":[[2572,0,"quote.h\nLIB_OBJS += quote.o \n\nLIB_H += "]]},{"span":[12766,12789],"parents":[12765],"agent":"Linus Torvalds","seqStart":7474,"ops":[[1362,0," git-push-script"],[2347,0,"path.o "]]},{"span":[12789,12834],"parents":[12788],"agent":"Bryan Larsen","seqStart":0,"ops":[[1812,5,""],[1812,0,"hash"],[1817,2,""],[1819,0,"ject"],[4258,5,""],[4258,0,"hash"],[4263,2,""],[4265,0,"ject"],[4271,5,""],[4271,0,"hash"],[4276,2,""],[4278,0,"ject"]]},{"span":[12834,12849],"parents":[12833],"agent":"Chris Wright","seqStart":438,"ops":[[5274,0," git-tar-tree"],[5289,0,"./"]]},{"span":[12849,12963],"parents":[12848],"agent":"Linus Torvalds","seqStart":7497,"ops":[[1378,0," \\\n\tgit-branch-script"],[5179,0,"-core"],[5194,0,"-core"],[5276,0,"core-"],[5305,0,"-core"],[5420,0,"-core"],[5491,0,"-core"],[5583,0,"core-"],[5705,0,"rm -f git-core-*.tar.gz git-core.spec\n\t"],[2440,0," ident.o"],[2110,0," git-daemon"]]},{"span":[12963,13110],"parents":[12962],"agent":"Eric W. Biederman","seqStart":0,"ops":[[2121,0," git-var"],[4668,0,"git-var: var.c\n"],[711,0,"RPMBUILD=rpmbuild\n"],[5626,8,""],[5626,0,"$(RPMBUILD)"],[5593,0,"f -"],[5707,0,"doc:\n\t$(MAKE) -C Documentation all\n\ninstall-doc:\n\t$(MAKE) -C Documentation install\n\n"]]},{"span":[13110,13121],"parents":[13109],"agent":"Linus Torvalds","seqStart":7611,"ops":[[602,0,".1"],[5269,0," Makefile"]]},{"span":[13121,13138],"parents":[13120],"agent":"Junio C Hamano","seqStart":1046,"ops":[[1419,0," git-parse-remote"]]},{"span":[13138,13387],"parents":[],"agent":"Linus Torvalds","seqStart":6424,"ops":[[0,0,"CC=gcc\nCFLAGS=-Wall -O2\nHOME=$(shell echo $$HOME)\n\nPROGRAMS=mailsplit mailinfo\nSCRIPTS=\n\nall: $(PROGRAMS)\n\ninstall: $(PROGRAMS) $(SCRIPTS)\n\tcp -f $(PROGRAMS) $(SCRIPTS) $(HOME)/bin/\n\nclean:\n\trm -f $(PROGRAMS) *.o\n"],[87,0,"dotest applypatch"],[78,0," stripspace cvs2git"]]},{"span":[13387,13636],"parents":[13137,13386],"agent":"Linus Torvalds","seqStart":7622,"ops":[[6013,249,""]]},{"span":[13636,13658],"parents":[13635],"agent":"Eric W. Biederman","seqStart":147,"ops":[[1436,0," git-verify-tag-script"]]},{"span":[13658,14096],"parents":[13657],"agent":"Junio C Hamano","seqStart":1063,"ops":[[5801,0,"tools:\n\t$(MAKE) -C tools install\n\ninstall-"],[5997,0,"tools/ clean\n\t$(MAKE) -C "],[2188,0," git-peek-remote"],[4758,0,"git-peek-remote: peek-remote.c\n"],[1458,0," \\\n\tgit-ls-remote-script"],[2228,0," \\\n\tgit-update-server-info git-show-rev-cache git-build-rev-cache"],[2768,0,"rev-cache.h\nLIB_OBJS += rev-cache.o\n\nLIB_H += "],[3063,0,"LIB_OBJS += server-info.o\n"],[4950,0,"git-update-server-info: update-server-info.c\ngit-build-rev-cache: build-rev-cache.c\ngit-show-rev-cache: show-rev-cache.c\n"],[5302,0,"rev-cache.o: $(LIB_H)\n"],[1482,0," git-clone-dumb-http"]]},{"span":[14096,14114],"parents":[14095],"agent":"Linus Torvalds","seqStart":7871,"ops":[[1502,0," git-rename-script"]]},{"span":[14114,14116],"parents":[14113],"agent":"Junio C Hamano","seqStart":1501,"ops":[[603,1,""],[603,0,"2"]]},{"span":[14116,14143],"parents":[14115],"agent":"Ryan Anderson","seqStart":18,"ops":[[1520,0," \\\n\tgit-request-pull-script"]]},{"span":[14143,14211],"parents":[14142],"agent":"Johannes Schindelin","seqStart":0,"ops":[[3397,0,"ifeq ($(shell uname -s),Darwin)\n  LIBS += -lcrypto -lssl\nelse\n"],[3490,0,"endif\n"]]},{"span":[14211,18526],"parents":[14210],"agent":"Petr Baudis","seqStart":649,"ops":[[2,0,"Define MOZILLA_SHA1 environment variable when running make to make use of\n# a bundled SHA1 routine coming from Mozilla. It is GPL'd and should be fast\n# on non-x86 architectures (e.g. PowerPC), while the OpenSSL version (default\n# choice) has very fast version optimized for i586.\n#\n# Define NO_OPENSSL environment variable if you do not have OpenSSL. You will\n# miss out git-rev"],[382,0,"list --merge-order. This also implies MOZILLA_SHA1.\n#\n# "],[439,0,"efine PP"],[448,0,"_SHA1 environment variable when running make to make use of\n# a bundled SHA1 routine optimized for PowerPC.\n\n\n# Define C"],[583,0,"below "],[693,0,"suffici"],[702,4,""],[702,0,"t"],[713,1,""],[714,0,"th"],[717,3,""],[749,0,"will "],[762,0,"p"],[764,1,""],[765,3,""],[767,0,"\n"],[769,0," DEFINES += -DCOLLISION_CHECK\n"],[802,1,""],[803,0,"efine "],[818,0,"below "],[876,0,"\n#"],[890,14,""],[891,50,""],[910,3,""],[910,0,"rec"],[914,1,""],[915,2,""],[915,0,"t"],[933,1,""],[953,0,"\n#"],[963,2,""],[1031,0,"\n#"],[1042,2,""],[1108,0,"\n#"],[1116,2,""],[1136,0,"\n# DEFINES += -DUSE_NSEC\n\n# Define USE_STDEV below if you want git to care about the underlying device\n# change being considered an inode change from the update-cache perspective.\n\n# DEFINES += -DUSE_STDEV\n\n"],[1368,0,"?"],[1371,0,"g -"],[1383,0,"+"],[1385,3,""],[1399,0," $(DEFINES)"],[1430,0,"dir"],[1459,0,"?"],[1467,0,"?"],[1479,0,"?"],[1497,0,"?"],[1664,0,"?"],[3213,0,"dir"],[3760,1,""],[3760,0,"D"],[3762,1,""],[3762,0,"FF"],[3770,1,""],[3839,14,""],[3873,0,"LIB_OBJS += $(DIFF_OBJS) count-delta.o\n"],[4692,20,""],[4693,1,""],[4694,3,""],[4695,94,""],[4696,10,""],[4697,325,""],[4698,3,""],[4699,34,""],[4700,80,""],[4704,12,""],[4728,6,""],[4732,27,""],[4757,60,""],[4758,12,""],[4759,241,""],[4766,64,""],[4767,10,""],[4768,64,""],[4769,31,""],[4770,8,""],[4771,17,""],[4772,26,""],[4773,30,""],[4774,1,""],[4776,6,""],[4777,15,""],[4779,28,""],[4840,1,""],[4841,19,""],[4842,8,""],[4848,173,""],[4848,0,"O"],[4850,2,""],[4850,0,"JS"],[4853,9,""],[4864,9,""],[4866,1,""],[4866,0,"D"],[4868,1,""],[4868,0,"FF"],[4871,15,""],[4871,0,"O"],[4873,2,""],[4873,0,"JS"],[4876,72,""],[4877,9,""],[4888,137,""],[1510,2,""],[1647,2,""],[1694,0,"\n\n### --- END CONFIGURATION SECTION ---\n\n\n\n"],[3177,2,""],[3177,0,"LIB_FILE="],[3187,11,""],[3188,2,""],[3188,0,"bgi"],[3192,0,"."],[3194,22,""],[3195,3,""],[3195,0,"L"],[3197,7,""],[3197,0,"B_H=cache.h"],[3209,5,""],[3209,0,"object.h"],[3218,2,""],[3218,0,"blob.h"],[3225,5,""],[3226,8,""],[3227,13,""],[3227,0,"ee.h"],[3232,7,""],[3232,0,"commit.h"],[3241,10,""],[3241,0,"tag.h"],[3247,2,""],[3249,0,"lta.h epoch.h c"],[3265,0,"um-file.h \\\n\tpack.h pk"],[3288,4,""],[3288,0,"-l"],[3292,1,""],[3292,0,"e.h refs.h"],[3303,1,""],[3517,17,""],[3523,31,""],[3524,78,""],[4258,0,"\n\n### Build rules\n\nall: $(PROG)\n\n\ngit-%: %.c $(LIB_FILE)\n\t$(CC) $(CFLAGS) -o $@ $(filter %.c,$^) $(LIBS)\n\ngit-http-pull: pull.c\ngit-local-pull: pull.c\ngit-ssh-pull: rsh.c pull.c\ngit-ssh-push: rsh.c\n\ngit-http-pull: LIBS += -lcurl\ngit-rev-list: LIBS += -lssl\n\n"],[4522,0,"OBJS): $(LIB_H)\n$(DIF"],[4544,0,"_OBJS): diffcore.h\n\n$(L"],[4568,0,"B_FI"],[4616,3,""],[4616,0,"do"],[4619,1,""],[4622,3,""],[4622,0,"$(MAKE)"],[4630,1,""],[4630,0,"-C"],[4633,0,"Documentat"],[4644,0,"o"],[4647,7,""],[4647,0,"all\n\n\n\n###"],[4658,0,"Te"],[4661,2,""],[4661,0,"ting "],[4667,0,"ule"],[4671,0,"\n\nt"],[4675,0,"st:"],[4679,0,"all\n\t"],[4686,3,""],[4686,0,"M"],[4688,2,""],[4688,0,"KE"],[4692,15,""],[4692,0,"-C"],[4695,4,""],[4695,0,"t/"],[4698,4,""],[4698,0,"all"],[4855,1,""],[4855,0,"check:\n\tfor "],[4868,4,""],[4869,1,""],[4869,0,"in *"],[4875,0,";"],[4877,0,"do sparse "],[4889,0,"CF"],[4892,2,""],[4892,0,"AGS) $(SPARSE"],[4907,1,""],[4908,1,""],[4908,0,"AGS"],[4912,0," $$i; done\n\n\n"],[4926,1,""],[4926,0,"### Installation rules\n\ninstall: "],[4961,2,""],[4961,0,"PROG"],[4969,0,"S"],[4971,1,""],[4971,0,"RIPTS)\n\t$(INSTAL"],[4988,3,""],[4991,1,""],[4991,0,"m755 -d"],[5000,2,""],[5000,0,"(dest)"],[5008,1,""],[5008,0,"bind"],[5013,3,""],[5014,0,")\n\t$(INSTALL)"],[5028,4,""],[5029,1,""],[5029,0,"(PROG"],[5038,1,""],[5038,0,"SCR"],[5042,1,""],[5042,0,"PT"],[5046,0," $(dest)$(bin)"],[5062,1,""],[5063,3,""],[5063,0,"ns"],[5066,11,""],[5066,0,"a"],[5069,5,""],[5069,0,"-"],[5071,2,""],[5072,7,""],[5072,0,"o"],[5074,0,"s"],[5076,7,""],[5077,13,""],[5077,0,"\t$(MAKE)"],[5086,5,""],[5086,0,"-C"],[5089,9,""],[5090,7,""],[5090,0,"ool"],[5094,2,""],[5095,1,""],[5095,0,"in"],[5098,3,""],[5098,0,"tall"],[5104,1,""],[5105,0,"ns"],[5108,8,""],[5108,0,"a"],[5111,0,"-doc"],[5116,0,"\n\t$(MAKE)"],[5126,4,""],[5126,0,"-C"],[5129,5,""],[5129,0,"Do"],[5133,4,""],[5133,0,"mentat"],[5140,7,""],[5140,0,"on "],[5144,0,"n"],[5147,11,""],[5147,0,"a"],[5149,2,""],[5152,21,""],[5153,13,""],[5153,0,"\n\n### Maintainer's"],[5174,4,""],[5174,0,"st "],[5178,0,"ul"],[5181,2,""],[5181,0,"s"],[5634,4,""],[5634,0,"\nbackup"],[5643,0,"cle"],[5647,2,""],[5647,0,"n"],[5650,7,""],[5650,0,"cd .."],[5656,2,""],[5656,0,";"],[5659,1,""],[5659,0,"ar czvf"],[5667,5,""],[5668,1,""],[5668,0,"ir"],[5671,16,""],[5671,0,"a"],[5673,2,""],[5673,0,"h"],[5675,1,""],[5675,0,"."],[5678,4,""],[5678,0,"r.gz"],[5683,5,""],[5683,0,"d"],[5685,6,""],[5685,0,"r"],[5687,29,""],[5687,0,"c"],[5689,2,""],[5689,0,"che"],[5694,12,""],[5695,8,""],[5695,0,"\n###"],[5700,1,""],[5701,6,""],[5701,0,"l"],[5703,2,""],[5704,1,""],[5704,0,"n"],[5706,1,""],[5707,0,"g"],[5709,2,""],[5709,0,"rule"],[5714,4,""],[5875,59,""],[3448,8,""],[3900,0,"ndef NO_OPENSSL\n\tLIB_OBJS += epoch.o\nelse\n\tCFLAGS += '-DNO_OPENSSL'\n\tMOZILLA_SHA1=1\nendif\nif"],[4376,0,".PRECIOUS: %.o\n"],[4400,1,""],[4400,0,"o"],[4448,1,""],[4448,0,"o"],[4483,1,""],[4483,0,"o"],[4506,1,""],[4506,0,"o"],[4526,1,""],[4526,0,"o"],[4533,1,""],[4533,0,"o"],[4553,1,""],[4553,0,"o"]]},{"span":[18526,18590],"parents":[18525],"agent":"Junio C Hamano","seqStart":1503,"ops":[[5158,0,"dir"],[3937,0,"\tOPENSSL_LIBSSL=-lssl\n"],[4006,0,"\tOPENSSL_LIBSSL=\n"],[4647,5,""],[4647,0,"$(OPENSSL_LIBSSL)"]]},{"span":[18590,18608],"parents":[18589],"agent":"Linus Torvalds","seqStart":7889,"ops":[[2364,0," git-bisect-script"]]},{"span":[18608,18802],"parents":[18607],"agent":"Johannes Schindelin","seqStart":68,"ops":[[445,0,"NO_CURL if you do not have curl installed.  git-http-pull is not\n# built, and you cannot use http:// and https:// transports.\n#\n# Define "],[2841,3,""],[2842,2,""],[2843,9,""],[3318,0,"ifndef NO_CURL\nPROG+= git-http-pull\nendif\n\n"]]},{"span":[18802,18879],"parents":[18801],"agent":"Junio C Hamano","seqStart":1567,"ops":[[2519,0," git-fetch-dumb-http"],[3336,0," \\\n\tgit-missing-revs"],[2541,0,"SCRIPTS += git-count-objects-script\n\n"]]},{"span":[18879,18929],"parents":[18878],"agent":"Josef Weidendorfer","seqStart":0,"ops":[[3826,0,"run-command.h\nLIB_OBJS += run-command.o\n\nLIB_H += "]]},{"span":[18929,18992],"parents":[18928],"agent":"Junio C Hamano","seqStart":1644,"ops":[[2519,20,""],[3353,20,""],[1497,1,""],[1497,0,"3"],[6300,0,"\t$(MAKE) -C t/ clean\n"]]},{"span":[18992,19025],"parents":[18991],"agent":"Ryan Anderson","seqStart":45,"ops":[[2557,0,"SCRIPTS += git-send-email-script\n"]]},{"span":[19025,19474],"parents":[19024],"agent":"Junio C Hamano","seqStart":1707,"ops":[[1585,0,"etcdir=$(prefix)/etc\netcgitdir=$(etcdir)/git-core\n"],[4734,0,"CFLAGS += '-DDEFAULT_GIT_TEMPLATE_ENVIRONMENT=\"$(etcgitdir)/templates\"'\n"],[5640,0,"\t$(MAKE) -C templates install\n"],[6498,0,"emplates/ clean\n\t$(MAKE) -C t"],[2838,16,""],[3796,0," \\\n\t sha1_name.o"],[1585,0,"t"],[1587,0,"mpla"],[1592,1,""],[1592,0,"e_"],[1608,12,""],[1608,0,"sha"],[1612,3,""],[1613,6,""],[1622,0,"/templates/"],[4727,18,""],[4728,13,""],[4729,11,""],[4730,19,""],[4731,11,""],[4767,0,"all:\n\t$(MAKE) -C templates\n"],[5046,0,"init-db.o: init-db.c\n\t$(CC) -c $(CFLAGS) -DDEFAULT_GIT_TEMPLATE_DIR='\"$(template_dir)\"' $*.c\n\n"]]},{"span":[19474,19831],"parents":[19473],"agent":"Junio C Hamano","seqStart":2156,"ops":[[1497,1,""],[1497,0,"4"],[4796,2,""],[4796,0,"S"],[4799,1,""],[4800,2,""],[4800,0,"NDARY"],[4811,0,".c.o:\n\t$(CC) $(CFLAGS) -o $*.o -c $*.c\n"],[6331,1,""],[6331,0,"de"],[6334,5,""],[6336,0,"dist\n\trm -rf git-"],[6354,1,""],[6354,0,"or"],[6357,2,""],[6357,0,"-$(GIT_VERSION)"],[6374,8,""],[6378,1,""],[6379,1,""],[6379,0,"x"],[6382,1,""],[6382,0,"g"],[6384,0,"t-co"],[6389,4,""],[6390,0,"-$(GIT_VERSION)"],[6412,0,"\n\tcd"],[6417,1,""],[6417,0,"g"],[6419,0,"t-co"],[6424,0,"e"],[6426,1,""],[6426,0,"$(GIT_VERSION) && fakeroot debi"],[6458,2,""],[6458,0,"n/rul"],[6464,2,""],[6464,0,"s binary"],[6595,0," git-core-$(GIT_VERSION)-*.deb\n\trm -rf git-core-$(GIT_VERSION)"],[6349,9,""],[6355,2,""],[6355,0,"TA"],[6358,3,""],[6359,0,"AME"],[6373,9,""],[6379,2,""],[6379,0,"TA"],[6382,3,""],[6383,0,"AME"],[6399,9,""],[6405,2,""],[6405,0,"TA"],[6408,3,""],[6409,0,"AME"],[6537,10,""],[6537,0,"$(GIT_TARNAME)"],[6581,1,""],[6581,0,"_"],[6611,9,""],[6617,2,""],[6617,0,"TA"],[6620,3,""],[6621,0,"AME"]]},{"span":[19831,19902],"parents":[19473],"agent":"Junio C Hamano","seqStart":2513,"ops":[[5164,0,"patsubst git-%,%.o,$(PROG)): $(LIB_H)\n$("],[2606,0,"# "],[2641,0,"SCRIPTS += git-revert-script\n"]]},{"span":[19902,19904],"parents":[19830,19901],"agent":"Junio C Hamano","seqStart":2584,"ops":[[1497,1,""],[1497,0,"5"]]},{"span":[19904,20075],"parents":[19830,19901],"agent":"Junio C Hamano","seqStart":2586,"ops":[[6643,0,"\n\trm"],[6648,0,"-f "],[6680,0," git-tk_$(GIT_VERSION)-*.deb"],[6467,0,"dpkg-source -b $(GIT_TARNAME)\n\t"],[6639,0,"git-core.spec\n\trm -rf $(GIT_TARNAME)\n\trm -f "],[6713,0,"_$(GIT_VERSION)-*.tar"],[6735,4,""],[6735,0,"gz"],[6779,2,""],[6779,0,"core"],[6802,2,""],[6802,0,"sc"],[6810,1,""],[6812,0,"git-tk_"],[6825,2,""],[6825,0,"VE"],[6828,0,"SIO"],[6832,3,""],[6833,0,"-*.deb"]]},{"span":[20075,20262],"parents":[20074],"agent":"Pavel Roskin","seqStart":0,"ops":[[1491,0," "],[1493,0," "],[1503,3,""],[1503,0,"FLAG"],[1508,1,""],[1508,0," "],[1510,0," "],[1517,0," -Wall"],[1524,0,"ALL_"],[1534,1,""],[1534,0," "],[1536,0," "],[1540,3,""],[1540,0,"FLAG"],[1547,6,""],[1565,0," "],[1567,0," "],[1582,0," "],[1584,0," "],[1611,0," "],[1613,0," "],[1661,1,""],[1661,0," "],[1663,0," "],[1670,1,""],[1670,0," "],[1672,0," "],[1683,1,""],[1683,0," "],[1685,0," "],[1702,1,""],[1702,0," "],[1704,0," "],[1866,1,""],[1866,0," "],[1868,0," "],[4370,1,""],[4370,0,"DE"],[4373,3,""],[4373,0,"INE"],[4745,1,""],[4745,0,"DE"],[4748,3,""],[4748,0,"INE"],[4848,3,""],[4848,0,"\t$(MAK"],[4855,0,") -"],[4859,7,""],[4860,0,"tools\n\n"],[4870,1,""],[4870,0,": %"],[4875,3,""],[4883,0,"-o "],[4887,0,"*.o -c $"],[4896,0,"ALL_"],[4908,0,"$<\n%.o: %.S\n\t$(CC) "],[4939,3,""],[4939,0,"(ALL_CFLAGS) $<\n"],[4988,0,"ALL_"],[5229,0,"ALL_"],[5241,0,"\\\n\t\t"],[5564,0,"ALL_"],[5663,0,"ALL_"],[5719,0,"ALL_"]]},{"span":[20262,20333],"parents":[20261],"agent":"Petr Baudis","seqStart":4964,"ops":[[1652,4,""],[1652,0,"DESTDIR"],[5838,4,""],[5838,0,"DESTDIR"],[5889,4,""],[5889,0,"DESTDIR"],[3491,0,"\t"],[4458,2,""],[4458,0,"\t"],[4493,2,""],[4493,0,"\t"],[4531,0,"\t"],[4547,2,""],[4547,0,"\t\t"],[4574,2,""],[4574,0,"\t\t"],[4613,0,"\t"],[4619,2,""],[4619,0,"\t\t"],[4649,0,"\t\t"],[4683,2,""],[4683,0,"\t\t\t"],[4709,0,"\t\t"],[4716,2,""],[4716,0,"\t\t\t"],[4736,0,"\t\t"],[4744,0,"\t"]]},{"span":[20333,20385],"parents":[20332],"agent":"Junio C Hamano","seqStart":2757,"ops":[[5947,16,""],[2694,0,"SCRIPTS += git-show-branches-script\n"]]},{"span":[20385,20393],"parents":[20384],"agent":"Linus Torvalds","seqStart":7907,"ops":[[3903,0," setup.o"]]},{"span":[20393,20516],"parents":[20392],"agent":"Junio C Hamano","seqStart":2809,"ops":[[3446,0,"git-show-branch "],[2694,36,""],[2468,0,"parse-remote-script git-"],[2463,17,""],[2701,0,"SCRIPTS += git-octopus-script\n"]]},{"span":[20516,20518],"parents":[19903,20515],"agent":"Junio C Hamano","seqStart":2932,"ops":[[1499,1,""],[1499,0,"6"]]},{"span":[20518,21815],"parents":[19903,20515],"agent":"Junio C Hamano","seqStart":2934,"ops":[[2637,2,""],[2651,11,""],[2652,2,""],[2653,20,""],[3496,0,"def WITH_SEND_EMAIL\nSCRIPTS += git-send-email-script\nendif\n\nif"],[6008,0,"INSTALL) git-revert-script $(DESTDIR)$(bindir)/git-cherry-pick-script\n\t$("],[1963,23,""],[2673,0,"SCRIPTS += git-archimport-script\n"],[2498,20,""],[693,0,"#"],[695,0,"# Define NEEDS_SSL_WITH_CRYPTO if you need -lcrypto with -lssl (Darwin)."],[777,0,"NEEDS_LIBI"],[789,0,"NV if linking with libc is not enough (Darwin).\n\n# Define CO"],[2699,0," \\\n\tgit-applymbox git-applypatch"],[2862,0,"# The ones that do not have to link with lcrypto nor lz.\nSIMPLE_PROGRAMS = \\\n\tgit-get-tar-commit-id git-mailinfo git-mailsplit git-stripspace \\\n\tgit-daemon git-var\n\n# ... and all the rest\n"],[3469,4,""],[3471,1,""],[3472,17,""],[3477,15,""],[3697,19,""],[3789,0," \\\n\t$(SIMPLE_PROGRAMS)"],[4716,0,"eq ($(shell u"],[4730,0,"ame -s),Darwin)\n\tNEEDS_SSL_WITH_CRYPTO = YesPlease\n\tNEEDS_LIBICONV = YesPlease\nendif\n\nifn"],[4954,0,"NEEDS_SSL_WITH_CRYPTO\n\tLIB_4_CRYPTO = -lcrypto -lssl\nelse\n\tLIB_4_CRYPTO = -lcrypto\nendif\nifdef NEEDS_LIBICONV\n\tLIB_4_ICONV = -liconv\nelse\n\tLIB_4_ICONV =\nendif\nifdef "],[5325,35,""],[5332,9,""],[5333,16,""],[5333,0,"$("],[5338,21,""],[5338,0,"_4_CRYPTO)"],[5466,17,""],[5467,1,""],[5636,0,"mailinfo : SIMPLE_LIB += $(LIB_4_ICONV)\n$(SIMPLE_PROGRAMS) : $(LIB_FILE)\n$(SIMPLE_PROGRAMS) : git-% : %.o\n\t$(CC) $(ALL_CFLAGS) -o $@ $(filter %.o,$^) $(LIB_FILE) $(SIMPLE_LIB)\n\ngit-"],[6788,25,""],[6789,1,""],[7756,25,""]]},{"span":[21815,24384],"parents":[20517,21814],"agent":"Junio C Hamano","seqStart":4231,"ops":[[2088,2,""],[2094,0,"_"],[2096,30,""],[2096,0,"H"],[2098,16,""],[2098,0,"="],[2107,5,""],[2107,0,"add."],[2112,5,""],[2112,0,"h"],[2118,4,""],[2118,0,"bi"],[2121,0,"e"],[2123,3,""],[2124,0,".sh"],[2132,0,"b"],[2134,1,""],[2134,0,"anch."],[2140,11,""],[2140,0,"h"],[2146,1,""],[2146,0,"c"],[2148,1,""],[2148,0,"eckou"],[2154,1,""],[2154,0,".s"],[2157,5,""],[2165,3,""],[2167,1,""],[2167,0,"erry."],[2173,5,""],[2173,0,"h"],[2179,0,"clone."],[2186,12,""],[2186,0,"h"],[2198,1,""],[2198,0,"."],[2200,5,""],[2200,0,"h"],[2209,1,""],[2209,0,"c"],[2211,1,""],[2211,0,"unt"],[2215,1,""],[2215,0,"obje"],[2220,3,""],[2221,5,""],[2222,0,".s"],[2225,6,""],[2230,3,""],[2230,0,"d"],[2232,6,""],[2232,0,"ff."],[2236,5,""],[2236,0,"h"],[2242,2,""],[2243,2,""],[2243,0,"etch."],[2249,5,""],[2249,0,"h"],[2258,0,"fo"],[2261,3,""],[2261,0,"ma"],[2265,4,""],[2266,0,"a"],[2268,0,"ch.sh"],[2278,4,""],[2278,0,"log."],[2283,5,""],[2283,0,"h"],[2289,2,""],[2289,0,"ls-r"],[2294,2,""],[2294,0,"m"],[2296,1,""],[2297,1,""],[2297,0,"e."],[2300,5,""],[2300,0,"h"],[2302,0,"\\\n\t"],[2309,2,""],[2309,0,"merge-"],[2319,0,"file."],[2325,13,""],[2325,0,"h"],[2331,0,"o"],[2333,0,"topus.s"],[2341,4,""],[2346,0,"pa"],[2349,3,""],[2352,2,""],[2353,2,""],[2353,0,"emo"],[2357,0,"e.sh"],[2362,0,"\\\n\t"],[2369,0,"p"],[2371,0,"un"],[2374,1,""],[2374,0,".sh g"],[2380,2,""],[2380,0,"t"],[2382,0,"pull."],[2388,2,""],[2388,0,"h g"],[2392,0,"t-"],[2395,1,""],[2395,0,"ush.sh"],[2408,1,""],[2408,0,"b"],[2410,3,""],[2411,5,""],[2411,0,"e.sh"],[2423,2,""],[2424,4,""],[2424,0,"e"],[2427,1,""],[2428,2,""],[2428,0,"k."],[2431,5,""],[2431,0,"h"],[2437,4,""],[2437,0,"r"],[2439,1,""],[2439,0,"q"],[2441,2,""],[2441,0,"e"],[2443,8,""],[2447,0,"ll."],[2452,7,""],[2453,3,""],[2457,1,""],[2458,5,""],[2458,0,"e"],[2460,4,""],[2460,0,"e"],[2462,0,".sh"],[2466,0,"\\\n\t"],[2473,2,""],[2474,0,"e"],[2476,5,""],[2477,1,""],[2477,0,"lv"],[2480,1,""],[2480,0,"."],[2482,5,""],[2482,0,"h"],[2488,0,"re"],[2493,4,""],[2494,3,""],[2494,0,"."],[2496,5,""],[2496,0,"h"],[2498,3,""],[2502,1,""],[2503,0,"h"],[2505,1,""],[2505,0,"s"],[2507,2,""],[2508,2,""],[2508,0,"up."],[2512,5,""],[2512,0,"h"],[2518,3,""],[2518,0,"st"],[2521,3,""],[2521,0,"tus."],[2526,5,""],[2526,0,"h"],[2535,5,""],[2535,0,"tag."],[2540,0,"h gi"],[2546,7,""],[2546,0,"ve"],[2550,1,""],[2550,0,"fy-"],[2554,0,"ag.sh"],[2564,3,""],[2564,0,"whatchang"],[2574,3,""],[2574,0,"d."],[2577,2,""],[2577,0,"h g"],[2581,1,""],[2582,0,".sh"],[2602,0,".sh"],[2620,0,".sh"],[2631,1,""],[2631,0,"_PERL"],[2637,1,""],[2639,0,"\\\n\t"],[2646,0,"ar"],[2649,0,"himp"],[2654,2,""],[2654,0,"r"],[2656,4,""],[2656,0,".p"],[2659,1,""],[2659,0,"rl gi"],[2665,1,""],[2666,1,""],[2667,1,""],[2667,0,"vs"],[2670,0,"m"],[2672,0,"or"],[2675,8,""],[2675,0,".perl"],[2681,3,""],[2687,1,""],[2687,0,"link.p"],[2695,0,"l \\\n\tgi"],[2704,2,""],[2705,1,""],[2705,0,"ename."],[2712,12,""],[2712,0,"erl"],[2720,6,""],[2721,0,"end"],[2725,3,""],[2725,0,"ema"],[2729,0,"l."],[2732,12,""],[2732,0,"erl"],[2740,3,""],[2740,0,"s"],[2742,3,""],[2745,3,""],[2745,0,"log.pe"],[2752,3,""],[2752,0,"l"],[2947,1,""],[2947,0,"RAMS"],[2952,0,"="],[2954,0,"\\\n\tgit-apply"],[2971,0,"b"],[2973,1,""],[2973,0,"il"],[2976,2,""],[2976,0,"-r"],[2979,0,"v"],[2991,4,""],[2991,0,"cat"],[2999,1,""],[3000,0,"\\\n\t"],[3007,0,"checkout-"],[3018,3,""],[3019,1,""],[3019,0,"ex"],[3026,4,""],[3026,0,"clon"],[3032,14,""],[3032,0,"p"],[3034,6,""],[3034,0,"ck"],[3053,0,"\\\n\t"],[3061,1,""],[3061,0,"onver"],[3068,3,""],[3068,0,"obj"],[3072,0,"cts"],[3080,0,"dif"],[3084,3,""],[3085,4,""],[3085,0,"fil"],[3089,0,"s"],[3098,1,""],[3098,0,"diff-"],[3105,10,""],[3105,0,"lp"],[3108,0,"r"],[3119,3,""],[3119,0,"ind"],[3123,0,"x"],[3129,3,""],[3129,0,"diff"],[3134,0,"s"],[3136,4,""],[3136,0,"a"],[3138,9,""],[3148,2,""],[3148,0,"diff"],[3162,1,""],[3163,0,"xpo"],[3167,7,""],[3167,0,"t"],[3173,1,""],[3173,0,"f"],[3175,6,""],[3175,0,"t"],[3178,8,""],[3179,2,""],[3183,5,""],[3188,0,"fsck-obj"],[3197,4,""],[3197,0,"c"],[3199,0,"s"],[3201,0,"\\\n\t"],[3208,6,""],[3208,0,"h"],[3210,1,""],[3210,0,"s"],[3212,0,"-obj"],[3217,0,"ct"],[3224,2,""],[3224,0,"i"],[3226,3,""],[3226,0,"i"],[3229,5,""],[3229,0,"db"],[3239,3,""],[3239,0,"local"],[3245,3,""],[3245,0,"fetc"],[3255,1,""],[3255,0,"l"],[3257,1,""],[3258,2,""],[3258,0,"fi"],[3261,1,""],[3261,0,"es"],[3267,4,""],[3269,1,""],[3270,0,"-"],[3272,0,"ree"],[3281,2,""],[3281,0,"erge-b"],[3288,1,""],[3288,0,"se"],[3298,6,""],[3298,0,"m"],[3300,3,""],[3301,1,""],[3302,2,""],[3302,0,"e"],[3304,7,""],[3304,0,"ind"],[3308,0,"x"],[3314,3,""],[3314,0,"mkt"],[3318,6,""],[3318,0,"g"],[3324,1,""],[3324,0,"p"],[3326,2,""],[3326,0,"ck"],[3335,0,"s"],[3337,3,""],[3341,0,"p"],[3343,4,""],[3343,0,"tch-id"],[3357,4,""],[3357,0,"peek"],[3362,1,""],[3362,0,"remo"],[3367,2,""],[3368,1,""],[3372,4,""],[3374,1,""],[3375,1,""],[3375,0,"un"],[3378,4,""],[3381,1,""],[3382,3,""],[3382,0,"ke"],[3390,1,""],[3390,0,"re"],[3393,2,""],[3393,0,"d"],[3395,3,""],[3395,0,"tre"],[3399,3,""],[3407,2,""],[3407,0,"receive-"],[3419,0," git"],[3424,3,""],[3424,0,"r"],[3426,1,""],[3426,0,"v-lis"],[3432,1,""],[3437,2,""],[3438,3,""],[3438,0,"ev"],[3443,2,""],[3443,0,"rse"],[3447,0,"\\\n\t"],[3456,1,""],[3456,0,"v-tre"],[3462,0," g"],[3465,1,""],[3465,0,"t-s"],[3469,0,"nd"],[3482,3,""],[3482,0,"how"],[3486,1,""],[3486,0,"br"],[3489,0,"n"],[3491,1,""],[3491,0,"h"],[3500,1,""],[3500,0,"show-index git-show-"],[3521,2,""],[3522,0,"v"],[3524,1,""],[3524,0,"c"],[3527,1,""],[3527,0,"h"],[3529,1,""],[3534,0,"ssh-"],[3543,5,""],[3544,0,"\\\n\t"],[3551,0,"ssh-"],[3561,0," git"],[3566,1,""],[3566,0,"t"],[3568,2,""],[3568,0,"r-tree"],[3579,3,""],[3579,0,"u"],[3581,2,""],[3585,0,"-file"],[3598,6,""],[3598,0,"u"],[3600,8,""],[3601,2,""],[3601,0,"ac"],[3605,3,""],[3606,1,""],[3606,0,"bj"],[3609,0,"cts"],[3617,7,""],[3617,0,"upd"],[3621,0,"te-i"],[3626,2,""],[3626,0,"dex"],[3630,3,""],[3653,0,"\\\n\t"],[3660,2,""],[3660,0,"upl"],[3664,1,""],[3664,0,"ad"],[3667,2,""],[3667,0,"pack git-"],[3677,0,"erify"],[3683,1,""],[3683,0,"p"],[3686,2,""],[3686,0,"k"],[3692,2,""],[3692,0,"wr"],[3695,2,""],[3695,0,"te"],[3698,0,"t"],[3701,6,""],[3748,0,"\t"],[3755,1,""],[3755,0,"_PERL"],[3778,3,""],[3778,0,".pe"],[3782,3,""],[3782,0,"l"],[3811,0,"RAMS "],[3828,4,""],[3828,0,"fetch"],[3859,0,"\n"],[3865,0," "],[3867,7,""],[3868,9,""],[3868,0,"\\\n\t"],[3878,3,""],[3878,0,"cach"],[3895,0,"count-del"],[3906,1,""],[3909,0,"csum-file.h "],[3929,0,"\\\n\tdiff.h "],[3947,0,"obje"],[3952,8,""],[3952,0,"t"],[3956,3,""],[3974,0,"quote.h "],[3988,0," \\"],[3991,9,""],[3991,0,"\t"],[3994,2,""],[3994,0,"v"],[4002,0,"h run-c"],[4010,0,"mmand.h"],[4019,0,"trbuf."],[4026,0," t"],[4029,1,""],[4029,0,"g.h tree.h\n\nDIFF"],[4046,0,"OBJS = \\\n\tdif"],[4060,0,".o d"],[4065,1,""],[4065,0,"ffcore-br"],[4075,0,"ak"],[4080,4,""],[4080,0,"diffcore-ord"],[4093,0,"r"],[4097,0,"diffc"],[4103,2,""],[4103,0,"re-pathsp"],[4114,1,""],[4117,0,"\\\n\tdiff"],[4126,2,""],[4126,0,"re-p"],[4131,1,""],[4131,0,"ckaxe"],[4139,1,""],[4139,0,"diffco"],[4147,0,"-renam"],[4156,0,"\n\nLIB_OBJS ="],[4169,0,"\\\n\t"],[4179,8,""],[4179,0,"c"],[4181,3,""],[4181,0,"mmi"],[4185,1,""],[4188,1,""],[4188,0,"con"],[4192,1,""],[4193,1,""],[4193,0,"ct"],[4198,4,""],[4198,0,"count"],[4212,1,""],[4212,0,"csum-file.o \\\n\td"],[4230,2,""],[4230,0,"e.o diff"],[4255,2,""],[4255,0,"gi"],[4258,1,""],[4258,0,"env"],[4264,3,""],[4264,0,"ident.o"],[4272,1,""],[4272,0,"ind"],[4276,2,""],[4276,0,"x"],[4280,0,"\\\n\tobje"],[4288,8,""],[4288,0,"t"],[4306,1,""],[4306,0,"a"],[4308,0,"ch"],[4311,0,"de"],[4314,3,""],[4314,0,"ta"],[4319,6,""],[4319,0,"pa"],[4322,0,"h"],[4326,0,"pkt-l"],[4332,2,""],[4333,1,""],[4333,0,"e"],[4340,11,""],[4340,0,"qu"],[4343,2,""],[4343,0,"t"],[4345,3,""],[4347,10,""],[4350,1,""],[4350,0,"ad"],[4359,10,""],[4359,0,"o"],[4361,2,""],[4361,0,"refs.o"],[4379,10,""],[4392,1,""],[4392,0,"o \\"],[4396,12,""],[4396,0,"\tserve"],[4403,1,""],[4403,0,"-i"],[4406,2,""],[4406,0,"f"],[4408,5,""],[4410,10,""],[4412,0,"e"],[4414,2,""],[4415,1,""],[4415,0,"p"],[4417,10,""],[4417,0,"o"],[4419,3,""],[4420,24,""],[4421,4,""],[4421,0,"a1"],[4424,12,""],[4424,0,"fil"],[4431,16,""],[4431,0,"s"],[4433,11,""],[4434,7,""],[4434,0,"1"],[4436,25,""],[4443,6,""],[4443,0,"st"],[4446,14,""],[4446,0,"bu"],[4449,14,""],[4455,5,""],[4455,0,"tag."],[4460,0," t"],[4464,3,""],[4465,2,""],[4468,12,""],[4468,0,"usag"],[4473,1,""],[4475,12,""],[4488,62,""],[4678,0," "],[4680,0," "],[4732,0," "],[4734,0," "],[4752,0," "],[4957,0," "],[4959,0," "],[5049,0," "],[5051,0," "],[5123,0," "],[5125,0," "],[5225,0,"SCRIPTS = $(SCRIPT_SH) $(SCRIPT_PERL) gitk"],[5297,0,"RAMS"],[5687,4,""],[5687,0,"fetch"],[5694,4,""],[5694,0,"fetch"],[5712,4,""],[5712,0,"fetch"],[5719,4,""],[5719,0,"fetch"],[5735,4,""],[5735,0,"fetch"],[5748,4,""],[5748,0,"fetch"],[5764,1,""],[5765,2,""],[5765,0,"pload"],[5788,4,""],[5788,0,"fetch"],[6002,0,"RAMS"],[6134,1,""],[6457,0,"RAMS"],[6533,0,"RAMS"],[6541,0,"DE"],[6544,0,"TDIR)$(bindir)\n\t@for s in $(S"],[6580,0,"; \\\n\tdo"],[6588,0,"\\\n\t\tcase \"$$s\" in \\\n\t\t*.*) \\\n\t\t\te=`expr \""],[6630,0,"$s\" : '\\"],[6639,0,".*\\)\\.[^.]*$$'` ;; \\\n\t\t*) \\\n\t\t\te=\"$$s\" ;; \\\n\t\tesac && \\\n\t\techo \": install $$s $(DESTDIR)$(bindir)/$$e\" && \\\n\t\t$(INSTALL) $$s $("],[6783,0,"/$$e || exit; \\\n\tdone"],[6827,1,""],[6827,0,"."],[6829,5,""],[6829,0,"h"],[6866,1,""],[6866,0,"\n\t"],[6869,0,"h ./"],[6874,0,"md-"],[6878,0,"ename.sh $(DESTDIR)$(bind"],[6904,2,""],[6904,0,"r)"],[7684,0,"RAMS"]]},{"span":[24384,24744],"parents":[24383],"agent":"Patrick Mauritz","seqStart":0,"ops":[[769,0,"\n#"],[839,0,"#\n# Define NEEDS_SOCKET if linking with libc is not enough (SunOS,\n# Patrick Mauritz).\n#\n# Define NO_GETDOMAINNAME if your library lack it (SunOS, Patrick Mauritz).\n#"],[1860,0,"PLATFORM_DEFINES) $("],[4811,0,"ifeq ($(shell uname -s),SunOS)\n\tNEEDS_SOCKET = YesPlease\n\tPLATFORM_DEFINES += -DNO_GETDOMAINNAME=1\nendif\n"],[5474,0,"ifdef NEEDS_SOCKET\n\tLIBS += -lsocket\n\tSIMPLE_LIB += -lsocket\nendif\n"]]},{"span":[24744,25588],"parents":[24743],"agent":"Junio C Hamano","seqStart":6800,"ops":[[5662,0," git.sh"],[5699,0,"git.sh: git.sh.in Makefile\n\trm -f $@+ $@\n\tsed -e 's/@@GIT_VERSION@@/$(GIT_VERSION)/g' <$@.in >$@+\n\tchmod +x $@+\n\tmv $@+ $@\n\n"],[8213,0," git.sh"],[4924,0,"SHELL_PATH\n\tSHELL_PATH = /bin/sh\nendif\nifndef PERL_PATH\n\tPERL_PATH = /usr/bin/perl\nendif\n\nifndef "],[5694,0,"patsubst %.sh,%,$("],[5722,0,") \\\n\t  $(patsubst"],[5740,0,"%.perl,%,"],[5763,0,")"],[5805,6,""],[5805,0,"$(SCRIPTS)"],[5848,3,""],[5856,3,""],[5929,2,""],[5929,0,"sh"],[5963,0,"$(filter-out git,$(patsubst %.sh,%,$(SCRIPT_SH))) : % : %.sh\n\trm -f $@\n\tsed -e '1s|#!.*/sh|#!$(SHELL_PATH)|' $@.sh >$@\n\tchmod +x $@\n\n$(patsubst %.perl,%,$(SCRIPT_PERL)) : % : %.perl\n\trm -f $@\n\tsed -e '1s|#!.*perl|#!$(PERL_PATH)|' $@.perl >$@\n\tchmod +x $@\n\n"],[7428,2,""],[7429,29,""],[7435,34,""],[7436,13,""],[7437,1,""],[7438,8,""],[7439,127,""],[7456,15,""],[7458,6,""],[7479,3,""],[8358,0,"$(filter-out gitk,$(SCRIPTS))\n\trm -f "],[8408,7,""]]},{"span":[25588,25608],"parents":[25587],"agent":"Marco Roeland","seqStart":0,"ops":[[2909,20,""]]},{"span":[25608,26219],"parents":[25607],"agent":"Junio C Hamano","seqStart":7644,"ops":[[4423,9,""],[2811,0," \\\n\tgit-merge.sh git-merge-resolve.sh git-merge-octopus.sh"],[2838,2,""],[2839,4,""],[2839,0,"tupid"],[2868,0," \\\n\tgit-merge-resolve.sh"],[1981,0,"GIT_PYTHON_DIR = $(prefix)/share/git-core/python\n"],[3053,0,"SCRIPT_PYTHON = \\\n\tgit-merge-fredrik.py\n\n"],[4065,0,"PYMODULES = \\\n\tgitMergeCommon.py\n\n"],[5189,0,"ifndef PYTHON_PATH\n\tPYTHON_PATH = /usr/bin/python\nendif\n"],[5997,0,"\\\n\t  $(patsubst %.py,%,$(SCRIPT_PYTHON)) \\\n\t  "],[6497,0,"$(patsubst "],[6510,0,"py,%,$(SCRIPT_PYTHON)) : % : %.py\n\trm -f $@\n\tsed -e '1s|#!.*python|#!$(PYTHON_PATH)|' \\\n\t    -e 's|@@GIT_PYTHON_PATH@@|$(GIT_PYTHON_DIR)|g' \\\n\t\t$@.py >$@\n\tchmod +x $@\n\n%."],[8045,0,"\t$(INSTALL) -m755 -d $(DESTDIR)$(GIT_PYTHON_DIR)\n\t$(INSTALL) $(PYMODULES) $(DESTDIR)$(GIT_PYTHON_DIR)\n"]]},{"span":[26219,26221],"parents":[26218],"agent":"Junio C Hamano","seqStart":8255,"ops":[[1810,1,""],[1810,0,"7"]]},{"span":[26221,26233],"parents":[26218],"agent":"Linus Torvalds","seqStart":7915,"ops":[[2941,0," git-grep.sh"]]},{"span":[26233,26241],"parents":[26232],"agent":"Fredrik Kuivinen","seqStart":0,"ops":[[3094,1,""],[3096,1,""],[3096,0,"cu"],[3099,0,"s"],[3101,1,""],[3101,0,"ve"]]},{"span":[26241,26253],"parents":[26240],"agent":"Peter Eriksen","seqStart":0,"ops":[[7847,0,"d -"],[7854,3,""],[8072,0,"d -"],[8079,3,""]]},{"span":[26253,26558],"parents":[26252],"agent":"Junio C Hamano","seqStart":8257,"ops":[[3324,20,""],[3849,18,""],[3850,1,""],[4341,12,""],[4692,12,""],[4040,0,"# Backward compatibility -- to be removed in 0.99.8\n"],[4093,0,"ROGRAMS += git-ssh-pull git-ssh-push\n\nP"],[7166,0,"git-ssh-pull: rsh.o fetch.o\ngit-ssh-push: rsh.o\n"],[5087,0,"NEEDS_NSL = Yes"],[5103,0,"lease\n\tP"],[5132,2,""],[5133,1,""],[5133,0,"_"],[5135,0,"X"],[5137,4,""],[5137,0,"ENS"],[5141,0,"O"],[5143,6,""],[5143,0,"S__"],[5931,0,"ifdef NEEDS_NSL\n\tLIBS += -lnsl\n\tSIMPLE_LIB += -lnsl\nendif\n"]]},{"span":[26558,26711],"parents":[26220,26557],"agent":"Linus Torvalds","seqStart":7927,"ops":[[582,0,"NO_STRCASESTR if you don't have strcasestr.\n#\n# Define "],[6044,0,"ifdef NO_STRCASESTR\n\tDEFINES += -Dstrcasestr=gitstrcasestr\n\tLIB_OBJS += compat/strcasestr.o\nendif\n"]]},{"span":[26711,26852],"parents":[26710],"agent":"Junio C Hamano","seqStart":8562,"ops":[[1070,0,"WITH_OWN_SUBPRO"],[1086,0,"ESS_PY if you want to use with python 2.3.\n#\n# Define C"],[4301,0,"OWN_SUBPROCESS_PY\n\tPYMODULES += compat/subprocess.py\nendif\n\nifdef WITH_"]]},{"span":[26852,26853],"parents":[26851],"agent":"Junio C Hamano","seqStart":8703,"ops":[[1936,0,"a"]]},{"span":[26853,27609],"parents":[26851],"agent":"Nicolas Pitre","seqStart":179,"ops":[[759,0,"ARM_SHA1 environment variable when running make to make use of\n# a bundled SHA1 routine optimized for ARM.\n#\n# Define "],[5467,0,"ifneq (,$(findstring arm,$(shell uname -m)))\n\tARM_SHA1 = YesPlease\nendif\n"],[6002,1,""],[6002,0,"NEEDS_S"],[6010,1,""],[6010,0,"CKET\n\tLIBS += -lsocket\n\tS"],[6036,0,"MP"],[6039,0,"E_"],[6042,1,""],[6042,0,"IB += -lsocket\nendif\nifdef NEEDS"],[6075,0,"N"],[6077,3,""],[6077,0,"L"],[6080,0,"LIB"],[6084,5,""],[6084,0," += -lnsl\n\tSIMPL"],[6101,0,"_LIB += -lnsl\nendif\nifdef NO_STRC"],[6135,0,"SESTR\n\t"],[6144,1,""],[6144,0,"FINES"],[6150,0,"+"],[6153,8,""],[6154,0,"D"],[6156,1,""],[6156,0,"trc"],[6160,2,""],[6161,1,""],[6161,0,"estr=gitstrc"],[6174,4,""],[6174,0,"sestr"],[6193,0,"co"],[6196,5,""],[6196,0,"p"],[6198,1,""],[6198,0,"t/"],[6201,1,""],[6201,0,"trc"],[6205,2,""],[6206,3,""],[6206,0,"estr"],[6214,3,""],[6214,0,"ndif\n"],[6220,1,""],[6236,1,""],[6263,1,""],[6301,1,""],[6306,1,""],[6306,0,"ifdef ARM_SHA1\n"],[6336,8,""],[6336,0,"\"arm"],[6344,0,"1"],[6347,1,""],[6347,0,"\""],[6349,1,""],[6353,10,""],[6354,7,""],[6355,37,""],[6356,0,"J"],[6362,2,""],[6362,0,"arm/"],[6367,0,"ha1."],[6372,16,""],[6373,5,""],[6373,0,"arm/"],[6378,0,"ha1_arm."],[6387,4,""],[6389,4,""],[6389,0,"lse"],[6399,5,""],[6399,0,"MOZILLA"],[6407,1,""],[6408,1,""],[6408,0,"HA1"],[6413,3,""],[6414,0,"HA1_HEADER"],[6425,1,""],[6427,0,"\"mozilla"],[6436,2,""],[6437,1,""],[6437,0,"ha1/sha1.h\""],[6450,1,""],[6450,0,"L"],[6452,4,""],[6452,0,"B"],[6454,2,""],[6454,0,"O"],[6456,0,"JS"],[6462,0,"mozilla"],[6470,2,""],[6471,1,""],[6471,0,"ha1/sha1.o"],[6483,8,""],[6483,0,"ls"],[6486,5,""],[6486,0,"\n\t"],[6489,3,""],[6489,0,"H"],[6491,1,""],[6491,0,"1_H"],[6495,5,""],[6495,0,"A"],[6498,5,""],[6498,0,"R"],[6500,1,""],[6502,8,""],[6502,0,"<op"],[6506,7,""],[6506,0,"n"],[6508,4,""],[6509,1,""],[6509,0,"l/"],[6512,2,""],[6512,0,"ha.h>"],[6521,3,""],[6522,1,""],[6527,13,""],[6527,0,"$(LIB_4_CRYPTO)\n"],[6544,5,""],[6544,0,"ndif\nendif"]]},{"span":[27609,27672],"parents":[27608],"agent":"Junio C Hamano","seqStart":8704,"ops":[[3738,11,""],[4019,13,""],[3679,16,""],[3306,0," git-fmt-merge-msg.perl"]]},{"span":[27672,28013],"parents":[27671],"agent":"Patrick Mauritz","seqStart":360,"ops":[[582,0,"CURLDIR=/foo/bar if your curl header and library files are in\n# /foo/bar/include and /foo/bar/lib directories.\n#\n# Define "],[4665,0,"ifdef CURLDIR\n\t\t# This is still problematic -- gcc does not want -R.\n\t\tCFLAGS += -I$(CURLDIR)/include\n\t\tCURL_LIBCURL = -L$(CURLDIR)/lib -R$(CURLDIR)/lib -lcurl\n\telse\n\t\tCURL_LIBCURL = -lcurl\n\tendif\n\t"],[8191,6,""],[8191,0,"$(CURL_LIBCURL)"]]},{"span":[28013,28884],"parents":[28012],"agent":"Junio C Hamano","seqStart":8771,"ops":[[1232,78,""],[2346,0,"TAR = tar\n"],[4570,127,""],[4571,86,""],[4574,1,""],[4580,27,""],[4581,7,""],[5229,0,"#\n# Platform specific tweaks\n#\n"],[5442,0,"SHELL_PATH = /bin/bash\n\tNO_STRCASESTR = YesPlease\n\tCURLDIR = /opt/sfw\n\tINSTALL = ginstall\n\tTAR = gtar\n\t"],[5669,0,"NO_CURL\n\tifdef CURLDIR\n\t\t# This is still problematic -- gcc does not want -R.\n\t\tCFLAGS += -I$(CURLDIR)/include\n\t\tCURL_LIBCURL = -L$(CURLDIR)/lib -R$(CURLDIR)/lib -lcurl\n\telse\n\t\tCURL_LIBCURL = -lcurl\n\tendif\n\tPROGRAMS += git-http-fetch\nendif\n\nifndef "],[7109,0,"export TAR INSTALL DESTDIR\n"],[7254,0,"1s|#!.*/sh|#!$(SHELL_PATH)|' \\\n\t    -e '"],[9692,3,""],[9692,0,"$(TAR)"],[9899,3,""],[9899,0,"$(TAR)"],[10401,1,""],[2098,0,".GIT"],[9164,40,""],[10042,0,"compat/*.o "],[10134,0," *.pyc *.pyo"]]},{"span":[28884,28902],"parents":[28883],"agent":"Linus Torvalds","seqStart":8080,"ops":[[4304,0,"git-update-ref \\\n\t"]]},{"span":[28902,28913],"parents":[28901],"agent":"Peter Eriksen","seqStart":12,"ops":[[7157,0," SHELL_PATH"]]},{"span":[28913,29229],"parents":[28912],"agent":"hpa","seqStart":0,"ops":[[5612,0,"eq ($(shell uname -o),Cygwin)\n\tNO_STRCASESTR = YesPlease\n\tNEEDS_LIBICONV = YesPlease\nendif\nif"],[1302,0,"NO_IPV6 if you lack IPv6 support and getaddrinfo().\n#\n# Define "],[3644,0,"var\nifndef NO_IPV6\n# Not supporte"],[3678,0," to IPv6-ch"],[3690,0,"ll"],[3693,2,""],[3694,0,"ged platforms yet\nSIMPLE_PROGRAMS +="],[3735,1,""],[3735,0,"d"],[3737,1,""],[3737,0,"emon\nendif"],[5849,0,"\tNO_IPV6 = YesPlease\n"],[6876,0,"ifdef NO_IPV6\n\tDEFINES += -DNO_IPV6\nendif\n"]]},{"span":[29229,29546],"parents":[29228],"agent":"Peter Anvin","seqStart":0,"ops":[[6911,0," -Dsockaddr_storage=sockaddr_in"],[10385,0,"*.exe "],[3647,80,""],[3648,3,""],[3659,5,""],[3660,1,""],[5781,0,"\tX = .exe\n"],[7391,0,"PROGRAMS_X = $(patsubst %,%$(X),$(PROGRAMS))\nSIMPLE_PROGRAMS_X = $(patsubst %,%$(X),$(SIMPLE_PROGRAMS))\n\n"],[7566,0,"_X"],[8299,0,"$(X)"],[8386,0,"$(X)"],[8439,0,"_X"],[8474,0,"_X"],[8485,0,"$(X)"],[8581,0,"$(X)"],[8610,0,"$(X)"],[8637,0,"$(X)"],[8671,0,"$(X)"],[8695,0,"$(X)"],[8727,0,"$(X)"],[8754,0,"$(X)"],[8796,0,"$(X)"],[8969,0,"$(X)"],[8988,0,"_X"],[9176,0,"$(X)"],[9258,0,"$(X)"],[9453,0,"_X"],[9531,0,"_X"],[10479,6,""],[10525,0,"_X"]]},{"span":[29546,29962],"parents":[29545],"agent":"H. Peter Anvin","seqStart":0,"ops":[[3594,0,"$(X)"],[3611,0,"$(X)"],[3629,0,"$(X)"],[3634,0,"\\\n\t"],[3651,0,"$(X)"],[3656,3,""],[3663,0,"$(X)"],[3678,0,"$(X)"],[3730,0,"$(X)"],[3747,0,"$(X)"],[3752,3,""],[3770,1,""],[3770,0,"$(X)\t\t\\\n\t"],[3793,0,"$(X)"],[3813,0,"$(X)"],[3818,3,""],[3837,1,""],[3837,0,"$(X)\t\\\n\t"],[3859,0,"$(X)"],[3864,3,""],[3878,0,"$(X)"],[3898,1,""],[3898,0,"$(X)\t"],[3919,0,"$(X)"],[3938,0,"$(X)"],[3959,1,""],[3959,0,"$(X)\t"],[3982,0,"$(X)"],[3998,0,"$(X)"],[4003,3,""],[4018,1,""],[4018,0,"$(X)\t\t\\\n\t"],[4039,0,"$(X)"],[4055,0,"$(X)"],[4074,1,""],[4074,0,"$(X)\t\t"],[4098,0,"$(X)"],[4112,0,"$(X)"],[4133,1,""],[4133,0,"$(X)\t\t\\\n\t"],[4154,0,"$(X)"],[4159,3,""],[4174,0,"$(X)"],[4195,1,""],[4195,0,"$(X)\t\\\n\t"],[4216,0,"$(X)"],[4221,3,""],[4237,0,"$(X)"],[4254,1,""],[4254,0,"$(X)\t\t\\\n\t"],[4276,0,"$(X)"],[4281,3,""],[4294,0,"$(X)"],[4314,1,""],[4314,0,"$(X)\t\t"],[4337,0,"$(X)"],[4355,0,"$(X)"],[4360,3,""],[4374,1,""],[4374,0,"$(X)\t\t\\\n\t"],[4395,0,"$(X)"],[4415,0,"$(X)"],[4420,3,""],[4438,1,""],[4438,0,"$(X)\t\\\n\t"],[4462,0,"$(X)"],[4489,1,""],[4489,0,"$(X)\t\t\t"],[4514,0,"$(X)"],[4534,0,"$(X)"],[4553,1,""],[4553,0,"$(X)\t"],[4575,0,"$(X)"],[4580,3,""],[4676,0,"$(X)"],[4693,0,"$(X)"],[7592,105,""],[7664,2,""],[8535,2,""],[8568,2,""],[9080,2,""],[9543,2,""],[9619,2,""],[10611,2,""]]},{"span":[29962,29966],"parents":[29961],"agent":"hpa","seqStart":316,"ops":[[6314,0,"$(X)"]]},{"span":[29966,30020],"parents":[28912],"agent":"Junio C Hamano","seqStart":9644,"ops":[[4384,2,""],[4384,0,"after"],[4390,4,""],[4390,0,"1"],[4392,1,""],[4392,0,"0"],[9193,0,"sh ./cmd-rename.sh $(DESTDIR)$(bindir)\n\t"]]},{"span":[30020,30177],"parents":[29965,30019],"agent":"H. Peter Anvin","seqStart":416,"ops":[[3595,1,""],[3596,1,""],[3610,1,""],[3611,1,""],[3626,1,""],[3627,1,""],[3646,1,""],[3647,1,""],[3656,1,""],[3657,1,""],[3669,1,""],[3670,1,""],[3719,1,""],[3720,1,""],[3734,1,""],[3735,1,""],[3755,1,""],[3756,1,""],[3776,1,""],[3777,1,""],[3794,1,""],[3795,1,""],[3816,1,""],[3817,1,""],[3836,1,""],[3837,1,""],[3853,1,""],[3854,1,""],[3871,1,""],[3872,1,""],[3890,1,""],[3891,1,""],[3907,1,""],[3908,1,""],[3926,1,""],[3927,1,""],[3947,1,""],[3948,1,""],[3961,1,""],[3962,1,""],[3979,1,""],[3980,1,""],[3998,1,""],[3999,1,""],[4012,1,""],[4013,1,""],[4029,1,""],[4030,1,""],[4051,1,""],[4052,1,""],[4063,1,""],[4064,1,""],[4082,1,""],[4083,1,""],[4101,1,""],[4102,1,""],[4119,1,""],[4120,1,""],[4138,1,""],[4139,1,""],[4157,1,""],[4158,1,""],[4176,1,""],[4177,1,""],[4191,1,""],[4192,1,""],[4211,1,""],[4212,1,""],[4227,1,""],[4228,1,""],[4245,1,""],[4246,1,""],[4266,1,""],[4267,1,""],[4282,1,""],[4283,1,""],[4299,1,""],[4300,1,""],[4318,1,""],[4319,1,""],[4336,1,""],[4337,1,""],[4357,1,""],[4358,1,""],[4379,1,""],[4380,1,""],[4404,1,""],[4405,1,""],[4427,1,""],[4428,1,""],[4445,1,""],[4446,1,""],[4462,1,""],[4463,1,""],[4482,1,""],[4483,1,""],[4581,1,""],[4582,1,""],[4596,1,""],[4597,1,""],[6215,1,""],[6216,1,""],[8298,1,""],[8299,1,""],[8383,1,""],[8384,1,""],[8476,1,""],[8477,1,""],[8570,1,""],[8571,1,""],[8597,1,""],[8598,1,""],[8622,1,""],[8623,1,""],[8654,1,""],[8655,1,""],[8676,1,""],[8677,1,""],[8706,1,""],[8707,1,""],[8731,1,""],[8732,1,""],[8771,1,""],[8772,1,""],[8942,1,""],[8943,1,""],[9145,1,""],[9146,1,""],[9225,1,""],[9226,1,""],[7728,0,"\\\n\t    -e 's/@@X@@/$(X)/g' "]]},{"span":[30177,30642],"parents":[30019],"agent":"Junio C Hamano","seqStart":9698,"ops":[[4319,0,"git-symbolic-ref "],[6165,0,"\tifdef OPENSSLDIR\n\t\t# Again this may be problematic -- gcc does not always want -R.\n\t\tCFLAGS += -I$(OPENSSLDIR)/include\n\t\tOPENSSL_LINK = -L$(OPENSSLDIR)/lib -R$(OPENSSLDIR)/lib\n\telse\n\t\tOPENSSL_LINK =\n\tendif\n"],[6490,0,"$(OPENSSL_LINK) "],[6542,0,"$(OPENSSL_LINK) "],[6595,0,"ifdef ICONVDIR\n\t\t# Again this may be problematic -- gcc does not always want -R.\n\t\tCFLAGS += -I$(ICONVDIR)/include\n\t\tICONV_LINK = -L$(ICONVDIR)/lib -R$(ICONVDIR)/lib\n\telse\n\t\tICONV_LINK =\n\tendif\n\t"],[6804,0,"$(ICONV_LINK) "]]},{"span":[30642,30768],"parents":[30641],"agent":"Han Boetes","seqStart":0,"ops":[[5700,0,"ifeq ($(shell uname -s),OpenBSD)\n\tNEEDS_LIBICONV = YesPlease\n\tPLATFORM_DEFINES += -I/usr/local/include -L/usr/local/lib\nendif\n"]]},{"span":[30768,30863],"parents":[30767],"agent":"Junio C Hamano","seqStart":10163,"ops":[[4450,0,"GIT_LIST_TWEAK =\n\n"],[4632,0,"lse\n\tGIT_LIST_TWEAK += -e '/^send-email$$/d'\ne"],[8018,0,"\\\n\t    $(GIT_LIST_TWEAK) "],[2097,5,""],[2097,0,"8"]]},{"span":[30863,30867],"parents":[30862],"agent":"Junio C Hamano","seqStart":10258,"ops":[[2098,0,".GIT"]]},{"span":[30867,31069],"parents":[30176,30866],"agent":"Peter Anvin","seqStart":317,"ops":[[3736,0,"\\\n\t"],[3759,5,""],[3759,0," "],[3795,0,"\\\n\t"],[3819,4,""],[3819,0," "],[3837,0,"\\\n\t"],[3874,1,""],[3874,0," "],[3929,1,""],[3929,0," "],[3965,0,"\\\n\t"],[3985,5,""],[3985,0," "],[4031,2,""],[4031,0," "],[4083,5,""],[4083,0," "],[4099,0,"\\\n\t"],[4138,4,""],[4138,0," "],[4155,0,"\\\n\t"],[4191,5,""],[4191,0," "],[4208,0,"\\\n\t"],[4244,2,""],[4244,0," "],[4281,0,"\\\n\t"],[4300,5,""],[4300,0," "],[4334,0,"\\\n\t"],[4357,4,""],[4357,0," "],[4401,3,""],[4401,0," "],[4457,1,""],[4457,0," "],[4494,0,"$X"],[4497,0,"\\\n\t"],[8337,0,"<<<<<<< Makefile\n"],[8426,0,"<$@.sh >$@+\n=======\n\t    -e 's/@@GIT_VERSION@@/$(GIT_VERSION)/g' "],[8528,0,">>>>>>> .merge_file_3QHyD4\n"]]},{"span":[31069,31178],"parents":[31068],"agent":"Junio C Hamano","seqStart":10262,"ops":[[8337,17,""],[8408,7,""],[8409,58,""],[8445,27,""]]},{"span":[31178,31378],"parents":[31177],"agent":"Junio C Hamano","seqStart":10372,"ops":[[5974,0,"\tPLATFORM_DEFINES += -DUSE_SYMLINK_HEAD=0\n"],[8623,0,"\\\n\t    -e 's/@@GIT_VERSION@@/"],[8653,0,"(GIT_VERSION)/g' \\\n\t    $"],[8798,0,"\\\n\t    -e 's/@@GIT_VERSION@@/$(GIT_VERSION)/g' \\\n\t    "],[9034,0,"    -e 's/@@GIT_VERSION@@/$(GIT_VERSION)/g' \\\n"],[9081,0,"    "]]},{"span":[31378,31400],"parents":[31377],"agent":"Matthias Urlichs","seqStart":41,"ops":[[3450,0," \\\n\tgit-svnimport-perl"]]},{"span":[31400,31402],"parents":[31399],"agent":"Kalle Valo","seqStart":0,"ops":[[3467,1,""],[3467,0,"."]]},{"span":[31402,31412],"parents":[31377],"agent":"Junio C Hamano","seqStart":10574,"ops":[[3225,0,"git-am.sh "]]},{"span":[31412,31569],"parents":[31411],"agent":"Johannes Schindelin","seqStart":262,"ops":[[1232,0,"NO_MMAP if you want to avoid mmap.\n#\n# Define "],[7663,0,"MMAP\n\tDEFINES += -Dmmap=gitfakemmap -Dmunmap=gitfakemunmap -DNO_MMAP\n\tLIB_OBJS += compat/mmap.o\nendif\nifdef NO_"]]},{"span":[31569,31576],"parents":[31568],"agent":"Kai Ruemmler","seqStart":0,"ops":[[8366,0,"prefix "]]},{"span":[31576,32095],"parents":[31575],"agent":"Junio C Hamano","seqStart":10584,"ops":[[5584,0,"\n# We choose to avoid \"if .. else if .. else .. endif endif\"\n# because maintaining the nesting to match is a pain.  If\n# we had \"el"],[5717,0,"\" things would have be"],[5740,1,""],[5740,0,"n much"],[5747,0,"nicer...\nuname_S := $"],[5769,0,"shell sh -c 'uname -s 2>/dev/null || echo not')\nuname_M := "],[5836,0,"sh -c '"],[5850,0,"m 2>/dev/null || echo not')\nuname_O := $("],[5892,0,"hell sh -c 'uname -o 2>/dev/null || echo not'"],[5938,0,"\n\nifeq ($(uname_S)"],[6042,6,""],[6047,3,""],[6047,0,"_S"],[6262,6,""],[6267,3,""],[6267,0,"_O"],[6415,1,""],[6419,1,""],[6421,23,""],[6426,11,""],[6428,44,""],[6532,0,"ifneq (,$(findstring arm,$(uname_M)))\n\tARM_SHA1 = YesPlease\nendif\n"]]},{"span":[32095,32096],"parents":[30862],"agent":"Junio C Hamano","seqStart":10371,"ops":[[2098,0,"a"]]},{"span":[32096,32098],"parents":[32095],"agent":"Junio C Hamano","seqStart":10572,"ops":[[2098,1,""],[2098,0,"b"]]},{"span":[32098,32116],"parents":[30862],"agent":"Junio C Hamano","seqStart":11103,"ops":[[7221,0," -DNO_STRCASESTR=1"]]},{"span":[32116,32118],"parents":[32097,32115],"agent":"Junio C Hamano","seqStart":11121,"ops":[[2098,1,""],[2098,0,"c"]]},{"span":[32118,32483],"parents":[32094,32115],"agent":"Junio C Hamano","seqStart":11123,"ops":[[5554,0," Shell quote;\n# Result of this needs to be placed inside ''\nshq = $(subst ','\\'',$(1))"],[5643,0,"This has surrounding ''\nshellquote = '$(call shq,$(1))'\n\n#\n# "],[7436,1,""],[7448,1,""],[8676,1,""],[8692,0,"call shellquote,$("],[8722,1,""],[8722,0,")"],[9038,0,"call shq,$("],[9060,0,")"],[9296,0,"call shq,$("],[9318,0,")"],[9484,0,"call shq,$("],[9505,0,")"],[9673,0,"call shq,$("],[9696,0,")"],[9735,0,"call shq,$("],[9761,0,")"],[10518,1,""],[10518,0,"$(call shellquote,"],[10553,1,""],[10553,0,")"],[11111,0,"call shellquote,$("],[11146,0,")"],[11185,0,"call shellquote,$("],[11220,0,")"],[11247,0,"call shellquote,$("],[11298,0,")"],[11322,0,"call shellquote,$("],[11357,0,")"],[11412,0,"call shellquote,$("],[11455,0,")"],[11484,0,"call shellquote,$("],[11527,0,")"]]},{"span":[32483,32510],"parents":[32115],"agent":"Junio C Hamano","seqStart":11488,"ops":[[5795,0,"O_STRCASESTR = YesPlease\n\tN"]]},{"span":[32510,32519],"parents":[32482,32509],"agent":"Linus Torvalds","seqStart":8098,"ops":[[5507,0,"config.o "]]},{"span":[32519,32540],"parents":[32518],"agent":"Johannes Schindelin","seqStart":419,"ops":[[6782,0,"-include config.mak\n\n"]]},{"span":[32540,32553],"parents":[32539],"agent":"Tom Prince","seqStart":0,"ops":[[8961,0," template_dir"]]},{"span":[32553,32567],"parents":[32552],"agent":"Linus Torvalds","seqStart":8107,"ops":[[5516,0,"environment.o "]]},{"span":[32567,32584],"parents":[32566],"agent":"Sergey Vlasov","seqStart":0,"ops":[[4013,0,"dex-pack$X git-in"]]},{"span":[32584,32605],"parents":[32583],"agent":"Martin Langhoff","seqStart":0,"ops":[[3506,0," \\\n\tgit-findtags.perl"]]},{"span":[32605,32616],"parents":[32604],"agent":"Linus Torvalds","seqStart":8121,"ops":[[5568,0,"ctype.o \\\n\t"]]},{"span":[32616,32639],"parents":[32615],"agent":"Junio C Hamano","seqStart":11538,"ops":[[4591,0,"git-check-ref-format$X "]]},{"span":[32639,32642],"parents":[31401,32638],"agent":"Junio C Hamano","seqStart":11561,"ops":[[3528,3,""]]},{"span":[32642,32775],"parents":[32641],"agent":"Johannes Schindelin","seqStart":440,"ops":[[9020,0," git-cherry-pick"],[10035,0,"git-cherry-pick: git-revert\n\tcp $< $@\n\n"],[11450,78,""]]},{"span":[32775,32787],"parents":[32774],"agent":"Linus Torvalds","seqStart":8132,"ops":[[5288,0," tree-diff.o"]]},{"span":[32787,32799],"parents":[32786],"agent":"Josef Weidendorfer","seqStart":50,"ops":[[3546,0," git-mv.perl"]]},{"span":[32799,32811],"parents":[32798],"agent":"Linus Torvalds","seqStart":8144,"ops":[[4370,0,"git-shell$X "]]},{"span":[32811,32818],"parents":[32810],"agent":"Junio C Hamano","seqStart":11570,"ops":[[5654,0,"copy.o "]]},{"span":[32818,32833],"parents":[32817],"agent":"Johannes Schindelin","seqStart":573,"ops":[[4660,0,"git-name-rev$X "]]},{"span":[32833,32843],"parents":[32832],"agent":"Junio C Hamano","seqStart":11577,"ops":[[2206,5,""],[2206,0,"9.GIT"]]},{"span":[32843,32861],"parents":[32842],"agent":"Petr Baudis","seqStart":5035,"ops":[[3514,18,""]]},{"span":[32861,32920],"parents":[32860],"agent":"Junio C Hamano","seqStart":11614,"ops":[[11493,59,""]]},{"span":[32920,32936],"parents":[32919],"agent":"Junio C Hamano","seqStart":11675,"ops":[[11094,0," ctype.o"],[11148,0," ctype.o"]]},{"span":[32936,32984],"parents":[32935],"agent":"Peter Eriksen","seqStart":23,"ops":[[6409,0,"NEEDS_LIBICONV = YesPlease\n\t"],[6486,20,""]]},{"span":[32984,33002],"parents":[32983],"agent":"Junio C Hamano","seqStart":11691,"ops":[[3366,0,"merge-ours.sh git-"]]},{"span":[33002,33342],"parents":[33001],"agent":"Junio C Hamano","seqStart":11713,"ops":[[1615,32,""],[1952,25,""],[2102,26,""],[2130,0,"# "],[2139,0,"is for the users to override from the command line.\n\nCFLAGS "],[2236,31,""],[6486,1,""],[6486,0,"AL"],[6489,6,""],[6490,2,""],[6490,0,"C"],[6492,3,""],[6492,0,"LAG"],[6635,2,""],[6636,5,""],[6636,0,"LL"],[6639,2,""],[6639,0,"C"],[6641,3,""],[6641,0,"LAG"],[6758,2,""],[6759,5,""],[6759,0,"LL"],[6762,2,""],[6762,0,"C"],[6764,3,""],[6764,0,"LAG"],[6991,0,"ALL_"],[7460,0,"ALL_"],[7591,2,""],[7591,0,"ALL_C"],[7597,3,""],[7597,0,"LAG"],[7892,0,"ALL_"],[8216,2,""],[8216,0,"ALL_C"],[8222,3,""],[8222,0,"LAG"],[8329,2,""],[8329,0,"ALL_C"],[8335,3,""],[8335,0,"LAG"],[8443,2,""],[8443,0,"ALL_C"],[8449,3,""],[8449,0,"LAG"],[8847,2,""],[8847,0,"ALL_C"],[8853,3,""],[8853,0,"LAG"],[12632,30,""],[12646,2,""],[12646,0,"*"]]},{"span":[33342,33653],"parents":[33001],"agent":"Nick Hengeveld","seqStart":0,"ops":[[503,0,"and\n# g"],[511,0,"t-http-pu"],[521,0,"h"],[523,0,"are "],[530,2,""],[577,0,"\n#"],[728,0,"EXPAT if you do not have expat installed.  git-http-push is\n# not built, and you cannot push using http:// and https:// transports.\n#\n# Define NO_"],[7384,0,"\tifndef NO_EXPAT\n\t\tEXPAT_LIBEXPAT = -l"],[7423,0,"xpat\n\t\tPROGRAMS += git-http-push$X\n\tendif\ne"],[10947,0,"http-push$X: LIBS += $(CURL_LIBCURL) $(EXPAT_LIBEXPAT)\ngit-"]]},{"span":[33653,33770],"parents":[33341,33652],"agent":"Randal L. Schwartz","seqStart":0,"ops":[[6462,0,"\t## fink\n\tALL_CFLAGS += -I/sw/include -L/sw/lib\n\t## darwinports\n\tALL_CFLAGS += -I/opt/local/include -L/opt/local/lib\n"]]},{"span":[33770,33795],"parents":[33769],"agent":"Martin Langhoff","seqStart":21,"ops":[[3673,0," git-cvsexportcommit.perl"]]},{"span":[33795,33828],"parents":[33794],"agent":"Lukas_Sandström","seqStart":0,"ops":[[4815,0,"git-pack-intersect$X "],[4824,4,""],[4825,1,""],[4826,1,""],[4826,0,"dundan"]]},{"span":[33828,33849],"parents":[33827],"agent":"Junio C Hamano","seqStart":12062,"ops":[[3506,0," \\\n\tgit-lost+found.sh"]]},{"span":[33849,34170],"parents":[33848],"agent":"Junio C Hamano","seqStart":12085,"ops":[[3518,1,""],[3518,0,"-"],[2306,2,""],[2306,0,"and LDFLAGS are"],[2394,0,"LDFLAGS =\n"],[2427,0,"ALL_LDFLAGS = $(LDFLAGS)\n"],[6614,0,"\n\tALL_LDFLAGS +="],[6692,0,"\n\tALL_LDFLAGS"],[6706,0,"+= "],[7223,0,"\n\tALL_LDFLAGS +="],[7265,0,"eq ($(u"],[7273,0,"ame_S),NetBSD)\n\tNEEDS_LIBICONV = YesPl"],[7312,0,"ase\n\tALL_CFLAGS += -I/usr/pkg/include\n\tALL_LDFLAGS += -L/usr/pkg/lib -Wl,-rpath,/usr/pkg/lib\nendif\nifne"],[7575,0,"always "],[10923,0,"ALL_LDFLAGS) $("],[11105,0,"ALL_LDFLAGS) $("],[11135,0,"\\\n\t\t"],[11889,0,"$(ALL_LDFLAGS) "],[12014,0,"(ALL_LDFLAGS) $"]]},{"span":[34170,34186],"parents":[34169],"agent":"Josef Weidendorfer","seqStart":62,"ops":[[3656,16,""]]},{"span":[34186,34244],"parents":[34185],"agent":"H. Peter Anvin","seqStart":573,"ops":[[12535,5,""],[12545,5,""],[12630,5,""],[12655,5,""],[12765,5,""],[12834,5,""],[12923,9,""],[12929,2,""],[12929,0,"TA"],[12932,3,""],[12933,0,"AME"],[13238,8,""],[13238,0,"*"]]},{"span":[34244,34264],"parents":[34243],"agent":"Junio C Hamano","seqStart":12736,"ops":[[3953,10,""],[4879,0,"git-var$X "]]},{"span":[34264,34512],"parents":[34263],"agent":"Andreas Ericsson","seqStart":0,"ops":[[3389,7,""],[9823,0," git"],[9857,0,"# Only use $(CFLAGS). We don't need anything else.\n"],[9917,2,""],[9917,0,"c"],[9929,10,""],[9930,6,""],[9930,0,"(CC)"],[9936,31,""],[9936,0,"DGIT_EX"],[9944,2,""],[9944,0,"C"],[9950,0,"='\"$(bindir"],[9962,2,""],[9962,0,"\""],[9965,7,""],[9966,7,""],[9966,0,"D"],[9978,3,""],[9978,0,"='\""],[9995,2,""],[9995,0,"\""],[10001,26,""],[10002,4,""],[10004,4,""],[10004,0,"CF"],[10007,7,""],[10008,1,""],[10008,0,"GS"],[10012,1,""],[10015,2,""],[10015,0,"c"],[10017,9,""],[10017,0,"-"],[10019,1,""],[10020,3,""],[10022,1,""],[10023,10,""],[10024,1,""],[12088,0," git"],[12165,0,"git "]]},{"span":[34512,34524],"parents":[34511],"agent":"Nicolas Pitre","seqStart":935,"ops":[[13101,0,"arm/*.o "],[13128,0,"git "]]},{"span":[34524,34708],"parents":[34523],"agent":"Junio C Hamano","seqStart":12875,"ops":[[7012,0,"# There are conflicting reports about this.\n\t# On some boxes NO_MMAP is needed, and not so elsewhere.\n\t# Try uncommenting this if you see things break -- YMMV.\n\t# NO_MMAP = YesPlease\n\t"]]},{"span":[34708,34864],"parents":[34707],"agent":"Nick Hengeveld","seqStart":311,"ops":[[11301,0," http.o\ngit-http-push$X: http.o"],[7915,0,"curl_check := $(shell (echo 070908; curl-conf"],[7961,0,"g --vernum) | sort -r | sed -ne 2p)\n\tifeq \"$(curl_check)\" \"070908\"\n\t\ti"],[8048,0,"\t"],[8076,0,"\t"],[8106,0,"\tendif\n\t"]]},{"span":[34864,34884],"parents":[34863],"agent":"Johannes Schindelin","seqStart":588,"ops":[[4876,0,"config-set$X git-"],[4899,0,"\\\n\t"]]},{"span":[34884,35390],"parents":[34883],"agent":"Ryan Anderson","seqStart":78,"ops":[[5035,0,"# Set paths to tools early so that they can be used for version tests.\nifndef SHELL_PATH\n\tSHELL_"],[5132,0,"ATH = /bin/sh\nendif\nifndef PERL_PATH\n\tPERL_PATH = /usr/bin/perl\nendif\nifndef PYTHON_PATH\n\tPYTHON_PATH = /usr/bin/python\nendif\n\nP"],[5358,0,"lse\n\tifneq ($(shell $(PYTHON_PATH) -c 'import subprocess;print\"OK\"' 2>/dev/null),OK)\n\t\tPYMODULES += compat/subprocess.py\n\te"],[5486,0,"endif\n"],[8487,6,""],[8490,4,""],[8492,143,""]]},{"span":[35390,35883],"parents":[35389],"agent":"Andreas Ericsson","seqStart":248,"ops":[[3789,0,"SCRIPTS = $(patsubst %.sh,%,$(SCRIPT_SH)) \\\n\t  $(patsubst %.perl,%,$(SCRIPT_PERL)) \\\n\t  $(patsubst %.py,%,$(SCRIPT_PYTHON)) \\\n\t  gitk git-cherry-pick\n\n"],[5049,0,"\n\n# what 'all' will"],[5069,1,""],[5069,0,"build and 'install' will install."],[5103,1,""],[5103,0,"ALL_PROGRAMS = $(PROGRAMS) "],[5148,0," $(SCRIPTS) git$X"],[10339,37,""],[10340,88,""],[10342,2,""],[10343,24,""],[10426,0,"ALL_"],[10437,5,""],[10438,6,""],[10439,4,""],[10523,0,"$(X)"],[10629,3,""],[10629,0,"<"],[10640,17,""],[10669,1,""],[12693,26,""],[12693,0,"all"],[12768,4,""],[12771,0,"ALL_"],[12782,11,""]]},{"span":[35883,35927],"parents":[35882],"agent":"Junio C Hamano","seqStart":13059,"ops":[[13721,3,""],[13721,0,"$(LIB_FILE)\n\trm"],[13737,0,"-f "],[13754,1,""],[13754,0,"S"],[13756,4,""],[13756,0,"MP"],[13760,0,"_PROGRAMS"],[13770,0," git$X"]]},{"span":[35927,35936],"parents":[35926],"agent":"Johannes Schindelin","seqStart":608,"ops":[[5027,0,"repo-"],[5038,4,""]]},{"span":[35936,36530],"parents":[35935],"agent":"Timo Hirvonen","seqStart":0,"ops":[[5263,18,""],[5519,305,""],[5520,6,""],[7952,0,"def WITH_OWN_SUBPROCESS_PY\n\tPYMODULES += compat/subprocess.py\nelse\n\tifneq ($(shell $(PYTHON_PATH) -c 'import subprocess;print\"OK\"' 2>/dev/null),OK)\n\t\tPYMODULES += compat/subprocess.py\n\tendif\nendif\n\nifdef WITH_SEND_EMAIL\n\tSCRIPT_PERL += git-send-email.perl\nendif\n\nif"]]},{"span":[36530,36580],"parents":[36529],"agent":"Junio C Hamano","seqStart":13122,"ops":[[2,0,"The default target of this Makefile is...\nall:\n\n# "]]},{"span":[36580,37055],"parents":[36579],"agent":"Jason Riedy","seqStart":0,"ops":[[976,0,"NO_SETENV if you don't have setenv in the C library.\n#\n# Define "],[6869,0,"uname_R := $(shell sh -c 'uname -r 2>/dev/null || echo not')\n"],[7327,0,"ifeq ($(uname_R),5.8)\n\t\tNO_SETENV = YesPlease\n\tendif\n\t"],[9816,0,"COMP"],[9821,2,""],[9821,0,"T"],[9879,3,""],[9879,0,"COMPAT"],[9929,0,"SETENV\n\tCO"],[9940,0,"PAT_CFLAGS += -Dsetenv=gitsetenv -DNO_SETENV=1\n\tCO"],[9991,0,"P"],[9993,0,"T_OBJS += compat/setenv.o\nendif\nifdef NO_MMA"],[10040,0,"COMP"],[10045,2,""],[10045,0,"T"],[10110,3,""],[10110,0,"COMPAT"],[10625,0," $(COMPAT_CFLAGS)"],[10643,0,"LIB_OBJS += $(COMPAT_OBJS)"],[10795,43,""],[10796,8,""],[10810,0,"$(COMPAT_OBJS) "],[10919,1,""],[10919,0,"(COMPAT_CFLAGS)"],[10940,0," $(filter %.c,$^) $(filter %.o,$^)"]]},{"span":[37055,37205],"parents":[37054],"agent":"Junio C Hamano","seqStart":13175,"ops":[[5821,0," git-compat-util.h"],[9853,27,""],[9866,2,""],[9945,19,""],[9954,2,""],[10023,29,""],[10024,13,""],[10725,1,""],[10726,1,""],[10736,8,""],[10736,0,"LI"],[10739,2,""],[10739,0,"_FILE"],[10881,13,""],[10881,0,"LIB_FILE"]]},{"span":[37205,37284],"parents":[37204],"agent":"Jason Riedy","seqStart":475,"ops":[[8111,0,"eq ($(uname_S),AIX)\n\tNO_STRCASESTR=YesPlease\n\tNEEDS_LIBICONV=YesPlease\nendif\nif"]]},{"span":[37284,37292],"parents":[37283],"agent":"Junio C Hamano","seqStart":13327,"ops":[[12983,0," || exit"]]},{"span":[37292,37341],"parents":[37291],"agent":"Junio C Hamano","seqStart":13337,"ops":[[6308,0,"fetch-clone.o \\\n\t"],[14197,0," */*.pyc */*.pyo"],[14452,0,"\n"],[3255,15,""]]},{"span":[37341,37364],"parents":[32117,32509],"agent":"Junio C Hamano","seqStart":11515,"ops":[[4333,0,"git-check-ref-format "],[2098,1,""],[2098,0,"d"]]},{"span":[37364,37370],"parents":[37363],"agent":"Junio C Hamano","seqStart":11564,"ops":[[2098,1,""],[2098,0,"e"],[2098,1,""],[2098,0,"f"],[2098,1,""],[2098,0,"g"]]},{"span":[37370,37397],"parents":[32842,37369],"agent":"Junio C Hamano","seqStart":11587,"ops":[[2207,5,""],[2207,0,"a"],[4630,21,""]]},{"span":[37397,37399],"parents":[32919,37396],"agent":"Junio C Hamano","seqStart":11673,"ops":[[2207,1,""],[2207,0,"b"]]},{"span":[37399,37403],"parents":[33001,37398],"agent":"Junio C Hamano","seqStart":11709,"ops":[[2207,1,""],[2207,0,"c"],[2207,1,""],[2207,0,"d"]]},{"span":[37403,37407],"parents":[26852],"agent":"Junio C Hamano","seqStart":8767,"ops":[[1936,1,""],[1936,0,"b"],[1936,1,""],[1936,0,"c"]]},{"span":[37407,37409],"parents":[37406],"agent":"Junio C Hamano","seqStart":9642,"ops":[[1936,1,""],[1936,0,"d"]]},{"span":[37409,37413],"parents":[33769,37402,37408],"agent":"Junio C Hamano","seqStart":12053,"ops":[[2291,2,""],[2291,0,"e"],[2354,1,""]]},{"span":[37413,37418],"parents":[33794,37412],"agent":"Junio C Hamano","seqStart":12057,"ops":[[2291,1,""],[2291,0,"f"],[2355,0,"\n"],[2291,1,""],[2291,0,"g"]]},{"span":[37418,37420],"parents":[33848,37417],"agent":"Junio C Hamano","seqStart":12083,"ops":[[2291,1,""],[2291,0,"h"]]},{"span":[37420,37750],"parents":[34185,37419],"agent":"Junio C Hamano","seqStart":12406,"ops":[[2291,1,""],[2291,0,"i"],[2291,1,""],[2291,0,"j"],[3386,7,""],[3943,10,""],[4869,0,"git-var$X "],[9820,0," git"],[9854,0,"# Only use $(CFLAGS). We don't need anything else.\n"],[9914,2,""],[9914,0,"c"],[9926,6,""],[9927,10,""],[9927,0,"(CC)"],[9933,31,""],[9933,0,"DGIT_EX"],[9941,2,""],[9941,0,"C"],[9947,0,"='\"$(bindir"],[9959,2,""],[9959,0,"\""],[9961,5,""],[9962,2,""],[9963,7,""],[9963,0,"D"],[9975,3,""],[9975,0,"='\""],[9992,2,""],[9992,0,"\""],[9998,26,""],[9999,4,""],[10001,4,""],[10001,0,"CF"],[10004,7,""],[10005,1,""],[10005,0,"GS"],[10009,1,""],[10012,2,""],[10012,0,"c"],[10014,9,""],[10014,0,"-"],[10016,4,""],[10019,1,""],[10020,11,""],[12085,0," git"],[12162,0,"git "],[12482,5,""],[12492,5,""],[12577,5,""],[12602,5,""],[12712,5,""],[12781,5,""],[12870,9,""],[12876,2,""],[12876,0,"TA"],[12879,3,""],[12880,0,"AME"],[13185,8,""],[13185,0,"*"]]},{"span":[37750,37869],"parents":[34511,37749],"agent":"Junio C Hamano","seqStart":12756,"ops":[[4879,7,""],[4880,3,""],[9824,4,""],[9905,43,""],[9906,8,""],[9914,1,""],[9926,4,""],[9926,0,"$"],[9933,7,""],[9941,1,""],[9947,11,""],[9960,1,""],[9961,0," "],[9964,1,""],[9975,3,""],[9993,1,""],[10003,2,""],[10005,2,""],[10012,1,""],[10015,1,""],[10016,0," "],[10020,0,"\n"],[12089,4,""],[12161,4,""],[12876,2,""],[12883,3,""],[13185,1,""]]},{"span":[37869,37888],"parents":[35935,37868],"agent":"Junio C Hamano","seqStart":13103,"ops":[[2291,1,""],[2291,0,"k"],[5024,6,""],[5042,0,"var"],[5046,0,"X"],[5066,0," "],[5128,0,"$"],[10628,1,""],[12766,4,""]]},{"span":[37888,37891],"parents":[37054,37887],"agent":"Junio C Hamano","seqStart":13172,"ops":[[2405,1,""],[2405,0,"l"],[10792,1,""]]},{"span":[37891,37893],"parents":[37283,37890],"agent":"Junio C Hamano","seqStart":13325,"ops":[[2405,1,""],[2405,0,"m"]]},{"span":[37893,37895],"parents":[37291,37892],"agent":"Junio C Hamano","seqStart":13335,"ops":[[2405,1,""],[2405,0,"n"]]},{"span":[37895,37903],"parents":[37340,37894],"agent":"Junio C Hamano","seqStart":13386,"ops":[[2399,0,"1."],[2403,5,""],[2403,0,"0"]]},{"span":[37903,37907],"parents":[37902],"agent":"Junio C Hamano","seqStart":13394,"ops":[[2404,0,".GIT"]]},{"span":[37907,37908],"parents":[37902],"agent":"Junio C Hamano","seqStart":13398,"ops":[[2404,0,"a"]]},{"span":[37908,37910],"parents":[37907],"agent":"Junio C Hamano","seqStart":13401,"ops":[[2404,1,""],[2404,0,"b"]]},{"span":[37910,37912],"parents":[37906],"agent":"Junio C Hamano","seqStart":13399,"ops":[[2403,2,""]]},{"span":[37912,37975],"parents":[37902],"agent":"Johannes Schindelin","seqStart":617,"ops":[[11632,0,"# format-patch records GIT_VERSION\ngit-format-patch: Makefile\n\n"]]},{"span":[37975,37978],"parents":[37909,37974],"agent":"Junio C Hamano","seqStart":13403,"ops":[[2403,2,""],[2403,0,"3"]]},{"span":[37978,37979],"parents":[37911,37977],"agent":"Junio C Hamano","seqStart":13406,"ops":[[2403,1,""]]},{"span":[37979,37981],"parents":[37977],"agent":"Junio C Hamano","seqStart":13407,"ops":[[2403,1,""],[2403,0,"4"]]},{"span":[37981,37982],"parents":[37978,37980],"agent":"Junio C Hamano","seqStart":13409,"ops":[[2403,1,""]]},{"span":[37982,37984],"parents":[37980],"agent":"Junio C Hamano","seqStart":13410,"ops":[[2403,1,""],[2403,0,"5"]]},{"span":[37984,37985],"parents":[37981,37983],"agent":"Junio C Hamano","seqStart":13412,"ops":[[2403,1,""]]},{"span":[37985,38003],"parents":[37984],"agent":"Linus Torvalds","seqStart":8156,"ops":[[5146,0," \\\n\tgit-describe$X"]]},{"span":[38003,38354],"parents":[38002],"agent":"Junio C Hamano","seqStart":13413,"ops":[[2388,1,""],[2388,0,"-"],[2396,0,"-FILE:"],[2403,1,""],[2403,0,".FORCE-GIT-VERSION-FILE\n\t@sh"],[2432,1,""],[2433,2,""],[2433,0,"/GIT-VERSION-GEN\n-include "],[2462,0,"-VERSION-FILE"],[10910,9,""],[11714,4,""],[11714,0,"These c"],[11722,7,""],[11722,0,"n"],[11730,1,""],[11746,6,""],[11746,0,"$X gi"],[11752,1,""],[11752,0,".s"],[11755,0,"ec \\\n\t$(p"],[11766,1,""],[11766,0,"subst %.s"],[11776,1,""],[11776,0,",%,$(SCRIPT_SH))"],[11793,1,""],[11793,0,"\\\n\t$(p"],[11800,1,""],[11800,0,"tsubst %.p"],[11811,2,""],[11811,0,"r"],[11813,1,""],[11813,0,",%,$(SCRIPT_PERL)) \\\n\t$(patsubst %.py,%,$(SCRIPT_PYTHON)) \\\n\t: GIT-VERSION-FILE"],[13696,9,""],[14685,0,"\trm -f GIT-VERSION-FILE\n\n.PHONY: all install clean\n.PHONY: .FORCE-GIT-VERSION-FILE\n"]]},{"span":[38354,38356],"parents":[37983],"agent":"Junio C Hamano","seqStart":13764,"ops":[[2403,1,""],[2403,0,"6"]]},{"span":[38356,38357],"parents":[38353,38355],"agent":"Junio C Hamano","seqStart":13766,"ops":[[2459,1,""]]},{"span":[38357,38359],"parents":[38355],"agent":"Junio C Hamano","seqStart":13767,"ops":[[2403,1,""],[2403,0,"7"]]},{"span":[38359,38360],"parents":[38356,38358],"agent":"Junio C Hamano","seqStart":13769,"ops":[[2459,1,""]]},{"span":[38360,38581],"parents":[37974],"agent":"Junio C Hamano","seqStart":13770,"ops":[[13890,150,""],[14191,71,""]]},{"span":[38581,38583],"parents":[38358,38580],"agent":"Junio C Hamano","seqStart":13991,"ops":[[2403,1,""],[2403,0,"8"]]},{"span":[38583,38584],"parents":[38359,38582],"agent":"Junio C Hamano","seqStart":13993,"ops":[[2459,1,""]]},{"span":[38584,38658],"parents":[38583],"agent":"H. Peter Anvin","seqStart":631,"ops":[[13921,0,"@echo $(GIT_VERSION) > $(GIT_TARNAME)/version\n\t"],[13997,0,"\\\n\t\t"],[14024,0," $(GIT_TARNAME)/version"]]},{"span":[38658,38747],"parents":[38657],"agent":"Junio C Hamano","seqStart":13994,"ops":[[2632,0,"STRIP ?= strip\n"],[10901,0,"strip: $(PROGRAMS) "],[10925,0,"\n\t$(STRIP) $(STRIP_OPTS) $(PROGRAMS) git$X\n\ngit$X"],[14671,0," strip"]]},{"span":[38747,39013],"parents":[38746],"agent":"Michal Ostrowski","seqStart":0,"ops":[[2688,0,"gitexecdir = $(prefix)/bin\n"],[5385,6,""],[6172,0,"exec_cmd.o "],[10903,0," git$X"],[11045,30,""],[12074,0,"exec_cmd.o: ALL_CFLAGS += -DGIT_EXEC_PATH=\\\"$(gitexecdir)\\\"\n\n"],[13521,0,"-d -m755 "],[13532,0,"call shellquote,$(DESTDIR)$(gitexecdir))\n\t$(INST"],[13583,0,") $(ALL"],[13643,0,"INSTALL) git$X $(call shellquote,$(DESTDIR)$(gitexecdir))\n\t$("]]},{"span":[39013,39162],"parents":[39012],"agent":"Junio C Hamano","seqStart":14083,"ops":[[4128,5,""],[4331,0," that could be moved out of bindir to gitexecdir"],[5370,1,""],[5370,0,", in gitexecdir"],[10966,0," gitk"],[13693,1,""],[13693,0,"g"],[13695,1,""],[13695,0,"texec"],[13724,0,"gitk "],[13759,1,""],[13759,0,"b"],[13761,5,""],[13761,0,"n"],[14601,5,""],[14602,10,""],[14603,1,""],[14603,0,"L"],[14620,37,""]]},{"span":[39162,39165],"parents":[38582],"agent":"Junio C Hamano","seqStart":14232,"ops":[[2403,1,""],[2403,0,"10"]]},{"span":[39165,39167],"parents":[38657,39164],"agent":"Junio C Hamano","seqStart":14235,"ops":[[2459,2,""]]},{"span":[39167,39169],"parents":[39164],"agent":"Junio C Hamano","seqStart":14237,"ops":[[2404,1,""],[2404,0,"1"]]},{"span":[39169,39171],"parents":[39168],"agent":"Junio C Hamano","seqStart":14239,"ops":[[2404,1,""],[2404,0,"2"]]},{"span":[39171,39173],"parents":[39170],"agent":"Junio C Hamano","seqStart":14241,"ops":[[2404,1,""],[2404,0,"3"]]},{"span":[39173,39174],"parents":[39166,39168],"agent":"Junio C Hamano","seqStart":14243,"ops":[[2459,1,""]]},{"span":[39174,39175],"parents":[39170,39173],"agent":"Junio C Hamano","seqStart":14244,"ops":[[2459,1,""]]},{"span":[39175,39314],"parents":[39161,39174],"agent":"Pavel Roskin","seqStart":187,"ops":[[1040,0,"USE_SYMLINK_HEAD if you want .git/HEAD to be a symbolic link.\n# Don't enable it on Windows.\n#\n# Define "],[8055,36,""]]},{"span":[39314,39945],"parents":[39313],"agent":"Junio C Hamano","seqStart":14245,"ops":[[1795,0,"NO_SOCKADDR_STORAGE if your platform does not have struct\n# sockaddr_storage.\n#\n# Define "],[10534,0,"\nendif\nifdef NO_SOCKADDR_STORAGE\nifdef NO_IPV6\n\tALL_CFLAGS += -Dsockaddr_storage=sockaddr_in\nelse\n\tALL_CFLAGS"],[10644,0,"+= "],[10677,0,"6\nendif"],[924,0,"D_INO_IN_DIRENT if you don't have d_ino in your struct dirent.\n#\n# Define NO_"],[7956,0,"D_INO_IN_DIRENT = YesPlease\n\tNO_"],[10356,0,"D_INO_IN_DIRENT\n\tALL_CFLAGS += -DNO_D_INO_IN_DIRENT\nendif\nifdef NO_"],[1001,0,"D_TYPE_IN_DIRENT if your platform defines DT_UNKNOWN but lacks\n# d_type in struct dirent (latest Cygwin -- will be fixed soonish).\n#\n# Define NO_"],[8103,0,"TYPE_IN_DIRENT = YesPlease\n\tNO_D_"],[10536,0,"TYPE_IN_DIRENT\n\tALL_CFLAGS += -DNO_D_TYPE_IN_DIRENT\nendif\nifdef NO_D_"]]},{"span":[39945,40069],"parents":[39944],"agent":"Jason Riedy","seqStart":554,"ops":[[2843,2,""],[2843,0,"$(SHELL)"],[7982,0,"UN"],[8004,0,"\tNO_SETENV = YesPlease\n\t"],[10882,0,"SETENV\n\tCOMPAT_CFLAGS += -DNO_UNSETENV\n\tCOMPAT_OBJS += compat/unsetenv.o\nendif\nifdef NO_"]]},{"span":[40069,40198],"parents":[40068],"agent":"Alecs King","seqStart":0,"ops":[[8487,0,"FreeBSD)\n\tNEEDS_LIBICONV = YesPlease\n\tALL_CFLAGS += -I/usr/local/include\n\tALL_LDFLAGS += -L/usr/local/lib\nendif\nifeq ($(uname_S),"]]},{"span":[40198,40199],"parents":[39172,39174],"agent":"Junio C Hamano","seqStart":14876,"ops":[[2459,1,""]]},{"span":[40199,40335],"parents":[40197,40198],"agent":"Junio C Hamano","seqStart":14877,"ops":[[6550,0," combine-diff.o"],[4560,0," git-show"],[12836,0,"git-show: git-whatchanged\n\tcp $< $@\n\n"],[4313,0,"git-rerere.perl "],[3951,14,""],[4571,0," git-status"],[12886,0,"git-status: git-commit\n\tcp $< $@\n\n"]]},{"span":[40335,40340],"parents":[40334],"agent":"Fredrik Kuivinen","seqStart":8,"ops":[[2850,0,"_PATH"]]},{"span":[40340,40379],"parents":[40339],"agent":"Fernando J. Pereda","seqStart":0,"ops":[[12347,0,"-e 's/@@NO_CURL@@/$(NO_CURL)/g' \\\n\t    "]]},{"span":[40379,40396],"parents":[40378],"agent":"Linus Torvalds","seqStart":8174,"ops":[[5765,0," git-merge-tree$X"]]},{"span":[40396,40510],"parents":[40378],"agent":"Fernando J. Pereda","seqStart":39,"ops":[[2106,0,"NO_ICONV if your libc does not properly support iconv.\n#\n# Define "],[11478,0,"NO_ICONV\n\tALL_CFLAGS += -DNO_ICONV\nendif\n\nifdef "]]},{"span":[40510,41247],"parents":[40509],"agent":"Johannes Schindelin","seqStart":680,"ops":[[2172,0,"NO_ACCURATE_DIFF if your diff program at least sometimes misses\n# a missing newline at the end of the file.\n#\n# Define "],[11980,0,"ifdef NO_ACCURATE_DIFF\n\tALL_CFLAGS += -DNO_ACCURATE_DIFF\nendif\n"],[9211,0,"eq ($(uname_S),IRIX64)\n\tNO_IPV6=YesPlease\n\tNO_SETENV=YesPlease\n\tNO_STRCASESTR=YesPlease\n\tNO_SOCKADDR_STORAGE=YesPlease\n\tSHELL_PATH=/usr/gnu/bin/bash\n\tALL_CFLAGS += -DPATH_MAX=1024\n\t# for now, build 32-bit version\n\tALL_LDFLAGS += -L/usr/lib32\nendif\nif"],[2291,0,"NO_PYTHON if you want to loose all benefits of the recursive merge.\n#\n# Define "],[13011,0,"-e 's/@@NO_PYTHON@@/$(NO_PYTHON)/g' \\\n\t    "],[14918,0,"# GNU make supports exporting all variables by \"export\" without parameters.\n# However, the environment gets quite big, and some programs have problems\n# with that.\n\nexport NO_PYTHON\n\n"]]},{"span":[41247,42728],"parents":[41246],"agent":"Johannes Schindelin","seqStart":1417,"ops":[[7271,13,""],[7273,10,""],[7274,124,""],[12226,0,"# Shell quote (do not use $(call) to accomodate ancient setups);\n\nSH"],[12295,2,""],[12295,0,"1"],[12297,3,""],[12297,0,"HE"],[12300,1,""],[12300,0,"DER_"],[12305,0,"Q"],[12307,1,""],[12309,2,""],[12309,0,"$(subst ','\\'',$("],[12337,0,"))\n\nDESTDIR_SQ "],[12353,0," "],[12356,0,"subst ','\\'',$(DESTDIR))\nbindir_SQ = $(subst ','\\'',$(bindir))\ngitexe"],[12426,3,""],[12426,0,"dir_SQ ="],[12435,0,"$("],[12438,1,""],[12438,0,"ubst ','\\'',$(gitexecdir))\nt"],[12467,1,""],[12467,0,"mp"],[12470,1,""],[12470,0,"ate_dir_SQ = $(s"],[12487,1,""],[12487,0,"bst ','\\'',$("],[12502,0,"mplate_dir))\n\nSHELL_PATH_SQ = $(subst ','\\''"],[12551,0,"ELL_PATH))\nPERL_PATH_SQ = $(subst ','\\'',$(PERL_PATH))\nPYTHON_P"],[12615,0,"TH_SQ = $(subst ','\\'',$(PYTHON_PATH))\nGIT_PYTHON_DIR_SQ = $(subst ','\\'',$(GIT_PYTHON_DIR))\n\nALL_CFLAGS += -DSHA1_HEADER='$(SHA"],[12751,1,""],[12751,0,"_SQ"],[12755,0,"'"],[13212,11,""],[13224,1,""],[13224,0,"_SQ"],[13473,11,""],[13484,1,""],[13484,0,"_SQ"],[13653,11,""],[13666,1,""],[13666,0,"_SQ"],[13706,11,""],[13722,1,""],[13722,0,"_SQ"],[14201,0,"exec_cmd.c\n\t$(CC) -o $*.o -c $("],[14242,0,")"],[14244,3,""],[14244,0,"'"],[14261,1,""],[14274,0,"_SQ"],[14278,1,""],[14279,0,"' $<"],[14378,31,""],[14380,15,""],[14540,5,""],[14540,0,"mailin"],[14547,4,""],[14547,0,"o"],[14552,0,"mailin"],[14559,4,""],[14559,0,"o"],[14563,6,""],[14563,0,"$(LIB_FILE)"],[14575,3,""],[14575,0,"\t$(CC) $(ALL_CFLAGS) "],[14597,9,""],[14597,0,"o "],[14600,2,""],[14600,0,"@"],[14602,1,""],[14602,0,"$(ALL_LDFLAGS) $(fil"],[14623,2,""],[14623,0,"er %"],[14629,0,",$^) \\\n\t\t$(LIB_FILE) $(SIMPLE_LIB) $(LIB_4_ICONV)\n"],[14833,0,"fetch.o http.o http-fetch.o\n\t$(CC) $(ALL_CFLAGS) -o $@ $(ALL_LDFLAGS) $(filter %.o,$^) \\\n\t\t$("],[14930,3,""],[14930,0,")"],[14948,0,"\n"],[14966,0,"http.o http-push.o\n\t$(CC) $(AL"],[14997,0,"_CFLAGS) -o $@ $(ALL_LDFLAGS) $(filter %.o,$^) \\\n\t\t$(L"],[15054,3,""],[15054,0,")"],[15090,0,"\n"],[15107,0,"rev-list.o\n\t$(CC) $(ALL_CFLAGS) -o $@ $(ALL_LDFLAGS) $(filter %.o,$^) \\\n\t\t$("],[15187,3,""],[15187,0,")"],[15284,18,""],[15284,0,"'"],[15300,0,"_SQ"],[15305,1,""],[15305,0,"'"],[16079,18,""],[16079,0,"'"],[16089,0,"_SQ"],[16101,1,""],[16101,0,"_SQ"],[16105,0,"'"],[16128,18,""],[16128,0,"'"],[16138,0,"_SQ"],[16154,0,"_SQ"],[16158,1,""],[16158,0,"'"],[16188,18,""],[16188,0,"'"],[16198,0,"_SQ"],[16214,1,""],[16214,0,"_SQ"],[16218,0,"'"],[16243,18,""],[16243,0,"'"],[16253,0,"_SQ"],[16265,0,"_SQ"],[16269,1,""],[16269,0,"'"],[16322,18,""],[16322,0,"'"],[16332,0,"_SQ"],[16352,1,""],[16352,0,"_SQ"],[16356,0,"'"],[16383,18,""],[16383,0,"'"],[16393,0,"_SQ"],[16413,1,""],[16413,0,"_SQ"],[16417,0,"'"],[4963,15,""],[5363,3,""],[5381,0,"\\\n\t"],[5418,0,"ailinfo$X git-m"],[9551,0,"eq ($(NO_PYTHON),)\n\t\tif"],[9654,0,"\t"],[9690,0,"\tendif\n\t"]]},{"span":[42728,42764],"parents":[42727],"agent":"Johannes Schindelin","seqStart":2898,"ops":[[14892,0," $(LIB_FILE)"],[15028,0," $(LIB_FILE)"],[15173,0," $(LIB_FILE)"]]},{"span":[42764,42785],"parents":[40509],"agent":"Ryan Anderson","seqStart":584,"ops":[[4393,0,"annotate.perl \\\n\tgit-"]]},{"span":[42785,42798],"parents":[40395,40509],"agent":"Junio C Hamano","seqStart":15013,"ops":[[5284,0,"mktree$X git-"]]},{"span":[42798,42810],"parents":[41246,42797],"agent":"Fredrik Kuivinen","seqStart":13,"ops":[[6059,0," git-blame$X"]]},{"span":[42810,43429],"parents":[41246,42797],"agent":"Paul Jakma","seqStart":0,"ops":[[3166,0,"uname_S := $(shell sh -c 'uname -s 2>/dev/null || echo not')\nuname_M := $(shell sh -c 'uname -m 2>/dev/null || echo not')\nuname_O := $(shell sh -c 'uname -o 2>/dev/null || echo not')\nuname_R := $(shell sh -c 'uname -r 2>/dev/null || echo not')\nuname_P := $(shell sh -c 'uname -p 2>/dev/null || echo not')\n\n"],[3698,8,""],[3701,0,"dir)"],[7952,60,""],[7953,184,""],[8270,4,""],[8271,24,""],[8346,0,"EEDS_LIBICONV = YesPlease\n\t\tN"]]},{"span":[43429,43450],"parents":[42763,43428],"agent":"Junio C Hamano","seqStart":15026,"ops":[[5665,0,"\\\n\t"],[5686,3,""],[5712,15,""]]},{"span":[43450,43460],"parents":[43449],"agent":"Carl Worth","seqStart":0,"ops":[[4510,0,"rm.sh git-"]]},{"span":[43460,43482],"parents":[43449],"agent":"Martin Langhoff","seqStart":46,"ops":[[4893,0,"cvsserver.perl \\\n\tgit-"]]},{"span":[43482,43515],"parents":[42784,43459,43481],"agent":"Junio C Hamano","seqStart":15068,"ops":[[4903,7,""],[4903,0,"annotat"],[4911,1,""],[4917,3,""],[4921,7,""],[4921,0,"cvsserv"],[4929,0,"r"]]},{"span":[43515,43536],"parents":[43514],"agent":"Junio C Hamano","seqStart":15101,"ops":[[5715,3,""],[5733,0,"\\\n\t"],[5770,0,"ailinfo$X git-m"]]},{"span":[43536,43666],"parents":[43535],"agent":"Linus Torvalds","seqStart":8191,"ops":[[7094,0," revision.h"],[7614,0,"revision.o pager.o "],[13277,3,""],[13278,12,""],[13278,0,"LL"],[13323,0," $(LIBS)"],[403,9,""],[405,22,""],[406,15,""],[6942,2,""],[6943,6,""],[10374,3,""],[10375,18,""]]},{"span":[43666,43781],"parents":[43535],"agent":"Shawn Pearce","seqStart":0,"ops":[[7954,0,"ifeq ($(shell test -d /sw/lib && echo y),y)\n\t\t"],[8029,0,"\t"],[8056,0,"endif\n\t"],[8079,0,"ifeq ($(shell test -d /opt/local/lib && echo y),y)\n\t\t"],[8168,0,"\t"],[8201,0,"\tendif\n"]]},{"span":[43781,43801],"parents":[43780],"agent":"Junio C Hamano","seqStart":15122,"ops":[[7238,0," \\\n\tdiffcore-delta.o"]]},{"span":[43801,43829],"parents":[42809,43665,43800],"agent":"Junio C Hamano","seqStart":15142,"ops":[[6911,14,""],[7252,14,""]]},{"span":[43829,43850],"parents":[42727,42784,43428],"agent":"Junio C Hamano","seqStart":15047,"ops":[[5686,0,"\\\n\t"],[5707,3,""],[5733,15,""]]},{"span":[43850,43853],"parents":[42809,43449,43849],"agent":"Junio C Hamano","seqStart":15170,"ops":[[5689,3,""]]},{"span":[43853,43886],"parents":[43481,43852],"agent":"Junio C Hamano","seqStart":15173,"ops":[[4893,7,""],[4893,0,"annotat"],[4901,1,""],[4907,3,""],[4911,7,""],[4911,0,"cvsserv"],[4919,0,"r"]]},{"span":[43886,43901],"parents":[43514,43885],"agent":"Junio C Hamano","seqStart":15206,"ops":[[4910,7,""],[4928,4,""],[4929,4,""]]},{"span":[43901,44010],"parents":[43665,43800,43900],"agent":"Fredrik Kuivinen","seqStart":25,"ops":[[15512,0,"git-blame$X: blame.o $(LIB_FILE)\n\t$(CC) $(ALL_CFLAGS) -o $@ $(ALL_LDFLAGS) $(filter %.o,$^) \\\n\t\t$(LIBS) -lm\n\n"]]},{"span":[44010,44119],"parents":[44009],"agent":"Junio C Hamano","seqStart":15221,"ops":[[15512,109,""]]},{"span":[44119,44130],"parents":[44118],"agent":"Nick Hengeveld","seqStart":467,"ops":[[15246,0,"revision.o "]]},{"span":[44130,44134],"parents":[44129],"agent":"Nicolas Pitre","seqStart":947,"ops":[[16251,0," -lz"]]},{"span":[44134,44230],"parents":[44133],"agent":"Fredrik Kuivinen","seqStart":134,"ops":[[13291,0,"common-cmds.h "],[13419,0,"common-cmds.h: Documentation/git-*.txt\n\t./generate-cmdlist.sh > $@\n\n"],[17544,0," common-cmds.h"]]},{"span":[44230,44288],"parents":[44229],"agent":"Mike McCormack","seqStart":0,"ops":[[6377,0," git-imap-send$X"],[15185,0,"imap-send$X: imap-send.o $(LIB_FILE)\n\ngit-"]]},{"span":[44288,44441],"parents":[44287],"agent":"Fredrik Kuivinen","seqStart":230,"ops":[[15950,0,"TAGS:\n\trm -f TAGS"],[15968,0,"\tfind . -name '*.[hcS]' -print | xargs etags -a\n\ntags:\n\trm -f tags\n\tfind . -name '*.[hcS]' -print | xargs ctags -a\n\n"],[17749,0," TAGS tags"],[18015,0," TAGS tags"]]},{"span":[44441,44610],"parents":[44440],"agent":"Linus Torvalds","seqStart":8321,"ops":[[6890,0,"XDIFF_LIB=xdiff/lib.a\n"],[7684,0," $(XDIFF_LIB)"],[15867,2,""],[15867,0,"S"],[15948,0,"XDIFF_OBJS=xdiff/xdiffi.o xdiff/xprepare.o xdiff/xutils.o xdiff/xemit.o\n\n$(XDIFF_LIB): $(XDIFF_OBJS)\n\t$(AR) rcs $@ $(XDIFF_OBJS)\n\n\n"]]},{"span":[44610,44628],"parents":[44609],"agent":"Johannes Schindelin","seqStart":2934,"ops":[[7666,0,"GIT"],[7706,1,""],[7708,0,"$(GITLIBS) "],[15877,0,"GIT"]]},{"span":[44628,44655],"parents":[44627],"agent":"Junio C Hamano","seqStart":15330,"ops":[[17834,0,"xdiff/*.o \\\n\t\t"],[17859,0," $(XDIFF_LIB)"]]},{"span":[44655,44674],"parents":[43828,44654],"agent":"Jason Riedy","seqStart":678,"ops":[[13446,0,"\\\n\t\t$(ALL_LDFLAGS) "]]},{"span":[44674,44742],"parents":[44673],"agent":"Junio C Hamano","seqStart":15357,"ops":[[7087,0," \\\n\ttree-walk.h"],[7636,0,"tree-walk.o "],[5207,0,", lz"],[5216,2,""],[5216,0,"xdiff"],[13377,0,"GIT"],[13383,5,""],[13383,0,"S"],[13467,12,""],[14726,0,"GIT"],[14732,5,""],[14732,0,"S"]]},{"span":[44742,44833],"parents":[44741],"agent":"Nick Hengeveld","seqStart":478,"ops":[[14711,0,"http.o: http.c\n\t$(CC) -o $*.o -c $(ALL_CFLAGS) -DGIT_USER_AGENT='\"git/$(GIT_VERSION)\"' $<\n\n"]]},{"span":[44833,44851],"parents":[44832],"agent":"Junio C Hamano","seqStart":15425,"ops":[[7655,0,"xdiff-interface.o "]]},{"span":[44851,44964],"parents":[44832],"agent":"Nick Hengeveld","seqStart":569,"ops":[[14802,0,"ifdef NO_EXPAT\nhttp-fetch.o: http-fetch.c\n\t$(CC) -o $*.o -c $(ALL_CFLAGS) -DNO_EXPAT $<\nendif\n\n"],[15612,0," $(EXPAT_LIBEXPAT)"]]},{"span":[44964,45043],"parents":[44963],"agent":"Johannes Schindelin","seqStart":2952,"ops":[[10497,28,""],[10540,0,"\tifndef NO_EXPAT\n\t\tEXPAT_LIBEXPAT = -lexpat\n\tendif\n"]]},{"span":[45043,45056],"parents":[44832],"agent":"Pavel Roskin","seqStart":326,"ops":[[4158,0,"ean.sh git-cl"]]},{"span":[45056,45078],"parents":[44850,45042,45055],"agent":"Junio C Hamano","seqStart":15443,"ops":[[7122,0," log-tree.h"],[7297,0," log-tree.o"]]},{"span":[45078,45407],"parents":[44850,45042,45055],"agent":"Junio C Hamano","seqStart":15465,"ops":[[7180,20,""],[4269,11,""],[6404,0,"BUILT_INS = git-log$X\n\n"],[13292,0,"$(BUILT_INS) "],[13554,0,"$(BUILT_INS): git$X\n\trm -f $@ && ln git$X $@\n\n"],[18192,0," $(BUILT_INS)"],[6541,0,"BUILT_INS) $("],[13305,13,""],[18191,13,""],[6541,8,""],[6542,5,""],[13286,0,"$(BUILT_INS) "],[17512,0,"\t$(foreach p,$(BUILT_INS), rm -f '$(DESTDIR_SQ)$(bindir_SQ)/$p' && ln '$(DESTDIR_SQ)$(bindir_SQ)/git$X' '$(DESTDIR_SQ)$(bindir_SQ)/$p' ;)\n"]]},{"span":[45407,45487],"parents":[45406],"agent":"Dennis Stosberg","seqStart":0,"ops":[[8549,0,"ifeq ($(uname_R),5.9)\n\t\tNO_UNSETENV = YesPlease\n\t\tNO_SETENV = YesPlease\n\tendif\n\t"]]},{"span":[45487,46008],"parents":[45077,45486],"agent":"Junio C Hamano","seqStart":15794,"ops":[[18795,0,"### Check documentation\n#\ncheck-docs::\n\t@for v in $(ALL_PROGRAMS) $(BUILT_INS) git$X gitk; \\\n\tdo \\\n\t\tcase \"$$v\" in \\\n\t\tgit-annotate | git-blame | \\\n\t\tgit-merge-octopus | git-merge-ours | git-merge-recursive | \\\n\t\tgit-merge-resolve | git-merge-stupid | \\\n\t\tgit-ssh-pull | git-ssh-push ) continue ;; \\\n\t\tesac ; \\\n\t\ttest -f \"Documentation/$$v.txt\" || \\\n\t\techo \"no doc: $$v\"; \\\n\t\tgrep -q \"^gitlink:$$v\\[[0-9]\\]::\" Documentation/git.txt || \\\n\t\tcase \"$$v\" in \\\n\t\tgit) ;; \\\n\t\t*) echo \"no link: $$v\";; \\\n\t\tesac ; \\\n\tdone | sort\n\n"]]},{"span":[46008,46166],"parents":[46007],"agent":"Junio C Hamano","seqStart":16315,"ops":[[17133,0,"test-gsimm$X: test-gsimm.c gsimm.o rabinpoly.o\n\t$(CC) $(ALL_CFLAGS) -o $@ $(ALL_LDFLAGS) $^\n\n"],[18562,0,"test-date$X test-delta$X test-gsimm$X\n\trm -f "],[7354,0,"gsimm.o rabinpoly.o "]]},{"span":[46166,46179],"parents":[46007],"agent":"A Large Angry SCM","seqStart":0,"ops":[[18456,0,"$(BUILT_INS) "]]},{"span":[46179,46210],"parents":[46178],"agent":"Jonas Fonseca","seqStart":2,"ops":[[18931,31,""]]},{"span":[46210,46214],"parents":[46209],"agent":"Junio C Hamano","seqStart":16473,"ops":[[7166,0,"-lib"]]},{"span":[46214,46252],"parents":[46213],"agent":"Junio C Hamano","seqStart":16477,"ops":[[6402,0," \\\n\tgit-unresolve$X"],[6402,19,""]]},{"span":[46252,46272],"parents":[46165,46251],"agent":"Junio C Hamano","seqStart":16515,"ops":[[7358,20,""]]},{"span":[46272,46368],"parents":[46213],"agent":"Linus Torvalds","seqStart":8490,"ops":[[7721,0,"BUILTIN_OBJS = \\\n\tbuiltin-log.o builtin-help.o\n\n"],[13590,0,"BUILTIN_OBJS) $("],[13702,0,"BUILTIN_OBJS) $("],[16333,0," $(BUILTIN_OBJS)"]]},{"span":[46368,46399],"parents":[46367],"agent":"Junio C Hamano","seqStart":16535,"ops":[[13740,0,"builtin-help.o: common-cmds.h\n\n"]]},{"span":[46399,46533],"parents":[46398],"agent":"Junio C Hamano","seqStart":16566,"ops":[[7358,0,"cache-tree.o "],[17277,0,"test-dump-cache-tree$X: dump-cache-tree.o $(GITLIBS)\n\t$(CC) $(ALL_CFLAGS) -o $@ $(ALL_LDFLAGS) $(filter %.o,$^) $(LIBS)\n\n"]]},{"span":[46533,46540],"parents":[46398],"agent":"Junio C Hamano","seqStart":16700,"ops":[[7166,0,".o diff"]]},{"span":[46540,46720],"parents":[46271,46532,46539],"agent":"Junio C Hamano","seqStart":16853,"ops":[[17289,3,""],[17289,0,"du"],[17292,1,""],[17292,0,"p-cache-tree"],[17308,9,""],[17308,0,"du"],[17311,1,""],[17311,0,"p-ca"],[17316,6,""],[17316,0,"he-tree"],[17326,11,""],[17326,0,"$(GITLIBS)"],[17380,0,"(filter %.o,$"],[17394,0,") $(LIBS)"],[17410,2,""],[17410,0,"gsim"],[17415,12,""],[17419,4,""],[17419,0,"test"],[17424,0,"gsimm."],[17431,0," gsimm.o r"],[17442,8,""],[17442,0,"binpoly"],[17451,11,""],[17495,13,""],[17496,9,""]]},{"span":[46720,46724],"parents":[46251,46398],"agent":"Nicolas Pitre","seqStart":951,"ops":[[17258,4,""]]},{"span":[46724,46736],"parents":[46251,46398],"agent":"Junio C Hamano","seqStart":17033,"ops":[[16491,0,"rm -f $@ && "]]},{"span":[46736,46748],"parents":[46539,46735],"agent":"Junio C Hamano","seqStart":17045,"ops":[[16638,0,"rm -f $@ && "]]},{"span":[46748,46886],"parents":[46719,46747],"agent":"Junio C Hamano","seqStart":17057,"ops":[[17429,93,""],[18767,11,""],[18768,34,""]]},{"span":[46886,46902],"parents":[46747],"agent":"Junio C Hamano","seqStart":17195,"ops":[[7774,0," builtin-count.o"]]},{"span":[46902,46946],"parents":[46901],"agent":"Junio C Hamano","seqStart":17211,"ops":[[4199,21,""],[6404,0," \\\n\tgit-count-objects$X"]]},{"span":[46946,46961],"parents":[46747],"agent":"Junio C Hamano","seqStart":17255,"ops":[[7774,0," builtin-diff.o"]]},{"span":[46961,46987],"parents":[46960],"agent":"Junio C Hamano","seqStart":17270,"ops":[[4220,2,""],[4221,10,""],[6413,0," \\\n\tgit-diff$X"]]},{"span":[46987,47002],"parents":[46747],"agent":"Junio C Hamano","seqStart":17296,"ops":[[7774,0," builtin-grep.o"]]},{"span":[47002,47017],"parents":[46747],"agent":"Linus Torvalds","seqStart":8586,"ops":[[7774,0," builtin-push.o"]]},{"span":[47017,47020],"parents":[46723,46885,46901,46960,47016],"agent":"Junio C Hamano","seqStart":17311,"ops":[[7819,0,"\\\n\t"]]},{"span":[47020,47038],"parents":[47001,47019],"agent":"Junio C Hamano","seqStart":17314,"ops":[[7819,0,"\\\n\t"],[7830,3,""],[7831,0,"ush"],[7837,3,""],[7845,0,"gre"],[7849,3,""]]},{"span":[47038,47064],"parents":[47016],"agent":"Junio C Hamano","seqStart":17332,"ops":[[4358,12,""],[6413,0," \\\n\tgit-push$X"]]},{"span":[47064,47067],"parents":[46945,47063],"agent":"Junio C Hamano","seqStart":17548,"ops":[[6416,3,""]]},{"span":[47067,47070],"parents":[46986,47066],"agent":"Junio C Hamano","seqStart":17551,"ops":[[6404,3,""]]},{"span":[47070,47164],"parents":[46747],"agent":"Junio C Hamano","seqStart":17358,"ops":[[4520,19,""],[5126,9,""],[6397,0," git-whatchanged$X git-show$X"],[14591,37,""]]},{"span":[47164,47192],"parents":[46986,47037,47163],"agent":"Junio C Hamano","seqStart":17452,"ops":[[6386,14,""],[6414,0," \\\n\tgit-diff$X"]]},{"span":[47192,47235],"parents":[46945,47191],"agent":"Junio C Hamano","seqStart":17480,"ops":[[6365,3,""],[6369,20,""],[6401,0,"count-objects$X git-"]]},{"span":[47235,47260],"parents":[47063,47234],"agent":"Junio C Hamano","seqStart":17523,"ops":[[6357,14,""],[6415,0," git-push$X"]]},{"span":[47260,47406],"parents":[46747],"agent":"Junio C Hamano","seqStart":17554,"ops":[[1216,3,""],[1216,0,"NO"],[1239,0,"never "],[1285,7,""],[1285,0,"E"],[1306,0,"  By default, symrefs are still used."],[8934,0,"O_SYMLINK_HEAD = YesPlease\n\tN"],[11856,0,"YMLINK_HEAD\n\tALL_CFLAGS += -DNO_SYMLINK_HEAD\nendif\nifdef NO_S"]]},{"span":[47406,47464],"parents":[47069,47163,47405],"agent":"Junio C Hamano","seqStart":17700,"ops":[[6389,0,"git-whatchanged$X git-show$X "],[6460,29,""]]},{"span":[47464,47593],"parents":[47463],"agent":"Junio C Hamano","seqStart":17758,"ops":[[16262,129,""]]},{"span":[47593,47606],"parents":[47259,47463],"agent":"Junio C Hamano","seqStart":18716,"ops":[[6418,7,""],[7856,3,""],[7871,0,"\\\n\t"]]},{"span":[47606,47752],"parents":[46209],"agent":"Junio C Hamano","seqStart":16707,"ops":[[1216,3,""],[1216,0,"NO"],[1239,0,"never "],[1285,7,""],[1285,0,"E"],[1306,0,"  By default, symrefs are still used."],[8875,0,"O_SYMLINK_HEAD = YesPlease\n\tN"],[11797,0,"YMLINK_HEAD\n\tALL_CFLAGS += -DNO_SYMLINK_HEAD\nendif\nifdef NO_S"]]},{"span":[47752,47808],"parents":[47751],"agent":"Dennis Stosberg","seqStart":80,"ops":[[9462,0,"ifeq ($(shell expr \"$(uname_R)\" : '[01]\\.'),2)\n\t\t"],[9539,0,"endif\n\t"]]},{"span":[47808,47896],"parents":[47807],"agent":"Eric Wong","seqStart":0,"ops":[[4986,0," \\\n\tgit-send-email.perl"],[10302,10,""],[10304,55,""]]},{"span":[47896,48041],"parents":[47592,47751],"agent":"Junio C Hamano","seqStart":17887,"ops":[[1218,2,""],[1245,6,""],[1285,1,""],[1304,28,""],[1305,9,""],[8966,29,""],[11886,61,""],[7402,0,"base85.o "]]},{"span":[48041,48129],"parents":[46723,48040],"agent":"Eric Wong","seqStart":88,"ops":[[4922,0," \\\n\tgit-send-email.perl"],[10361,10,""],[10363,55,""]]},{"span":[48129,48152],"parents":[47895,48128],"agent":"Junio C Hamano","seqStart":18032,"ops":[[4945,23,""]]},{"span":[48152,48167],"parents":[47001,48151],"agent":"Junio C Hamano","seqStart":18055,"ops":[[7883,3,""],[7884,0,"ush"],[7890,0,"\\\n\t"],[7901,0,"gre"],[7905,3,""]]},{"span":[48167,48193],"parents":[48166],"agent":"Linus Torvalds","seqStart":8601,"ops":[[4658,12,""],[6473,0," \\\n\tgit-grep$X"]]},{"span":[48193,48362],"parents":[48192],"agent":"Linus Torvalds","seqStart":8627,"ops":[[7207,0," dir.h"],[7602,0,"dir.o "],[7921,0," builtin-add.o"],[4120,11,""],[6476,0," git-add$X"],[4446,10,""],[6476,0," git-rm$X git-rev-list$X \\\n\tgit-check-ref-format$X"],[7974,0," builtin-rev-list.o builtin-check-ref-format.o \\\n\tbuiltin-rm.o"]]},{"span":[48362,48890],"parents":[48192],"agent":"Junio C Hamano","seqStart":18070,"ops":[[1874,0,"NO_H_OPTION_IN_GREP if your grep does not understand -H.\n#\n# Define "],[13060,0,"ifdef NO_H_OPTION_IN_GREP\n\tNO_H_OPTION_IN_GREP=1\nelse\n\tNO_H_OPTION_IN_GREP=0\nendif\n\n"],[15275,0,"builtin-grep.o: builtin-grep.c\n\t$(CC) -o $*.o -c $(ALL_CFLAGS) -DNO_H_OPTION_IN_GREP=$(NO_H_OPTION_IN_GREP) $<\n\n"],[1874,68,""],[12984,84,""],[15084,15,""],[15085,16,""],[15086,36,""],[15117,45,""]]},{"span":[48890,48939],"parents":[48192],"agent":"Linus Torvalds","seqStart":8796,"ops":[[5900,15,""],[6472,0," git-rev-list$X"],[7909,0," builtin-rev-list.o"]]},{"span":[48939,49012],"parents":[48938],"agent":"Lukas Sandström","seqStart":0,"ops":[[6209,23,""],[6464,0," git-check-ref-format$X"],[7928,0," builtin-check-ref-format.o"]]},{"span":[49012,49223],"parents":[49011],"agent":"Timo Hirvonen","seqStart":594,"ops":[[5642,14,""],[6473,0," \\"],[6476,0,"\tgit-init-db$X\n"],[7958,0," \\\n\tbuiltin-init-db.o"],[13952,0,"-DDEFAULT_GIT_TEMPLATE_DIR='\"$(template_dir_SQ)\"' \\\n\t\t"],[16427,105,""]]},{"span":[49223,49847],"parents":[49011],"agent":"Tilman Sauerbeck","seqStart":0,"ops":[[18566,0,"htmldocs = git-htmldocs-$(GIT_VERSION)\nmanpages = git-manpages-$(GIT_VERSION)\ndist-doc:\n\trm -fr .doc-tmp-dir\n\tmkdir .doc-tmp-dir\n\t$(MAKE) -C Documentation WEBDOC_DEST=../.doc-tmp-dir install-webdoc\n\tcd .doc-tmp-dir && $(TAR) cf ../$(htmldocs).tar .\n\tgzip -n -9 -f $(htmldocs).tar\n\t:\n\trm -fr .doc-tmp-dir\n\tmkdir .doc-tmp-dir .doc-tmp-dir/man1 .doc-tmp-dir/man7\n\t$(MAKE) -C Documentation DESTDIR=. \\\n\t\tman1=../.doc-tmp-dir/man1 \\\n\t\tman7=../.doc-tmp-dir/man7 \\\n\t\tinstall\n\tcd .doc-tmp-dir && $(TAR) cf ../$(manpages).tar .\n\tgzip -n -9 -f $(manpages).tar\n\trm -fr .doc-tmp-dir\n\n"],[19389,0," .doc-tmp-dir"],[19466,0,"rm -f $(htmldocs).tar $(manpages).tar\n\t"]]},{"span":[49847,49866],"parents":[49011],"agent":"Eric W. Biederman","seqStart":169,"ops":[[4678,0," git-quiltimport.sh"]]},{"span":[49866,49984],"parents":[48889,49222,49846,49865],"agent":"Junio C Hamano","seqStart":18598,"ops":[[13629,0,"ALL_CFLAGS += -DDEFAULT_GIT_TEMPLATE_DIR='\"$(template_dir_SQ)\"'\n"],[14027,54,""]]},{"span":[49984,50071],"parents":[46532,48361,49983],"agent":"Junio C Hamano","seqStart":18825,"ops":[[6494,38,""],[8034,49,""]]},{"span":[50071,50158],"parents":[49983],"agent":"Junio C Hamano","seqStart":18912,"ops":[[6022,15,""],[6494,0," git-tar-tree$X git-upload-tar$X"],[8015,0," builtin-tar-tree.o builtin-upload-tar.o"]]},{"span":[50158,50215],"parents":[49983],"agent":"Yakov Lerner","seqStart":0,"ops":[[12627,0,"ifdef NO_INET_NTOP\n\tLIB_OBJS += compat/inet_ntop.o\nendif\n"]]},{"span":[50215,50477],"parents":[50214],"agent":"Sean","seqStart":0,"ops":[[17928,0,"if test 'z$(bindir_SQ)' != 'z$(gitexecdir_SQ)'; \\\n\tthen \\\n\t\tln -f '$(DESTDIR_SQ)$(bindir_SQ)/git$X' \\\n\t\t\t'$(DESTDIR_SQ)$(gitexecdir_SQ)/git$X' || \\\n\t\tcp '$(DESTDIR_SQ)"],[18097,0,"bindir_SQ)/git$X' \\\n\t\t\t'$(DESTDIR_SQ)$(gitexecdir_SQ)/git$X'; \\\n\tfi\n\t$("],[18214,1,""],[18214,0,"g"],[18216,1,""],[18216,0,"texec"],[18255,1,""],[18255,0,"g"],[18257,1,""],[18257,0,"texec"],[18293,1,""],[18293,0,"g"],[18295,1,""],[18295,0,"texec"]]},{"span":[50477,50564],"parents":[48361,50476],"agent":"Junio C Hamano","seqStart":19013,"ops":[[6494,38,""],[8021,49,""]]},{"span":[50564,51176],"parents":[50476],"agent":"Peter Eriksen","seqStart":71,"ops":[[5685,10,""],[5686,5,""],[6494,0," git-ls-files$X"],[7998,0," builtin-ls-files.o"],[5682,14,""],[6495,0," git-ls-tree$X"],[8017,0," builtin-ls-tree.o"],[5993,15,""],[6494,0," \\\n\tgit-tar-tree$X"],[8038,0," \\\n        builtin-tar-tree.o"],[5830,16,""],[6496,0," git-read-tree$X"],[8067,0," builtin-read-tree.o"],[5466,18,""],[6494,0," git-commit-tree$X"],[8087,0," builtin-commit-tree.o"],[5402,12,""],[6500,0," \\\n\tgit-apply$X"],[8112,0," \\\n\tbuiltin-apply.o"],[5863,18,""],[6497,0," git-show-branch$X"],[8131,0," builtin-show-branch.o"],[5483,5,""],[5484,2,""],[5485,54,""],[5486,13,""],[6441,0," git-diff-files$X \\\n\tgit-diff-index$X git-diff-stages$X git-diff-tree$X"],[8041,8,""],[8041,0,"\t"],[8143,0," builtin-diff-files.o \\\n\tbuiltin-diff-index.o builtin-diff-stages.o builtin-diff-tree.o"]]},{"span":[51176,51360],"parents":[50157,51175],"agent":"Junio C Hamano","seqStart":19100,"ops":[[6332,32,""],[6360,15,""],[6497,0," \\\n\tgit-tar-tree$X git-upload-tar$X"],[8018,23,""],[8019,17,""],[8062,19,""],[8231,0," \\\n\tbuiltin-tar-tree.o builtin-upload-tar.o"]]},{"span":[51360,51519],"parents":[50563,51359],"agent":"Junio C Hamano","seqStart":19284,"ops":[[6333,0,"tar-tree$X git-upload-tar$X \\\n\tgit-"],[6526,18,""],[6531,17,""],[8062,0,"\\\n\t"],[8073,0,"tar-tree.o builtin-upload-tar.o \\\n\tbuiltin-"],[8315,43,""]]},{"span":[51519,51558],"parents":[49983],"agent":"Junio C Hamano","seqStart":19443,"ops":[[4251,20,""],[6489,0," git-format-patch$X"]]},{"span":[51558,51574],"parents":[51518,51557],"agent":"Junio C Hamano","seqStart":19482,"ops":[[6341,8,""],[6359,0," \\\n\tgit-"]]},{"span":[51574,51629],"parents":[51573],"agent":"Timo Hirvonen","seqStart":805,"ops":[[5362,18,""],[6514,0," git-cat-file$X"],[8313,0," \\\n\tbuiltin-cat-file.o"]]},{"span":[51629,51630],"parents":[51628],"agent":"Martin Waitz","seqStart":0,"ops":[[19607,0,"/"]]},{"span":[51630,51730],"parents":[51629],"agent":"Jim Meyering","seqStart":0,"ops":[[14653,0,"+"],[14655,0,"\tmv $@+ $@\n"],[14719,0," $@+"],[14910,0,"+"],[14924,0,"+\n\tmv $@+ $@"],[14996,0," $@+"],[15107,0,"+"],[15121,0,"+"],[15123,0,"\tmv $@+ $@\n"],[15191,0," $@+"],[15361,0,"+"],[15375,0,"+\n\tmv $@+ $@"],[15426,0,"+\n\tmv $@+ $@"],[15472,0,"+"],[15474,0,"\tmv $@+ $@\n"],[18892,0,"+"],[18894,0,"\tmv $@+ $@\n"],[20920,1,""]]},{"span":[51730,51785],"parents":[50070,51729],"agent":"Christian Couder","seqStart":0,"ops":[[5667,3,""],[5683,16,""],[6255,0,"git-rev-parse$X "],[8068,0,"builtin-rev-parse.o "]]},{"span":[51785,51847],"parents":[51784],"agent":"Junio C Hamano","seqStart":19744,"ops":[[16015,0," http.h"],[16647,0,"http.o http-fetch.o http-push.o: http.h\n"],[7544,0,"lockf"],[7550,2,""],[7550,0,"l"],[7552,1,""],[20434,0,".gz"],[20453,0,".gz"]]},{"span":[51847,51895],"parents":[51846],"agent":"Rene Scharfe","seqStart":9,"ops":[[5202,24,""],[6347,0,"git-get-tar-commit-id$X "]]},{"span":[51895,51902],"parents":[51894],"agent":"Rene Scharfe","seqStart":57,"ops":[[19186,0,"^{tree}"]]},{"span":[51902,51916],"parents":[51901],"agent":"Linus Torvalds","seqStart":8845,"ops":[[7663,0,"object-refs.o "]]},{"span":[51916,52437],"parents":[51894],"agent":"Yakov Lerner","seqStart":57,"ops":[[13797,0,"prefix_SQ = $(subst ','\\'',$(prefix))\n"],[14455,0," GIT-CFLAGS"],[15263,0," GIT-CFLAGS"],[15769,0," GIT-CFLAGS"],[15883,0," GIT-CFLAGS"],[15982,0," GIT-CFLAGS"],[16118,0," GIT-CFLAGS"],[17616,0,"Detect prefix changes\n"],[17639,0,"RACK_CFLAGS = $(subst ','\\'',$(ALL_CFLAGS)):$(GIT_VERSION):\\\n             $(bindir_SQ):$(gitex"],[17734,0,"cdir_SQ):$(template_dir_SQ):$(prefix_SQ)\n\nGIT-CFLAGS: .FORCE-GIT-CFLAGS\n\t@FLAGS='$(TRACK_CFLAGS)'; \\\n\t    if test x\"$$FLAGS\" != x\"`cat GIT-CFLAGS 2>/dev/null`\" ; then \\\n\t\techo 1>&2 \"    * new build flags or prefix\"; \\\n\t\techo \"$$FLAGS\" >GIT-CFLAGS; \\\n            fi\n\n### Te"],[21054,0," GIT-CFLAGS"],[21140,0," .FORCE-GIT-CFLAGS"]]},{"span":[52437,52445],"parents":[51915,52436],"agent":"Linus Torvalds","seqStart":8859,"ops":[[7866,0,"alloc.o "]]},{"span":[52445,52462],"parents":[52444],"agent":"Junio C Hamano","seqStart":19806,"ops":[[5354,17,""]]},{"span":[52462,52659],"parents":[52444],"agent":"Yakov Lerner","seqStart":578,"ops":[[14116,32,""],[14117,5,""],[14118,27,""],[15925,0,"builtin-init-db.o: builtin-init-db.c GIT-CFLAGS\n\t$(CC) -o $*.o -c $(ALL_CFLAGS) -DDEFAULT_GIT_TEMPLATE_DIR='\"$(template_dir_SQ)\"' $<\n"]]},{"span":[52659,52675],"parents":[52658],"agent":"Junio C Hamano","seqStart":19823,"ops":[[17780,2,""],[17780,0,"PYTHON_DI"],[17790,0,"_"],[17792,3,""],[17792,0,"Q"]]},{"span":[52675,53182],"parents":[51915,52436],"agent":"Lukas Sandström","seqStart":73,"ops":[[5874,17,""],[6391,0,"git-write-tree$X "],[8188,0,"builtin-write-tree.o "],[5202,19,""],[6121,0,"git-mailsplit$X "],[8400,0," builtin-mailsplit.o"],[5477,15,""],[6212,0,"git-mailinfo$X "],[8251,0,"builtin-mailinfo.o "],[12146,8,""],[12146,0,"S"],[12148,0,"+"],[12172,20,""],[16475,144,""],[5202,17,""],[6153,0,"git-stripspace$X "],[8439,0," builtin-stripspace.o"],[5751,19,""],[6436,0,"git-update-index$X "],[8145,0,"builtin-update-index.o "],[5811,17,""],[6008,0,"git-update-ref$X "],[8483,0," \\\n\tbuiltin-update-ref.o"]]},{"span":[53182,53191],"parents":[47605,48166],"agent":"Junio C Hamano","seqStart":18729,"ops":[[7900,3,""],[7906,3,""],[7914,3,""]]},{"span":[53191,53275],"parents":[48361,48889,49846,49865,53190],"agent":"Junio C Hamano","seqStart":18738,"ops":[[6507,38,""],[8018,32,""],[8026,12,""],[8028,2,""]]},{"span":[53275,53278],"parents":[49983,53274],"agent":"Junio C Hamano","seqStart":18822,"ops":[[8034,3,""]]},{"span":[53278,53292],"parents":[50070,50157,53277],"agent":"Junio C Hamano","seqStart":18999,"ops":[[6478,0," "],[8046,0,"rm.o builtin-"]]},{"span":[53292,53451],"parents":[51359,51557,53291],"agent":"Junio C Hamano","seqStart":19498,"ops":[[6313,0,"tar-tree$X git-upload-tar$X"],[6359,0," \\\n\tgit-"],[6525,18,""],[6530,17,""],[8074,0,"\\\n\t"],[8085,0,"tar-tree.o builtin-upload-tar.o \\\n\tbuiltin-"],[8327,43,""]]},{"span":[53451,53532],"parents":[51628,53450],"agent":"Junio C Hamano","seqStart":19657,"ops":[[6323,11,""],[6327,16,""],[6341,8,""],[8068,46,""]]},{"span":[53532,53538],"parents":[51784,53531],"agent":"Junio C Hamano","seqStart":19738,"ops":[[8065,0,".o "],[8085,3,""]]},{"span":[53538,53580],"parents":[53181,53537],"agent":"Junio C Hamano","seqStart":19839,"ops":[[8102,0,"\\\n\t"],[8113,3,""],[8113,0,"t"],[8115,0,"r-"],[8118,0,"r"],[8120,4,""],[8121,1,""],[8124,3,""],[8132,1,""],[8132,0,"uplo"],[8137,1,""],[8137,0,"d"],[8140,0,"a"],[8142,2,""],[8155,3,""],[8156,1,""],[8156,0,"a"],[8158,2,""],[8158,0,"e-index"]]},{"span":[53580,53604],"parents":[52461,52674,53579],"agent":"Junio C Hamano","seqStart":19881,"ops":[[17229,3,""],[17232,1,""],[17232,0,"_H) $(wildcard */*.h"]]},{"span":[53604,53750],"parents":[53603],"agent":"Junio C Hamano","seqStart":19905,"ops":[[18614,0,"test-sha1$X: test-sha1.o $(GITLIBS)\n\t$(CC) $(ALL_CFLAGS) -o $@ $(ALL_LDFLAGS) $(filter %.o,$^) $(LIBS)\n\ncheck-sha1:: test-sha1$X\n\t./test-sha1.sh\n\n"]]},{"span":[53750,54060],"parents":[53603],"agent":"Peter Eriksen","seqStart":683,"ops":[[1156,0,"TRLCPY if you don't have strlcpy.\n#\n# Define NO_S"],[8828,0,"Linux)\n\tNO_STRLCPY = YesPlease\nendif\nifeq ($(uname_S),"],[8954,0,"NO_STRLCPY = YesPlease\n\t"],[9372,0,"NO_STRLCPY = YesPlease\n\t"],[9776,0,"TRLCPY = YesPlease\n\tNO_S"],[10611,0,"O_STRLCPY = YesPlease\n\tN"],[10760,0,"TRLCPY = YesPlease\n\tN"],[10782,0,"_SO"],[12889,0,"TRLCPY\n\tCOMPAT_CFLAGS += -DNO_STRLCPY\n\tCOMPAT_OBJS += compat/strlcpy.o\nendif\nifdef NO_S"]]},{"span":[54060,54073],"parents":[54059],"agent":"Linus Torvalds","seqStart":8867,"ops":[[7903,0,"merge-file.o "]]},{"span":[54073,54140],"parents":[54059],"agent":"Jakub Narebski","seqStart":0,"ops":[[3857,0,"export prefix bindir gitexecdir template_dir GIT_PYTHON_DIR\n\n"],[20838,0,"dir"],[20871,0,"dir"]]},{"span":[54140,54265],"parents":[54139],"agent":"Jakub Narebski","seqStart":67,"ops":[[11086,0,".autogen\n-include config.mak"],[21277,0,"autom4te.cache\n\trm -f config.log config.mak.autogen configure config.status config.cache\n\trm -rf "]]},{"span":[54265,54726],"parents":[54059],"agent":"Eric Wong","seqStart":176,"ops":[[5160,0," git-instaweb"],[15942,0,"git-instaweb: git-instaweb.sh gitweb/gitweb.cgi gitweb/gitweb.css\n\trm -f $@ $@+\n\tsed -e '1s|#!.*/sh|#!$(SHELL_PATH_SQ)|' \\\n\t    -e 's/@@GIT_VERSION@@/$(GIT_VERSION)/g' \\\n\t    -e 's/@@NO_CURL@@/$(NO_CURL)/g' \\\n\t    -e 's/@@NO_PYTHON@@/$(NO_PYTHON)/g' \\\n\t    $@.sh | sed \\\n\t    -e 's|@@GITWEB_CGI@@|#!$(PERL_PATH_SQ)|; T; r gitweb/gitweb.cgi' \\\n\t    | sed \\\n\t    -e 's|@@GITWEB_CSS@@||; T; r gitweb/gitweb.css' \\\n\t    > $@+\n\tchmod +x $@+\n\tmv $@+ $@\n\n"]]},{"span":[54726,54845],"parents":[54725],"agent":"Johannes Schindelin","seqStart":3031,"ops":[[16199,19,""],[16203,2,""],[16203,0,"/"],[16218,24,""],[16218,0,"/"],[16220,1,""],[16246,1,""],[16246,0,"-e"],[16249,2,""],[16249,0,"'/@@GITWEB_CGI@@/"],[16267,0,"'"],[16280,2,""],[16280,0,"/"],[16295,7,""],[16295,0,"/"],[16297,1,""],[16323,0,"-e '/@@GITWEB_CSS@@/d' \\\n\t    $@.sh "]]},{"span":[54845,55187],"parents":[54059],"agent":"Petr Baudis","seqStart":5053,"ops":[[14660,0," perl/Makefile"],[14687,0,"perl\n\t$(MAKE) -C "],[15484,0,"\\(.*\\)"],[15508,0,"\\1 -I'\"$$(make -s -C perl instlibdir)\"'"],[17873,0,"perl/Makefile:\tperl/Git.pm perl/Makefile.PL\n\t(c"],[17921,0," perl && $(PERL_PATH) Makefile.PL PREFIX=\"$(prefix)\" DEFINE=\"$(ALL_CFLAGS)\" LIBS=\"$(LIBS)\")\n\nd"],[19507,0,"MAKE) -C perl install\n\t$("],[21593,0,"[ ! -e perl/Makefile ] || $(MAKE) -C perl/ clean\n\t"],[21663,0,"/"],[17955,0,"\\\n\t\t"],[17978,0,"\\\n\t\t"],[18003,0," -DGIT_VERSION=\\\\\\\"$(GIT_VERSION)\\\\\\\""],[18042,0,"\\\n\t\t"]]},{"span":[55187,55971],"parents":[55186],"agent":"Junio C Hamano","seqStart":20051,"ops":[[59,285,""],[1359,0,"MOZILLA_SHA1 environment variable when running make to make use of\n# a bundled SHA1 routine coming from Mozilla. It is GPL'd and should be fast\n# on non-x86 architectures (e.g. PowerPC), while the OpenSSL version (default\n# choice) has very fast version optimized for i586.\n#\n# Define USE_PIC if you need the main git objects to be built with -fPIC\n# in order to build and link perl/Git.so.  x86-64 seems to need this.\n#\n# Define "],[2754,0,"#"],[3092,0,"#"],[14011,0,"USE_PIC\n\tALL_CFLAGS += -fPIC\nendif\nifdef "],[21878,0," || $(MAKE) -C perl/ clean"]]},{"span":[55971,56286],"parents":[55970],"agent":"Petr Baudis","seqStart":5395,"ops":[[8731,0,"EXT"],[8740,11,""],[12564,0,"EXT"],[12623,0,"EXT"],[12690,0,"EXT"],[13964,0,"EXT"],[14635,0,"LIBS = $(GITLIBS) $(EXTLIBS)\n\n"],[14815,0,"\n\n"],[18097,0,"PERL_DEFINE = $(ALL_CFLAGS) -DGIT_VERSION='\"$(GIT_VERSION)\"'\nPERL_DEFINE_SQ = $(subst ','\\'',$(PERL_DEFINE))\nPERL_LIBS = $(EXTLIBS)\nPERL_LIBS_SQ = $(subst ','\\'',$(PERL_LIBS))\n"],[18287,1,""],[18287,0," "],[18316,0," GIT-CFLAGS"],[18377,1,""],[18377,0,"'"],[18386,0,"_SQ"],[18390,1,""],[18390,0,"'"],[18403,1,""],[18403,0,"'"],[18406,2,""],[18406,0,"PER"],[18411,9,""],[18412,5,""],[18413,2,""],[18413,0,"F"],[18415,1,""],[18416,10,""],[18416,0,"E"],[18418,3,""],[18419,3,""],[18419,0,"Q"],[18421,5,""],[18421,0,"'"],[18432,1,""],[18432,0,"'"],[18435,0,"PER"],[18439,0,"_L"],[18444,0,"_SQ"],[18448,1,""],[18448,0,"'"]]},{"span":[56286,56451],"parents":[56285],"agent":"Junio C Hamano","seqStart":20835,"ops":[[15660,0,": perl/Makefile\n$(patsubst"],[15687,0,"%.perl,%,$(SCRIPT_PERL))"],[15739,0,"INSTLIBDIR=$$(make -"],[15760,0," -C p"],[15766,0,"rl instlib"],[15777,0,"ir)"],[15781,0,"&& \\\n\tsed "],[15832,0,"|' \\\n\t   "],[15843,0,"e 's|@@"],[15851,0,"NSTLIBDIR@@|"],[15867,28,""],[15867,0,"INSTLIBDIR"],[15880,0,"g"]]},{"span":[56451,56459],"parents":[56450],"agent":"Dennis Stosberg","seqStart":136,"ops":[[22145,1,""],[22145,0,"f"],[15750,3,""],[15750,0,"`"],[15777,1,""],[15777,0,"`"]]},{"span":[56459,56857],"parents":[56458],"agent":"Petr Baudis","seqStart":5710,"ops":[[4297,0,"# Those must not be GNU-specific; they are shared with perl/ which may\n# be built by a different compiler.\nBASIC_CFLAGS =\nBASIC_LDFLAG"],[4432,0," =\n\nS"],[9311,0,"B"],[9313,2,""],[9313,0,"SIC"],[9343,0,"B"],[9345,2,""],[9345,0,"SIC"],[9447,0,"B"],[9449,2,""],[9449,0,"SIC"],[9486,0,"B"],[9488,2,""],[9488,0,"SIC"],[9903,0,"B"],[9905,2,""],[9905,0,"SIC"],[10416,0,"B"],[10418,2,""],[10418,0,"SIC"],[10454,0,"B"],[10456,2,""],[10456,0,"SIC"],[10576,0,"B"],[10578,2,""],[10578,0,"SIC"],[10614,0,"B"],[10616,2,""],[10616,0,"SIC"],[10764,0,"B"],[10766,2,""],[10766,0,"SIC"],[10800,0,"B"],[10802,2,""],[10802,0,"SIC"],[10831,0,"\n\tALL_LDFLAGS +="],[11157,0,"B"],[11159,2,""],[11159,0,"SIC"],[11223,0,"B"],[11225,2,""],[11225,0,"SIC"],[11673,0,"B"],[11675,2,""],[11675,0,"SIC"],[12199,0,"B"],[12201,2,""],[12201,0,"SIC"],[12332,0,"B"],[12334,2,""],[12334,0,"SIC"],[12635,0,"B"],[12637,2,""],[12637,0,"SIC"],[12950,0,"B"],[12952,2,""],[12952,0,"SIC"],[13020,0,"B"],[13022,2,""],[13022,0,"SIC"],[13086,0,"B"],[13088,2,""],[13088,0,"SIC"],[13574,0,"B"],[13576,2,""],[13576,0,"SIC"],[13647,0,"B"],[13649,2,""],[13649,0,"SIC"],[13700,0,"B"],[13702,2,""],[13702,0,"SIC"],[13834,0,"B"],[13836,2,""],[13836,0,"SIC"],[14277,0,"B"],[14279,2,""],[14279,0,"SIC"],[14870,0,"B"],[14872,2,""],[14872,0,"SIC"],[14964,0,"\nALL_CFLAGS += $(BASIC_CFLAGS)\nALL_LDFLAGS += $(BASIC_LDFLAGS)\n\n"],[18491,0,"B"],[18493,2,""],[18493,0,"SIC"],[18600,0,"BASIC_LDFLAGS) $("]]},{"span":[56857,56917],"parents":[56856],"agent":"Dennis Stosberg","seqStart":144,"ops":[[3813,0,"PERL_CFLAGS =\nPERL_LDFLAG"],[3839,0," =\nS"],[4447,0," $(PERL_CFLAGS)"],[4478,0," $(PERL_LDFLAGS)"]]},{"span":[56917,57044],"parents":[56916],"agent":"Junio C Hamano","seqStart":21000,"ops":[[11385,0,"ifeq ($(uname_M),x86_64)\n\tUSE_PIC = YesPlease\nendif\n"],[16134,3,""],[16134,0,"$(MAKE) -C p"],[16147,0,"rl"],[16154,2,""],[16154,0,"-no-"],[16159,0,"rint-dir"],[16168,0,"cto"],[16172,1,""],[16172,0,"y"],[22640,0,"rm -f perl/ppport.h perl/Makefile.old\n\t"]]},{"span":[57044,57141],"parents":[57043],"agent":"Petr Baudis","seqStart":6108,"ops":[[16211,6,""],[16229,1,""],[16229,0,"|"],[16231,0,"' \\\n\t    -e '2i\\\n\t        use lib (split(/:/, $$ENV{GITPERLLIB} |"],[16297,0," '\\'\"$$INSTLIBDIR\"\\''));"]]},{"span":[57141,57232],"parents":[57140],"agent":"Junio C Hamano","seqStart":21127,"ops":[[16201,0,"{' \\\n\t    -e '\t"],[16245,1,""],[16258,2,""],[16258,0,"\th' "],[16269,0,"-e"],[16272,3,""],[16272,0,"'\ts=.*="],[16320,3,""],[16321,2,""],[16321,0,"@@"],[16333,0,"@@"],[16336,3,""],[16339,0,"=' \\\n\t    -e '\tH' \\\n\t    -e '\tx' \\\n\t    -e '}"]]},{"span":[57232,57250],"parents":[54059],"agent":"Junio C Hamano","seqStart":21218,"ops":[[17181,0,"GIT"],[17187,5,""],[17187,0,"S"],[17345,0,"GIT"],[17351,5,""],[17351,0,"S"]]},{"span":[57250,57320],"parents":[57249],"agent":"Johannes Schindelin","seqStart":3150,"ops":[[4804,6,""],[4805,8,""],[4807,9,""],[6532,0," \\\n\tgit-fmt-merge-msg$X"],[8547,0," builtin-fmt-merge-msg.o"]]},{"span":[57320,57544],"parents":[53749,54844,57319],"agent":"Eric Wong","seqStart":637,"ops":[[1404,0,"NO_SVN_TESTS if you want to skip time-consuming SVN interopability\n# tests.  These tests take up a significant amount of the total test time\n# but are not needed unless you plan to talk to SVN repos.\n#\n# Define "],[5148,0," git-svn.perl"]]},{"span":[57544,57564],"parents":[57543],"agent":"Johannes Schindelin","seqStart":3220,"ops":[[19270,0,"export NO_SVN_TESTS\n"]]},{"span":[57564,57566],"parents":[57563],"agent":"Pavel Roskin","seqStart":339,"ops":[[1463,0,"er"]]},{"span":[57566,57609],"parents":[53749,54844,57319],"agent":"Michal Rokos","seqStart":0,"ops":[[16244,0," "],[16322,0," "],[15246,0,"|@@PERL@@|$(PERL_PATH_SQ)|g' \\\n\t    -e 's"]]},{"span":[57609,57650],"parents":[57608],"agent":"Linus Torvalds","seqStart":8880,"ops":[[4355,1,""],[4356,12,""],[6555,0," git-prune$X"],[8583,0," builtin-prune.o"]]},{"span":[57650,57652],"parents":[57608],"agent":"Pavel Roskin","seqStart":341,"ops":[[2357,1,""],[14000,0,"m"]]},{"span":[57652,57849],"parents":[54072,57565,57649,57651],"agent":"Johannes Schindelin","seqStart":3240,"ops":[[6189,0," \\"],[6192,0,"\tgit-merge-recur$X\n"],[18264,0,"merge-recursive.o path-list.o: path-list.h\ngit-merge-recur$X: merge-recursive.o path-list.o $(LIB_FILE)\n\t$(CC) $(ALL_CFLAGS) -o $@ $(ALL_LDFLAGS) $(filter %.o,$^) \\\n\t\t$(LIBS)\n\n"]]},{"span":[57849,57858],"parents":[57848],"agent":"Junio C Hamano","seqStart":21236,"ops":[[18358,0,"GIT"],[18364,5,""],[18364,0,"S"]]},{"span":[57858,58555],"parents":[54072,57565,57649,57651],"agent":"Shawn Pearce","seqStart":115,"ops":[[1617,0,"NO_FINK if you are building on Darwin/Mac OS X, have Fink\n# installed in /sw, but don't want GIT to link against any libraries\n# installed there.  If defined you may specify your own (or Fink's)\n# include directories and library directories by defining CFLAGS\n# and LDFLAGS appropriately.\n#\n# Define NO_DARWIN_PORTS if you are building on Darwin/Mac OS X,\n# have DarwinPorts installed in /opt/local, but don't want GIT to\n# link against any libraries installed there.  If defined you may\n# specify your own (or DarwinPort's) include directories and\n# library directories by defining CFLAGS and LDFLAGS appropriately.\n#\n# Define "],[9896,3,""],[9896,0,"i"],[9898,1,""],[9899,1,""],[9899,0,"def NO_FINK"],[9912,0,"\t"],[9959,0,"\t"],[9990,0,"\t"],[10017,0,"\t"],[10025,3,""],[10025,0,"en"],[10028,3,""],[10029,0,"f\n\tif"],[10035,5,""],[10035,0,"def NO_DARWIN_PORTS"],[10056,0,"\t"],[10110,0,"\t"],[10148,0,"\t"],[10182,0,"\tendif\n\t"]]},{"span":[58555,58593],"parents":[58554],"agent":"Johannes Schindelin","seqStart":3437,"ops":[[17345,0,"| sed \"s|/usr/bin/git|$(bindir)/git|\" "]]},{"span":[58593,58654],"parents":[54139,58592],"agent":"Johannes Schindelin","seqStart":3475,"ops":[[5770,12,""],[7469,0," git-mv$X"],[8204,0," path-list.h"],[8851,0,"path-list.o "],[9547,0," \\\n\tbuiltin-mv.o"]]},{"span":[58654,58703],"parents":[54139,58592],"agent":"Johannes Schindelin","seqStart":3536,"ops":[[18463,0,"ssh-pull.o: ssh-fetch.c\nssh-push.o: ssh-upload.c\n"]]},{"span":[58703,58764],"parents":[54264,58653,58702],"agent":"Gerrit Pape","seqStart":0,"ops":[[9898,0,"GNU/kFreeBSD)\n\tNO_STRLCPY = YesPlease\nendif\nifeq ($(uname_S),"]]},{"span":[58764,59534],"parents":[58763],"agent":"Martin Waitz","seqStart":1,"ops":[[4697,0,"# default configuration for gitweb\nGITWEB_SITENAME =\nGITWEB_PROJECTROOT = /pub/git\nGITWEB_LIST =\nGITWEB_HOMETEXT = indext"],[4820,0,"t.html\nGITWEB_CSS = gitweb.css\n\nex"],[15952,0," gitweb/gitweb.cgi"],[17289,0,"web/gitweb.cgi: gitweb/gitweb.perl\n\trm -f $@ $@+\n\tsed -e '1s|#!.*perl|#!$(PERL_PATH_SQ)|' \\\n\t    -e 's|@@GIT_VERSION@@|$(GIT_VERSION)|g' \\\n\t    -e 's|@@GIT_BINDIR@@|$(bindir)|g' \\\n\t    -e 's|@@GITWEB_SITENAME@@|$(GITWEB_SITENAME)|g' \\\n\t    -e 's|@@GITWEB_PROJECTROOT@@|$(GITWEB_PROJECTROOT)|g' \\\n\t    -e 's|@@GITWEB_LIST@@|$(GITWEB_LIST)|g' \\\n\t    -e 's|@@GITWEB_HOMETEXT@@|$(GITWEB_HOMETEXT)|g' \\\n\t    -e 's|@@GITWEB_CSS@@|$(GITWEB_CSS)|g' \\\n\t    $< >$@+\n\tchmod +x $@+\n\tmv $@+ $@\n\ngit"],[18189,38,""],[4851,0,"GITWEB_LOGO = git-logo.png\n"],[17764,0,"-e 's|@@GITWEB_LOGO@@|$(GITWEB_LOGO)|g' \\\n\t    "]]},{"span":[59534,59559],"parents":[59533],"agent":"Junio C Hamano","seqStart":21245,"ops":[[24001,0,"rm -f gitweb/gitweb.cgi\n\t"]]},{"span":[59559,59645],"parents":[59558],"agent":"Jeff King","seqStart":0,"ops":[[4739,0,"CONFIG = gitweb_config.perl\nGITWEB_"],[17551,0,"CONFIG@@|$(GITWEB_CONFIG)|g' \\\n\t    -e 's|@@GITWEB_"]]},{"span":[59645,59717],"parents":[59644],"agent":"Junio C Hamano","seqStart":21270,"ops":[[17454,2,""],[17454,0,"++"],[17467,2,""],[17467,0,"++"],[17501,2,""],[17501,0,"++"],[17513,2,""],[17513,0,"++"],[17542,2,""],[17542,0,"++"],[17557,2,""],[17557,0,"++"],[17593,2,""],[17593,0,"++"],[17610,2,""],[17610,0,"++"],[17648,2,""],[17648,0,"++"],[17668,2,""],[17668,0,"++"],[17709,2,""],[17709,0,"++"],[17722,2,""],[17722,0,"++"],[17756,2,""],[17756,0,"++"],[17773,2,""],[17773,0,"++"],[17811,2,""],[17811,0,"++"],[17823,2,""],[17823,0,"++"],[17856,2,""],[17856,0,"++"],[17869,2,""],[17869,0,"++"]]},{"span":[59717,59747],"parents":[58763],"agent":"Johannes Schindelin","seqStart":3585,"ops":[[8216,0," unpack-trees.h"],[8878,0,"unpack-trees.o "]]},{"span":[59747,59765],"parents":[57857,59746],"agent":"Junio C Hamano","seqStart":21342,"ops":[[23964,0,"git-merge-recur | "]]},{"span":[59765,60149],"parents":[58763],"agent":"Ramsay Allan Jones","seqStart":0,"ops":[[21165,0,"DESTDIR='$(DESTDIR_SQ)' "],[1100,0,"C99_FORMAT if your formatted IO functions (printf/scanf et.al.)\n# do not support the 'size specifiers' introduced by C99, namely ll, hh,\n# j, z, t. (representing long long int, char, intmax_t, size_t, ptrdiff_t).\n# some c compilers supported these specifiers prior to C99 as an extension.\n#\n# Define NO_"],[14176,0,"C99_FORMAT\n\tALL_CFLAGS += -DNO_C99_FORMAT\nendif\nifdef NO_"]]},{"span":[60149,60271],"parents":[60148],"agent":"Matthias Kestenholz","seqStart":0,"ops":[[6791,1,""],[6792,2,""],[6793,3,""],[6794,1,""],[6795,5,""],[6796,7,""],[7762,0," git-prune-packed$X"],[9866,0," builtin-prune-packed.o"],[7064,18,""],[7763,0," \\"],[7766,0,"\tgit-repo-config$X\n"],[9892,0," builtin-repo-config.o"]]},{"span":[60271,60404],"parents":[60270],"agent":"Jakub Narebski","seqStart":192,"ops":[[1320,1,""],[1320,0,"C"],[18010,0,"configure: configure.ac\n\trm -f $@ $<+\n\tsed -e 's/@@GIT_VERSION@@/$(GIT_VERSION)/g' \\\n\t    $< > $<+\n\tautoconf -o $@ $<+\n\trm -f $<+\n\n"]]},{"span":[60404,60426],"parents":[60403],"agent":"Junio C Hamano","seqStart":21360,"ops":[[23665,0,"ure config"],[23705,2,""],[23705,0,".mak.app"],[23714,0,"nd"]]},{"span":[60426,60676],"parents":[60270],"agent":"Matthias Kestenholz","seqStart":122,"ops":[[7028,15,""],[7769,0," git-name-rev$X"],[9914,0," \\\n\tbuiltin-name-rev.o"],[6738,8,""],[6739,11,""],[7765,0," git-pack-objects$X"],[9936,0," builtin-pack-objects.o"],[6900,1,""],[6901,20,""],[7763,0," \\\n\tgit-unpack-objects$X"],[9962,0," builtin-unpack-objects.o"],[6966,22,""],[7765,0," git-symbolic-ref$X"],[9984,0," \\\n\tbuiltin-symbolic-ref.o"]]},{"span":[60676,62043],"parents":[60675],"agent":"Junio C Hamano","seqStart":21382,"ops":[[6533,24,""],[7045,0,"\\\n\t"],[7052,0,"checkout-index$X \\\n\tgit-"],[9212,0,"checkout-index.o \\\n\tbuiltin-"],[7052,25,""],[7052,0,"f"],[7054,6,""],[7054,0,"rma"],[7059,2,""],[7059,0,"p"],[7064,5,""],[7075,17,""],[7078,3,""],[7080,6,""],[7082,28,""],[7082,0,"w"],[7084,78,""],[7085,10,""],[7086,1,""],[7088,12,""],[7089,29,""],[7090,8,""],[7091,24,""],[7092,12,""],[7093,23,""],[7099,29,""],[7126,13,""],[7127,45,""],[7127,0,"("],[7129,17,""],[7130,8,""],[7131,10,""],[7132,7,""],[7133,43,""],[7133,0,"b"],[7136,6,""],[7137,17,""],[7137,0,"bu"],[7140,8,""],[7141,13,""],[7142,35,""],[7143,5,""],[7144,1,""],[7145,19,""],[7145,0,"%."],[7148,6,""],[7148,0,","],[7150,4,""],[7153,8,""],[7153,0,"%"],[7156,17,""],[7156,0,","],[7158,44,""],[7158,0,"(BUILTIN_OBJS))"],[7911,0," builtin.h"],[8568,0,"help.o "],[8615,11,""],[8615,0,"ad"],[8618,2,""],[8632,0,"app"],[8636,2,""],[8636,0,"y"],[8640,0,"\\\n\t"],[8651,2,""],[8651,0,"cat-fi"],[8658,1,""],[8658,0,"e"],[8662,0,"\\\n\t"],[8674,0,"heck"],[8680,0,"t-i"],[8684,1,""],[8684,0,"dex"],[8690,0,"\\\n\t"],[8701,2,""],[8701,0,"check-re"],[8710,0,"-"],[8712,0,"ormat"],[8720,0,"\\\n\t"],[8731,4,""],[8731,0,"commit-tree"],[8756,2,""],[8756,0,"count-obj"],[8766,1,""],[8766,0,"cts"],[8772,0,"\\\n\t"],[8783,1,""],[8784,1,""],[8784,0,"iff"],[8790,0,"\\\n\t"],[8801,3,""],[8801,0,"diff"],[8806,1,""],[8806,0,"f"],[8808,0,"le"],[8811,1,""],[8814,0,"\\\n\t"],[8825,8,""],[8825,0,"dif"],[8830,6,""],[8830,0,"index"],[8849,2,""],[8849,0,"diff-stages"],[8863,0,"\\\n\t"],[8874,0,"d"],[8876,2,""],[8876,0,"ff-"],[8880,3,""],[8880,0,"ree"],[8886,0,"\\\n\t"],[8897,0,"fmt-me"],[8904,0,"g"],[8906,1,""],[8907,3,""],[8907,0,"m"],[8909,1,""],[8909,0,"g"],[8924,5,""],[8924,0,"g"],[8927,1,""],[8927,0,"p"],[8931,0,"\\\n\t"],[8942,5,""],[8942,0,"init-"],[8948,4,""],[8948,0,"b"],[8952,0,"\\\n\t"],[8963,12,""],[8963,0,"log"],[8991,0,"\\\n\t"],[9012,0,"\\\n\t"],[9023,2,""],[9023,0,"ma"],[9026,7,""],[9026,0,"linfo"],[9045,2,""],[9045,0,"m"],[9047,11,""],[9049,1,""],[9049,0,"spl"],[9053,9,""],[9054,3,""],[9057,0,"\\\n\t"],[9069,7,""],[9069,0,"v"],[9084,0,"n"],[9086,4,""],[9086,0,"me-rev"],[9095,0,"\\\n\t"],[9106,2,""],[9106,0,"pack-"],[9112,2,""],[9113,3,""],[9113,0,"je"],[9116,1,""],[9116,0,"ts"],[9121,0,"\\\n\t"],[9132,8,""],[9132,0,"prun"],[9137,1,""],[9151,6,""],[9151,0,"pru"],[9155,1,""],[9156,1,""],[9156,0,"-packed"],[9166,0,"\\\n\t"],[9177,5,""],[9177,0,"pu"],[9180,5,""],[9180,0,"h"],[9184,0,"\\\n\t"],[9195,0,"rea"],[9199,3,""],[9218,0,"repo-"],[9224,3,""],[9224,0,"on"],[9228,2,""],[9228,0,"g"],[9232,0,"\\\n\t"],[9243,2,""],[9243,0,"rev-l"],[9249,1,""],[9250,3,""],[9254,0,"\\\n\t"],[9265,2,""],[9266,1,""],[9266,0,"ev-"],[9270,2,""],[9271,1,""],[9271,0,"rs"],[9287,7,""],[9289,2,""],[9289,0,"m"],[9293,0,"\\\n\t"],[9304,3,""],[9304,0,"show"],[9309,2,""],[9309,0,"b"],[9311,6,""],[9311,0,"anch"],[9318,0,"\\\n\t"],[9329,0,"strips"],[9336,3,""],[9336,0,"ac"],[9353,0,"sy"],[9356,1,""],[9356,0,"bolic-ref"],[9368,0,"\\\n\t"],[9379,1,""],[9379,0,"tar-t"],[9385,2,""],[9386,5,""],[9387,1,""],[9390,0,"\\\n\t"],[9401,2,""],[9401,0,"un"],[9404,2,""],[9404,0,"a"],[9406,0,"k-"],[9409,4,""],[9409,0,"bjects"],[9429,1,""],[9429,0,"upd"],[9433,1,""],[9433,0,"t"],[9436,1,""],[9436,0,"ind"],[9440,1,""],[9440,0,"x"],[9444,0,"\\\n\t"],[9455,0,"u"],[9457,0,"d"],[9459,2,""],[9459,0,"te"],[9462,3,""],[9462,0,"r"],[9464,3,""],[9464,0,"f"],[9468,0,"\\\n\t"],[9480,1,""],[9481,0,"lo"],[9484,2,""],[9484,0,"d"],[9486,5,""],[9487,1,""],[9487,0,"ar"],[9503,6,""],[9503,0,"wr"],[9506,1,""],[9506,0,"te"],[9509,0,"t"],[9512,1,""],[9512,0,"e"],[16094,8,""]]},{"span":[62043,62094],"parents":[60270],"agent":"Junio C Hamano","seqStart":22749,"ops":[[11318,0,"NO_C99_FORMAT = YesPlease\n\t"],[11241,24,""]]},{"span":[62094,62102],"parents":[57231,62093],"agent":"Junio C Hamano","seqStart":22800,"ops":[[10807,0,"\t"],[10809,1,""],[10840,0,"\t"],[10842,1,""],[10962,0,"\t"],[10964,1,""],[11002,0,"\t"],[11004,1,""]]},{"span":[62102,62127],"parents":[62042,62093],"agent":"Rene Scharfe","seqStart":64,"ops":[[9503,0,"verify-pack.o \\\n\tbuiltin-"]]},{"span":[62127,62141],"parents":[59716,59746,60425,62126],"agent":"Junio C Hamano","seqStart":22808,"ops":[[8800,0,"help.o "],[8819,7,""]]},{"span":[62141,62238],"parents":[62140],"agent":"Yasushi SHOJI","seqStart":0,"ops":[[5077,0,"HOME_LINK_"],[5088,0,"TR = projects\nG"],[5105,0,"WEB_SIT"],[17693,0,"HOME_LINK_STR++|$(GITWEB_HOME_LINK_STR)|g' \\\n\t    -e 's|++GITWEB_"]]},{"span":[62238,62262],"parents":[62237],"agent":"Dennis Stosberg","seqStart":204,"ops":[[10742,24,""]]},{"span":[62262,62312],"parents":[62261],"agent":"Junio C Hamano","seqStart":22822,"ops":[[7280,0," \\\n\t$(EXTRA_PROGRAMS)\n\n# Empty...\nEXTRA_PROGRAMS ="]]},{"span":[62312,62390],"parents":[62101,62261],"agent":"Dennis Stosberg","seqStart":228,"ops":[[4898,0,"PIC_FLAG = -fPIC\n"],[12768,0,"sun4u)\n\tUSE_PIC = YesPlease\nendif\nifeq ($(uname_M),"],[15855,2,""],[15855,0,"$("],[15860,0,"_FLAG)"]]},{"span":[62390,62794],"parents":[62389],"agent":"Petr Baudis","seqStart":6205,"ops":[[4973,25,""],[4974,4,""],[5873,0," (Note that this is an artifact now\n# but it still might be nice to keep that distinction.)"],[5979,15,""],[5995,16,""],[21620,60,""],[21621,3,""],[21622,2,""],[21623,87,""],[21624,43,""],[21738,58,""]]},{"span":[62794,63106],"parents":[62793],"agent":"Junio C Hamano","seqStart":22872,"ops":[[2788,145,""],[4752,17,""],[12601,74,""],[12602,29,""],[15583,9,""],[15585,38,""]]},{"span":[63106,63162],"parents":[62093],"agent":"Dennis Stosberg","seqStart":306,"ops":[[10963,0,"\tNO_C99_FORMAT = YesPlease\n\t"],[11071,0,"\tNO_C99_FORMAT = YesPlease\n\t"]]},{"span":[63162,63235],"parents":[62261,63161],"agent":"Jakub Narebski","seqStart":325,"ops":[[5157,0,"BASE_UR"],[5165,0," =\nG"],[5170,0,"TWEB_LI"],[17924,0,"BASE_URL++|$(GITWEB_BASE_URL)|g' \\\n\t    -e 's|++GITWEB_"]]},{"span":[63235,63253],"parents":[62311,63234],"agent":"Rene Scharfe","seqStart":89,"ops":[[8867,0,"write_or_die.o \\\n\t"]]},{"span":[63253,63274],"parents":[63252],"agent":"Shawn O. Pearce","seqStart":0,"ops":[[6916,0,"fast-import$X \\\n\tgit-"]]},{"span":[63274,63296],"parents":[63252],"agent":"Rene Scharfe","seqStart":107,"ops":[[9905,0," \\\n\tbuiltin-zip-tree.o"]]},{"span":[63296,63334],"parents":[59764,63295],"agent":"Junio C Hamano","seqStart":23184,"ops":[[7300,0,"\n\tgit-merge-recur$X"],[7369,19,""]]},{"span":[63334,63372],"parents":[59764,63252],"agent":"Junio C Hamano","seqStart":23222,"ops":[[7300,0,"\n\tgit-merge-recur$X"],[7369,19,""]]},{"span":[63372,63391],"parents":[63333,63371],"agent":"Junio C Hamano","seqStart":23260,"ops":[[7319,19,""]]},{"span":[63391,63393],"parents":[63390],"agent":"Johannes Schindelin","seqStart":3615,"ops":[[14678,0,"UN"]]},{"span":[63393,63401],"parents":[63392],"agent":"Christian Couder","seqStart":55,"ops":[[8903,0,"trace.o "]]},{"span":[63401,63409],"parents":[63392],"agent":"Christian Couder","seqStart":63,"ops":[[8903,0,"trace.o "]]},{"span":[63409,63417],"parents":[63400,63408],"agent":"Junio C Hamano","seqStart":23279,"ops":[[8911,8,""]]},{"span":[63417,63503],"parents":[63416],"agent":"Jakub Narebski","seqStart":398,"ops":[[5266,0,"GITWEB_FAVICON = git-favicon.png\n"],[18312,0,"-e 's|++GITWEB_FAVICON++|$(GITWEB_FAVICON)|g' \\\n\t    "]]},{"span":[63503,63533],"parents":[63502],"agent":"Junio C Hamano","seqStart":23287,"ops":[[8171,0,"list-objects.h "],[8959,0,"list-objects.o "]]},{"span":[63533,63592],"parents":[63502],"agent":"Franck Bui-Huu","seqStart":0,"ops":[[8075,0,"archive.h "],[9088,0,"archive.o \\\n\tbuiltin-"],[9944,0,"archive.o \\\n\tbuiltin-upload-"]]},{"span":[63592,63638],"parents":[63502],"agent":"Jeff King","seqStart":86,"ops":[[9014,0," \\\n\tcolor.o wt-status.o"],[9754,0,"runstatus.o \\\n\tbuiltin-"]]},{"span":[63638,63660],"parents":[63502],"agent":"Junio C Hamano","seqStart":23317,"ops":[[8171,0,"sideband.h "],[8678,0,"sideband.o "]]},{"span":[63660,63682],"parents":[63502],"agent":"Linus Torvalds","seqStart":8921,"ops":[[9989,0," \\\n\tbuiltin-show-ref.o"]]},{"span":[63682,63708],"parents":[63502],"agent":"Junio C Hamano","seqStart":23339,"ops":[[9351,0,"for-each-ref.o \\\n\tbuiltin-"]]},{"span":[63708,63872],"parents":[63502],"agent":"Matthias Lederhofer","seqStart":0,"ops":[[5157,0,"EXPORT_OK =\nGITWEB_STRICT_EXPORT =\nGITWEB_"],[18120,0,"EXPORT_OK++|$(GITWEB_EXPORT_OK)|g' \\\n\t    -e 's|++GITWEB_STRICT_EXPORT++|$(GITWEB_STRICT_EXPORT)|g' \\\n\t    -e 's|++GITWEB_"]]},{"span":[63872,63895],"parents":[63532,63591,63637,63659,63871],"agent":"Linus Torvalds","seqStart":8943,"ops":[[10188,0," \\\n\tbuiltin-pack-refs.o"]]},{"span":[63895,63915],"parents":[63532,63591,63637,63659,63871],"agent":"Jon Loeliger","seqStart":0,"ops":[[8677,0,"\\\n\tinterpolate.o \\\n\t"]]},{"span":[63915,63929],"parents":[63532,63591,63637,63659,63871],"agent":"Junio C Hamano","seqStart":23365,"ops":[[8171,0,"grep.h "],[9055,0,"grep.o "]]},{"span":[63929,63965],"parents":[63532,63591,63637,63659,63871],"agent":"Rene Scharfe","seqStart":129,"ops":[[9141,0," archive-zip.o"],[10172,4,""],[10173,18,""]]},{"span":[63965,63979],"parents":[63914,63928,63964],"agent":"Rene Scharfe","seqStart":165,"ops":[[9189,0," archive-tar.o"]]},{"span":[63979,64003],"parents":[63978],"agent":"Junio C Hamano","seqStart":23379,"ops":[[10167,24,""]]},{"span":[64003,64398],"parents":[64002],"agent":"Junio C Hamano","seqStart":23403,"ops":[[3474,78,""],[6433,0,"-old"],[7318,0,"sive"],[16480,0," \\\n\tgit-merge-recur$X"],[16812,0,"git-merge-recur$X: git-merge-recursive"],[16851,0,"X\n\trm -f $@ && ln git-merge-recursive$X $@\n\n$"],[20932,58,""],[20933,34,""],[20934,3,""],[20937,80,""],[25581,0,"merge-recursive-old | \\\n\t\tgit-"]]},{"span":[64398,64455],"parents":[64002],"agent":"Jon Loeliger","seqStart":20,"ops":[[15345,0,"ifdef NO_INET_PTON\n\tLIB_OBJS += compat/inet_pton.o\nendif\n"]]},{"span":[64455,64497],"parents":[63105,64397,64454],"agent":"Junio C Hamano","seqStart":23798,"ops":[[7872,0," \\\n\tgit-merge-recur$X"],[16958,21,""]]},{"span":[64497,64531],"parents":[63681,63707,63894,64496],"agent":"Lars Hjemli","seqStart":0,"ops":[[5883,4,""],[5885,10,""],[9457,0,"branch.o \\\n\tbuiltin-"]]},{"span":[64531,64695],"parents":[64496],"agent":"Alan Chandler","seqStart":0,"ops":[[5265,0,"GITWEB_SITE_HEADER =\nGITWEB_SITE_FOOTER =\n"],[19588,0,"-e 's|++GITWEB_SITE_HEADER++|$(GITWEB_SITE_HEADER)|g' \\\n\t    -e 's|++GITWEB_SITE_FOOTER++|$(GITWEB_SITE_FOOTER)|g' \\\n\t    "]]},{"span":[64695,64756],"parents":[64496],"agent":"Junio C Hamano","seqStart":23840,"ops":[[24626,1,""],[24628,3,""],[24628,0,"chiv"],[24633,1,""],[24641,1,""],[24643,0,"chive "],[24650,0,"-format="],[24659,0,"a"],[24661,2,""],[24662,7,""],[24662,0,"\\\n\t\t--p"],[24671,3,""],[24671,0,"fix="],[24689,0,"/ HEAD^{tree}"]]},{"span":[64756,64796],"parents":[64755],"agent":"Ryan Anderson","seqStart":605,"ops":[[6510,18,""],[9414,0,"nnotate.o \\\n\tbuiltin-a"]]},{"span":[64796,64937],"parents":[64755],"agent":"Andy Whitcroft","seqStart":0,"ops":[[22006,0,"$(XDIFF_OBJS): xdiff/xinclude.h xdiff/xmacros.h xdiff/xdiff.h xdiff/xtypes.h \\\n\txdiff/xutils.h xdiff/xprepare.h xdiff/xdiffi.h xdiff/xemit.h\n"]]},{"span":[64937,64958],"parents":[64936],"agent":"Junio C Hamano","seqStart":23901,"ops":[[9953,0,"ickaxe.o \\\n\tbuiltin-p"]]},{"span":[64958,64985],"parents":[64936],"agent":"Rene Scharfe","seqStart":179,"ops":[[5917,14,""],[7657,0,"git-cherry$X "]]},{"span":[64985,64999],"parents":[64530,64694,64795,64984],"agent":"Nicolas Pitre","seqStart":955,"ops":[[9163,14,""]]},{"span":[64999,65336],"parents":[64936],"agent":"Shawn O. Pearce","seqStart":21,"ops":[[6846,60,""],[6847,39,""],[7070,0,"daemon$X \\\n\tgit-"],[7747,12,""],[7750,3,""],[7751,4,""],[14431,15,""],[14432,9,""],[14485,21,""],[20770,97,""],[20773,23,""],[20775,16,""],[20835,4,""],[20840,9,""],[20841,9,""]]},{"span":[65336,65438],"parents":[64530,64694,64795,64984,65335],"agent":"Junio C Hamano","seqStart":23922,"ops":[[27048,0,"\n### Make sure built-ins do not have dups and listed in git.c\n#\ncheck-builtins::\n\t./check-builtins.sh\n"]]},{"span":[65438,65490],"parents":[64957,64998,65437],"agent":"Junio C Hamano","seqStart":24024,"ops":[[7421,12,""],[9375,0,"lame.o \\\n\tbuiltin-b"],[9906,21,""]]},{"span":[65490,65530],"parents":[65489],"agent":"Johannes Schindelin","seqStart":3617,"ops":[[6487,18,""],[10100,0,"rtlog.o \\\n\tbuiltin-sho"]]},{"span":[65530,66752],"parents":[65489],"agent":"Junio C Hamano","seqStart":24076,"ops":[[3067,7,""],[3068,6,""],[3069,4,""],[3070,53,""],[4793,49,""],[5233,15,""],[6484,29,""],[6486,14,""],[6487,4,""],[6576,11,""],[6577,30,""],[7830,56,""],[7831,6,""],[7832,28,""],[12765,146,""],[12766,86,""],[15944,48,""],[15947,44,""],[15948,4,""],[15949,6,""],[17063,20,""],[17064,23,""],[17614,66,""],[17615,3,""],[17617,51,""],[17618,56,""],[17619,42,""],[17620,47,""],[18934,1,""],[18937,42,""],[19372,39,""],[21473,1,""],[21474,20,""],[21972,17,""],[22901,118,""],[25530,18,""],[25533,4,""],[25548,8,""]]},{"span":[66752,66794],"parents":[65529,66751],"agent":"Johannes Schindelin","seqStart":3667,"ops":[[20905,0," \\\n\txdiff/xmerge.o"],[9527,0,"erge-file.o \\\n\tbuiltin-m"]]},{"span":[66794,67267],"parents":[65529,66751],"agent":"Alex Riesen","seqStart":0,"ops":[[4098,0,"#"],[4100,0,"# Define NO_PERL_MAKEMAKER if you cannot use Makefiles generated by perl's\n# MakeMaker (e.g. using ActiveState under Cygwin).\n#\n\n"],[15666,0,"ifdef NO_PERL_MAKEMAKER\n\texport NO_PERL_MAKEMAKER\nendif\n"],[16476,14,""],[16493,0," PERL_PATH='$(PERL_PATH_SQ)' prefix='$(prefix_SQ)' all"],[17372,1,""],[17372,0,"perl.m"],[17380,0,"\n\nperl/perl.mak: GIT-CFLAGS\n\t$(MAKE) -C p"],[17422,0,"rl PERL_PATH='$(PERL_PATH_SQ)' pre"],[17458,1,""],[17458,0,"x='$(pr"],[17466,0,"fix_SQ)' $(@F)\n"],[23225,0,"prefix='$(prefix_SQ)' "],[25372,52,""],[25387,1,""],[25393,39,""]]},{"span":[67267,67277],"parents":[65489],"agent":"Johannes Schindelin","seqStart":3657,"ops":[[9267,0," shallow.o"]]},{"span":[67277,67927],"parents":[65489],"agent":"Brian Gernhardt","seqStart":0,"ops":[[10883,51,""],[10884,36,""],[10885,3,""],[10886,29,""],[10887,19,""],[10888,20,""],[10889,2,""],[10897,149,""],[12768,0,"eq ($(uname_S),Darwin)\n\tifndef NO_FINK\n\t\tifeq ($(shell test -d /sw/lib && echo y),y)\n\t\t\tBASIC_CFLAGS += -I/sw/include\n\t\t\tBASIC_LDFLAGS += -L/sw/lib\n\t\tendif\n\tendif\n\tifndef NO_DARWIN_PORTS\n\t\tifeq ($(shell test -d /opt/local/lib && echo y),y)\n\t\t\tBASIC_CFLAGS += -I/opt/local/include\n\t\t\tBASIC_LDFLAGS += -L/opt/local/lib\n\t\tendif\n\tendif\nendif\n\nif"]]},{"span":[67927,68205],"parents":[66793,67266,67926],"agent":"Shawn O. Pearce","seqStart":358,"ops":[[3070,0,"FAST_WORKING_DIRECTORY if accessing objects in pack files is\n# generally faster on your platform than accessing the working directory.\n#\n# Define NO_"],[11527,0,"NO_FAST_WORKING_DIRECTORY = UnfortunatelyYes\n\t"],[15151,0,"FAST_WORKING_DIRECTORY\n\tBASIC_CFLAGS += -DNO_FAST_WORKING_DIRECTORY\nendif\nifdef NO_"]]},{"span":[68205,68223],"parents":[68204],"agent":"Luben Tuikov","seqStart":0,"ops":[[8092,0,"export PERL_PATH\n\n"]]},{"span":[68223,68258],"parents":[68222],"agent":"Nicolas Pitre","seqStart":969,"ops":[[22849,1,""],[22849,0,"o"],[22877,0," $(GITLIBS)"],[22932,0,"(filter %.o,$"],[22946,0,") $(LIBS)"]]},{"span":[68258,68287],"parents":[68257],"agent":"Junio C Hamano","seqStart":25298,"ops":[[6575,0,"dd--interactive.perl \\\n\tgit-a"]]},{"span":[68287,68498],"parents":[68257],"agent":"Brian Gernhardt","seqStart":650,"ops":[[3553,211,""]]},{"span":[68498,68518],"parents":[68497],"agent":"Junio C Hamano","seqStart":25327,"ops":[[9788,0,"flog.o \\\n\tbuiltin-re"]]},{"span":[68518,68557],"parents":[68497],"agent":"Johannes Schindelin","seqStart":3709,"ops":[[6421,19,""],[9794,0,"rere.o \\\n\tbuiltin-re"]]},{"span":[68557,68800],"parents":[68497],"agent":"Eric Wong","seqStart":861,"ops":[[3434,119,""],[15604,6,""],[15616,59,""],[23700,0,"quick-install-doc:\n\t$(MAKE) -C Documentation quick-install\n"]]},{"span":[68800,68820],"parents":[68799],"agent":"Johannes Schindelin","seqStart":3748,"ops":[[8107,0," \\\n\tutf8.h"],[8914,0," \\\n\tutf8.o"]]},{"span":[68820,68823],"parents":[67276,68286,68517,68556,68819],"agent":"Junio C Hamano","seqStart":25347,"ops":[[8935,3,""]]},{"span":[68823,68868],"parents":[68286,68517,68556,68819],"agent":"Junio C Hamano","seqStart":25350,"ops":[[11440,2,""],[11456,0,"out "],[11468,0,"usp"],[11472,2,""],[11472,0,"c"],[11474,1,""],[11474,0," MMAP "],[11481,2,""],[11483,1,""],[11483,0,"mo"],[11487,2,""],[11488,8,""],[11488,0,"efficient"],[11499,2,""]]},{"span":[68868,68878],"parents":[68286,68517,68556,68819],"agent":"Shawn O. Pearce","seqStart":636,"ops":[[5811,0,"git-gc.sh "]]},{"span":[68878,69480],"parents":[68867,68877],"agent":"Junio C Hamano","seqStart":25395,"ops":[[3434,0,"NO_R_TO_GCC if your gcc does not like \"-R/path/lib\" that\n# tells runtime paths to dynamic libraries; \"-Wl,-rpath=/path/lib\"\n# is used instead.\n#\n# Define "],[13077,0,"def NO_R_TO_GCC_LINKER\n\t# Some gcc does not accept and pass -R to the linker to specify\n\t# the runtime dynamic library path.\n\tCC_LD_DYNPATH = -Wl,-rpath=\nelse\n\tCC_LD_DYNPATH = -R\nendif\n\nif"],[13298,6,""],[13298,0,"ry"],[13301,3,""],[13301,0,"\"-W"],[13305,3,""],[13305,0,",-"],[13308,5,""],[13308,0,"p"],[13311,0,"h=$(CURLDIR)/l"],[13326,1,""],[13326,0,"b\""],[13329,2,""],[13329,0,"in"],[13332,2,""],[13332,0,"su"],[13335,0,"h"],[13337,4,""],[13337,0,"a"],[13339,7,""],[13339,0,"c"],[13341,1,""],[13342,8,""],[13342,0,"e"],[13418,2,""],[13421,0,"C_LD_DYNPATH)$(C"],[13821,66,""],[13898,2,""],[13900,0,"CC_LD_DYNPATH)$("],[14201,65,""],[14202,1,""],[14276,2,""],[14278,0,"CC_LD_DYNPATH)$("]]},{"span":[69480,69723],"parents":[68822,69479],"agent":"Shawn O. Pearce","seqStart":646,"ops":[[3219,0,"TRUSTABLE_F"],[3231,0,"LEMODE if your filesystem may claim to support\n# the executable mode bit, but doesn't really do so.\n#\n# Define NO_I"],[11628,0,"NO_TRUSTABLE_FILEMODE = UnfortunatelyYes\n\t"],[15424,0,"TRUSTABLE_FILEMODE\n\tBASIC_CFLAGS += -DNO_TRUSTABLE_FILEMODE\nendif\nifdef NO_"]]},{"span":[69723,69737],"parents":[69722],"agent":"René Scharfe","seqStart":0,"ops":[[23412,0," common-cmds.h"]]},{"span":[69737,69752],"parents":[69736],"agent":"Junio C Hamano","seqStart":25997,"ops":[[8811,0,"reachable.o \\\n\t"]]},{"span":[69752,69768],"parents":[69736],"agent":"Junio C Hamano","seqStart":26012,"ops":[[6636,0,"git-remote.perl "]]},{"span":[69768,69779],"parents":[69767],"agent":"Nicolas Pitre","seqStart":1004,"ops":[[7637,0,"git-init$X "]]},{"span":[69779,69963],"parents":[69751,69778],"agent":"Stefan-W. Hahn","seqStart":0,"ops":[[3070,0,"PREAD if you have a problem with pread() system call (e.g.\n# cygwin.dll before v1.5.22).\n#\n# Define NO_"],[15486,0,"PREAD\n\tCOMPAT_CFLAGS += -DNO_PREAD\n\tCOMPAT_OBJS += compat/pread.o\nendif\nifdef NO_"]]},{"span":[69963,70007],"parents":[69962],"agent":"Junio C Hamano","seqStart":26028,"ops":[[7174,20,""],[9951,0,"base.o \\\n\tbuiltin-merge-"]]},{"span":[70007,70044],"parents":[69962],"agent":"Shawn O. Pearce","seqStart":889,"ops":[[7517,15,""],[9640,0,"escribe.o \\\n\tbuiltin-d"]]},{"span":[70044,70301],"parents":[70043],"agent":"Junio C Hamano","seqStart":26072,"ops":[[48,0,":"],[17180,0,":"],[17240,0,"ifneq (,$X)"],[17252,0,"\t$(foreach p,$(p"],[17269,0,"tsubst %$X,%,$(fi"],[17287,0,"ter %$X,$(ALL_PROGRAMS) $(BUILT_INS) git$X)), rm -f '$p';)\nendif\n\na"],[17355,0,"l:"],[24590,0,"ifneq (,$X)\n\t$(foreach p,$(patsubst %$X,%,$(filter %$X,$(ALL_PROGRAMS) $(BUILT_INS) git$X)), rm -f '$(DESTDIR_SQ)$(gitexecdir_SQ)/$p';)\nendif\n"]]},{"span":[70301,70315],"parents":[70300],"agent":"Johannes Schindelin","seqStart":3768,"ops":[[8939,0,"reflog-walk.o "]]},{"span":[70315,70329],"parents":[70314],"agent":"Junio C Hamano","seqStart":26329,"ops":[[8533,0," reflog-walk.h"]]},{"span":[70329,70352],"parents":[70328],"agent":"Tom Prince","seqStart":13,"ops":[[7737,0,"git-repo-config$X "],[10212,5,""]]},{"span":[70352,70382],"parents":[70351],"agent":"Junio C Hamano","seqStart":26343,"ops":[[7101,8,""],[7750,0,"git-fsck-objects$X \\\n\t"]]},{"span":[70382,70400],"parents":[70381],"agent":"Mark Wooding","seqStart":0,"ops":[[9889,0,"fsck.o \\\n\tbuiltin-"]]},{"span":[70400,70406],"parents":[70399],"agent":"Junio C Hamano","seqStart":26373,"ops":[[15024,0,"B"],[15026,2,""],[15026,0,"SIC"]]},{"span":[70406,70528],"parents":[63273,70405],"agent":"Junio C Hamano","seqStart":26379,"ops":[[7945,2,""],[7946,18,""],[7947,1,""],[17807,42,""],[17808,41,""],[26931,18,""]]},{"span":[70528,73571],"parents":[],"agent":"Christian Stimming","seqStart":0,"ops":[[0,0,"# Set the installation directories; this section is needed only in\n# gitk.git but probably not in git.git.\nifndef gitexecdir\n\tgitexecdir := $(shell git --exec-path)\nendif\nifndef sharedir\n\tsharedir := $(dir $(gitexecdir))share\nendif\n\n# From here on, these are needed in git.git/gitk/Makefile.\ngitk_libdir   ?= $(sharedir)/gitk/lib\nmsgsdir    ?= $(gitk_libdir)/msgs\nmsgsdir_SQ  = $(subst ','\\'',$(msgsdir))\n\n## Beginning of po-file creation rules\nXGETTEXT   ?= xgettext\nMSGFMT     ?= msgfmt\nPO_TEMPLATE = po/gitk.pot\nALL_POFILES = $(wildcard po/*.po)\nALL_MSGFILES = $(subst .po,.msg,$(ALL_POFILES))\n\nall:: $(ALL_MSGFILES)\n\n$(PO_TEMPLATE): gitk\n\t$(XGETTEXT) -kmc -LTcl -o $@ gitk\nupdate-po:: $(PO_TEMPLATE)\n\t$(foreach p, $(ALL_POFILES), echo Updating $p ; msgmerge -U $p $(PO_TEMPLATE) ; )\n$(ALL_MSGFILES): %.msg : %.po\n\t@echo Generating catalog $@\n\t$(MSGFMT) --statistics --tcl $< -l $(basename $(notdir $<)) -d $(dir $@)\n\nclean::\n\trm -f $(ALL_PROGRAMS) po/*.msg\n## End of po-file creation rules\n\n# Install rules for po-files\ninstall: all\n\t$(QUIET)$(INSTALL_D0)'$(DESTDIR_SQ)$(msgsdir_SQ)' $(INSTALL_D1)\n\t$(QUIET)$(foreach p,$(ALL_MSGFILES), $(INSTALL_R0)$p $(INSTALL_R1) '$(DESTDIR_SQ)$(msgsdir_SQ)' &&) true\n\nuninstall:\n\t$(QUIET)$(foreach p,$(ALL_MSGFILES), $(REMOVE_F0)'$(DESTDIR_SQ)$(msgsdir_SQ)'/$(notdir $p) $(REMOVE_F1) &&) true\n\t$(QUIET)$(REMOVE_D0)'$(DESTDIR_SQ)$(msgsdir_SQ)' $(REMOVE_D1)\n\t$(QUIET)$(REMOVE_D0)'$(DESTDIR_SQ)$(libdir_SQ)' $(REMOVE_D1)\n\t$(QUIET)$(REMOVE_D0)`dirname '$(DESTDIR_SQ)$(libdir_SQ)'` $(REMOVE_D1)\n"],[2,1,""],[2,0,"Th"],[5,1,""],[6,2,""],[6,0,"d"],[8,5,""],[8,0,"f"],[10,1,""],[10,0,"u"],[12,1,""],[13,3,""],[14,2,""],[14,0,"ta"],[17,0,"g"],[19,1,""],[20,0," "],[22,5,""],[22,0,"f"],[29,1,""],[29,0,"Mak"],[33,6,""],[33,0,"f"],[35,6,""],[35,0,"l"],[37,6,""],[39,8,""],[39,0,"s"],[41,27,""],[42,3,""],[44,4,""],[44,0,"all::\n\npr"],[55,2,""],[56,2,""],[57,5,""],[57,0," ?= $(HOME)"],[69,2,""],[69,0,"b"],[71,5,""],[71,0,"n"],[76,1,""],[76,0,"?"],[81,2,""],[81,0,"pr"],[84,4,""],[84,0,"f"],[86,5,""],[87,7,""],[88,7,""],[88,0,"/b"],[91,1,""],[92,12,""],[93,1,""],[102,1,""],[102,0,"?"],[107,2,""],[107,0,"p"],[109,4,""],[109,0,"ef"],[112,2,""],[113,5,""],[114,1,""],[114,0,"/"],[119,2,""],[120,5,""],[121,44,""],[124,4,""],[125,11,""],[235,2,""],[235,0,"TCLTK_PATH"],[246,3,""],[246,0,"?= wish\nINSTALL ?= "],[267,0,"stall\nRM ?= rm -f\n\nDESTDIR_SQ = $(subst ','\\'',$(DESTDIR))\nbi"],[329,0,"dir_SQ = $(subst ','\\'',$(b"],[358,1,""],[358,0,"dir))\nTCLTK_PATH_SQ ="],[380,2,""],[380,0,"$(subst"],[388,0,"','\\'',$(TCLTK_PATH))\n\n## "],[590,5,""],[590,0,"ifndef"],[597,15,""],[597,0,"V"],[599,7,""],[599,0,"\tQUI"],[604,4,""],[605,3,""],[606,4,""],[606,0,"         = @"],[620,4,""],[620,0,"QUI"],[624,1,""],[625,0,"_G"],[628,3,""],[628,0,"N"],[630,4,""],[631,5,""],[632,2,""],[633,2,""],[634,16,""],[635,28,""],[635,0,"="],[639,7,""],[639,0,"QU"],[642,1,""],[643,1,""],[643,0,"T"],[645,2,""],[650,8,""],[650,0,"'"],[652,2,""],[653,1,""],[654,8,""],[654,0,"'"],[656,2,""],[656,0,"GEN"],[661,1,""],[661,0,"@"],[663,14,""],[663,0,"&&\nendif\n\nall::"],[679,1,""],[679,0,"gitk-wish"],[689,2,""],[704,14,""],[705,14,""],[705,0,"\n"],[708,4,""],[708,0,"s"],[712,2,""],[712,0,"l::"],[716,2,""],[716,0,"all"],[723,1,""],[723,0,"IN"],[726,3,""],[727,0,"ALL"],[732,6,""],[732,0,"g"],[734,1,""],[735,0,"k-w"],[739,1,""],[740,6,""],[740,0,"h"],[742,0,"'"],[744,5,""],[744,0,"(DESTDIR_SQ)"],[759,10,""],[759,0,"i"],[761,16,""],[763,16,""],[764,10,""],[765,7,""],[766,0,"Q"],[768,3,""],[768,0,"'"],[770,4,""],[771,15,""],[772,7,""],[773,52,""],[773,0,"k"],[778,8,""],[785,3,""],[786,0," -d "],[818,14,""],[822,8,""],[858,3,""],[859,2,""],[861,12,""],[861,0,"p"],[912,0,":"],[915,8,""],[947,1,""],[948,6,""],[949,0," "],[990,13,""],[1002,8,""],[1005,1,""],[1006,6,""],[1007,0," "],[1024,4,""],[1024,0,"bin"],[1035,1,""],[1035,0,"/gitk\n\nclean::\n\t"],[1054,1,""],[1055,6,""],[1056,0," gitk-wish po/*.msg"],[1076,0,"\ngitk-wish: gitk\n"],[1101,0,"_GEN"],[1109,1,""],[1110,5,""],[1110,0,") $@ $@+ && \\\n\tsed -e '1,3s|^exec .* \"$$"],[1151,1,""],[1151,0,"\"|exec $(subst |,'\\|"],[1172,0,","],[1175,3,""],[1176,3,""],[1176,0,"CLTK_PATH"],[1189,0,") \"$"],[1194,2,""],[1194,0,"0\"|' <g"],[1202,1,""],[1202,0,"tk >$@+ && \\\n\tchmo"],[1221,7,""],[1222,0,"+x "],[1226,0,"@+ && \\\n\tmv -f $@+ $@\n\n$"],[1251,1,""],[1251,0,"PO_T"],[1257,2,""],[1257,0,"PLAT"],[1262,3,""],[1263,0,": gitk"],[1273,3,""],[1273,0,"XGETT"],[1279,0,"X"],[1282,0," -kmc -LTcl -o $@ gitk\nupdate-po:: "],[1319,1,""],[1319,0,"PO_T"],[1325,2,""],[1325,0,"PLAT"],[1330,0,")\n\t$(foreach p, $(ALL"],[1352,2,""],[1352,0,"POFILES"],[1360,1,""],[1360,0,", echo Up"],[1370,0,"at"],[1373,1,""],[1374,1,""],[1374,0,"g $p ; msg"],[1386,0,"rge -U $p"],[1396,1,""],[1398,1,""],[1398,0,"PO_T"],[1403,1,""],[1403,0,"MPLA"],[1408,3,""],[1408,0,"E) ; )\n$(ALL"],[1421,0,"MSGFILE"],[1429,1,""],[1430,0,": %.msg : %.po\n\t@echo Generating catalog $@\n\t"],[1477,0,"MSGFMT) --statistics --tcl $< -"],[1509,1,""],[1509,0," $("],[1513,0,"asename $(not"],[1529,3,""],[1529,0," $<)"],[1534,2,""],[1535,0,"-d "],[1540,9,""],[1540,0,"dir $@"],[1548,0,"\n"]]},{"span":[73571,73634],"parents":[73570],"agent":"Charles Bailey","seqStart":0,"ops":[[460,0,"ifdef NO_MSGFMT\n\t"],[484,0,"?="],[487,0,"$(TCL_PATH)"],[499,1,""],[499,0,"po/po2msg.sh\nelse\n\tMSGFMT"],[535,0,"endif\n\n"]]},{"span":[73634,73774],"parents":[73633],"agent":"Paul Mackerras","seqStart":100,"ops":[[238,0,"_PATH ?= tclsh\nTCL"],[553,0,"\tifneq ($(shell $(MSGFMT) --tcl -l C -d . /dev/null 2>/dev/null; echo $$?),0)\n\t\tMSGFMT := $(TCL_PATH) po/po2msg.sh\n\tendif\n"]]},{"span":[73774,73795],"parents":[73773],"agent":"Gerrit Pape","seqStart":61,"ops":[[933,0,"-m 755 "],[998,0,"-m 755 "],[1075,0,"-m 644 "]]},{"span":[73795,74182],"parents":[73794],"agent":"Christian Couder","seqStart":71,"ops":[[431,0,"#"],[433,0,"Detect Tck/Tk inter"],[453,0,"reter path changes\nTRACK_TCLTK = $(subst ','\\'',-DTCLTK_PATH='$(TCLTK_PATH_SQ)')\n\nGIT-TCLTK-VARS: FORCE\n\t@VARS='$(TRACK_TCLTK)'; \\\n\t\tif test x\"$$VARS\" != x\"`cat $@ 2>/dev/null`\" ; then \\\n\t\t\tech"],[647,0," 1>&2 \"    * new Tcl/Tk interpreter location\"; \\\n\t\t\techo \"$$VARS\" >$@; \\\n\t\tfi\n\n## po"],[1594,0," GIT-TCLTK-VARS"],[1626,0," GIT-TCLTK-VARS"],[2098,0,".PHONY: all install uninstall clean update-po\n.PHONY: FORCE\n"]]},{"span":[74182,74232],"parents":[74181],"agent":"Vasco Almeida","seqStart":0,"ops":[[1231,0,"d -m 755 '$(DESTDIR_SQ)$(bindir_SQ)'\n\t$(INSTALL) -"]]},{"span":[74232,75534],"parents":[],"agent":"Shawn O. Pearce","seqStart":926,"ops":[[0,0,"all: git-gui\n\ngitexecdir := $(shell git --exec-path)\nINSTALL = install\n\nDESTDIR_SQ = $(subst ','\\'',$(DESTDIR))\ngitexecdir_SQ = $(subst ','\\'',$(gitexecdir))\n\nGITGUI_BUILTIN = git-citool\n\ninstall: all\n\t$(INSTALL) -d -m755 '$(DESTDIR_SQ)$(gitexecdir_SQ)'\n\t$(INSTALL) git-gui '$(DESTDIR_SQ)$(gitexecdir_SQ)'\n\t$(foreach p,$(GITGUI_BUILTIN), rm -f '$(DESTDIR_SQ)$(gitexecdir_SQ)/$p' && ln '$(DESTDIR_SQ)$(gitexecdir_SQ)/git-gui' '$(DESTDIR_SQ)$(gitexecdir_SQ)/$p' ;)\n"],[4,0,":\n\nSCRIPT_SH ="],[26,0,".sh\nGITGUI_BUILT_INS = git-citool\nALL_PROGRAMS = $(GITGUI_BUILT_INS) $(patsubst %.sh,%,$(SCRIPT_SH))\nGITGUI_VERSION := $(shell git describe)\n\nifndef SHELL_PATH\n\tSHELL_PATH = /bin/sh\nendif"],[360,0,"SHELL_PATH_SQ = $(subst ','\\'',$(SHELL_PATH))\n\n$(patsubst %.sh,%,$(SCRIPT_SH)) : % : %.sh\n\trm -f $@ $@+\n\tsed -e '1s|#!.*/sh|#!$(SHELL_PATH_SQ)|' \\\n\t\t-e 's/@@GITGUI_VERSION@@/$(GITGUI_VERSION)/g' \\\n\t\t$@.sh >$@+\n\tchmod +x $@+\n\tmv $@+ $@\n\n$("],[610,0,"_"],[613,2,""],[613,0,"S):"],[621,1,""],[621,0,"gu"],[624,0,"\n\trm -f $@ && ln gi"],[644,2,""],[644,0,"-gui $@\n\na"],[655,0,"l:: $(ALL_PROGRAMS)"],[821,0,"_"],[824,0,"S"],[953,0,"\nclean::\n\trm -f $(ALL_PROGRAMS)\n"],[7,0,"GIT-VERSION-FILE: .FORCE-GIT-VERSION-FILE\n\t@$(SHELL_PATH) ./GIT-VERSION-GEN\n-include GIT-VER"],[100,0,"ION-FILE\n\nS"],[230,40,""],[583,3,""],[599,3,""],[710,0,"# These can record GIT_VERSION\n$(patsubst %.sh,%,$(SCRIPT_SH)): GIT-VERSION-FILE\n\n"],[1123,0," GIT-VERSION-FILE\n\n.PHONY: all install clean\n.PHONY: .FORCE-GIT-VERSION-FILE"]]},{"span":[75534,76734],"parents":[70527,75533],"agent":"Junio C Hamano","seqStart":26501,"ops":[[27304,1200,""]]},{"span":[76734,76886],"parents":[75533],"agent":"Shawn O. Pearce","seqStart":2228,"ops":[[278,0,"ifndef "],[295,0,"\n\tgitexecdir"],[336,0,"endif\n\nifndef INSTALL\n\t"],[377,0,"endif\n"],[469,1,""],[630,0,"GUI"],[649,0,"GUI"],[785,0,"GUI"],[1149,0,"dist-version:\n\t@mkdir -p $(TARDIR)\n\t@echo $(GITGUI_VERSION) > $(TARDIR)/version\n\n"],[1299,0,"dist-version "]]},{"span":[76886,77037],"parents":[76733,76885],"agent":"Junio C Hamano","seqStart":27701,"ops":[[27304,151,""]]},{"span":[77037,77232],"parents":[77036],"agent":"Shawn O. Pearce","seqStart":2380,"ops":[[17188,0,"gitexecdir "],[17457,0,"git-gui all\n\t$(MAKE) -C "],[24230,0,"$(MAKE) -C git-gui install\n\t"],[25264,0,"@"],[25267,0,"MAKE) -C git-gui TARDIR=../$(GIT_"],[25303,0,"NAME"],[25308,0,"/git-gui"],[25317,0,"dist-ve"],[25325,0,"sion\n\t$(TAR) r"],[25388,0,"\\\n\t\t"],[25414,0," \\"],[25418,0,"\t$(GIT_TARNAME)/git-gui/version\n\t"],[26715,0,"git-gui clean\n\t$(MAKE) -C "]]},{"span":[77232,77272],"parents":[77231],"agent":"Junio C Hamano","seqStart":27852,"ops":[[6358,15,""],[9778,25,""]]},{"span":[77272,77297],"parents":[77231],"agent":"Junio C Hamano","seqStart":27892,"ops":[[9837,0,"etch--tool.o \\\n\tbuiltin-f"]]},{"span":[77297,77317],"parents":[77231],"agent":"Johannes Schindelin","seqStart":3782,"ops":[[9568,0,"bundle.o \\\n\tbuiltin-"]]},{"span":[77317,77337],"parents":[70006,77271],"agent":"Junio C Hamano","seqStart":27917,"ops":[[7173,0,"merge-base$X \\\n\tgit-"]]},{"span":[77337,77350],"parents":[77231],"agent":"Linus Torvalds","seqStart":8966,"ops":[[9422,0," \\\n\tconvert.o"]]},{"span":[77350,77485],"parents":[77231],"agent":"Johannes Schindelin","seqStart":3802,"ops":[[5126,0,"ETC_GITCONFIG = $(prefix)/etc/gitconfig\n"],[16721,0,"ETC_GITCONFIG_SQ = $(subst ','\\'',$(ETC_GITCONFIG))\n"],[17158,0,"\\\n\t-DETC_GITCONFIG='\"$(ETC_GITCONFIG_SQ)\"' "]]},{"span":[77485,77652],"parents":[77231],"agent":"Junio C Hamano","seqStart":27937,"ops":[[27137,0,"add--interactive | git-fsck-objects | git-init-db | \\\n\t\tgit-repo-config | \\\n\t\tgit-"],[27335,2,""],[27335,0,"s"],[27337,1,""],[27337,0,"d"],[27340,1,""],[27340,0,"e"],[27342,1,""],[27342,0,"'1,/"],[27347,23,""],[27347,0,"__DATA__/d'"],[27373,1,""],[27373,0,"cmd-l"],[27379,0,"s"],[27382,3,""],[27382,0,"perl | \\\n\t\tgrep -q \"^$$v[ \t]\""]]},{"span":[77652,78025],"parents":[77651],"agent":"Jason Riedy","seqStart":697,"ops":[[1224,0,"TRTOUMAX if you don't have strtoumax in the C library.\n# If your compiler also does not support long long or does not have\n# strtoull, define NO_STRTOULL.\n#\n# Define NO_S"],[11590,0,"\tNO_STRTOUMAX = Y"],[11608,0,"sPlease\n\te"],[11725,0,"\tNO_STRTOUMAX = YesPleas"],[11750,0,"\n\te"],[15542,0,"TRTOUMAX\n\tCOMPAT_CFLAGS += -DNO_STRTOUMAX\n\tCOMPAT_OBJS += compat/strtoumax.o\nendif\nifdef NO_STRTOULL\n\tCOMPAT_CFLAGS += -DNO_STRTOULL\nendif\nifdef NO_S"]]},{"span":[78025,78523],"parents":[76885],"agent":"Shawn O. Pearce","seqStart":2575,"ops":[[110,23,""],[155,0,"git-gui "],[181,32,""],[470,4,""],[470,0,"gi"],[473,1,""],[473,0,"-g"],[476,3,""],[476,0,"i:"],[479,1,""],[479,0,"git-gui"],[489,5,""],[489,0," GIT-VER"],[498,0,"ION-FILE "],[509,0,"ED"],[512,1,""],[513,1,""],[514,14,""],[514,0,"-FILE"],[540,0,"n \\\n\t\t-"],[636,0,"-e '1,/^set gitgui_credits /p' \\\n\t\t$@.sh >$@+\n\tcat CREDITS-FILE >>$@+\n\tsed -e '1,/^set gitgui_credits /d' "],[749,0,">"],[780,0,"CREDITS-FILE: CREDITS-GEN .FORCE-CREDITS-FILE\n\t$(SHELL_PATH) ./CREDITS-GEN\n\n"],[912,34,""],[913,3,""],[914,48,""],[1227,0," CREDITS-FILE"],[1307,0,"\t@cat CREDITS-FILE > $(TARDIR)/credits\n"],[1394,0," CREDITS-FILE"],[1480,0,".PHONY: .FORCE-CREDITS-FILE\n"]]},{"span":[78523,78851],"parents":[78024,78522],"agent":"Junio C Hamano","seqStart":28104,"ops":[[27975,328,""]]},{"span":[78851,78886],"parents":[78850],"agent":"Shawn O. Pearce","seqStart":3073,"ops":[[25822,0," \\\n\t\t$(GIT_TARNAME)/git-gui/credits"]]},{"span":[78886,78978],"parents":[77336,77349,77484,78885],"agent":"Eric Wong","seqStart":1104,"ops":[[23755,0," test-chmtime$X"],[24259,0,"test-chmtime$X: test-chmtime.c\n\t$(CC) $(ALL_CFLAGS) -o $@ $(ALL_LDFLAGS) $<\n\n"]]},{"span":[78978,78986],"parents":[78885],"agent":"Johannes Schindelin","seqStart":3937,"ops":[[22278,0," fetch.o"]]},{"span":[78986,79213],"parents":[78985],"agent":"Ramsay Jones","seqStart":0,"ops":[[3834,0,"OLD_ICONV if your library has an old iconv(), where the second\n# (input buffer pointer) parameter is declared with type (const char **).\n#\n# Define "],[16692,0,"OLD_ICONV\n\tBASIC_CFLAGS += -DOLD_ICONV\nendif\n\nifdef "],[12156,27,""]]},{"span":[79213,79332],"parents":[77316,78977,79212],"agent":"Johannes Schindelin","seqStart":3945,"ops":[[6714,7,""],[6716,4,""],[6718,3,""],[7255,1,""],[7256,15,""],[8103,0,"git-cherry-pick$X "],[10694,0,"evert.o \\\n\tbuiltin-r"],[19548,51,""]]},{"span":[79332,79542],"parents":[78522],"agent":"Shawn O. Pearce","seqStart":3108,"ops":[[7,0,"# Define V=1 to have a more verbose compile.\n#\n\n"],[385,0,"ifndef V\n\tQUIET_GEN      = @echo '   ' GEN $@;\n\tQUIET_BUILT_IN = @echo '   ' BUILTIN $@;\nendif\n\n"],[665,0,"$(QUIET_GEN)"],[689,0," && \\"],[842,0," && \\"],[871,0," && \\"],[924,0," && \\"],[943,0," && \\"],[1010,0,"QUIET_GEN)$("],[1079,0,"$(QUIET_BUILT_IN)"]]},{"span":[79542,79752],"parents":[79212,79541],"agent":"Junio C Hamano","seqStart":28432,"ops":[[28191,210,""]]},{"span":[79752,80682],"parents":[77316,78977,79751],"agent":"Shawn O. Pearce","seqStart":3318,"ops":[[60,0,"QUIET_MAKE to have a less verbose compile.\n#\n# Define "],[17222,0,"ifdef QUIET_MAKE\n\tQUIET_CC       = @echo '   ' CC $<;\n\tQUIET_AR       = @echo '   ' AR $@;\n\tQUIET_LINK     = @echo '   ' LINK $@;\n\tQUIET_BUILT_IN = @echo '   ' BUILTIN $@;\n\tQUIET_GEN      = @echo '   ' GEN $@;\n\tQUIET_SUBDIR0  = @subdir=\n\tQUIET_SUBDIR1  = ;echo '   ' SUBDIR $$subdir; $(MAKE) -C$$subdir\n\texport QUIET_MAKE\nelse\n\tQUIET_SUBDIR0  = $(MAKE) -C\n\tQUIET_SUBDIR1  =\nendif\n"],[18580,3,""],[18580,0,"QUI"],[18584,0,"T_SUBDIR0"],[18594,4,""],[18602,0,"$(QUIET_SUBDIR1) "],[18626,3,""],[18626,0,"QUI"],[18630,0,"T_SUBDIR0"],[18640,4,""],[18645,0,"$(QUIET_SUBDIR1) "],[18719,3,""],[18719,0,"QUI"],[18723,0,"T_SUBDIR0"],[18733,4,""],[18742,0," $(QUIET_SUBDIR1)"],[18897,0,"QUIET_LINK)$("],[19076,0,"$(QUIET_BUILT_IN)"],[19158,0,"$(QUIET_GEN)"],[19197,2,""],[19197,0," && "],[19256,0,"$(QUIET_GEN)"],[19280,0," && \\"],[19471,0," && \\"],[19490,0," && \\"],[19709,0,"$(QUIET_GEN)"],[19733,0," && \\"],[20118,0," && \\"],[20137,0," && \\"],[20184,0,"$(QUIET_GEN)"],[20205,2,""],[20205,0," && "],[20244,0,"$(QUIET_GEN)"],[20265,2,""],[20265,0," && "],[20319,0,"$(QUIET_GEN)"],[20343,0," && \\"],[21270,0," && \\"],[21289,0," && \\"],[21374,0,"$(QUIET_GEN)"],[21398,0," && \\"],[21705,0," && \\"],[21724,0," && \\"],[21767,0,"$(QUIET_GEN)"],[21791,0," && \\"],[21857,0," && \\"],[21882,0," && \\"],[22066,0,"QUIET_"],[22075,0,"$(CC)"],[22121,0,"QUIET_CC)$("],[22202,0,"QUIET_CC)$("],[22333,0,"QUIET_CC)$("],[22456,0,"QUIET_CC)$("],[22603,0,"QUIET_CC)$("],[22691,0,"QUIET_LINK)$("],[23095,0,"QUIET_LINK)$("],[23272,0,"QUIET_LINK)$("],[23550,0,"$(QUIET_AR)"],[23860,0,"$(QUIET_AR)"],[60,10,""],[60,0,"V=1"],[74,1,""],[74,0,"mor"],[78,2,""],[17217,0,"n"],[17222,10,""],[17222,0,"V"],[17518,10,""],[17518,0,"V"]]},{"span":[80682,81094],"parents":[80681],"agent":"Alex Riesen","seqStart":473,"ops":[[17258,1,""],[17258,0,"@"],[17491,0,"\\\n\t\t\t "],[17506,0,"-no-print-directory -"],[17528,0," "],[17548,0,"\texport QUIET_GEN\n"],[19611,3,""],[19611,0,"QUI"],[19615,0,"T_SUBDIR0"],[19625,4,""],[19630,0,"$(QUIET_SUBDIR1) "],[17215,0,"\nQUIET_SUBDIR0  = $(MAKE) -C # space to separate -C and subd"],[17276,0,"r\nQUIET_SUBDIR1  =\n\ni"],[17299,0,"eq ($(fin"],[17309,0,"string $(MAKEFLAGS),s),s)\nifnd"],[17686,0,"\t"],[17688,5,""],[17688,0,"xport "],[17700,2,""],[17701,21,""],[17703,1,""],[17703,0,"L"],[17706,4,""],[17707,5,""],[17707,0,"N\nendif"],[17329,0,"w),w)\nPRINT_DIR = --no-print-directory\nel"],[17371,0,"e # \"make -w\"\nNO_SUBDIR = :\nendif\n\nifneq ($(findstring $(MAKEFLAGS"],[17441,0,",s)"],[17693,0,"$(NO_SUBDIR) "],[17748,20,""],[17748,0,"$(PRINT_DIR)"]]},{"span":[81094,81102],"parents":[81093],"agent":"John Keeping","seqStart":0,"ops":[[17316,0,"w,"],[17330,2,""],[17426,0,"s,"],[17440,2,""]]},{"span":[81102,81122],"parents":[79331,81093],"agent":"Junio C Hamano","seqStart":28642,"ops":[[20398,17,""],[20405,0,"\\\n\t"]]},{"span":[81122,81196],"parents":[79541],"agent":"Alex Riesen","seqStart":885,"ops":[[481,0,"ifeq ($(findstring $(MAKEFLAGS),s),s)\nQUIET_GEN =\nQUIET_BUILT_IN =\nendif\n\n"]]},{"span":[81196,81716],"parents":[79541],"agent":"Shawn O. Pearce","seqStart":4248,"ops":[[158,0,"SCRIPT_SH = git-gui.sh\n"],[225,8,""],[245,0," $(patsubst %.sh,%,$(SCRIPT_SH))"],[661,2,""],[661,0,"$(pa"],[666,2,""],[666,0,"s"],[668,5,""],[668,0,"bs"],[671,4,""],[671,0," %"],[676,8,""],[676,0,",%,$("],[682,9,""],[684,2,""],[685,0,"P"],[687,0,"_"],[689,5,""],[689,0,"H)) : % : %.sh"],[741,7,""],[829,81,""],[830,35,""],[836,1,""],[875,88,""],[951,0,"# These can record GITGUI_VERSION\n$(patsubst %.sh,%,$(SCRIPT_SH)): GIT-VERSION-FILE\n\n"],[1350,13,""],[1416,39,""],[1464,4,""],[1465,9,""],[1529,5,""],[1530,6,""],[1532,17,""]]},{"span":[81716,81886],"parents":[79751,81715],"agent":"Junio C Hamano","seqStart":28662,"ops":[[28191,170,""]]},{"span":[81886,81921],"parents":[81885],"agent":"Shawn O. Pearce","seqStart":4768,"ops":[[26003,35,""]]},{"span":[81921,81995],"parents":[81121,81195,81920],"agent":"Junio C Hamano","seqStart":28832,"ops":[[29433,74,""]]},{"span":[81995,82012],"parents":[81994],"agent":"Theodore Ts'o","seqStart":0,"ops":[[6659,0,"mergetool.sh git-"]]},{"span":[82012,82038],"parents":[77296,82011],"agent":"James Bowes","seqStart":0,"ops":[[6600,10,""],[10326,0,"c.o \\\n\tbuiltin-g"]]},{"span":[82038,82053],"parents":[82037],"agent":"Gerrit Pape","seqStart":82,"ops":[[28110,0,"test-chmtime$X "]]},{"span":[82053,82071],"parents":[82052],"agent":"Junio C Hamano","seqStart":28906,"ops":[[29105,0,"git-fetch--tool | "]]},{"span":[82071,82713],"parents":[82070],"agent":"Eygene Ryabinkin","seqStart":0,"ops":[[4796,0,"# Define WITH_P4IMPORT to build and install Python git-p4import script.\n#\n"],[7303,0,"_PYTHON = \\\n\tgit-p4import.py\n\nifdef WITH_P4IMPORT\nSCRIPT"],[7441,0,"$(patsubst %.py,%,$(SCRIPT_PYTHON)) \\\n\t  git-status git-instaweb\nelse\nSCRIPTS = $(patsubst %.sh,%,$(SCRIPT_SH)) \\\n\t  $(patsubst %.perl,%,$(SCRIPT_PERL)) \\\n\t  "],[7623,0,"endif\n\n"],[8889,0,"ifndef PYTHON_PATH\n\tPYTHON_PATH = /usr/local/bin/python\nendif\n"],[18721,0,"PYTHON_PATH_SQ = $(subst ','\\'',$(PYTHON_PATH))\n"],[20255,0,"$(patsubst %.py,%,$(SCRIPT_PYTHON)) : % : %.py\n\trm -f $@ $@+\n\tsed -e '1s|#!.*/python|#!$(PYTHON_PATH_SQ)|' \\\n\t    -e 's/@@GIT_VERSION@@/$(GIT_VERSION)/g' \\\n\t    -e 's/@@NO_CURL@@/$(NO_CURL)/g' \\\n\t    $@.py >$@+\n\tchmod +x $@+\n\tmv $@+ $@\n\n"]]},{"span":[82713,84055],"parents":[82070],"agent":"Eygene Ryabinkin","seqStart":642,"ops":[[4796,0,"# Define NO_TCLTK if you do not want Tcl/Tk GUI.\n#\n"],[8385,0,"what 'all' will build but not install in gitexecdir\nOTHER_PROGRAMS = git$X gitweb/gitweb.cgi\nifndef NO_TCLTK\nOTHER_PROGRAMS += gitk\nendif\n\n# "],[18911,3,""],[18912,24,""],[18912,0,"(OTHER_PROGRAMS)"],[19048,0,"ifndef NO_TCLTK\n"],[19110,0,"endif\n"],[26177,5,""],[26306,0,"ifndef NO_TCLTK\n\t$(INSTALL) gitk '$(DESTDIR_SQ)$(bindir_SQ)'\n"],[26395,0,"endif\n"],[28874,2,""],[28875,4,""],[28875,0,"emplates/"],[28903,6,""],[28904,2,""],[28912,0,"ifndef NO_TCLTK\n"],[28940,0,"gi"],[28943,1,""],[28943,0,"-gui"],[28954,0,"endif\n"],[4847,0,"# The TCLTK_PATH variable governs the location of the Tck/Tk interpreter.\n# If not set it defaults to the bare 'wish'. If it is set to the empty\n# string then NO_TCLTK will be forced (this is used by configure script).\n#\n"],[6310,0,"TCLTK_PATH = wish\n"],[17703,0,"ifeq ($(TCLTK_PATH),)\nNO_TCLTK=NoThanks\nendif\n\n"],[18842,0,"TCLTK_PATH_SQ = $(subst ','\\'',$(TCLTK_PATH))\n"],[19421,0,"TCLTK_PATH='$(TCLTK_PATH_SQ)' "],[8755,0,"-wish"],[19692,0,"k-wish: gitk GIT-GUI-VARS\n\t$(QUIET_GEN)rm -f $@ $@+ && \\\n\tsed -e '1,3s|^exec .* \"$$0\"|exec $(subst |,'\\|',$(TCLTK_PATH_SQ)) \"$$0\"|' <gitk >$@+ && \\\n\tchmod +x $@+ && \\\n\tmv -f $@+ $@\n\ngit"],[25582,0,"Detect "],[25590,0,"ck/Tk interpreter path chang"],[25620,0,"\nifndef NO_TCLTK\nTRACK_VARS = $(subs"],[25657,0," ','\\'',-DTCLTK_PATH='$(TCLTK_PATH_SQ)')\n\nGIT-GUI-VARS: .FORCE-GIT-GUI-VARS\n\t@VARS='$(TRACK_VARS)'; \\\n\t    "],[25765,0,"f test x\"$$VARS\" != x\"`cat $@ 2>/dev/"],[25803,0,"ull`\" ; then \\\n\t\techo 1>&2 \"    * new Tcl/Tk interpreter location\"; \\\n\t\techo \"$$VARS\" >$@; \\\n            fi\n\n.PHONY: .FORCE-GIT-GUI-VARS\nendif\n\n### Testin"],[27259,0,"-wish"],[27292,0,"/gitk"],[29860,0,"rm -f gitk-wish\n\t"],[29942,0," GIT-GUI-VARS"]]},{"span":[84055,84089],"parents":[82712,84054],"agent":"Alex Riesen","seqStart":959,"ops":[[19831,0,"$(QUIET_SUBDIR1) "],[19877,17,""]]},{"span":[84089,84091],"parents":[84088],"agent":"Fernando J. Pereda","seqStart":153,"ops":[[18129,0,"+"],[18562,0,"+"]]},{"span":[84091,84103],"parents":[82070],"agent":"Junio C Hamano","seqStart":28924,"ops":[[19423,0,"$(wildcard "],[19457,0,")"]]},{"span":[84103,84133],"parents":[84102],"agent":"Arjen Laarhoven","seqStart":0,"ops":[[11614,0,"OLD_ICONV = UnfortunatelyYes\n\t"]]},{"span":[84133,84387],"parents":[84090,84132],"agent":"Junio C Hamano","seqStart":28936,"ops":[[8917,0,"ALL_PROGRAMS += git-merge-subtree$X\n\n"],[10499,0,"match-trees.o "],[20588,0,"git-merge-subtree$X: git-merge-recursive$X\n\trm -f $@ && ln git-merge-recursive$X $@\n\n"],[27492,0,"match-trees$X: test-match-trees.o $(GITLIBS)\n\t$(CC) $(ALL_CFLAGS) -o $@ $(ALL_LDFLAGS) $(filter %.o,$^) $(LIBS)\n\ntest-"]]},{"span":[84387,84502],"parents":[84386],"agent":"Nicolas Pitre","seqStart":1015,"ops":[[26998,0," test-genrandom$X"],[27699,0,"test-genrandom$X: test-genrandom."],[27733,0,"\n\t$(CC) $(ALL_CFLAGS) -o $@ $(ALL_LDFLAGS) $<\n\nc"],[30359,0,"test-genrandom$X "]]},{"span":[84502,84519],"parents":[84386],"agent":"Shawn O. Pearce","seqStart":4803,"ops":[[20632,0,"$(QUIET_BUILT_IN)"]]},{"span":[84519,84546],"parents":[84386],"agent":"Junio C Hamano","seqStart":29190,"ops":[[9794,0," patch-ids.h"],[10132,0,"patch-ids.o \\\n\t"]]},{"span":[84546,84641],"parents":[84518,84545],"agent":"Junio C Hamano","seqStart":29217,"ops":[[9795,1,""],[9797,6,""],[9797,0,"tr"],[10686,0," attr.o"],[10886,0,"-attr.o \\\n\tbuiltin-check"],[9795,0,"patch-ids.h "],[29964,0,"-p "],[29979,0,"/man1"],[30001,1,""],[30001,0,"5"],[30098,0,"5dir=../.doc-tmp-dir/man5 \\\n\t\tman"]]},{"span":[84641,84663],"parents":[84518,84545],"agent":"Linus Torvalds","seqStart":8979,"ops":[[9806,0," decorate.h"],[10702,0," decorate.o"]]},{"span":[84663,84768],"parents":[84132],"agent":"Josh Triplett","seqStart":0,"ops":[[5491,0,"ifeq ($(prefix),/usr)\nsysconfdir = /etc\nelse\nsysconfdir = $(prefix)/etc\nendif\n"],[5587,3,""],[5587,0,"syscon"],[5594,0,"d"],[5596,1,""],[5596,0,"r"],[5598,4,""],[6049,0," sysconfdir"]]},{"span":[84768,84881],"parents":[81195,81715],"agent":"Eygene Ryabinkin","seqStart":1984,"ops":[[528,0,"TCLTK_PATH ?= w"],[544,0,"sh\n\ni"],[1220,0,"sed -i .bak -e'1,3s|^exec .* \"$$0\"|exec '\"$(TCLTK_PATH)\"' \"$$0\"|' git-gui && rm git-gui.bak\n\t"]]},{"span":[84881,84994],"parents":[84880],"agent":"Shawn O. Pearce","seqStart":4820,"ops":[[528,15,""],[529,5,""],[1198,93,""]]},{"span":[84994,85133],"parents":[84993],"agent":"Junio C Hamano","seqStart":29312,"ops":[[528,0,"TCLTK_PATH ?= w"],[544,0,"sh\n\ni"],[754,0,"TCLTK_PATH_SQ = $(subst ','\\'',$(TCLTK_PATH))\n"],[925,0,"|^exec wish \"$$0\"|exec $(subst |,'\\|',$(TCLTK_PATH_SQ)) \"$$0\"|' \\\n\t\t-e 's"]]},{"span":[85133,85274],"parents":[84662,85132],"agent":"Junio C Hamano","seqStart":29451,"ops":[[31768,141,""]]},{"span":[85274,85296],"parents":[84501,84640,85273],"agent":"Nicolas Pitre","seqStart":1130,"ops":[[9824,0," progress.h"],[10738,0," progress.o"]]},{"span":[85296,85421],"parents":[84767,85295],"agent":"Junio C Hamano","seqStart":29592,"ops":[[9924,0," mailmap.h"],[10848,0," mailmap.o"],[27023,0,"TEST_PROGRAMS = test-chmtime$X test-genrandom$X\n\nall:: $(TEST_PROGRAMS)\n\n"],[27291,32,""]]},{"span":[85421,85440],"parents":[85420],"agent":"Dana L. How","seqStart":0,"ops":[[10299,0,"ck-wri"],[10306,0,"e.o pat"],[10342,0,"\\\n\t"],[10356,3,""]]},{"span":[85440,86465],"parents":[85132],"agent":"Shawn O. Pearce","seqStart":4933,"ops":[[1247,0," GIT-GUI-VARS\n\nTRACK_VARS = \\\n\t$(subst ','\\'',SHELL_PATH='$(SHELL_PATH_SQ)') \\\n\t$(subst ','\\'',TCLTK_PATH='$(TCLTK_PATH_SQ)') \\\n#end TRACK_VARS"],[1392,0,"GIT-GUI-VARS: .FORCE-GIT-GUI-VARS\n\t@VARS='$(TRACK_VARS)'; \\\n\tif test x\"$$VARS\" != x\"`c"],[1479,0,"t $@ 2>/dev/nu"],[1495,0,"`\" ; then \\\n\t\techo 1>&2 \"    * new locations or Tcl/Tk interpreter\"; \\\n\t\techo 1>$@ \"$$VARS\"; \\\n\tfi\n\nall"],[2024,0," GIT-GUI-VARS"],[2110,0,".PHONY: .FORCE-GIT-GUI-VARS\n"],[278,0,"ALL_LIBFILES = $(wildcard lib/*.tcl)\n"],[435,0,"sharedir\n\tsharedir := $(dir $(gitexecdir))/share\nendif\n\nifndef "],[621,0,"\tQUIET_INDEX    = @echo '   ' INDEX $(dir $@);\n"],[678,0,"_PA"],[682,0,"H   ?= tclsh\nTCLT"],[968,0,"libdir   ?= $(sharedir)/git-gui/lib\nlibdir_SQ = $(subst ','\\'',"],[1033,0,"libdir))\n\n$("],[1285,0,"-e 's|@@GITGUI_LIBDIR@@|"],[1310,0,"(libdir_SQ)|' \\\n\t\t$"],[1449,0,"lib/tclIndex: $(ALL_LIBFILES)\n\t$(QUIET_INDEX)echo auto_mkindex lib '*.tcl' | $(TCL_PATH)\n\n"],[1750,0,"\t$(subst ','\\'',libdir='$(libdir_SQ)') \\\n"],[2032,0," lib/tclIndex"],[2324,0,"\t$(INSTALL) -d -m755 '$(DESTDIR_SQ)$(libdir_SQ)'"],[2373,0,"\t$(INSTALL) -m644 lib/tclIndex '$(DESTDIR_SQ)$(lib"],[2425,0,"r_SQ)'\n\t$(foreach p,$(ALL_LIBFILES), $(INSTALL) -m644 $p '$(DESTDIR_SQ)$(libdir_SQ)' ;)\n\ndi"],[2626,0,"lib/tclIndex\n\trm -f "]]},{"span":[86465,87827],"parents":[85439,86464],"agent":"Shawn O. Pearce","seqStart":5958,"ops":[[4930,0,"_PATH variable governs the location of the "],[4974,0,"cl interpreter\n# used to optimize git-gui for your system.  Only used if NO_TCLT"],[5055,0,"\n# is not set.  Defaults to the bare 'tclsh'.\n#\n# The TCLTK"],[5159,1,""],[5159,0,"l"],[5968,5,""],[5968,0,"sh"],[5971,1,""],[5971,0,"r"],[5973,1,""],[5995,0,"\ntemplate_dir = $(sharedir)/"],[6589,0,"sharedir "],[6691,0,"_PATH = tclsh\nTCL"],[6724,0,"export TCL_PATH TCLTK_PATH\n\n"],[20422,30,""],[32372,2,""],[32373,33,""],[32374,48,""],[32376,942,""],[20111,18,""],[20141,13,""]]},{"span":[87827,87864],"parents":[86464],"agent":"Shawn O. Pearce","seqStart":7320,"ops":[[1499,0,"\\\n\t  source lib/cl"],[1518,0,"ss.tcl \\; \\\n\t  a"],[1558,0,"\\\n\t"]]},{"span":[87864,87912],"parents":[87826,87863],"agent":"Junio C Hamano","seqStart":29717,"ops":[[32345,37,""],[11131,0," symlinks.o"]]},{"span":[87912,88433],"parents":[87863],"agent":"Shawn O. Pearce","seqStart":7357,"ops":[[315,0,"PRELOAD_FILES = lib/class.tcl\n"],[698,0,"\tQUIET_2DEVNULL = 2>/dev/null\n"],[984,0,"_PA"],[988,0,"H_SQ = $(subst ','\\'',$(TCL_PATH))\nTCLT"],[1596,0,"if "],[1609,1,""],[1609,0,"$(f"],[1613,1,""],[1614,0,"ea"],[1617,1,""],[1617,0,"h"],[1619,8,""],[1619,0,"p,$(PRELOAD_FILES),"],[1639,2,""],[1639,0,"our"],[1643,1,""],[1643,0,"e"],[1645,0,"$p"],[1649,0,")"],[1697,0," $(QUIET_2DEVNULL); then : ok; \\\n\telse \\"],[1738,0,"\t echo 1>&2 \"    * $(TCL_PATH) failed; using unoptimized loading\"; \\"],[1807,0,"\t rm -f $@ ; \\\n\t echo '# Autogenerated by git-gui Makefile' >$@ && \\\n\t echo >>$@ && \\\n\t $(foreach p,$(PRELOAD_FILES) $(ALL_LIBFILES),echo '$(subst lib/,,$p)' >>$@ &&) \\\n\t echo >>$@ ; \\\n\tfi\n\n"],[2094,0,"lib/tclIndex: GIT-GUI-VARS\n"],[2205,0,"_PATH='$(TCL_PATH_SQ)') \\\n\t$(subst ','\\'',TCL"]]},{"span":[88433,88940],"parents":[87911,88432],"agent":"Junio C Hamano","seqStart":29765,"ops":[[32354,175,""],[32355,7,""],[32356,325,""]]},{"span":[88940,88961],"parents":[88939],"agent":"Daniel Barkalow","seqStart":374,"ops":[[10185,0,"\\\n\t"],[10197,0," remote.h"],[11154,0," remote.o"]]},{"span":[88961,88978],"parents":[88939],"agent":"Petr Baudis","seqStart":6609,"ops":[[7537,17,""]]},{"span":[88978,88996],"parents":[88977],"agent":"Junio C Hamano","seqStart":30272,"ops":[[7533,18,""]]},{"span":[88996,89013],"parents":[88939],"agent":"Lars Hjemli","seqStart":34,"ops":[[7711,0," git-submodule.sh"]]},{"span":[89013,89042],"parents":[88939],"agent":"Nguyen Thai Ngoc Duy","seqStart":0,"ops":[[8394,11,""],[8754,18,""]]},{"span":[89042,89331],"parents":[88432],"agent":"Shawn O. Pearce","seqStart":7878,"ops":[[507,1,""],[1144,0,"exedir    = $(dir "],[1164,0,"gitexecdir))share/git-gui/lib\nexedir_SQ = $(subst ','\\'',$(exedir))\n\n$("],[1308,0,"if te"],[1314,0,"t '$("],[1320,0,"xedir_SQ)' = '$(lib"],[1340,0,"ir_SQ)';"],[1349,0,"then \\\n\t\tGITGUI_RELATIVE=1; \\\n\tfi && \\\n\tsed "],[1571,0,"RELATIVE@@|'$$GITGUI_RELATIVE'|' \\\n\t\t-e $$GITGUI_RELATIVE's|@@GITGUI_"],[2534,0,"gitexecdir='$(gitexecdir_SQ)') \\\n\t$(subst ','\\'',"]]},{"span":[89331,89619],"parents":[89041,89330],"agent":"Junio C Hamano","seqStart":30290,"ops":[[32325,239,""],[32327,49,""]]},{"span":[89619,90251],"parents":[88960,89618],"agent":"Julian Phillips","seqStart":0,"ops":[[27285,0," test-date$X test-delta$X test-sha1$X test-match-trees$X"],[27595,54,""],[27596,27,""],[27626,5,""],[27627,8,""],[27650,66,""],[27652,12,""],[27657,13,""],[27658,17,""],[27659,69,""],[27660,25,""],[27669,4,""],[27669,0,"%"],[27685,6,""],[27687,53,""],[27687,0,"QU"],[27690,48,""],[27690,0,"E"],[27692,0,"_"],[27695,2,""],[27695,0,"NK"],[27698,2,""],[27763,158,""]]},{"span":[90251,90275],"parents":[88995,89012,90250],"agent":"Johannes Schindelin","seqStart":4064,"ops":[[7693,0," \\\n\tgit-filter-branch.sh"]]},{"span":[90275,90331],"parents":[88995,89012,90250],"agent":"Matthias Lederhofer","seqStart":164,"ops":[[30352,32,""],[30426,0,"$(TEST_PROGRAMS)\n\trm -f "]]},{"span":[90331,90351],"parents":[90330],"agent":"Johannes Sixt","seqStart":0,"ops":[[8460,20,""]]},{"span":[90351,90409],"parents":[90350],"agent":"Linus Torvalds","seqStart":9001,"ops":[[24347,0,"s: %.c GIT-CFLAGS\n\t$(QUIET_CC)$(CC) -S $(ALL_CFLAGS) $<\n%."]]},{"span":[90409,90680],"parents":[89330],"agent":"Alex Riesen","seqStart":993,"ops":[[54,0,"QUIET =\nQUIET_MSG = :\nifndef V\n    QUIET = @\n    QUIET_MSG = echo '   '\nendif\n"],[2958,0,"QUIET)$("],[3019,0,"QUIET)$(QUIET_MSG)INSTALL git-gui; $("],[3108,0,"QUIET)$("],[3146,0,"$(QUIET_MSG)INSTALL $p;\\\n\t   "],[3220,0,"\\\n\t    "],[3311,0,"QUIET)$("],[3368,0,"QU"],[3371,2,""],[3371,0,"E"],[3373,3,""],[3374,6,""],[3374,0,"$(foreach"],[3384,0,"p,"],[3399,1,""],[3401,40,""],[3418,0,"QUIET_MSG)INSTALL $p;\\\n\t    $("]]},{"span":[90680,90951],"parents":[90679],"agent":"Shawn O. Pearce","seqStart":8167,"ops":[[54,77,""],[55,1,""],[2878,8,""],[2931,37,""],[2985,8,""],[3015,27,""],[3016,2,""],[3060,7,""],[3142,8,""],[3193,2,""],[3194,1,""],[3194,0,"NS"],[3197,0,"ALL"],[3201,9,""],[3202,2,""],[3202,0,"-m644 "],[3221,0,"'"],[3224,0,"DESTDIR_SQ)$(libdir_SQ)'\n\t$(foreach p,$("],[3278,30,""]]},{"span":[90951,91014],"parents":[89618,90950],"agent":"Junio C Hamano","seqStart":30578,"ops":[[32324,1,""],[32327,62,""]]},{"span":[91014,91133],"parents":[91013],"agent":"Alex Riesen","seqStart":1264,"ops":[[13115,0,"NO_HSTRERROR = YesPlease\n\t"],[18644,0,"ifdef NO_HSTRERROR\n\tCOMPAT_CFLAGS += -DNO_HSTRERROR\n\tCOMPAT_OBJS += compat/hstrerror.o\nendif\n"]]},{"span":[91133,91247],"parents":[91132],"agent":"Junio C Hamano","seqStart":30641,"ops":[[4677,0,"ASCIIDOC8 if you want to format documentation with AsciiDoc 8\n#\n# Define "],[19481,0,"ifdef ASCIIDOC8\n\texport ASCIIDOC8\nendif\n\n"]]},{"span":[91247,91249],"parents":[90408,91013],"agent":"Johannes Sixt","seqStart":20,"ops":[[5994,1,""],[6040,1,""]]},{"span":[91249,91422],"parents":[91248],"agent":"Junio C Hamano","seqStart":30755,"ops":[[21161,0,"./generate-cmdlist.sh\n\ncommon-cmds.h: "],[20758,2,""],[20758,0,".o"],[20782,0,"GIT-CFLAGS\n\t"],[20796,1,""],[20796,0,"Q"],[20799,1,""],[20799,0,"ET_CC)$(CC) -DGI"],[20816,0,"_VERS"],[20822,0,"O"],[20824,0,"='\"$(GIT"],[20833,3,""],[20833,0,"VER"],[20837,0,"ION"],[20841,0,"\"'"],[20844,0,"\\\n\t\t"],[20850,0,"ALL_CFLA"],[20859,0,"S) -c $(filter %.c,$^)\n\ngit$X: git.o $(BU"],[20901,0,"L"],[20903,1,""],[20904,0,"N_O"],[20908,0,"J"],[20912,0,"$("],[20917,3,""],[20918,2,""],[20918,0,"IB"],[20921,0,")"],[21017,0,"git.o "]]},{"span":[91422,91471],"parents":[90274,91246,91421],"agent":"Matthias Lederhofer","seqStart":220,"ops":[[29590,0," configure"],[29731,0,"configure "],[29947,0,"configure \\\n\t\t$(GIT_TARNAME)/"]]},{"span":[91471,91498],"parents":[91470],"agent":"Johannes Schindelin","seqStart":4088,"ops":[[7495,0,"git-rebase--interactive.sh "]]},{"span":[91498,92608],"parents":[90950],"agent":"Shawn O. Pearce","seqStart":8438,"ops":[[561,0,"INSTALL_D0 = $(INSTALL) -d -m755 # space is required here\nINSTALL_D1 =\nINSTALL_R0 = $(INSTALL) -m644 # space is required here\nINSTALL_R1 =\nINSTALL_X0 = $(INSTALL) -m755 # space is requ"],[746,0,"red here\nINSTALL_X1 =\nINSTALL_L0 = rm -"],[786,0," # space is required here\nINSTALL_L1 = && l"],[830,0," # space is required here\nINSTALL_L2 =\nINSTALL_L3 =\n\nifn"],[898,0,"          = @\n\tQUIET"],[930,1,""],[930,0,"$(QUIET)"],[955,1,""],[955,0," &&"],[977,1,""],[977,0,"$(QUIET)"],[1006,1,""],[1006,0," &&"],[1028,1,""],[1028,0,"$(QUIET)"],[1062,1,""],[1062,0," &&"],[1096,0,"\n\tINSTALL_D0 = dir=\n\tINSTALL_D1 = && echo ' ' DEST $$dir && $(INSTALL) -d -m755 \"$$dir\"\n\tINSTALL_R0 = src=\n\tINSTALL_R1 = && echo '   ' INSTALL 644 `basename $$src` && $(INSTALL) -m644 $$src\n\tINSTALL_X0 = src=\n\tINSTALL_X1 = && echo '   ' INSTALL 755 `basename $$src` && $(INSTALL) -m755 $$src\n\n\tINSTALL_L0 = dst=\n\tINSTALL_L1 = && src=\n\tINSTALL_L2 = && dst=\n\tINSTALL_L3 = && echo '   ' 'LINK       ' `basename \"$$dst\"` '->' `basename \"$$src\"` && rm -f \"$$dst\" && ln \"$$src\" \"$$dst\"\n"],[3729,0,"QUIET)$("],[3744,0,"_D0"],[3748,10,""],[3779,0," $(INSTALL_D1)"],[3797,0,"QU"],[3800,0,"ET)$(I"],[3812,0,"_X0"],[3816,1,""],[3824,0,"$(INSTALL_X1) "],[3873,0,"QUIET)$("],[3912,6,""],[3912,0,"$(INSTALL_L0)"],[3960,6,""],[3960,0,"$(INSTALL_L1)"],[4013,0,"$(INSTALL_L2)"],[4061,1,""],[4061,0,"$(INSTALL_L3"],[4074,0," &&) true"],[4087,0,"QU"],[4090,0,"ET)$(I"],[4102,0,"_D0"],[4106,10,""],[4133,0," $(INSTALL_D1)"],[4151,0,"QUIET)$("],[4166,0,"_R0"],[4170,7,""],[4183,0,"$(INSTALL_R1) "],[4228,0,"QUIET)$("],[4272,0,"_R0"],[4276,6,""],[4276,0,"$p"],[4280,1,""],[4280,0,"(INSTALL_R1)"],[4321,1,""],[4321,0,"&&"],[4324,0," true"]]},{"span":[92608,92771],"parents":[90950],"agent":"Shawn O. Pearce","seqStart":9548,"ops":[[158,0,"uname_O := $(shell sh -c 'uname -o 2>/dev/null || echo not')\n\n"],[1370,0,"GITGUI_RELATIVE= && \\\n\t"],[1443,0,"if test \"$(uname_O)\" = Cygwin; \\\n\t\tthen GITGUI_RELATIVE= ; \\\n\t\telse "],[1533,0,"\tfi; \\\n\t"],[1601,0," "],[1618,0," "]]},{"span":[92771,92934],"parents":[91246,92770],"agent":"Junio C Hamano","seqStart":30928,"ops":[[32557,62,""],[32558,101,""]]},{"span":[92934,92949],"parents":[92933],"agent":"Matt Kraai","seqStart":0,"ops":[[4040,0,"_LINKER"],[4087,0,"\n#"],[4094,2,""],[4136,0,"\n#"],[4161,2,""]]},{"span":[92949,94167],"parents":[91470,92607,92770],"agent":"Junio C Hamano","seqStart":31091,"ops":[[32302,62,""],[32303,561,""],[32304,41,""],[32305,554,""]]},{"span":[94167,94183],"parents":[92948,94166],"agent":"しらいしななこ","seqStart":0,"ops":[[7795,0," \\\n\tgit-stash.sh"]]},{"span":[94183,94228],"parents":[91497,94182],"agent":"Linus Torvalds","seqStart":9059,"ops":[[28374,0,"remove-dashes:\n\t./fixup-builtins $(BUILT_INS)"]]},{"span":[94228,94286],"parents":[94227],"agent":"Matt McCutchen","seqStart":0,"ops":[[21250,37,""],[21270,17,""],[24568,2,""],[24568,0,".o"]]},{"span":[94286,94615],"parents":[94285],"agent":"Emil Medve","seqStart":0,"ops":[[6718,0,"RM = rm -f\n"],[20588,5,""],[20588,0,"$(RM)"],[20930,5,""],[20930,0,"$(RM)"],[21415,2,""],[21415,0,"$(RM)"],[21421,3,""],[21494,5,""],[21494,0,"$(RM)"],[21719,2,""],[21719,0,"$(RM)"],[21725,3,""],[22059,2,""],[22059,0,"$(RM)"],[22065,3,""],[22431,2,""],[22431,0,"$(RM)"],[22437,3,""],[22976,5,""],[22976,0,"$(RM)"],[24031,5,""],[24031,0,"$(RM)"],[24424,5,""],[24424,0,"$(RM)"],[24534,5,""],[24534,0,"$(RM)"],[26264,2,""],[26264,0,"$(RM)"],[26270,3,""],[26574,5,""],[26574,0,"$(RM)"],[26779,5,""],[26779,0,"$(RM)"],[26846,5,""],[26846,0,"$(RM)"],[29094,5,""],[29094,0,"$(RM)"],[29310,5,""],[29310,0,"$(RM)"],[30073,2,""],[30073,0,"$(RM)"],[30081,1,""],[30268,2,""],[30268,0,"$(RM)"],[30275,1,""],[30465,2,""],[30465,0,"$(RM)"],[30472,1,""],[30782,2,""],[30782,0,"$(RM)"],[30789,1,""],[30833,5,""],[30833,0,"$(RM)"],[30927,5,""],[30927,0,"$(RM)"],[30969,5,""],[30969,0,"$(RM)"],[30993,5,""],[30993,0,"$(RM)"],[31059,2,""],[31059,0,"$(RM)"],[31067,1,""],[31084,5,""],[31084,0,"$(RM)"],[31176,2,""],[31176,0,"$(RM)"],[31184,1,""],[31214,5,""],[31214,0,"$(RM)"],[31276,5,""],[31276,0,"$(RM)"],[31321,5,""],[31321,0,"$(RM)"],[31468,5,""],[31468,0,"$(RM)"],[31517,5,""],[31517,0,"$(RM)"]]},{"span":[94615,95257],"parents":[94614],"agent":"Sean","seqStart":262,"ops":[[4885,74,""],[8004,3,""],[8005,1,""],[8006,52,""],[8086,1,""],[8087,10,""],[8088,147,""],[8111,6,""],[8113,1,""],[9495,14,""],[9496,32,""],[9497,1,""],[9498,15,""],[19702,2,""],[19703,46,""],[21604,237,""]]},{"span":[95257,95291],"parents":[95256],"agent":"David Kastrup","seqStart":0,"ops":[[6665,0,"F"],[6668,0,"D = find\nIN"],[26161,4,""],[26161,0,"$(FIND)"],[26231,4,""],[26231,0,"$(FIND)"]]},{"span":[95291,95364],"parents":[95256],"agent":"Carlos Rica","seqStart":0,"ops":[[7542,11,""],[12034,0,"g.o \\\n\tbuiltin-ta"],[7542,8,""],[7543,13,""],[12181,0,"verify-tag.o \\\n\tbuiltin-"]]},{"span":[95364,95547],"parents":[95290],"agent":"Robert Schiele","seqStart":0,"ops":[[12311,4,""],[15830,0,"def ZLIB_PATH\n\tBASIC_CFLAGS += -I$(ZLIB_PATH)/include\n\tEXTLIBS += -L$(ZLIB_PATH)/lib $(CC_LD_DYNPATH)$(ZLIB_PATH)/lib\nendif\nEXTLIBS += -lz\n\nif"],[6125,0,"lib = lib\n"],[15403,0,"$("],[15408,0,")"],[15496,0,"$("],[15501,0,")"],[15530,0,"$("],[15535,0,")"],[15930,0,"$("],[15935,0,")"],[15966,0,"$("],[15971,0,")"],[16130,0,"$("],[16135,0,")"],[16167,0,"$("],[16172,0,")"],[16514,0,"$("],[16519,0,")"],[16549,0,"$("],[16554,0,")"]]},{"span":[95547,95568],"parents":[95546],"agent":"Johannes Schindelin","seqStart":4115,"ops":[[27321,0," test-absolute-path$X"]]},{"span":[95568,95630],"parents":[95567],"agent":"Thomas Schwinge","seqStart":0,"ops":[[14436,0,"GNU)\n\t# GNU/Hurd\n\tNO_STRLCPY=YesPlease\nendif\nifeq ($(uname_S),"]]},{"span":[95630,95722],"parents":[95629],"agent":"David Kastrup","seqStart":34,"ops":[[26379,0,"info:\n\t$(MAKE) -C Documentation info\n\n"],[29080,0,"install-info:\n\t$(MAKE) -C Documentation install-info\n\n"]]},{"span":[95722,95781],"parents":[95363,95721],"agent":"Junio C Hamano","seqStart":32309,"ops":[[27764,0,".PRECIOUS: $(patsubst test-%$X,test-%.o,$(TEST_PROGRAMS))\n\n"]]},{"span":[95781,96002],"parents":[95780],"agent":"Nicolas Pitre","seqStart":1152,"ops":[[5330,0,"# Define THREADED_DELTA_SEARCH if you have pthreads and wish to exploit"],[5402,0,"# parallel delta searching when packing objects.\n#\n\n"],[18903,0,"def THREADED_DELTA_SEARCH\n\tBASIC_CFLAGS += -DTHREADED_DELTA_SEARCH\n\tEXTLIBS += -lpthread\nendif\n\nif"]]},{"span":[96002,96248],"parents":[95780],"agent":"René Scharfe","seqStart":14,"ops":[[1221,0,"MEMMEM if you don't have memmem.\n#\n# Define NO_"],[12974,0,"MEMMEM = YesPlease\n\tNO_"],[13511,0,"MEMMEM = YesPlease\n\tNO_"],[14089,0,"O_MEMMEM = YesPlease\n\tN"],[14492,0,"MEMMEM = YesPlease\n\tNO_"],[14723,0,"MEMMEM = YesPlease\n\tNO_"],[18939,0,"ifdef NO_MEMMEM\n\tCOMPAT_CFLAGS += -DNO_MEMMEM\n\tCOMPAT_OBJS += compat/memmem.o\nendif\n"]]},{"span":[96248,96271],"parents":[96247],"agent":"Shawn O. Pearce","seqStart":9711,"ops":[[12840,0,"\tNO_MEMMEM = YesPlease\n"]]},{"span":[96271,96284],"parents":[95780],"agent":"Dmitry V. Levin","seqStart":0,"ops":[[9592,0,"ache-tree.h c"]]},{"span":[96284,96307],"parents":[96270,96283],"agent":"Robert Boone","seqStart":0,"ops":[[13992,0,"NO_MEMMEM = YesPlease\n\t"]]},{"span":[96307,96339],"parents":[96306],"agent":"Carlos Rica","seqStart":73,"ops":[[7572,13,""],[11881,0,"set.o \\\n\tbuiltin-re"]]},{"span":[96339,97085],"parents":[92607,92770],"agent":"Christian Stimming","seqStart":3043,"ops":[[2801,0,"XGETTEXT   ?= xgettext\nmsgsdir    ?= $(libdir)/msgs\nmsgsdir_SQ  = $(subst ','\\'',$(msgsdir))\nPO_TEMPLATE = po/git-gui.pot\nALL_POFILES = $(wildcard po/*.po)\nALL_MSGFILES = $(subst .po,.msg,$(ALL_POFILES))\n\n$(PO_TEMPLATE): $(SCRIPT_SH) $(ALL_LIBFILES)\n\t$(XGETTEXT) -kmc -LTcl -o $@ $(SCRIPT_SH) $(ALL_LIBFILES)\nupdate-po:: $(PO_TEMPLATE)\n\t$(foreach p, $(ALL_POFILES), echo Updating $p ; msgmerge -U $p $(PO_TEMPLATE) ; )\n$(ALL_MSGFILES): %.msg : %.po\n\t@echo Generating cata"],[3273,0,"og $@\n\tmsgfmt --stat"],[3294,0,"stics --tcl $< -l $("],[3315,0,"asename $(notdir $<)) -d $(dir $@)\n\nlib"],[4424,0," $(ALL_MSGFILES)"],[5059,0,"\t$(QUIET)$(INSTALL_D0)'$(DESTDIR_SQ)$(msgsdir_SQ)' $(INSTALL_D1)\n\t$(QUIET)$(foreach p,$(ALL_MSGFILES), $(INSTALL_R0)$p $(INSTALL_R1) '$(DESTDIR_SQ)$(msgsdir_SQ)' &&) true\n"],[5355,0," po/*.msg"]]},{"span":[97085,97344],"parents":[97084],"agent":"Shawn O. Pearce","seqStart":9734,"ops":[[1135,0,"MSGFMT0  = $(QUIET)printf '    MSGFMT %12s ' $@ &&\n\tQUIET_MSGFMT1  = 2>&1 | sed -e 's/fuzzy translations/fuzzy/' | sed -e 's/ messages//g'\n\tQUIET_"],[2970,0,"MSGFMT     ?= msgfmt\n"],[3418,6,""],[3418,0,"$(QUIET_MS"],[3429,18,""],[3429,0,"FMT0)"],[3435,9,""],[3435,0,"(MSGFMT)"],[3506,0," $(QUIET_MSGFMT1)"],[1185,0," v=`"],[1212,0,"` && echo \"$$v\""]]},{"span":[97344,97356],"parents":[92607,92770],"agent":"Shawn O. Pearce","seqStart":9993,"ops":[[1980,0,"gg_"],[1990,2,""],[2027,0," "],[2047,0,"gg_"],[3600,0,"gg_"]]},{"span":[97356,97361],"parents":[97343,97355],"agent":"Shawn O. Pearce","seqStart":10005,"ops":[[3026,1,""],[3026,0," "],[3031,0,"gg_"]]},{"span":[97361,98467],"parents":[97355],"agent":"Shawn O. Pearce","seqStart":10010,"ops":[[623,0,"RM_F      ?= rm -f\nRMDIR     ?= rmdir\n\n"],[984,0,"REMOVE_D0  = $(RMDIR) # space "],[1015,0,"s required here\nREMOVE_D1  = || true\nREMOVE_F0  = $(RM_F) # space is required here\nREMOVE_F1  =\nCLEAN_DST  = true\n\ni"],[1823,0,"\n\tCLEAN_DST = echo ' ' UNINSTALL\n\tREMOVE_D0 = dir=\n\tREMOVE_D1 = && "],[1891,0,"cho ' ' REMOVE $$dir && test -d \"$$dir\" && $(RMDIR) \"$$dir\" || true\n\tREMOVE_F0 = dst=\n\tREMOVE_F1 = && echo '   ' REMOVE `base"],[2017,0,"ame \"$$dst\"` && $(RM_F) \"$$"],[2045,0,"st\"\nend"],[4913,0,"uninstall:\n\t$(QUIET)$(CLEAN_DST) '$(DESTDIR_SQ)$(gitexecdir_SQ)'\n\t$(QUIET)$(REMOVE_F0)'$(DESTDIR_SQ)$(gitexecdir_SQ)'/git-gui $(REMOVE_F1)\n\t$(QUIET)$(foreach p,$(GITGUI_BUILT_INS), $(REMOVE_F0)'$(DESTDIR_SQ)$(gitexecdir_SQ)'/$p $(REMOVE_F1) &&) true\n\t$(QUIET)$(CLEAN_DST) '$(DESTDIR_SQ)$(libdir_SQ)'\n\t$(QUIET)$(REMOVE_F0)'$(DESTDIR_SQ)$(libdir_SQ)'/tclIndex $(REMOVE_F1)\n\t$(QUIET)$(foreach p,$(ALL_LIBFILES), $(REMOVE_F0)'$(DESTDIR_SQ)$(libdir_SQ)'/$(notdir $p) $(REMOVE_F1) &&) true\n\t$(QUIET)$(REMOVE_D0)'$(DESTDIR_SQ)$(gitexecdir_SQ)' $(REMOVE_D1)\n\t$(QUIET)$(REMOVE_D0)'$(DESTDIR_SQ)$(libdir_SQ)' $(REMOVE_D1)\n\t$(QUIET)$(REMOVE_D0)`dirname '$(DESTDIR_SQ)$(libdir_SQ)'` $(REMOVE_D1)\n\n"],[5781,0,"uninstall "]]},{"span":[98467,98695],"parents":[97360,98466],"agent":"Shawn O. Pearce","seqStart":11116,"ops":[[6341,0,"CLEAN_DST) '$(DESTDIR_SQ)$(msgsdir_SQ)'\n\t$(QUIET)$(foreach p,$(ALL_MSGFILES), $(REMOVE_F0)'$(DESTDIR_SQ)$(msgsdir_SQ)'/$(notdir $p) $("],[6482,0,"F1) &&) true\n\t$(QUIET)$(REMOVE_"],[6598,0,"msgsdir_SQ)' $(REMOVE_D1)\n\t$(QUIET)$(REMOVE_D0)'$(DESTDIR_SQ)$("]]},{"span":[98695,99329],"parents":[98694],"agent":"Shawn O. Pearce","seqStart":11559,"ops":[[2555,0,"TCLTK_PATH_SED = $(subst ','\\'',$(subst \\,\\\\,$(TCLTK_PATH)))\n"],[2696,0,"libdir_SED = $(subst ','\\'',$(subst \\,\\\\,$(gg_libdir)))"],[2762,0," "],[2803,38,""],[2804,20,""],[2804,0,"GITGUI_"],[2817,5,""],[2818,1,""],[2819,1,""],[2821,24,""],[2821,0,"="],[2824,2,""],[2825,7,""],[2825,0,"0"],[2827,1,""],[2842,4,""],[2843,1,""],[2843,0,":=\n"],[2847,1,""],[2849,2,""],[2850,2,""],[2850,0,"q"],[2852,1,""],[2852,0,"("],[2861,3,""],[2862,5,""],[2862,0,","],[2865,0,"gg_"],[2874,0,"))\n\tGITGUI"],[2885,5,""],[2885,0,"RELATIVE"],[2894,2,""],[2894,0,":= 1\n"],[2901,2,""],[2901,0,"dif\n"],[2906,2,""],[2908,2,""],[2909,2,""],[2909,0,"q"],[2911,1,""],[2911,0,"("],[2922,1,""],[2922,0,",Cygwin)\n\tGITGUI_SCRIPT"],[2946,0,":"],[2949,1,""],[2949,0,"`c"],[2953,0,"path --"],[2963,1,""],[2963,0,"dows"],[2968,4,""],[2968,0,"--absolu"],[2977,1,""],[2978,1,""],[2979,0,"\"$("],[2989,0,"SC"],[2992,3,""],[2992,0,"IP"],[2995,8,""],[2995,0,")\"`"],[2999,1,""],[3000,0,"if"],[3003,3,""],[3003,0,"q"],[3005,0,"($("],[3023,0,"),)\n\t\tgg_libdir :"],[3041,2,""],[3042,1,""],[3042,0,"$(shell cygpath --windows --absolute \"$(gg_libdir)\")"],[3096,1,""],[3096,0,"endi"],[3101,0,"\nend"],[3106,1,""],[3106,0,"f\n\n$(patsubst %.sh,%,$(SCRIPT_SH)) :"],[3143,1,""],[3143,0,"% : %.sh"],[3153,0,"$(QUIET_GEN)rm -"],[3170,1,""],[3171,0,"$@ $@+ "],[3232,0,"1,30s|^ argv0=$$0| argv0=$(GITGUI_SCRIPT)|' \\\n\t\t-e '1,30"],[3302,5,""],[3309,10,""],[3311,1,""],[3312,1,""],[3312,0,"'"],[3327,2,""],[3327,0,"ED"],[3330,0,"'\\''"],[3335,5,""],[3418,2,""],[3419,0,"("],[3435,1,""],[3435,0,")"],[3446,1,""],[3446,0,"'"],[3448,0,"("],[3464,1,""],[3464,0,")"],[3495,1,""],[3495,0,"ED"]]},{"span":[99329,99568],"parents":[99328],"agent":"Johannes Schindelin","seqStart":4172,"ops":[[54,0,"# Define NO_MSGFMT if you do not have msgfmt from the GNU gettext"],[120,0,"# package and want to use our rough pure Tcl po->msg translator.\n# TCL_PATH must be vaild for this to work.\n#\n\n"],[3825,0,"ifdef NO_"],[3840,0,"\n\tMSGFMT"],[3849,0,"?="],[3852,1,""],[3852,0,"$(TCL_PATH)"],[3864,0,"po/po2msg.sh\nelse\n\tMSGFMT"],[3900,0,"endif\n\n"]]},{"span":[99568,102363],"parents":[99567],"agent":"Shawn O. Pearce","seqStart":12193,"ops":[[6061,0,"INSTALL_R0)lib/git-gui.ico $(INSTALL_R1) '$(DESTDIR_SQ)$(libdir_SQ)'\n\t$(QUIET)$("],[6789,0,"REMOVE_F0)'$(DESTDIR_SQ)$(libdir_SQ)'/git-gui.ico $(REMOVE_F1)\n\t$(QUIET)$("],[340,0,"S := $(shell sh -c 'uname -s 2>/dev/null || echo not')\nuname_"],[487,6,""],[487,0,"MA"],[491,1,""],[492,0,":"],[499,1,""],[499,0,"gu"],[502,4,""],[503,7,""],[504,10,""],[519,1,""],[520,4,""],[520,0,"= gi"],[525,4,""],[525,0,"-ci"],[529,21,""],[529,0,"ool"],[819,0,"R"],[826,1,""],[833,0,"r"],[1071,0,"A0 = find # space is required here\nINSTALL_A1 = | cpio -pud\nINSTALL_"],[1332,0,"R"],[1463,37,""],[1464,13,""],[1466,0,"'"],[2014,0,"\tINSTALL_A0 = src="],[2042,0,"A1 = && echo '   ' INSTAL"],[2068,0," '   ' `basename \"$$src\"` && find \"$$src\" | cpio -pud\n\n\tINSTALL_L"],[2525,0,"R"],[2583,0,"TKFRAMEWORK = /Library/Frameworks/Tk.framework/Resources/Wish.app\n"],[2700,17,""],[3218,0,"GITGUI_MACOSXAPP :=\n"],[3500,0,"ifeq ($(uname_S),Darwin)"],[3525,0,"\tifeq ($(shell test -d "],[3550,1,""],[3550,0,"TKFRAMEWORK) && echo y),y)\n\t\tGITGUI_MACOSXAPP := YesPle"],[3606,0,"se\n\tendif\nendif\n\nifdef GITGUI_MACOSXAPP\nGITGUI_MAIN := gi"],[3664,0,"-gui.tcl\n\ngit-gui: GIT-VERSION-FILE GIT-GUI-VARS\n\t$(QUIET_GEN)rm -f $@ $@+ && \\\n\techo '#!$(SHELL_PATH_SQ)' >$@+ && \\\n\techo 'if test \"z$$*\" = zversion ||' >>$@+ && \\\n\techo '   test \"z$$*\" = z--ver"],[3860,0,"ion' >>$@+ && \\\n\techo then >>$@+ && \\\n\techo '\t'echo \\'git-g"],[3920,0,"i version '$(GITGUI_VERSION)'\\' >>$@+ && \\\n\techo else >>$@+ && \\\n\techo '\t'exec \\''$(li"],[4007,0,"dir_SQ)/Git Gui.app/Contents/MacOS/Wish'\\' \\\n\t\t'\"$$0\" \"$$@\"' >>$@+ && \\\n\techo fi >>$@+ && \\\n\tchmod +x $@+ && \\\n\tmv $@+ $@\n\nGit\\ Gui.app: GIT-VERSION-FILE GIT-GUI-VARS \\\n\t\tmacosx/Info.pli"],[4196,1,""],[4196,0,"\\\n\t\tmacosx/git-gui"],[4215,0,"icns \\\n\t\tmacosx/AppMain.tcl \\\n\t\t$(TKFRAMEWORK)/Contents/MacOS/Wi"],[4281,0,"\n\t$(QUIET_GEN)rm -rf '$@' '$@'+ && \\\n\tmkdir -p '$@'+/Contents/MacOS && \\\n\tmkdir -p '$@'+/Contents/Resources/Scripts && \\\n\tcp '$(subst '"],[4417,1,""],[4417,0,"'\\''"],[4424,0,"TKFRAMEWORK))/Contents/MacO"],[4452,0,"/Wish' \\\n\t\t'$@'+/Contents/MacOS && \\\n\tcp macosx/git-gui.icns '$@'+/"],[4520,0,"ontents/Resources && \\\n\tsed -e 's/@@GITGUI_VE"],[4566,0,"S"],[4568,1,""],[4568,0,"ON@@/$(GI"],[4578,0,"GUI"],[4582,0,"VER"],[4586,1,""],[4586,0,"ION"],[4590,0,"/g' \\\n\t\tmacosx/Info.plist \\\n\t\t>'$@'+/Contents/Info.plist && \\\n\tsed -e 's|@@gitexecdir@@|$(gitexecdir_SQ)|' \\\n\t\t-e 's|@@GITGUI_LIBDIR@@|$(libdir_SED"],[4738,0,"|'"],[4741,1,""],[4741,0,"\\\n\t\tmacosx/AppMain.tcl"],[4764,1,""],[4764,0,"\\\n\t\t>'$@'+/Contents/Resources/Scripts/AppMain.tcl && \\\n\tmv '$@'+"],[4829,0,"'$@'\nendif\n\n$(GITGUI_MAIN)"],[4857,1,""],[4857,0,"git-gui"],[4867,0," GIT-VERSION-FILE GIT-GUI-VARS"],[5251,2,""],[5251,0,"git-gui"],[5303,74,""],[5974,0," GIT-GUI-VARS"],[6401,101,""],[6402,24,""],[6655,0,"\tGITGUI_MACOSXAPP=$(GITGUI_MACOSXAPP) \\\n"],[6915,0,"ifdef GITGUI_MACOSXAPP\nall:: git-gui Git\\ Gui.app\nendif\n"],[6979,3,""],[6979,0,"GITGUI"],[6986,5,""],[6986,0,"M"],[6988,2,""],[6988,0,"IN"],[7614,0,"ifdef GITGUI_MACOSXAPP\n\t$(QUIET)$(INSTALL_A0)'Git Gui.app' $(INSTALL_A1) '$(DESTDIR_SQ)$(libdir_SQ)'\n\t$(QUIET)$(INSTALL_X0)git-gui.tcl $(INSTALL_X1) '$(DESTDIR_SQ)$(libdir_SQ)'\nendif\n"],[8519,0,"ifdef GITGUI_MACOSXAPP\n\t$(QUIET)$(REMOVE_F0)'$(DESTDIR_SQ)$(libdir_SQ)/Git Gui.app' $(REMOVE_F1)\n\t$(QUIET)$(REMOVE_F0)'$(DESTDIR_SQ)$(libdir_SQ)'/git-gui.tcl $(REMOVE_F1)\nendif\n"],[9328,6,""],[9330,3,""],[9330,0,"RM"],[9333,1,""],[9334,1,""],[9334,0,"F) $(GIT"],[9343,2,""],[9343,0,"UI_"],[9347,1,""],[9347,0,"AIN"],[9375,5,""],[9375,0,"$(RM_RF)"],[9414,0,"ifdef GITGUI_MACOSXAPP\n\t$(RM_RF) 'Git Gui.app'* git-gui\nendif\n"]]},{"span":[102363,102891],"parents":[102362],"agent":"Steffen Prohaska","seqStart":0,"ops":[[3622,0,"ifneq (,$(findstring MINGW,$(uname_S)))\n\tNO_MSGFMT=1\nendif\n"],[3675,0,"\tGITGUI_WINDOWS_WRAPPER := Y"],[3704,0,"sPlease\ne"],[4937,0,"ifdef GITGUI_WINDOWS_WRAPPER\nGITGUI_MAIN := git-gui.tcl\n\ngit-gui: windows/git-gui.sh\n\tcp $< $@\nendif\n\n"],[7169,0,"ifdef GITGUI_WINDOWS_WRAPPER\n"],[7204,0,"git-gui\nendif\nall:: "],[7640,0,"ifdef GITGUI_WINDOWS_WRAPPER\n"],[7688,0,"R0)git-gui.tcl $(INSTALL_R1) '$(DEST"],[7725,0,"IR_SQ)$(gitexecdir_SQ)'\nendif\n\t$(QUIET)$(INSTALL_D"],[8686,0,"ifdef GITGUI_WINDOWS_WRAPPER\n\t$(QUIET)$(REMOVE_F0)'$(DESTDIR_SQ)$(gitexecdir_SQ)'/git-gui.tcl $(REMOVE_F1)\nendif\n"],[9951,0,"ifdef GITGUI_WINDOWS_WRAPPER\n\t$(RM_RF) git-gui\nendif\n"]]},{"span":[102891,103194],"parents":[102890],"agent":"Shawn O. Pearce","seqStart":14988,"ops":[[600,0,"NONTCL_LIBFILES = \\"],[620,0,"\tlib/git-gui."],[634,0,"co \\\n\t$(wildcard lib/win32_*.js) \\\n#end NONTCL_LIBFILES\n\ni"],[7943,80,""],[8205,0," $(NONTCL_LIBFILES)"],[8949,74,""],[9162,0," $(NONTCL_LIBFILES)"],[2797,0,"-include config.mak\n\n"]]},{"span":[103194,103200],"parents":[103193],"agent":"brian m. carlson","seqStart":0,"ops":[[6192,3,""],[6234,0,"< $"]]},{"span":[103200,103206],"parents":[103199],"agent":"Robert Schiele","seqStart":185,"ops":[[975,0," "],[1044,0," "],[1113,0," "],[1891,0," "],[1996,0," "],[2099,0," "]]},{"span":[103206,103353],"parents":[103205],"agent":"Mark Levedahl","seqStart":0,"ops":[[3364,59,""],[3450,29,""],[3516,0,"else\n\tifeq ($(exedir),$(gg_libdir))\n\t\tGITGUI_RELATIVE := 1\n"]]},{"span":[103353,103401],"parents":[103352],"agent":"Mark Levedahl","seqStart":147,"ops":[[3237,0,"_sed_in"],[3466,0,"_sed_in"],[3596,0,"\tgg_libdir_sed_in := $(gg_libdir)\n"]]},{"span":[103401,103505],"parents":[103400],"agent":"Shawn O. Pearce","seqStart":15302,"ops":[[5735,0,"\tifeq ($(shell $(MSGFMT) >/dev/null 2>&1 || echo $$?),127)\n\t\tMSGFMT := $(TCL_PATH) po/po2msg.sh\n\tendif\n"],[1780,0,"*"]]},{"span":[103505,103923],"parents":[103504],"agent":"Jay Soffian","seqStart":0,"ops":[[456,0,"uname_R := $(shell sh -c 'uname -r 2>/dev/null || echo not')\n"],[2741,0,"\nifeq ($(uname_S),Darwin)\n\t"],[2834,0,"\tifeq ($(shell expr \"$(uname_R)\" : '9\\.'),2)\n\t\tTKFRAMEWORK = /System/Library/Frameworks/Tk.framework/Resources/Wish\\ Shell.app\n\tendif\n\tTKEXECUTABLE = $(shell basename \"$(TKFRAMEWORK)\" .app)\nendif\n"],[4559,2,""],[4559,0,"$(sub"],[4565,1,""],[4565,0,"t \\,,$(TKEXECUTABLE))"],[4817,4,""],[4817,0,"$(TKEXECUTABLE)"],[4975,0,"subst \\,,$("],[4997,1,""],[5014,4,""],[5014,0,"$(TKEXECUTABLE)))"],[5172,0,"-e 's/@@GITGUI_TKEXECUTABLE@@/$(TKEXECUTABLE)/g' \\\n\t\t"]]},{"span":[103923,104460],"parents":[103922],"agent":"Shawn O. Pearce","seqStart":15406,"ops":[[2705,0,"TK"],[2713,0,"?="],[2716,0,"wish\nifeq (./,$(dir $(TCLTK_PATH)))\n\tTCL_PATH"],[2765,0,"$(subs"],[2772,0," wish,t"],[2783,1,""],[2783,0,",$("],[2796,0,"))\nelse\n\tTCL_PATH"],[2817,0,"$(dir $(TCLTK_PATH))$(notdir $(subst "],[2858,0,",tclsh,$(TCLTK_PATH)))\nendif"],[3887,0,"\n"],[3889,0,"# Is this a Cy"],[3904,0,"win Tcl/Tk binary?  If so it knows how to do\n\t# POSIX path translation just like cy"],[3988,0,"path does and we must\n\t# keep libdir in POSIX format so Cygwin packages of git-gui\n\t# work no matter where the user installs them.\n\t#\n\tifeq ($(shell echo 'puts [file normalize /]' | '$(TCL_PATH_SQ)'),$(shell cygpath --mixed --absolute /))\n\t\tgg"],[4251,0,"gg_libdir)\n\telse\n\t\tgg_libdir_sed_in := $("],[4343,0,"\tendif\n"]]},{"span":[104460,104614],"parents":[104459],"agent":"Shawn O. Pearce","seqStart":15943,"ops":[[6768,0,"\tifeq (msgfmt,$(MSGFMT))\n\tifeq ($(shell $(MSGFMT) --tcl -l C -d . /dev/null 2>/dev/null || echo $?),1)\n\t\tMSGFMT := $(TCL_PATH) po/po2msg.sh\n\tendif\n\tendif\n"]]},{"span":[104614,104755],"parents":[104613],"agent":"Junio C Hamano","seqStart":42302,"ops":[[6668,28,""],[6669,12,""],[6670,87,""],[6728,3,""],[6728,0,";"],[6736,0,"$"],[6740,1,""],[6740,0,"0"],[6779,7,""]]},{"span":[104755,104891],"parents":[104754],"agent":"Steffen Prohaska","seqStart":528,"ops":[[880,0,"ifeq (git-core,$(notdir $(gitexecdir)))\n\tsharedir := $(dir $(patsubst %/,%,$(dir $(gitexecdir))))share\nelse\n"],[1033,0,"endif\n"],[4782,0,"\tGITGUI_RELATIVE := 1\n"]]},{"span":[104891,105059],"parents":[104890],"agent":"Alexander Gavrilov","seqStart":0,"ops":[[8761,0,"INSTALL_X0)git-gui--askpass $(INSTALL_X1) '$(DESTDIR_SQ)$(gitexecdir_SQ)'\n\t$(QUIET)$("],[9934,0,"REMOVE_F0)'$(DESTDIR_SQ)$(gitexecdir_SQ)'/git-gui--askpass $(REMOVE_F1)\n\t$(QUIET)$("]]},{"span":[105059,105284],"parents":[105058],"agent":"Daniel A. Steffen","seqStart":0,"ops":[[3110,3,""],[3110,0,"cho"],[3127,1,""],[3127,0,"|"],[3129,0,"awk -F. "],[3138,0,"{if ($$1 >= "],[3151,2,""],[3151,0,") print \"y\"}"],[3165,0,"_$(shell test -d $(TKFRAMEWORK) || echo n)"],[3208,1,""],[3208,0,"y_n"],[3283,0,".app\n\t\tifeq ($(shell test -d $(TKFRAMEWORK) || echo n),n)\n\t\t\tTKFRAMEWORK = /System/Library/Frameworks/Tk.framework/Resources/Wish"],[3425,0,"\tendif\n\t"]]},{"span":[105284,105362],"parents":[105283],"agent":"Jonathan Nieder","seqStart":0,"ops":[[249,1,""],[253,17,""],[8441,1,""],[8446,13,""],[11608,32,""],[11617,1,""],[11622,13,""]]},{"span":[105362,105406],"parents":[105361],"agent":"Matthieu Moy","seqStart":0,"ops":[[6571,0,"s|@@SHELL_PATH@@|$(SHELL_PATH_SQ)|' \\\n\t\t-e '"]]},{"span":[105406,105409],"parents":[105405],"agent":"Christian Couder","seqStart":704,"ops":[[7911,1,""],[8578,1,""],[8636,1,""]]},{"span":[105409,105411],"parents":[105408],"agent":"Masanari Iida","seqStart":0,"ops":[[206,0,"l"],[208,1,""]]},{"span":[105411,105484],"parents":[105410],"agent":"David Turner","seqStart":0,"ops":[[5374,0,"libdir=\"$${GIT_GUI_LIB_DIR:-$(libdir_SQ)}\"' >>$@+ && \\\n\techo '\t"],[5444,0,"\""],[5446,1,""],[5447,1,""],[5447,0,"$"],[5454,4,""],[5511,1,""],[5511,0,"\""]]},{"span":[105484,105492],"parents":[105483],"agent":"Olaf Hering","seqStart":0,"ops":[[8150,0,"sort $("],[8170,0,")"]]},{"span":[105492,105538],"parents":[105491],"agent":"Anders Kaseorg","seqStart":0,"ops":[[7898,3,""],[7898,0,"$(pa"],[7903,1,""],[7903,0,"subst "],[7910,1,""],[7910,0,"ib/%,%,$(sort $(ALL_LIBFILES)))"]]},{"span":[105538,105588],"parents":[105491],"agent":"Johannes Schindelin","seqStart":4474,"ops":[[4925,0,"ifeq ($(shell expr \"$(uname_R)\" : '1\\.'),2)\n"],[4982,0,"endif\n"]]},{"span":[105588,105624],"parents":[105537,105587],"agent":"Ramsay Jones","seqStart":227,"ops":[[289,0,"ifneq ($(MAKECMDGOALS),clean)\n"],[345,0,"endif\n"]]},{"span":[105624,106740],"parents":[96283,98466],"agent":"Junio C Hamano","seqStart":32368,"ops":[[32174,387,""],[32175,191,""],[32176,538,""]]},{"span":[106740,107482],"parents":[96001,96338,106739],"agent":"Daniel Barkalow","seqStart":395,"ops":[[8422,18,""],[8608,16,""],[8618,4,""],[8619,13,""],[9336,46,""],[9337,7,""],[9338,42,""],[25472,132,""],[25473,29,""],[25478,23,""],[31972,34,""],[15619,1,""],[15632,0,"BASIC_CFLAGS += -DNO_CURL\nelse\n\t"],[15888,2,""],[15888,0,"BUILTIN_"],[15897,4,""],[15897,0,"BJ"],[15904,1,""],[15904,0,"bu"],[15907,0,"l"],[15909,0,"in"],[15922,0,".o\n\tEXTLIBS += "],[15938,1,""],[15938,0,"(CURL_LIBCURL)\n\tLIB_OBJS += http.o walker.o http-walker.o"],[25375,1,""],[25375,0,"walk"],[25380,3,""],[25380,0,"r"],[25390,1,""],[25390,0,"walk"],[25395,3,""],[25395,0,"r"],[25640,1,""],[25640,0,"walk"],[25645,3,""],[25645,0,"r"],[25669,56,""],[25670,119,""],[25875,1,""],[25875,0,"walk"],[25880,3,""],[25880,0,"r"],[11348,0,"pack.o \\\n\tbuiltin-fetch-"],[10909,0," \\\n\ttransport.o"]]},{"span":[107482,107491],"parents":[107481],"agent":"Johannes Schindelin","seqStart":4136,"ops":[[10924,0," bundle.o"]]},{"span":[107491,107526],"parents":[107490],"agent":"Daniel Barkalow","seqStart":1137,"ops":[[7511,16,""],[11355,0,".o \\\n\tbuiltin-fetch"]]},{"span":[107526,107538],"parents":[107525],"agent":"Shawn O. Pearce","seqStart":11344,"ops":[[9936,0," transport.h"]]},{"span":[107538,107565],"parents":[107537],"agent":"Johannes Schindelin","seqStart":4145,"ops":[[10929,0," walker.o"],[16045,9,""],[25937,9,""]]},{"span":[107565,107576],"parents":[106739],"agent":"Jim Meyering","seqStart":100,"ops":[[22091,0,"MAKEFLAGS= "]]},{"span":[107576,107598],"parents":[96001,96338,107575],"agent":"Matt Kraai","seqStart":15,"ops":[[8349,22,""]]},{"span":[107598,107689],"parents":[107597],"agent":"Kristof Provost","seqStart":0,"ops":[[27087,0,"cscope:\n\t$(RM) cscope*\n\t$(FIND) . -name '*.[hcS]' -print | xargs cscope -b\n\n"],[31448,0," cscope*"],[32038,0,"cscope "]]},{"span":[107689,107734],"parents":[107575],"agent":"Mathias Megyei","seqStart":0,"ops":[[30643,0,"dist"],[30653,0," clean"],[30667,0,"configure\n\nclean:\n\t$(RM) "],[30942,10,""]]},{"span":[107734,107937],"parents":[107564,107688,107733],"agent":"Shawn O. Pearce","seqStart":11356,"ops":[[1551,0,"MKDTEMP if you don't have mkdtemp in the C library.\n#\n# Define NO_"],[13261,0,"MKDTEMP = YesPlease\n\t\tNO_"],[13421,0,"MKDTEMP = YesPlease\n\t\tNO_"],[17939,0,"MKDTEMP\n\tCOMPAT_CFLAGS += -DNO_MKDTEMP\n\tCOMPAT_OBJS += compat/mkdtemp.o\nendif\nifdef NO_"]]},{"span":[107937,108041],"parents":[107688,107733],"agent":"Luke Lu","seqStart":0,"ops":[[6514,0,"PROJECT_MAXDEPTH = 2007\nGITW"],[6543,0,"B_E"],[23536,0,"\"++GITWEB_PROJECT_MAXDEPTH++\"|$(GITWEB_PROJECT_MAXDEPTH)|g' \\\n\t    -e 's|"]]},{"span":[108041,108193],"parents":[107733],"agent":"Alex Riesen","seqStart":1383,"ops":[[21902,0," perl/Makefile perl/Makefile.PL"],[26281,58,""],[26282,25,""],[26283,14,""],[26284,24,""]]},{"span":[108193,108243],"parents":[107936,108040,108192],"agent":"Linus Torvalds","seqStart":9104,"ops":[[10023,0," diffcore.h"],[26348,13,""],[26349,12,""],[10034,0," hash.h"],[10350,0,"hash.o "]]},{"span":[108243,108265],"parents":[107936,108040,108192],"agent":"Gerrit Pape","seqStart":97,"ops":[[8144,22,""]]},{"span":[108265,108297],"parents":[107936,108040,108192],"agent":"Pierre Habouzit","seqStart":0,"ops":[[10012,0,"parse-options.h "],[11029,0," parse-options.o"]]},{"span":[108297,108318],"parents":[108296],"agent":"Johannes Schindelin","seqStart":4411,"ops":[[27960,0," test-parse-options$X"]]},{"span":[108318,108452],"parents":[108242,108264,108317],"agent":"Daniel Barkalow","seqStart":1172,"ops":[[8564,18,""],[11875,0,"eek-remote.o \\\n\tbuiltin-p"],[12005,0,"send-pack.o \\\n\tbuiltin-"],[7608,20,""],[11697,0,"ls-remote.o \\\n\tbuiltin-"],[11863,25,""]]},{"span":[108452,108457],"parents":[108242,108264,108317],"agent":"Junio C Hamano","seqStart":33484,"ops":[[11048,0," ws.o"]]},{"span":[108457,108466],"parents":[108242,108264,108317],"agent":"Johannes Schindelin","seqStart":4432,"ops":[[10330,0,"pretty.o "]]},{"span":[108466,108528],"parents":[108192],"agent":"Junio C Hamano","seqStart":33489,"ops":[[25897,0,"builtin-revert.o builtin-runstatus.o wt-status.o: wt-status.h\n"]]},{"span":[108528,108611],"parents":[108527],"agent":"Jonas Fonseca","seqStart":33,"ops":[[4757,0,"DOCBOOK_XSL_172 if you want to format man pages with DocBook XSL v1.72.\n#\n# Define "]]},{"span":[108611,108746],"parents":[108192],"agent":"David Symonds","seqStart":0,"ops":[[4032,0,"DEFLATE_BOUND if your zlib does not have deflateBound.\n#\n# Define NO_"],[18372,0,"NO_DEFLATE_BOUND\n\tBASIC_CFLAGS += -DNO_DEFLATE_BOUND\nendif\n\nifdef "]]},{"span":[108746,109074],"parents":[108465,108527,108745],"agent":"René Scharfe","seqStart":260,"ops":[[1271,0,"CHRNUL if you don't have strchrnul.\n#\n# Define NO_STR"],[13172,0,"\tNO_STRCHRNUL = YesPlease\n"],[13355,0,"STRCHRNUL = YesPlease\n\tNO_"],[13969,0,"TRCHRNUL = YesPlease\n\tNO_S"],[14439,0,"NO_STRCHRNUL = YesPlease\n\t"],[14621,0,"O_STRCHRNUL = YesPlease\n\tN"],[15053,0,"CHRNUL = YesPlease\n\tNO_STR"],[15310,0,"CHRNU"],[15316,0," = YesPlease\n\tNO_STRL"],[19864,0,"ifdef NO_STRCHRNUL\n\tCOMPAT_CFLAGS += -DNO_STRCHRNUL\n\tCOMPAT_OBJS += compat/strchrnul.o\nendif\n"]]},{"span":[109074,109402],"parents":[109073],"agent":"Andreas Ericsson","seqStart":741,"ops":[[1271,53,""],[13119,24,""],[13120,2,""],[13259,26,""],[13846,26,""],[14308,26,""],[14449,26,""],[14850,26,""],[15101,5,""],[15102,21,""],[19616,1,""],[19617,1,""],[19618,12,""],[19619,66,""],[19620,13,""]]},{"span":[109402,110068],"parents":[108465,108527,108745],"agent":"Junio C Hamano","seqStart":33551,"ops":[[32247,0,"("],[32289,2,""],[32426,0,"git-merge-subtree | "],[32516,0,"base--interactive | \\\n\t\tgit-re"],[32823,0,"; \\\n\t( \\\n\t\tsed -e '1,/^__DATA__/d' \\\n\t\t    -e 's/[ \t].*//' \\\n\t\t    -e 's/^/listed /' Documentation/cmd-list.perl; \\\n\t\tls -1 Documentation/git*txt | \\\n\t\tsed -e 's|Documentation/|documented |' \\\n\t\t    -e 's/\\.txt//'; \\\n\t) | while read how cmd; \\\n\tdo \\\n\t\tcase \"$$how,$$cmd\" in \\\n\t\t*,git-citool | \\\n\t\t*,git-gui | \\\n\t\tdocumented,gitattributes | \\\n\t\tdocumented,gitignore | \\\n\t\tdocumented,gitmodules | \\\n\t\tdocumented,git-tools | \\\n\t\tsentinel,not,matching,is,ok ) continue ;; \\\n\t\tesac; \\\n\t\tcase \" $(ALL_PROGRAMS) $(BUILT_INS) git gitk \" in \\\n\t\t*\" $$cmd \"*)\t;; \\\n\t\t*) echo \"removed but $$how: $$cmd\" ;; \\\n\t\tesac; \\\n\tdone )"]]},{"span":[110068,110107],"parents":[110067],"agent":"Alex Riesen","seqStart":1535,"ops":[[28478,0,"test-parse-options$X: parse-options.o\n\n"]]},{"span":[110107,110264],"parents":[108610,109401,110106],"agent":"Johannes Sixt","seqStart":22,"ops":[[21123,40,""],[25854,0,"config.o: config.c GIT-CFLAGS\n\t$(QUIET_CC)$(CC) -o $*.o -c $(ALL_CFLAGS) -DETC_GITCONFIG='\"$(ETC_GITCONFIG_SQ)\"' $<\n\n"]]},{"span":[110264,110338],"parents":[108610,109401,110106],"agent":"Guido Ostkamp","seqStart":0,"ops":[[13382,0,"NO_MKDTEMP = YesPlease\n\t"],[13494,25,""],[13629,25,""]]},{"span":[110338,110688],"parents":[110337],"agent":"Junio C Hamano","seqStart":34217,"ops":[[9477,50,""],[21486,0,"\t$(QUIET_SUBDIR0)gitk-git $(QUIET_SUBDIR1) all\n"],[21743,152,""],[21744,33,""],[29105,4,""],[29105,0,"M"],[29107,2,""],[29107,0,"KE"],[29111,0,"-C "],[29119,1,""],[29119,0,"g"],[29121,2,""],[29121,0,"t"],[29123,17,""],[29125,11,""],[29125,0,"s"],[29127,1,""],[29127,0,"all"],[31893,1,""],[31894,0,"AKE"],[31899,0,"-C "],[31907,1,""],[31907,0,"g"],[31909,2,""],[31909,0,"t clean"]]},{"span":[110688,110720],"parents":[110337],"agent":"Shawn Bohrer","seqStart":0,"ops":[[7719,13,""],[11467,0,"lean.o \\\n\tbuiltin-c"]]},{"span":[110720,115577],"parents":[103193,110337],"agent":"Junio C Hamano","seqStart":34567,"ops":[[33638,313,""],[33639,280,""],[33640,13,""],[33641,4251,""]]},{"span":[115577,115619],"parents":[115576],"agent":"Thomas Harning","seqStart":0,"ops":[[8041,18,""],[11972,0,"erge-ours.o \\\n\tbuiltin-m"]]},{"span":[115619,115644],"parents":[108451,110263,110719,115618],"agent":"Johannes Schindelin","seqStart":4449,"ops":[[11593,0,"ast-export.o \\\n\tbuiltin-f"]]},{"span":[115644,115773],"parents":[115618],"agent":"Kristian Høgsberg","seqStart":0,"ops":[[7739,14,""],[9156,0,"git-status$X"],[11465,0,".o \\\n\tbuiltin-commit"],[12323,3,""],[12324,20,""],[23518,35,""],[23520,25,""]]},{"span":[115773,115784],"parents":[115772],"agent":"Shawn O. Pearce","seqStart":15291,"ops":[[8418,11,""]]},{"span":[115784,115792],"parents":[108610,108745],"agent":"Johannes Schindelin","seqStart":4441,"ops":[[4723,4,""],[4723,0,"ind"],[4727,0,"x"]]},{"span":[115792,115891],"parents":[108451,110263,110687,110719,115618,115791],"agent":"Junio C Hamano","seqStart":39424,"ops":[[9119,0,"git-peek-remote$X "],[22225,0," command-list.txt"],[32698,2,""],[32700,8,""],[32700,0,"#"],[32705,1,""],[32705,0,"c"],[32707,2,""],[32708,3,""],[32708,0,"m"],[32710,3,""],[32711,3,""],[32718,4,""],[32718,0,"txt"],[32846,2,""],[32848,8,""],[32848,0,"#"],[32903,1,""],[32903,0,"c"],[32905,2,""],[32906,3,""],[32906,0,"m"],[32908,3,""],[32909,3,""],[32916,4,""],[32916,0,"txt"]]},{"span":[115891,115908],"parents":[115643,115890],"agent":"Christian Couder","seqStart":458,"ops":[[33145,0,"*,git-help | \\\n\t\t"]]},{"span":[115908,116052],"parents":[115907],"agent":"Christian Couder","seqStart":475,"ops":[[6435,0,"htmldir=$(sharedir)/doc/git-doc\n"],[7076,0,"htmldir "],[8144,0," \\\n\tgit-browse-help.sh"],[20913,0,"htmldir_SQ = $(subst ','\\'',$(htmldir))\n"],[22726,0,"-e 's|@@HTMLDIR@@|$(htmldir_SQ)|g' \\\n\t    "]]},{"span":[116052,116054],"parents":[115907],"agent":"Robert Schiele","seqStart":183,"ops":[[28951,0," "],[29001,0," "]]},{"span":[116054,116055],"parents":[115783,116053],"agent":"Junio C Hamano","seqStart":39523,"ops":[[9124,0," "]]},{"span":[116055,116085],"parents":[116054],"agent":"Pascal Obry","seqStart":0,"ops":[[14060,0,"OLD_ICONV = UnfortunatelyYes\n\t"]]},{"span":[116085,116139],"parents":[116084],"agent":"Wincent Colaiuta","seqStart":0,"ops":[[13124,0,"ifneq ($(shell expr \"$(uname_R)\" : '9\\.'),2)\n\t\t"],[13201,0,"endif\n\t"]]},{"span":[116139,116148],"parents":[103205,116138],"agent":"Junio C Hamano","seqStart":39524,"ops":[[33580,6,""],[33582,3,""]]},{"span":[116148,116311],"parents":[116147],"agent":"Sergei Organov","seqStart":0,"ops":[[6339,0,"mandir = $(prefix)/share/man\n"],[20853,0,"mandir_SQ = $(subst ','\\'',$(mandir))\n"],[22170,0,"help.c "],[22190,0," GIT-CFLAGS\n\t$(QUIET_CC)$(CC) -o $*.o -c $(ALL_CFLAGS) '-DGIT_MAN_PATH=\"$(mandir_SQ)\"' $<"]]},{"span":[116311,116335],"parents":[108456,116310],"agent":"Gerrit Pape","seqStart":119,"ops":[[29414,0,"DESTDIR='$(DESTDIR_SQ)' "]]},{"span":[116335,116448],"parents":[108456,116051,116310],"agent":"Junio C Hamano","seqStart":39533,"ops":[[6368,0,"infodir = $(prefix)/share/info\n"],[20989,0,"infodir_SQ = $(subst ','\\'',$(infodir))\n"],[22423,0,"\\\n\t\t"],[22459,0,"\\\n\t\t'-DGIT_INFO_PATH=\"$(infodir_SQ)\"' "]]},{"span":[116448,116543],"parents":[116334,116447],"agent":"Junio C Hamano","seqStart":39646,"ops":[[8205,0,"-"],[32960,23,""],[32993,4,""],[32998,10,""],[32999,20,""],[33011,0,"\\\n\t\t"],[33019,5,""],[33019,0,"?*"],[33023,4,""],[33023,0,"?*"],[26996,20,""]]},{"span":[116543,116555],"parents":[116542],"agent":"Jeff King","seqStart":132,"ops":[[8198,0,"help--"],[8210,6,""]]},{"span":[116555,116596],"parents":[116554],"agent":"Charles Bailey","seqStart":63,"ops":[[25364,0,"-e 's|@@PERL@@|$(PERL_PATH_SQ)|g' \\\n\t    "]]},{"span":[116596,116620],"parents":[116595],"agent":"Pierre Habouzit","seqStart":32,"ops":[[33686,0,"cli | \\\n\t\tdocumented,git"]]},{"span":[116620,116679],"parents":[103352,116619],"agent":"Junio C Hamano","seqStart":39741,"ops":[[34019,59,""]]},{"span":[116679,118228],"parents":[73570,116678],"agent":"Junio C Hamano","seqStart":39800,"ops":[[51,1549,""]]},{"span":[118228,118309],"parents":[73633,118227],"agent":"Junio C Hamano","seqStart":41349,"ops":[[51,62,""],[34020,0,"\n"],[33014,18,""]]},{"span":[118309,118377],"parents":[118308],"agent":"Jakub Narebski","seqStart":484,"ops":[[1551,0,"UNSETENV if you don't have unsetenv in the C library.\n#\n# Define NO_"]]},{"span":[118377,118387],"parents":[118376],"agent":"Lars Hjemli","seqStart":51,"ops":[[11292,0," archive.o"]]},{"span":[118387,118435],"parents":[103400,118386],"agent":"Junio C Hamano","seqStart":41430,"ops":[[34079,48,""]]},{"span":[118435,118536],"parents":[118434],"agent":"Daniel Barkalow","seqStart":1306,"ops":[[9040,19,""],[9041,6,""],[12169,0,"erge-recursive.o \\\n\tbuiltin-m"],[11277,0," branch.o"],[7862,16,""],[11490,0,".o \\\n\tbuiltin-checkout"]]},{"span":[118536,118828],"parents":[118535],"agent":"Junio C Hamano","seqStart":41478,"ops":[[9072,0,"# List built-in command $C whose implementation cmd_$C() is not in\n# builtin-$C.o but is linked in as part of some other command.\n"],[9408,0,"git-merge-subtree$X \\\n\t"],[9585,37,""],[22713,102,""]]},{"span":[118828,118932],"parents":[103504,118434],"agent":"Junio C Hamano","seqStart":41770,"ops":[[34077,93,""],[34078,3,""],[34079,8,""]]},{"span":[118932,119300],"parents":[118931],"agent":"Robert Schiele","seqStart":191,"ops":[[1687,0,"S_SELECT_H if you don't have sys/select.h.\n#\n# Define NO_SY"],[18664,0,"SYS_SELECT_H\n\tBASIC_CFLAGS += -DNO_SYS_SELECT_H\nendif\nifdef NO_"],[15688,0,"eq ($(uname_S),HP-UX)\n\tNO_IPV6=YesPlease\n\tNO_SETENV=YesPlease\n\tNO_STRCASESTR=YesPlease\n\tNO_MEMMEM = YesPlease\n\tNO_STRLCPY = YesPlease\n\tNO_MKDTEMP = YesPlease\n\tNO_UNSETENV = YesPlease\n\tNO_HSTRERROR = YesPlease\n\tNO_SYS_SELECT_H = YesPlease\nendif\nif"]]},{"span":[119300,119312],"parents":[119299],"agent":"Mike Hommey","seqStart":0,"ops":[[27177,0," transport.o"]]},{"span":[119312,119397],"parents":[119311],"agent":"Christian Couder","seqStart":619,"ops":[[22881,0,"HTML_PATH=\"$(htmldir_SQ)\"' \\\n\t\t'-DGIT_"],[23551,42,""],[8325,1,""],[8325,0,"w"],[8327,2,""],[8327,0,"b"]]},{"span":[119397,119703],"parents":[119311],"agent":"Brian Downing","seqStart":0,"ops":[[5845,0,"# Define INTERNAL_QSORT to use Git's implementation of qsort(), which\n# is a simplified version of the merge sort used in glibc. This is\n# recommended if Git triggers O(n^2) behavior in your platform's qsort().\n#\n"],[20555,0,"ifdef INTERNAL_QSORT\n\tCOMPAT_CFLAGS += -DINTERNAL_QSORT\n\tCOMPAT_OBJS += compat/qsort.o\nendif\n"]]},{"span":[119703,119942],"parents":[119311],"agent":"Brandon Casey","seqStart":0,"ops":[[107,0,"FREAD_READS_DIRECTORIES if your are on a system which succeeds\n# when attempting to read from an fopen'ed directory.\n#\n# Define "],[18379,0,"FREAD_READS_DIRECTORIES\n\tCOMPAT_CFLAGS += -DFREAD_READS_DIRECTORIES\n\tCOMPAT_OBJS += compat/fopen.o\nendif\nifdef "]]},{"span":[119942,119970],"parents":[119311],"agent":"Martin Koegler","seqStart":0,"ops":[[10324,0," fsck.h"],[11368,0," fsck.o"],[10846,14,""]]},{"span":[119970,120376],"parents":[103922,119311],"agent":"Junio C Hamano","seqStart":41874,"ops":[[34456,273,""],[34457,133,""]]},{"span":[120376,120398],"parents":[119396,119702,120375],"agent":"Junio C Hamano","seqStart":42280,"ops":[[10536,0," ll-merge.h"],[11584,0," ll-merge.o"]]},{"span":[120398,121340],"parents":[104459,119311],"agent":"Junio C Hamano","seqStart":42443,"ops":[[34456,659,""],[34457,283,""]]},{"span":[121340,121368],"parents":[119396,119702,119941,120375,121339],"agent":"Andreas Ericsson","seqStart":1069,"ops":[[20978,0,"\tLIB_OBJS += thread-utils.o\n"]]},{"span":[121368,121379],"parents":[119396,119702,119941,120375,121339],"agent":"Jeff King","seqStart":144,"ops":[[11701,0," \\\n\talias.o"]]},{"span":[121379,121383],"parents":[121339],"agent":"Shawn O. Pearce","seqStart":16097,"ops":[[31129,0,"$(X)"]]},{"span":[121383,121418],"parents":[118827,121367,121378,121382],"agent":"Nicolas Pitre","seqStart":1373,"ops":[[10739,0," \\\n\tpack-revindex.h"],[11815,0," pack-revindex.o"]]},{"span":[121418,121454],"parents":[118827,121367,121378,121382],"agent":"Johannes Schindelin","seqStart":4524,"ops":[[8793,16,""],[12892,0,"remote.o \\\n\tbuiltin-"]]},{"span":[121454,121613],"parents":[118827,121367,121378,121382],"agent":"Jeff King","seqStart":155,"ops":[[22806,0," GIT-BUILD-OPTIONS"],[29202,0,"GIT-BUILD-OPTIONS: .FORCE-GIT-BUILD-OPTIONS\n\t@echo SHELL_PATH=\\''$(SHELL_PATH_SQ)'\\' >$@\n\n"],[33817,0," GIT-BUILD-OPTIONS"],[33936,0,".PHONY: .FORCE-GIT-BUILD-OPTIONS\n"]]},{"span":[121613,121627],"parents":[119969,121417,121612],"agent":"Junio C Hamano","seqStart":43539,"ops":[[11809,0,"fsck.o "],[11829,7,""]]},{"span":[121627,121756],"parents":[121626],"agent":"Alex Riesen","seqStart":1574,"ops":[[15305,0,"\tDIR_HAS_BSD_GROUP_SEMANTICS = Y"],[15338,0,"sPlease\ne"],[21234,0,"ifdef DIR_HAS_BSD_GROUP_SEMANTICS\n\tCOMPAT_CFLAGS += -DDIR_HAS_BSD_GROUP_SEMANTICS\nendif\n"]]},{"span":[121756,122090],"parents":[121626],"agent":"Michal Rokos","seqStart":43,"ops":[[107,0,"SNPRINTF_RETURNS_BOGUS if your are on a system which snprintf()\n# or vsnprintf() return -1 instead of number of characters which would\n# have been written to the final string if enough space had been available.\n#\n# Define "],[18994,0,"SNPRINTF_RETURNS_BOGUS\n\tCOMPAT_CFLAGS += -DSNPRINTF_RETURNS_BOGUS\n\tCOMPAT_OBJS += compat/snprintf.o\nendif\nifdef "]]},{"span":[122090,122244],"parents":[104613,121382],"agent":"Junio C Hamano","seqStart":43385,"ops":[[34463,154,""]]},{"span":[122244,122266],"parents":[120397,121755,122089,122243],"agent":"Junio C Hamano","seqStart":43553,"ops":[[12034,0,"ll-merge.o "],[12073,11,""]]},{"span":[122266,122271],"parents":[104754,121453,122265],"agent":"Junio C Hamano","seqStart":43575,"ops":[[35756,3,""],[35756,0,"sh"]]},{"span":[122271,122597],"parents":[122270],"agent":"Jeff King","seqStart":314,"ops":[[6408,0,"# Define NO_EXTERNAL_GREP if you don't want \"git grep\" to ever call"],[6476,0,"# your external grep (e.g., if your system lacks grep, if its grep is\n# broken, or spawning external process is slower than built-in grep git has).\n\n"],[21898,0,"ifdef NO_EXTERNAL_GREP\n\tBASIC_CFLAGS += -DNO_EXTERNAL_GREP\nendif\n"],[24880,0,"SHELL_PATH@|$(SHELL_PATH_SQ)|' \\\n\t    -e 's|@"]]},{"span":[122597,128993],"parents":[122270],"agent":"Junio C Hamano","seqStart":43580,"ops":[[10984,166,""],[11623,13,""],[11880,0," \\\n\tdiff.o diff-lib.o diffcore-break.o diffcore-order.o \\\n\tdiffcore-pickaxe.o diffcore-rename.o tree-diff.o combine-diff.o \\\n\tdiffcore-delta.o log-tree.o"],[8465,0,"+"],[8468,1,""],[8468,0,"git-am.sh"],[8478,1,""],[8478,0,"SCRIPT_SH += "],[8504,0,"\nSCRIPT_SH +="],[8518,3,""],[8530,2,""],[8531,1,""],[8531,0,"SCRIPT_SH += "],[8548,1,""],[8548,0,"filt"],[8554,0,"-branch.sh\nSCRIPT_SH += "],[8579,1,""],[8579,0,"it"],[8582,0,"l"],[8584,2,""],[8584,0,"st"],[8588,3,""],[8588,0,"ound"],[8595,0,"\nSCRIPT_SH +="],[8618,0,"-oc"],[8623,2,""],[8623,0,"pus"],[8629,0,"\nSCRIPT_SH +="],[8647,4,""],[8647,0,"m"],[8649,1,""],[8650,0,"g"],[8652,1,""],[8652,0,"-"],[8654,1,""],[8654,0,"ne-fil"],[8664,0,"\nSCRIPT_SH +="],[8678,3,""],[8682,3,""],[8682,0,"merge-reso"],[8693,0,"ve"],[8698,0,"\nSCRIPT_SH +="],[8716,0,"me"],[8719,4,""],[8719,0,"g"],[8724,0,"\nSCRIPT_SH +="],[8742,0,"me"],[8745,0,"g"],[8747,2,""],[8747,0,"-"],[8749,5,""],[8750,5,""],[8750,0,"up"],[8753,2,""],[8753,0,"d"],[8757,2,""],[8758,1,""],[8758,0,"SCRIPT_SH += "],[8775,0,"me"],[8778,0,"g"],[8780,4,""],[8780,0,"tool"],[8787,0,"\nSCRIPT_SH"],[8798,0,"+= "],[8805,0,"pa"],[8808,0,"s"],[8810,2,""],[8810,0,"-r"],[8813,0,"mote."],[8819,0,"h\nSCRIPT_SH += gi"],[8845,2,""],[8846,1,""],[8846,0,"SCRIPT_SH += "],[8863,5,""],[8863,0,"quil"],[8868,1,""],[8868,0,"im"],[8871,0,"ort"],[8877,0,"\nSCRIPT_SH +="],[8891,3,""],[8895,0,"reb"],[8899,2,""],[8900,6,""],[8900,0,"e--"],[8904,0,"n"],[8906,2,""],[8908,1,""],[8908,0,"activ"],[8917,0,"\nSCRIPT_SH +="],[8935,2,""],[8936,1,""],[8937,1,""],[8937,0,"ba"],[8940,5,""],[8940,0,"e"],[8944,0,"\nSCRIPT_SH +="],[8962,2,""],[8963,1,""],[8964,2,""],[8964,0,"pa"],[8967,5,""],[8967,0,"k"],[8971,2,""],[8972,1,""],[8972,0,"SCRIPT_SH += "],[8989,2,""],[8990,1,""],[8991,2,""],[8991,0,"qu"],[8995,1,""],[8995,0,"t-pul"],[9001,2,""],[9004,2,""],[9005,1,""],[9005,0,"SCRIPT_SH += "],[9022,2,""],[9023,0,"h-se"],[9028,3,""],[9029,2,""],[9029,0,"p"],[9033,0,"\nSCRIPT_SH +="],[9051,4,""],[9051,0,"s"],[9053,6,""],[9053,0,"ash"],[9059,0,"\nSCRIPT_SH +="],[9089,2,""],[9090,21,""],[9090,0,"SCRIPT_SH"],[9100,15,""],[9100,0,"+="],[9103,3,""],[9135,0,"+"],[9138,3,""],[9163,0,"\nSCRIPT_PERL +="],[9179,3,""],[9198,0,"\nSCRIPT_PERL +="],[9221,2,""],[9221,0,"ex"],[9227,0,"commit"],[9238,0,"\nSCRIPT_PERL +="],[9258,3,""],[9258,0,"cvs"],[9262,2,""],[9262,0,"mport"],[9272,2,""],[9273,1,""],[9273,0,"SCRIPT_PERL += "],[9306,0,"\nSCRIPT_PERL +="],[9326,3,""],[9326,0,"r"],[9328,9,""],[9328,0,"l"],[9330,1,""],[9330,0,"nk"],[9337,0,"\nSCRIPT_PERL +="],[9353,3,""],[9372,0,"\nSCRIPT_PERL +="],[9506,0,"Empty...\nEXTRA_PROGRAMS =\n\n# "],[9613,0,"+"],[9616,1,""],[9616,0,"$(EXTRA_PROGRAMS)"],[9634,1,""],[9634,0,"PROGRAMS += "],[9650,0,"daemon$X\nPROGRAMS += git-"],[9676,0,"ast-import$X\nPROGRAMS += git-f"],[9717,0,"\nPROGRAMS +="],[9730,3,""],[9747,0,"\nPROGRAMS +="],[9765,0,"map-se"],[9773,0,"$X\nPROGRAMS += git-ind"],[9804,0,"\nPROGRAMS +="],[9817,3,""],[9821,6,""],[9822,2,""],[9822,0,"e"],[9824,7,""],[9825,0,"e-"],[9828,2,""],[9828,0,"n"],[9830,1,""],[9831,3,""],[9831,0,"x"],[9834,2,""],[9835,1,""],[9835,0,"PROGRAMS += "],[9857,3,""],[9857,0,"tre"],[9861,1,""],[9863,0,"\nPROGRAMS +="],[9887,0,"\nPROGRAMS +="],[9912,0,"\nPROGRAMS +="],[9931,0,"ck-redundan"],[9943,0,"$X\nPROGRAMS += git-pat"],[9972,2,""],[9973,1,""],[9973,0,"PROGRAMS += "],[10003,0,"\nPROGRAMS"],[10013,3,""],[10013,0,"+= "],[10031,0,"\nPROGRAMS"],[10041,0,"+= "],[10055,0,"\nPROGRAMS +="],[10068,3,""],[10084,0,"\nPROGRAMS +="],[10097,3,""],[10114,2,""],[10115,1,""],[10115,0,"PROGRAMS += "],[10151,0,"\nPROGRAMS +="],[10164,3,""],[10174,14,""],[10179,20,""],[10181,2,""],[10182,45,""],[10190,4,""],[10191,3,""],[10191,0,"+= gi"],[10197,6,""],[10197,0,"-var$"],[10203,14,""],[10345,0,"+"],[10348,4,""],[10348,0,"$(patsubst bu"],[10362,0,"l"],[10364,0,"in"],[10367,1,""],[10367,0,"%."],[10370,3,""],[10370,0,",gi"],[10375,2,""],[10375,0,"%$X,$(BUILTIN_OBJS))\n\nBUILT_INS += gi"],[10413,0,"-"],[10416,0,"erry-pick"],[10427,0,"\nBUILT_INS +="],[10445,1,""],[10445,0,"c"],[10447,2,""],[10447,0,"erry"],[10453,0,"\nBUILT_INS +="],[10471,2,""],[10471,0,"format-p"],[10483,5,""],[10485,0,"\nBUILT_INS +="],[10503,0,"fs"],[10506,1,""],[10506,0,"k-obj"],[10512,3,""],[10512,0,"cts"],[10517,2,""],[10518,1,""],[10518,0,"BUILT_INS += "],[10554,0,"\nBUILT_INS +="],[10578,0,"\nBUILT_INS +="],[10596,0,"me"],[10599,0,"g"],[10601,2,""],[10602,6,""],[10602,0,"subtree"],[10611,0,"\nBUILT_INS +="],[10625,3,""],[10629,3,""],[10629,0,"pee"],[10634,0,"rem"],[10638,2,""],[10638,0,"t"],[10640,3,""],[10642,0,"\nBUILT_INS +="],[10660,2,""],[10660,0,"r"],[10662,3,""],[10662,0,"po"],[10665,1,""],[10665,0,"conf"],[10670,2,""],[10670,0,"g"],[10673,0,"\nBUILT_INS +="],[10691,8,""],[10691,0,"sh"],[10694,2,""],[10694,0,"w"],[10697,0,"\nBUILT_INS +="],[10723,0,"\nBUILT_INS +="],[10737,3,""],[10741,9,""],[10741,0,"wha"],[10745,12,""],[10745,0,"ch"],[10748,13,""],[10749,5,""],[10750,4,""],[10750,0,"ed"],[10754,17,""],[11190,0,"+"],[11193,3,""],[11202,0,"\nLIB_H += attr.h\nLIB_H"],[11225,0,"+= "],[11234,0,"\nLIB_H +="],[11244,0,"builtin.h\nLIB_H += "],[11270,0,"\nLIB_H +="],[11292,0,"\nLIB_H +="],[11310,0,"\nLIB_H +="],[11331,0,"\nLIB_H +="],[11343,0,"corate.h\nLIB_H += de"],[11368,0,"\nLIB_H +="],[11378,1,""],[11378,0,"diffco"],[11386,1,""],[11388,2,""],[11389,1,""],[11389,0,"LIB_H += "],[11404,0,"\nLIB_H +="],[11414,6,""],[11414,0,"dir"],[11419,0,"\nLIB_H"],[11426,2,""],[11426,0,"+= fs"],[11435,0,"\nLIB_H +="],[11445,0,"git-com"],[11453,1,""],[11453,0,"a"],[11456,1,""],[11456,0,"ut"],[11459,2,""],[11459,0,"l"],[11462,0,"\nLIB_H +="],[11472,4,""],[11472,0,"gr"],[11475,0,"p"],[11478,0,"\nLIB_H +="],[11488,3,""],[11488,0,"ha"],[11491,0,"h"],[11494,0,"\nLIB_H"],[11501,0,"+= "],[11518,0,"\nLIB_H"],[11525,10,""],[11525,0,"+="],[11528,6,""],[11528,0,"ll"],[11531,3,""],[11532,8,""],[11532,0,"e"],[11534,8,""],[11535,0,"e"],[11538,0,"\nLIB_H +="],[11548,0,"log-"],[11558,0,"\nLIB_H +="],[11568,6,""],[11569,1,""],[11570,4,""],[11572,0,"map"],[11577,0,"\nLIB_H +="],[11587,1,""],[11587,0,"obj"],[11591,6,""],[11591,0,"ct"],[11595,0,"\nLIB_H +="],[11605,9,""],[11605,0,"p"],[11607,1,""],[11607,0,"c"],[11611,0,"\nLIB_H +="],[11621,3,""],[11621,0,"pack"],[11626,1,""],[11628,0,"vind"],[11633,0,"x"],[11636,0,"\nLIB_H +="],[11646,1,""],[11646,0,"parse-opt"],[11656,1,""],[11656,0,"ons"],[11661,0,"\nLIB_H +="],[11674,0,"c"],[11677,1,""],[11678,0,"d"],[11680,1,""],[11682,0,"\nLIB_H"],[11689,2,""],[11689,0,"+= "],[11694,2,""],[11694,0,"th"],[11697,0,"lis"],[11701,4,""],[11703,0,"\nLIB_H"],[11710,3,""],[11710,0,"+= pkt-"],[11718,1,""],[11720,0,"e"],[11723,0,"\nLIB_H"],[11730,1,""],[11730,0,"+= progress.h"],[11744,1,""],[11744,0,"LIB_H += q"],[11755,0,"o"],[11757,2,""],[11757,0,"e"],[11760,0,"\nLIB_H"],[11767,0,"+= "],[11783,0,"\nLIB_H"],[11790,11,""],[11790,0,"+="],[11793,3,""],[11794,0,"efs"],[11799,0,"\nLIB_H +="],[11809,1,""],[11809,0,"r"],[11811,1,""],[11811,0,"m"],[11813,2,""],[11817,0,"\nLIB_H +="],[11827,4,""],[11829,1,""],[11829,0,"vi"],[11832,0,"ion"],[11837,0,"\nLIB_H +="],[11847,3,""],[11847,0,"run-com"],[11856,0,"nd.h\nLIB_H += s"],[11872,2,""],[11872,0,"deb"],[11876,1,""],[11876,0,"nd"],[11880,0,"\nLIB_H +="],[11890,0,"st"],[11893,5,""],[11893,0,"buf"],[11898,0,"\nLIB_H +="],[11908,1,""],[11908,0,"t"],[11910,11,""],[11910,0,"g"],[11913,0,"\nLIB_H +="],[11934,0,"\nLIB_H +="],[11944,6,""],[11944,0,"t"],[11947,0,"e"],[11950,0,"\nLIB_H"],[11957,6,""],[11957,0,"+="],[11960,5,""],[11960,0,"t"],[11962,1,""],[11963,6,""],[11963,0,"e-wal"],[11971,0,"\nLIB_H +="],[11981,3,""],[11981,0,"un"],[11988,0,"t"],[11991,4,""],[11992,1,""],[11992,0,"s.h\nLIB_H += utf8"],[12022,0,"+"],[12025,4,""],[12025,0,"a"],[12027,2,""],[12027,0,"ias"],[12032,0,"\nLIB_OBJS"],[12042,1,""],[12042,0,"+= all"],[12049,4,""],[12049,0,"c"],[12052,0,"\nLIB_OBJS +="],[12065,0,"ar"],[12068,3,""],[12068,0,"hiv"],[12072,2,""],[12074,0,"\nLIB_OBJS"],[12084,0,"+= ar"],[12090,5,""],[12090,0,"h"],[12092,1,""],[12092,0,"v"],[12094,0,"-tar"],[12100,0,"\nLIB_OBJS +="],[12113,1,""],[12114,0,"r"],[12117,0,"iv"],[12121,0,"zip.o\nLIB_OBJS += at"],[12143,2,""],[12145,0,"\nLIB_OBJS +="],[12166,0,"\nLIB_OBJS"],[12176,1,""],[12176,0,"+= blob.o"],[12186,2,""],[12186,0,"LIB_OBJS += br"],[12201,2,""],[12201,0,"nch"],[12206,0,"\nLIB_OBJS"],[12216,5,""],[12216,0,"+= bun"],[12223,1,""],[12224,2,""],[12224,0,"e"],[12227,0,"\nLIB_OBJS"],[12237,0,"+= cach"],[12245,1,""],[12245,0,"-"],[12248,1,""],[12248,0,"ee"],[12252,0,"\nLIB_OBJS +="],[12265,3,""],[12266,0,"olor.o\nLIB"],[12277,0,"OBJS += "],[12286,0,"o"],[12288,0,"bine-"],[12294,0,"iff"],[12299,0,"\nLIB_OBJS +="],[12312,0,"comm"],[12317,3,""],[12320,0,"\nLIB_OBJS +="],[12333,1,""],[12333,0,"config.o"],[12342,3,""],[12342,0,"LIB_OBJS += conn"],[12359,1,""],[12359,0,"c"],[12361,1,""],[12363,0,"\nLIB_OBJS +="],[12376,1,""],[12376,0,"co"],[12379,1,""],[12379,0,"v"],[12382,4,""],[12383,1,""],[12385,0,"\nLIB_OBJS +="],[12398,4,""],[12398,0,"copy"],[12404,0,"\nLIB_OBJS +="],[12417,5,""],[12418,1,""],[12418,0,"sum-"],[12428,2,""],[12429,12,""],[12429,0,"LIB_OBJS +="],[12441,7,""],[12443,3,""],[12443,0,"y"],[12445,6,""],[12446,2,""],[12448,0,"\nLIB_OBJS +="],[12461,1,""],[12461,0,"d"],[12463,6,""],[12467,0,"\nLIB_OBJS +="],[12480,6,""],[12482,4,""],[12482,0,"c"],[12484,2,""],[12484,0,"r"],[12486,7,""],[12487,4,""],[12490,2,""],[12491,8,""],[12491,0,"LIB_OBJS += "],[12504,1,""],[12504,0,"iffc"],[12509,1,""],[12511,4,""],[12511,0,"-"],[12513,1,""],[12513,0,"r"],[12515,0,"ak"],[12519,0,"\nLIB_OBJS +="],[12532,2,""],[12532,0,"dif"],[12536,1,""],[12536,0,"c"],[12538,1,""],[12538,0,"re"],[12541,1,""],[12541,0,"delt"],[12546,2,""],[12548,0,"\nLIB_OBJS"],[12558,5,""],[12558,0,"+= diffc"],[12567,1,""],[12567,0,"r"],[12569,1,""],[12569,0,"-"],[12571,1,""],[12572,2,""],[12573,5,""],[12574,0,"r"],[12577,0,"\nLIB_OBJS"],[12587,2,""],[12587,0,"+= dif"],[12594,2,""],[12594,0,"c"],[12596,1,""],[12597,2,""],[12597,0,"e"],[12599,0,"pi"],[12602,3,""],[12602,0,"k"],[12604,2,""],[12604,0,"xe"],[12608,0,"\nLIB_OBJS"],[12618,0,"+= "],[12623,0,"ffco"],[12628,7,""],[12629,0,"-"],[12631,1,""],[12632,3,""],[12633,2,""],[12633,0,"ame"],[12638,0,"\nLIB_OBJS +="],[12651,1,""],[12651,0,"diff-d"],[12658,0,"l"],[12660,2,""],[12660,0,"a"],[12663,5,""],[12663,0,"\nLIB"],[12668,0,"OBJS += dif"],[12680,0,"-l"],[12683,2,""],[12683,0,"b"],[12686,5,""],[12686,0,"\nLIB"],[12691,6,""],[12691,0,"OBJS"],[12696,5,""],[12696,0,"+= dif"],[12705,0,"\nLIB_OBJS"],[12715,8,""],[12715,0,"+="],[12718,1,""],[12718,0,"di"],[12721,2,""],[12723,0,"\nLIB_OBJS +="],[12736,4,""],[12737,5,""],[12738,3,""],[12738,0,"try"],[12743,0,"\nLIB_OBJS +="],[12769,0,"\nLIB_OBJS"],[12779,0,"+= exe"],[12786,4,""],[12786,0,"_cmd"],[12792,0,"\nLIB_OBJS +="],[12805,0,"fs"],[12808,3,""],[12808,0,"k"],[12811,0,"\nLIB_OBJS +="],[12824,3,""],[12824,0,"g"],[12827,6,""],[12827,0,"p"],[12830,0,"\nLIB_OBJS +="],[12843,1,""],[12843,0,"h"],[12845,3,""],[12845,0,"sh"],[12849,0,"\nLIB_OBJS +="],[12862,2,""],[12862,0,"h"],[12864,4,""],[12865,1,""],[12865,0,"p"],[12868,0,"\nLIB_OBJS +="],[12881,6,""],[12882,0,"de"],[12886,6,""],[12888,0,"\nLIB_OBJS +="],[12901,5,""],[12902,0,"n"],[12905,2,""],[12906,5,""],[12906,0,"p"],[12908,1,""],[12908,0,"la"],[12911,3,""],[12914,0,"\nLIB_OBJS +="],[12941,0,"\nLIB_OBJS += ll-merge.o\nLIB_OBJS += lockfile.o\nLIB_OBJS +="],[13000,0,"lo"],[13003,0,"-t"],[13007,0,"e.o\nLIB_OBJS += mailma"],[13032,0,"\nLIB_OBJS"],[13042,0,"+= "],[13058,0,"\nLIB_OBJS"],[13068,10,""],[13068,0,"+="],[13083,0,"\nLIB_OBJS +="],[13096,8,""],[13096,0,"objec"],[13104,0,"\nLIB_OBJS +="],[13117,0,"pack-c"],[13125,2,""],[13125,0,"ck"],[13129,0,"\nLIB_OBJS +="],[13142,2,""],[13147,1,""],[13149,0,"vind"],[13154,1,""],[13154,0,"x"],[13157,2,""],[13158,1,""],[13158,0,"LIB_OBJS += pa"],[13173,3,""],[13173,0,"k-w"],[13177,0,"ite"],[13182,0,"\nLIB_OBJS"],[13192,5,""],[13192,0,"+= p"],[13197,3,""],[13197,0,"ger"],[13202,0,"\nLIB_OBJS +="],[13215,0,"p"],[13218,4,""],[13218,0,"s"],[13221,1,""],[13221,0,"opt"],[13225,1,""],[13225,0,"ons"],[13230,0,"\nLIB_OBJS +="],[13243,0,"p"],[13245,1,""],[13245,0,"t"],[13248,2,""],[13248,0,"-d"],[13251,1,""],[13251,0,"l"],[13254,1,""],[13256,0,"\nLIB_OBJS +="],[13269,2,""],[13269,0,"p"],[13271,8,""],[13272,2,""],[13272,0,"ch-ids"],[13280,2,""],[13281,7,""],[13281,0,"LIB_OBJS += path-lis"],[13304,0,"\nLIB_OBJS +="],[13317,0,"p"],[13320,2,""],[13320,0,"h"],[13323,0,"\nLIB_OBJS +="],[13336,1,""],[13336,0,"pkt-lin"],[13344,1,""],[13344,0,"."],[13346,0,"\nLIB_OBJS += p"],[13361,1,""],[13361,0,"et"],[13364,1,""],[13364,0,"y"],[13367,0,"\nLIB_OBJS +="],[13390,0,"\nLIB_OBJS += quote.o\nLIB_OBJS +="],[13423,1,""],[13423,0,"reach"],[13429,1,""],[13429,0,"b"],[13431,1,""],[13431,0,"e.o\nLIB_OBJS += re"],[13450,1,""],[13450,0,"d-cache"],[13459,0,"\nLIB_OBJS +="],[13472,3,""],[13472,0,"reflog-wa"],[13482,2,""],[13483,0,".o\nLIB_OBJS += ref"],[13504,0,"\nLIB_OBJS +="],[13525,0,"\nLIB_OBJS +="],[13538,4,""],[13539,2,""],[13539,0,"evi"],[13543,1,""],[13543,0,"i"],[13545,2,""],[13545,0,"n"],[13548,0,"\nLIB_OBJS +="],[13561,1,""],[13561,0,"r"],[13564,4,""],[13564,0,"-c"],[13567,2,""],[13567,0,"mm"],[13570,4,""],[13570,0,"nd"],[13574,0,"\nLIB_OBJS"],[13584,3,""],[13584,0,"+= "],[13589,0,"rver"],[13594,3,""],[13595,1,""],[13596,1,""],[13596,0,"fo"],[13600,0,"\nLIB_OBJS +="],[13613,1,""],[13614,0,"etup"],[13620,0,"\nLIB_OBJS +="],[13633,0,"sh"],[13636,3,""],[13636,0,"1_f"],[13640,1,""],[13640,0,"l"],[13644,0,"\nLIB_OBJS +="],[13657,2,""],[13657,0,"sh"],[13660,0,"1_"],[13663,11,""],[13663,0,"a"],[13666,3,""],[13668,0,"\nLIB_OBJS"],[13678,0,"+= sh"],[13685,4,""],[13685,0,"l"],[13687,5,""],[13687,0,"w"],[13690,0,"\nLIB_OBJS +="],[13703,8,""],[13703,0,"s"],[13705,0,"deba"],[13711,2,""],[13713,0,"\nLIB_OBJS +="],[13726,6,""],[13726,0,"strbu"],[13734,0,"\nLIB_OBJS +="],[13747,5,""],[13747,0,"sym"],[13752,1,""],[13752,0,"nks"],[13757,0,"\nLIB_OBJS"],[13767,5,""],[13767,0,"+= tag."],[13775,0,"\nLIB_OBJS += t"],[13790,0,"ac"],[13793,2,""],[13793,0,".o\nLIB_OBJS += t"],[13810,1,""],[13811,1,""],[13811,0,"nsport"],[13819,0,"\nLIB_OBJS +="],[13832,0,"tree-"],[13841,1,""],[13841,0,"."],[13843,0,"\nLIB_OBJS += t"],[13859,4,""],[13860,1,""],[13862,0,"\nLIB_OBJS +="],[13875,9,""],[13875,0,"t"],[13878,0,"e"],[13880,3,""],[13880,0,"wal"],[13884,3,""],[13886,0,"\nLIB_OBJS"],[13896,4,""],[13896,0,"+= unpa"],[13904,1,""],[13904,0,"k-t"],[13909,2,""],[13910,1,""],[13910,0,"s.o\nLIB_OBJS += us"],[13929,1,""],[13929,0,"g"],[13933,0,"\nLIB_OBJS +="],[13946,0,"u"],[13948,6,""],[13949,1,""],[13949,0,"8"],[13952,0,"\nLIB_OBJS +="],[13965,1,""],[13965,0,"walker."],[13973,2,""],[13973,0,"\nLIB_OBJS += wr"],[13989,1,""],[13989,0,"t"],[13991,1,""],[13991,0,"_or_"],[13997,2,""],[13997,0,"e"],[14000,2,""],[14001,6,""],[14001,0,"LIB_OBJS += ws."],[14017,2,""],[14017,0,"\nLIB_OBJS += wt"],[14033,3,""],[14033,0,"s"],[14036,0,"tus"],[14041,0,"\nLIB_OBJS +="],[14054,3,""],[14054,0,"xdiff"],[14060,0,"in"],[14063,0,"e"],[14065,1,""],[14065,0,"fac"],[14086,0,"+"],[14089,3,""],[14102,2,""],[14103,1,""],[14103,0,"BUILTIN_OBJS += "],[14137,0,"\nBUILTIN_OBJS +="],[14154,3,""],[14169,2,""],[14170,1,""],[14170,0,"BUILTIN_OBJS += "],[14203,0,"\nBUILTIN_OBJS +="],[14220,3,""],[14235,0,"\nBUILTIN_OBJS +="],[14252,3,""],[14268,0,"\nBUILTIN_OBJS +="],[14285,3,""],[14301,2,""],[14302,1,""],[14302,0,"BUILTIN_OBJS += "],[14336,2,""],[14337,1,""],[14337,0,"BUILTIN_OBJS += "],[14373,0,"\nBUILTIN_OBJS +="],[14390,3,""],[14403,0,"-ref-f"],[14410,1,""],[14410,0,"rma"],[14416,0,"\nBUILTIN_OBJS +="],[14433,3,""],[14457,2,""],[14458,1,""],[14458,0,"BUILTIN_OBJS += "],[14487,6,""],[14488,3,""],[14488,0,"u"],[14492,2,""],[14493,1,""],[14493,0,"BUILTIN_OBJS += "],[14524,2,""],[14525,1,""],[14525,0,"BUILTIN_OBJS += "],[14555,0,"-tree"],[14562,0,"\nBUILTIN_OBJS +="],[14579,3,""],[14592,2,""],[14593,3,""],[14595,0,"\nBUILTIN_OBJS +="],[14612,1,""],[14612,0,"builtin-config.o"],[14629,1,""],[14629,0,"BUILTIN_OBJS += "],[14668,2,""],[14669,1,""],[14669,0,"BUILTIN_OBJS += "],[14703,2,""],[14704,1,""],[14704,0,"BUILTIN_OBJS += "],[14732,0,"-files"],[14740,0,"\nBUILTIN_OBJS +="],[14757,3,""],[14770,1,""],[14771,1,""],[14771,0,"nd"],[14774,1,""],[14774,0,"x"],[14777,2,""],[14778,1,""],[14778,0,"BUILTIN_OBJS += "],[14807,3,""],[14807,0,"tre"],[14811,1,""],[14813,0,"\nBUILTIN_OBJS +="],[14830,3,""],[14842,5,""],[14844,0,"\nBUILTIN_OBJS +="],[14861,3,""],[14882,2,""],[14883,1,""],[14883,0,"BUILTIN_OBJS += "],[14912,0,"--tool"],[14920,2,""],[14921,1,""],[14921,0,"BUILTIN_OBJS += "],[14957,0,"\nBUILTIN_OBJS +="],[14974,3,""],[14987,6,""],[14989,0,"\nBUILTIN_OBJS +="],[15006,3,""],[15029,0,"\nBUILTIN_OBJS +="],[15046,3,""],[15068,2,""],[15069,1,""],[15069,0,"BUILTIN_OBJS += "],[15099,2,""],[15100,1,""],[15100,0,"BUILTIN_OBJS += "],[15128,2,""],[15129,1,""],[15129,0,"BUILTIN_OBJS += "],[15159,0,"\nBUILTIN_OBJS +="],[15176,3,""],[15193,0,"\nBUILTIN_OBJS +="],[15210,3,""],[15223,2,""],[15224,1,""],[15224,0,"BUILTIN_OBJS += "],[15258,2,""],[15259,1,""],[15259,0,"BUILTIN_OBJS += "],[15286,1,""],[15288,0,"mot"],[15294,2,""],[15295,1,""],[15295,0,"BUILTIN_OBJS += "],[15322,0,"t"],[15325,3,""],[15328,2,""],[15329,1,""],[15329,0,"BUILTIN_OBJS += "],[15363,0,"\nBUILTIN_OBJS +="],[15380,3,""],[15399,0,"\nBUILTIN_OBJS +="],[15416,3,""],[15436,2,""],[15437,1,""],[15437,0,"BUILTIN_OBJS += "],[15473,0,"\nBUILTIN_OBJS +="],[15490,3,""],[15510,0,"\nBUILTIN_OBJS +="],[15527,3,""],[15552,2,""],[15553,1,""],[15553,0,"BUILTIN_OBJS += "],[15581,0,"\nBUILTIN_OBJS +="],[15598,3,""],[15616,2,""],[15617,1,""],[15617,0,"BUILTIN_OBJS += "],[15655,0,"\nBUILTIN_OBJS +="],[15672,3,""],[15681,0,"ack-"],[15686,2,""],[15687,0,"fs"],[15691,0,"\nBUILTIN_OBJS +="],[15708,3,""],[15730,0,"\nBUILTIN_OBJS +="],[15747,1,""],[15747,0,"builtin-prune.o"],[15763,1,""],[15763,0,"BUILTIN_OBJS += "],[15793,2,""],[15794,1,""],[15794,0,"BUILTIN_OBJS += "],[15829,0,"\nBUILTIN_OBJS +="],[15846,3,""],[15862,2,""],[15863,1,""],[15863,0,"BUILTIN_OBJS += "],[15895,2,""],[15896,20,""],[15896,0,"BUILTIN_OBJS"],[15909,19,""],[15909,0,"+="],[15912,3,""],[15928,2,""],[15929,1,""],[15929,0,"BUILTIN_OBJS += "],[15960,0,"\nBUILTIN_OBJS +="],[15977,3,""],[15995,2,""],[15996,1,""],[15996,0,"BUILTIN_OBJS += "],[16031,2,""],[16032,1,""],[16032,0,"BUILTIN_OBJS += "],[16064,0,"\nBUILTIN_OBJS +="],[16081,3,""],[16093,0,"\nBUILTIN_OBJS +="],[16110,1,""],[16110,0,"builtin-send-pack.o"],[16130,1,""],[16130,0,"BUILTIN_OBJS += "],[16164,2,""],[16165,1,""],[16165,0,"BUILTIN_OBJS += "],[16202,0,"\nBUILTIN_OBJS +="],[16219,1,""],[16219,0,"builtin-show-ref.o"],[16238,1,""],[16238,0,"BUILTIN_OBJS += "],[16274,0,"\nBUILTIN_OBJS +="],[16291,3,""],[16313,2,""],[16314,1,""],[16314,0,"BUILTIN_OBJS += "],[16343,2,""],[16344,1,""],[16344,0,"BUILTIN_OBJS += "],[16378,0,"\nBUILTIN_OBJS +="],[16395,3,""],[16419,0,"\nBUILTIN_OBJS"],[16433,3,""],[16433,0,"+= "],[16458,0,"\nBUILTIN_OBJS +="],[16475,3,""],[16495,2,""],[16496,1,""],[16496,0,"BUILTIN_OBJS += "],[16536,2,""],[16537,1,""],[16537,0,"BUILTIN_OBJS += "],[16574,2,""],[16575,1,""],[16575,0,"BUILTIN_OBJS += "],[16611,0,"\nBUILTIN_OBJS"],[16625,3,""],[16625,0,"+= "],[16644,1,""],[16645,20,""],[16646,24,""]]},{"span":[128993,129133],"parents":[73773,122270],"agent":"Junio C Hamano","seqStart":49976,"ops":[[51,140,""]]},{"span":[129133,129238],"parents":[122596,128992,129132],"agent":"Gerrit Pape","seqStart":143,"ops":[[7650,0,"CONFIG_SYSTEM = /etc/gitweb.conf\nGITWEB_"],[29060,0,"CONFIG_SYSTEM++|$(GITWEB_CONFIG_SYSTEM)|g' \\\n\t    -e 's|++GITWEB_"]]},{"span":[129238,129262],"parents":[129237],"agent":"Linus Torvalds","seqStart":9154,"ops":[[13352,0,"name-hash.o\nLIB_OBJS += "]]},{"span":[129262,129311],"parents":[129237],"agent":"Junio C Hamano","seqStart":50116,"ops":[[12127,0,"ha1-lookup.h\nLIB_H += s"],[13940,0,"-lookup.o\nLIB_OBJS += sha1"]]},{"span":[129311,129369],"parents":[129310],"agent":"Daniel Barkalow","seqStart":1407,"ops":[[8778,26,""],[14829,0,"lone.o\nBUILTIN_OBJS += builtin-c"]]},{"span":[129369,129406],"parents":[129310],"agent":"Adam Simpkins","seqStart":0,"ops":[[11730,0,"aph.h\nLIB_H += gr"],[13122,0,"aph.o\nLIB_OBJS += gr"]]},{"span":[129406,129427],"parents":[73794,129261,129310],"agent":"Junio C Hamano","seqStart":50165,"ops":[[51,21,""]]},{"span":[129427,129562],"parents":[129426],"agent":"Mike Ralphson","seqStart":0,"ops":[[19356,0,"MKDTEMP = YesPlease\n\tNO_"],[19401,0,"FREAD_READS_DIRECTORIES = UnfortunatelyYes\n\tINTERNAL_QSORT = UnfortunatelyYes\n\t"],[19505,0,"\tBASIC_CFLAGS += -D_LARGE_FILES\n"]]},{"span":[129562,129601],"parents":[129561],"agent":"David Reiss","seqStart":0,"ops":[[33934,0," test-path-utils$X"],[33898,21,""]]},{"span":[129601,129629],"parents":[129405,129561],"agent":"Junio C Hamano","seqStart":50186,"ops":[[12977,0,"no-index.o\nLIB_OBJS += diff-"]]},{"span":[129629,129650],"parents":[129368,129405,129561],"agent":"Junio C Hamano","seqStart":50214,"ops":[[12282,0,"LIB_H += wt-status.h\n"]]},{"span":[129650,130549],"parents":[129628,129649],"agent":"Boyd Lynn Gerber","seqStart":0,"ops":[[17453,0,"UnixWare)\n\tCC = cc\n\tNEEDS_SOCKET = YesPlease\n\tNEEDS_NSL = YesPlease\n\tNEEDS_SSL_WITH_CRYPTO = YesPlease\n\tNEEDS_LIBICONV = YesPlease\n\tSHELL_PATH = /usr/local/bin/bash\n\tNO_IPV6 = YesPlease\n\tNO_HSTRERROR = YesPlease\n\tBASIC_CFLAGS += -Kthread\n\tBASIC_CFLAGS += -I/usr/local/include\n\tBASIC_LDFLAGS += -L/usr/local/lib\n\tINSTALL = ginstall\n\tTAR = gtar\n\tNO_STRCASESTR = YesPlease\n\tNO_MEMMEM = YesPlease\nendif\nifeq ($(uname_S),SCO_SV)\n\tifeq ($(uname_R),3.2)\n\t\tCFLAGS = -O2\n\tendif\n\tifeq ($(uname_R),5)\n\t\tCC = cc\n\t\tBASIC_CFLAGS += -Kthread\n\tendif\n\tNEEDS_SOCKET = YesPlease\n\tNEEDS_NSL = YesPlease\n\tNEEDS_SSL_WITH_CRYPTO = YesPlease\n\tNEEDS_LIBICONV = YesPlease\n\tSHELL_PATH = /usr/bin/bash\n\tNO_IPV6 = YesPlease\n\tNO_HSTRERROR = YesPlease\n\tBASIC_CFLAGS += -I/usr/local/include\n\tBASIC_LDFLAGS += -L/usr/local/lib\n\tNO_STRCASESTR = YesPlease\n\tNO_MEMMEM = YesPlease\n\tINSTALL = ginstall\n\tTAR = gtar\nendif\nifeq ($(uname_S),"]]},{"span":[130549,130552],"parents":[130548],"agent":"Johan Herland","seqStart":0,"ops":[[589,0,"lib"]]},{"span":[130552,130802],"parents":[130551],"agent":"Junio C Hamano","seqStart":50235,"ops":[[40041,0,"documented,gitcore-tutorial | \\\n\t\tdocumented,gitcvs-migration | \\\n\t\tdocumented,gitdiffcore | \\\n\t\tdocumented,gitglossary | \\\n\t\tdocumented,githooks | \\\n\t\tdocumented,gitrepository-layout | \\\n\t\tdocumented,gittutorial | \\\n\t\tdocumented,gittutorial-2 | \\\n\t\t"]]},{"span":[130802,130919],"parents":[130801],"agent":"Nguyễn Thái Ngọc Duy","seqStart":0,"ops":[[7323,0,"prefix)/li"],[7334,0,"exec/g"],[7341,3,""],[7341,0,"t-co"],[7346,1,""],[7346,0,"e"],[36632,0,"\t./check_bindir 'z$(bindir_SQ)' 'z$(gitexecdir_SQ)' '$(DESTDIR_SQ)$(bindir_SQ)/git-shell$X'\n"]]},{"span":[130919,130977],"parents":[130918],"agent":"Junio C Hamano","seqStart":50485,"ops":[[35870,0,"git-upload-pack$X git-receive-pack$X git-upload-archive$X "]]},{"span":[130977,132208],"parents":[130801],"agent":"Johannes Sixt","seqStart":179,"ops":[[9883,25,""],[9952,18,""],[9953,10,""],[22502,0,"POSIX_ONLY_PROGRAMS\n\tPROGRAMS += git-daemon$X\n\tPROGRAMS += git-imap-send$X\nendif\nifndef NO_"],[11501,0,"ompat/mingw.h\nLIB_H += c"],[21138,0,"MINGW,$(uname_S)))\n\tNO_MMAP = YesPlease\n\tNO_PREAD = YesPlease\n\tNO_OPENSSL = YesPlease\n\tNO_CURL = YesPlease\n\tNO_SYMLINK_HEAD = YesPlease\n\tNO_IPV6 = YesPlease\n\tNO_SETENV = YesPlease\n\tNO_UNSETENV = YesPlease\n\tNO_STRCASESTR = YesPlease\n\tNO_STRLCPY = YesPlease\n\tNO_MEMMEM = YesPlease\n\tNEEDS_LIBICONV = YesPlease\n\tOLD_ICONV = YesPlease\n\tNO_C99_FORMAT = YesPlease\n\tNO_STRTOUMAX = YesPlease\n\tNO_MKDTEMP = YesPlease\n\tSNPRINTF_RETURNS_BOGUS = YesPlease\n\tNO_SVN_TESTS = YesPlease\n\tNO_PERL_MAKEMAKER = YesPlease\n\tNO_POSIX_ONLY_PROGRAMS = YesPlease\n\tCOMPAT_CFLAGS += -D__USE_MINGW_ACCESS -DNOGDI -Icompat\n\tCOMPAT_CFLAGS += -DSNPRINTF_SIZE_CORR=1\n\tCOMPAT_OBJS += compat/mingw.o compat/fnmatch.o compat/regex.o\n\tEXTLIBS += -lws2_32\n\tX = .exe\nendif\nifneq (,$(findstring "],[21779,0,"CFLAGS += -DSTRIP_EXTENSION=\\\".exe\\\"\n\tCOMPAT_"],[21910,0,"\ttemplate_dir = ../share/git-core/templates/\n\tETC_GITCONFIG = ../etc/gitconfig\n"],[8072,13,""],[36586,0,"feq ($(firstword $(subst /, ,$(template_dir))),..)\ntemplate_instdir = $(gitexecdir)/$(template_dir)\nelse\ntemplate_instdir = $(template_dir)\nendif\nexport template_instdir\n\ni"]]},{"span":[132208,132253],"parents":[130801],"agent":"Johan Herland","seqStart":3,"ops":[[11878,0,"fs.h\nLIB_H += pack-re"],[13536,0,"fs.o\nLIB_OBJS += pack-re"]]},{"span":[132253,132307],"parents":[130801],"agent":"Teemu Likonen","seqStart":0,"ops":[[36672,0,"html:\n\t$(MAKE) -C Documentation install-html\n\ninstall-"]]},{"span":[132307,132329],"parents":[132306],"agent":"Linus Torvalds","seqStart":9178,"ops":[[14380,0,"apper.o\nLIB_OBJS += wr"]]},{"span":[132329,132351],"parents":[132252,132328],"agent":"Dmitry Potapov","seqStart":0,"ops":[[12341,0,"bspath.o\nLIB_OBJS += a"]]},{"span":[132351,132409],"parents":[132350],"agent":"Miklos Vajna","seqStart":0,"ops":[[8954,26,""],[15916,0,".o\nBUILTIN_OBJS += builtin-merge"]]},{"span":[132409,132461],"parents":[130976,132207,132350],"agent":"Miklos Vajna","seqStart":58,"ops":[[8984,26,""],[8985,7,""],[40646,9,""],[40647,10,""]]},{"span":[132461,132484],"parents":[129600,132460],"agent":"Miklos Vajna","seqStart":110,"ops":[[36629,0," $(PROGRAMS) $(SCRIPTS)"]]},{"span":[132484,132523],"parents":[129600,132460],"agent":"Stephan Beyer","seqStart":0,"ops":[[12042,0,"rere.h\nLIB_H += re"],[13933,0,"rere.o\nLIB_OBJS += re"]]},{"span":[132523,132698],"parents":[132408,132483,132522],"agent":"Stephan Beyer","seqStart":39,"ops":[[34154,0,"git-shell$X: compat/strlcpy.o abspath.o ctype.o exec_cmd.o quote.o strbuf.o usage.o wrapper.o shell.o\n\t$(QUIET_LINK)$(CC) $(ALL_CFLAGS) -o $@ $(ALL_LDFLAGS) $(filter %.o,$^)\n\n"]]},{"span":[132698,132715],"parents":[132697],"agent":"Peter Harris","seqStart":0,"ops":[[21983,0," compat/winansi.o"]]},{"span":[132715,132883],"parents":[132714],"agent":"Junio C Hamano","seqStart":50803,"ops":[[11286,0,"COMPAT_LIB = compat/lib.a\n"],[34197,0,"$(COMPAT_LIB): $(COMPAT_OBJS)\n\t$(QUIET_AR)$(RM) $@ && $(AR) rcs $@ $(COMPAT_OBJS)\n\n"],[34292,17,""],[34364,0," $(COMPAT_LIB)"],[34450,0," $(COMPAT_LIB)"],[40027,0," $(COMPAT_LIB)"]]},{"span":[132883,133058],"parents":[132882],"agent":"Pierre Habouzit","seqStart":56,"ops":[[17474,0,"\tTHREADED_DELTA_SEARCH = YesPlease\n"],[17570,0,"\tTHREADED_DELTA_SEARCH = YesPlease\n"],[20035,0,"\tTHREADED_DELTA_SEARCH = YesPlease\n"],[20253,0,"\tTHREADED_DELTA_SEARCH = Y"],[20280,0,"sPlease\ne"],[20512,0,"\tTHREADED_DELTA_SEARCH = YesPlease\n"]]},{"span":[133058,133074],"parents":[132882],"agent":"Johannes Schindelin","seqStart":4560,"ops":[[11905,2,""],[11905,0,"s"],[11907,1,""],[11907,0,"ring"],[13688,2,""],[13688,0,"s"],[13690,1,""],[13690,0,"ring"]]},{"span":[133074,133334],"parents":[130801],"agent":"Junio C Hamano","seqStart":50543,"ops":[[34394,0,"\t@echo TAR=\\''$(subst ','\\'',$(TAR))'\\' >>$@\n"],[34305,0,"# We need to apply sq twice, once to protect from the shell\n# that runs "],[34394,0,", and then again to protect it\n# and the first level quoting from the shell that runs \"echo\".\nGIT-BUILD-OPTIONS"],[34555,0,"subst ','\\'',$("],[34584,0,")"],[34624,0,"subst ','\\'',$("],[34644,0,")"]]},{"span":[133334,133355],"parents":[133073,133333],"agent":"Stephan Beyer","seqStart":214,"ops":[[13064,0,"ditor.o\nLIB_OBJS += e"]]},{"span":[133355,134798],"parents":[133354],"agent":"Johannes Sixt","seqStart":1410,"ops":[[38365,0,"\t$(RM) '$(DESTDIR_SQ)$(gitexecdir_SQ)/git$X'\n"],[37977,1,""],[37979,0,"neq"],[37983,1,""],[37983,0,"(,$X)\n\t$(for"],[37996,0,"ach p,$(pat"],[38008,0,"ubs"],[38013,2,""],[38013,0,"%$X,%,"],[38021,1,""],[38021,0,"f"],[38023,3,""],[38023,0,"lte"],[38027,0," %$X,$(ALL"],[38038,0,"PROGRAM"],[38046,1,""],[38047,1,""],[38048,2,""],[38048,0,"$(BUILT_INS) git$X)), $(RM)"],[38077,1,""],[38079,0,"DESTDIR_SQ)$("],[38106,0,"/$p"],[38111,2,""],[38111,0,")"],[38113,3,""],[38115,2,""],[38115,0,"dif"],[38119,1,""],[38120,1,""],[38120,0,"bi"],[38123,0,"dir=$$(cd"],[38133,3,""],[38159,6,""],[38161,0,"&& pwd) && "],[38175,2,""],[38175,0,"execdir=$$(cd "],[38219,2,""],[38219,0,"' && pwd) && \\\n\t"],[38236,0,"f tes"],[38242,0," \"z$"],[38247,2,""],[38247,0,"bindir\""],[38255,2,""],[38255,0,"!="],[38258,0,"\"z$$execdir\"; "],[38275,0,"then \\\n"],[38283,2,""],[38283,0,"\tln -f"],[38290,1,""],[38290,0,"\""],[38292,12,""],[38293,1,""],[38299,4,""],[38305,1,""],[38305,0,"\""],[38307,0,"\"$$execdir/git$X\" || "],[38330,1,""],[38332,1,""],[38332,0,"cp \""],[38337,12,""],[38338,1,""],[38338,0,"bindir/"],[38348,0,"$X\" \"$$"],[38362,4,""],[38368,1,""],[38368,0,"\""],[38376,0," && \\"],[38383,0,"{ "],[38417,1,""],[38417,0,"\""],[38419,12,""],[38420,4,""],[38427,4,""],[38430,1,""],[38430,0,"\""],[38438,1,""],[38438,0,"\""],[38440,12,""],[38441,4,""],[38448,4,""],[38454,1,""],[38454,0,"\""],[38456,1,""],[38456,0,"\""],[38458,12,""],[38459,4,""],[38466,4,""],[38469,1,""],[38469,0,"\""],[38473,0," } && \\"],[38488,1,""],[38488,0,"\""],[38490,12,""],[38491,4,""],[38498,4,""],[38504,85,""],[38504,0,"\""],[38506,14,""],[38506,0,"&&"],[38509,36,""],[38509,0,"\\"],[38511,6,""],[38527,1,""],[38527,0,"\""],[38530,1,""],[38530,0,"$"],[38537,5,""],[38537,0,"\""],[38539,1,""],[38539,0,"\""],[38542,4,""],[38542,0,"$"],[38550,5,""],[38550,0,"\""],[38552,1,""],[38552,0,"\""],[38554,12,""],[38555,1,""],[38561,4,""],[38573,1,""],[38573,0,"\""],[37393,1,""],[37393,0,"b"],[37395,5,""],[37395,0,"n"],[7208,0,"# Among the variables below, these:\n#   gitexecdir\n#   template_dir\n#   htmldir\n#   ETC_GITCONFIG (but not sysconfdir)\n# can be specified as a relative path ../some/where/else (which must begin\n# with ../); this is interpreted as relative to $(bindir) and \"git\" at\n# runtime figures out where they are based on the path to the executable.\n# This can hel"],[7562,0," installing the suite in a "],[7591,0,"locatable way.\n\npre"],[8464,11,""],[37877,0,"feq ($(firstword $(subst /, ,$(gitexecdir))),..)\ngitexec_instdir = $(bindir)/$(gitexecdir)\nelse\ngitexec_instdir = $(gitexecdir)\nendif\ngitexec_instdir_SQ = $(subst ','\\'',$(gitexec_instdir))\nexport gitexec_instdir\n\ni"],[38199,0,"_inst"],[38264,0,"_inst"],[38572,0,"g"],[38574,0,"texecdir='$(gitexec_instdir_SQ)' i"],[38743,0,"_inst"],[38861,0,"_inst"],[22472,0,"gitexecdir = ../libexec/git-core\n\t"],[10563,24,""],[24050,0,"\tPROGRAMS += git-sh"],[24070,0,"ll$X\ne"],[39255,5,""],[39255,0,"add"]]},{"span":[134798,134915],"parents":[134797],"agent":"Robert Shearman","seqStart":0,"ops":[[34403,0,"GIT"],[34409,0,"S)\n\t$(QUIET"],[34421,0,"LINK)$(CC) $(ALL_C"],[34440,0,"LAGS) -o $@ $(ALL_LDFLAGS) $(filter %.o,$^) \\\n\t\t$(L"],[34492,0,"BS) $(OPENSS"],[34505,0,"_LINK) $(OP"],[34517,0,"NSSL_LIBSSL"]]},{"span":[134915,135006],"parents":[134797],"agent":"Junio C Hamano","seqStart":50971,"ops":[[29531,0,"gitexecdir='$(gitexec_instdir_SQ)' "],[39206,0,"if test \"z$$bindir\" != \"z$$execdir\"; \\\n\tthen \\\n\t\t"],[39278,0,"; \\\n\tfi"]]},{"span":[135006,135069],"parents":[135005],"agent":"Miklos Vajna","seqStart":133,"ops":[[12060,0,"help.h\nLIB_H += "],[16083,0,"help.o\nBUILTIN_OBJS += builtin-"],[30134,0,"builtin-"],[30150,0,"builtin-"]]},{"span":[135069,135205],"parents":[104890,135005],"agent":"Junio C Hamano","seqStart":51062,"ops":[[43371,114,""],[43374,22,""]]},{"span":[135205,135458],"parents":[135204],"agent":"Brandon Casey","seqStart":239,"ops":[[29283,0,"SHELL = $(SHELL_PATH)\n\n"],[29312,0,"shell_compatibility_test "],[29809,0,"please_set_SHELL_PATH_to_a_more_modern_shell:\n\t@$$(:)\n\nshell_compatibility_test: please_set_SHELL_PATH_to_a_more_modern_shell\n\n"],[41961,0,"shell_compatibility_test please_set_SHELL_PATH_to_a_more_modern_shell\n.PHONY: "]]},{"span":[135458,135482],"parents":[135457],"agent":"Eric Blake","seqStart":0,"ops":[[29495,0,"test '$p' -ef '$p$X' || "]]},{"span":[135482,135555],"parents":[135481],"agent":"Junio C Hamano","seqStart":51198,"ops":[[20720,5,""],[20720,0," $(CC"],[20728,2,""],[20728,0,"_DYNP"],[20734,17,""],[20734,0,"TH)"],[23014,0,"ndef CC_LD_DYNPATH\n\tif"],[23060,0,"\t"],[23126,0,"\t"],[23164,0,"\t"],[23191,1,""],[23191,0,","],[23193,0,"\t"],[23200,0,"\t"],[23220,0,"\tendif\n"]]},{"span":[135555,135825],"parents":[135481],"agent":"Junio C Hamano","seqStart":51271,"ops":[[5346,0,"NO_ST_BLOCKS_IN_STRUCT_STAT if your platform does not have st_blocks\n# field that counts the on-disk footprint in 512-byte blocks.\n#\n# Define "],[22337,0,"NO_ST_BLOCKS_IN_STRUCT_STAT = YesPlease\n\t"],[25128,0,"ST_BLOCKS_IN_STRUCT_STAT\n\tBASIC_CFLAGS += -DNO_ST_BLOCKS_IN_STRUCT_STAT\nendif\nifdef NO_"]]},{"span":[135825,136191],"parents":[135481],"agent":"Junio C Hamano","seqStart":51541,"ops":[[11650,26,""],[34855,7,""],[34858,11,""],[34863,13,""],[34864,8,""],[34865,3,""],[34867,21,""],[34868,206,""],[40965,14,""],[17045,0,"ell."],[17050,0,"\nBUILTIN_OBJS += builtin-sho"],[24053,25,""]]},{"span":[136191,136248],"parents":[136190],"agent":"Junio C Hamano","seqStart":51907,"ops":[[17045,4,""],[17046,28,""],[24024,0,"\tPROGRAMS += git-shell$X\n"]]},{"span":[136248,136284],"parents":[135481],"agent":"Miklos Vajna","seqStart":196,"ops":[[21631,0,"\tSNPRINTF_RETURNS_BOGUS = YesPlease\n"]]},{"span":[136284,136296],"parents":[133057,134914,135824,136190,136283],"agent":"Tommi Virtanen","seqStart":0,"ops":[[38933,0,"git-shell$X "]]},{"span":[136296,136605],"parents":[136283],"agent":"Andreas Färber","seqStart":0,"ops":[[30571,0,"\\\n\t"],[30585,0," 2>/dev/null || \\\n\tln -s git$X $@ 2>/dev/null || \\\n\tcp git$X $@"],[39260,7,""],[39260,0,"{"],[39262,2,""],[39263,8,""],[39263,0,"(RM)"],[39268,3,""],[39269,1,""],[39278,0,"/git-add$X"],[39289,1,""],[39290,7,""],[39290,0,"&&"],[39300,13,""],[39303,0,"-add"],[39309,1,""],[39324,0,"-add"],[39332,0,"2>/dev/null "],[39354,10,""],[39357,0,"-add"],[39363,1,""],[39378,0,"-add"],[39387,5,""],[39387,0,"}"],[39411,0,"filter-out git-add,$("],[39442,0,")"],[39469,0,"\\\n\t\t"],[39490,0,"-add"],[39513,4,""],[39513,0,"2>/dev/null"],[39525,2,""],[39525,0,"||"],[39531,2,""],[39531,0,"\tln"],[39535,2,""],[39535,0,"-"],[39537,1,""],[39539,4,""],[39539,0,"g"],[39541,1,""],[39541,0,"t-ad"],[39546,2,""],[39546,0,"$X"],[39550,3,""],[39551,1,""],[39560,0,"/$p"],[39564,1,""],[39565,5,""],[39565,0,"2>/d"],[39570,0,"v/"],[39573,0,"ull"],[39577,0,"|| "],[39584,5,""],[39584,0,"cp"],[39601,0,"-add"],[39608,1,""],[39609,4,""],[39609,0,"\"$$execdir/$p\" || ex"],[39630,0,"t;) }"]]},{"span":[136605,136607],"parents":[136604],"agent":"Alex Riesen","seqStart":1703,"ops":[[39429,0,"$X"]]},{"span":[136607,136656],"parents":[135068,136247,136295,136604],"agent":"Johannes Schindelin","seqStart":4576,"ops":[[12193,0,"evenshte"],[12202,0,"n.h\nLIB_H += li"],[13815,0,"evenshtein.o\nLIB_OBJS += l"]]},{"span":[136656,136965],"parents":[136283],"agent":"Junio C Hamano","seqStart":51964,"ops":[[11650,26,""],[34891,7,""],[34894,11,""],[34899,13,""],[34900,8,""],[34901,3,""],[34903,21,""],[34904,206,""],[41001,14,""]]},{"span":[136965,136995],"parents":[135068,136247,136295,136606,136964],"agent":"Miklos Vajna","seqStart":232,"ops":[[13960,0,"merge-recursive.o\nLIB_OBJS += "]]},{"span":[136995,137022],"parents":[136606,136964],"agent":"Miklos Vajna","seqStart":262,"ops":[[12117,0,"merge-recursive.h\nLIB_H += "]]},{"span":[137022,137071],"parents":[135554,136655,137021],"agent":"Johannes Sixt","seqStart":2853,"ops":[[10705,0,"ell$X\nPROGRAMS += git-sh"],[24585,25,""]]},{"span":[137071,137141],"parents":[137070],"agent":"Junio C Hamano","seqStart":52273,"ops":[[10644,31,""],[17003,0,"ceive-pack.o\nBUILTIN_OBJS += builtin-re"]]},{"span":[137141,137257],"parents":[137021],"agent":"Arjen Laarhoven","seqStart":30,"ops":[[19049,0,"\tCOMPAT_CFLAGS += -Icompat/regex\n\tCOMPAT_OBJS += compat/regex/reg"],[19115,0,"x.o\ne"],[22356,0," -Icompat/regex -Icompat/fnmatch"],[22520,0,"/fnmatch"],[22543,0,"/regex"]]},{"span":[137257,137327],"parents":[137256],"agent":"Johannes Sixt","seqStart":2902,"ops":[[21093,0,"\tCOMPAT_CFLAGS += -Icompat/regex\n\tCOMPAT_OBJS += compat/regex/regex.o\n"]]},{"span":[137327,137397],"parents":[137326],"agent":"Jeff King","seqStart":640,"ops":[[20425,0,"\tCOMPAT_CFLAGS += -Icompat/regex\n\tCOMPAT_OBJS += compat/regex/regex.o\n"]]},{"span":[137397,137537],"parents":[137070,137256],"agent":"Michael J Gruber","seqStart":0,"ops":[[40478,0,"quick-install-html:\n\t$(MAKE) -C Documentation quick-install-html\n\n"],[36363,0,"man:\n\t$(MAKE) -C Documentation man\n\nhtml:\n\t$(MAKE) -C Documentation html\n\n"]]},{"span":[137537,137551],"parents":[137536],"agent":"Nanako Shiraishi","seqStart":0,"ops":[[39355,0,"git-cvsserver "]]},{"span":[137551,137621],"parents":[137396,137550],"agent":"Junio C Hamano","seqStart":52343,"ops":[[20758,0,"THREADED_DELTA_SEARCH = YesPlease\n\t"],[20861,35,""]]},{"span":[137621,137691],"parents":[135068,136247,136295,137396],"agent":"Junio C Hamano","seqStart":52413,"ops":[[20685,0,"THREADED_DELTA_SEARCH = YesPlease\n\t"],[20788,35,""]]},{"span":[137691,137726],"parents":[136994,137140,137620,137690],"agent":"Shawn O. Pearce","seqStart":16101,"ops":[[20831,35,""]]},{"span":[137726,137830],"parents":[137725],"agent":"Dmitry Potapov","seqStart":22,"ops":[[11969,0,"ompat/cygwin.h\nLIB_H += c"],[22394,0,"CYGWIN,$(uname_S)))\n\tCOMPAT_OBJS += compat/cygwin.o\nendif\nifneq (,$(findstring "]]},{"span":[137830,137860],"parents":[137396],"agent":"David Soria Parra","seqStart":0,"ops":[[19323,0,"OLD_ICONV = UnfortunatelyYes\n\t"]]},{"span":[137860,137889],"parents":[137859],"agent":"Jeff King","seqStart":710,"ops":[[19378,29,""]]},{"span":[137889,137932],"parents":[137829,137888],"agent":"Jeff King","seqStart":739,"ops":[[12826,0,"serdiff.h\nLIB_H += u"],[15033,0,"erdiff.o\nLIB_OBJS += us"]]},{"span":[137932,137944],"parents":[137888],"agent":"Tommi Virtanen","seqStart":12,"ops":[[38714,0,"git-shell$X "]]},{"span":[137944,137958],"parents":[137943],"agent":"Nanako Shiraishi","seqStart":14,"ops":[[38726,0,"git-cvsserver "]]},{"span":[137958,137984],"parents":[137931,137957],"agent":"Junio C Hamano","seqStart":52483,"ops":[[39695,26,""]]},{"span":[137984,138228],"parents":[137983],"agent":"David M. Syzdek","seqStart":0,"ops":[[27352,0,"UINTMAX_T\n\tBASIC_CFLAGS += -Duintmax_t=uint32_t\nendif\nifdef NO_"],[20969,0,"\tifeq ($(shell expr \"$(uname_R)\" : '4\\.'),2)\n\t\tNO_UINTMAX_T = YesPlease\n\t\tNO_STRTOUMAX = YesPlease\n\tendif\n"],[8762,0,"PTHREAD_LIBS = -lpthread\n"],[21041,0,"PTHREAD_LIBS = -pthread\n\t\t"],[28752,9,""],[28752,0,"$(PTHREAD_LIBS)"]]},{"span":[138228,138606],"parents":[105058,137983],"agent":"Junio C Hamano","seqStart":52509,"ops":[[44826,168,""],[19487,30,""],[19488,40,""],[20827,59,""],[20828,11,""],[21554,15,""],[21555,55,""]]},{"span":[138606,138722],"parents":[138605],"agent":"Markus Heidelberg","seqStart":0,"ops":[[40522,0,"man:\n\t$(MAKE) -C Documentation install-man\n\ninstall-"],[40748,0,"man:\n\t$(MAKE) -C Documentation quick-install-man\n\nquick-install-"]]},{"span":[138722,138828],"parents":[137957],"agent":"Junio C Hamano","seqStart":52887,"ops":[[37901,0,"i"],[37903,0," sparse; \\\n\tthen \\\n\t\tf"],[37938,0,"\\\n\t\t"],[37945,0,"\\\n\t\t\t"],[38000,0,"\\\n\t\tdone; \\\n\telse \\\n\t\techo 2>&1 \"Di"],[38036,0," y"],[38039,0,"u mea"],[38045,0," 'mak"],[38051,0," test'?\"; \\\n\t\texit 1; \\\n\tfi"]]},{"span":[138828,138856],"parents":[138227,138721,138827],"agent":"Linus Torvalds","seqStart":9200,"ops":[[15247,0,"LIB_OBJS += preload-index.o\n"]]},{"span":[138856,138882],"parents":[138227,138721,138827],"agent":"René Scharfe","seqStart":588,"ops":[[13878,26,""]]},{"span":[138882,139299],"parents":[138855,138881],"agent":"Junio C Hamano","seqStart":52993,"ops":[[3882,0,"THREADS if you do not have or do not want to use Pthreads.\n#\n# Define NO_P"],[7252,0,"uname_V := $(shell sh -c 'uname -v 2>/dev/null || echo not')\n"],[21850,0,"\tifneq ($(shell expr \"$(uname_V)\" : '[1234]'),1)\n\t\tTHREADED_DELTA_SEARCH = YesPlease\n\telse\n\t\tNO_PTHREADS = YesPlease\n\t"],[21974,0,"end"],[21979,0,"\nif"],[23006,0,"O_PTHR"],[23013,0,"ADS = YesPlease\n\tNE"],[28753,0,"NO_PTHREADS\n\t"],[28787,0," ="],[28809,0,"NO_PTHREADS\nelse\n\tEXTLIBS += $(PTHREAD_LIBS)\nendif\n\nifdef "],[28890,5,""],[28891,0,"A"],[28893,0,"IC_CFLAGS"],[28906,3,""],[28906,0,"-D"],[28914,0,"ED"],[28917,0,"DE"],[28920,2,""],[28920,0,"TA_"],[28924,1,""],[28924,0,"EARCH"],[11502,0,"ge$X\nBUILT_INS += git-sta"]]},{"span":[139299,139387],"parents":[139298],"agent":"Miklos Vajna","seqStart":289,"ops":[[37214,0,"pdf:\n\t$(MAKE) -C Documentation pdf\n\n"],[41439,0,"install-pdf:\n\t$(MAKE) -C Documentation install-pdf\n\n"]]},{"span":[139387,139422],"parents":[139298],"agent":"Arjen Laarhoven","seqStart":146,"ops":[[19674,0,"\tTHREADED_DELTA_SEARCH = YesPlease\n"]]},{"span":[139422,139485],"parents":[139421],"agent":"Johannes Schindelin","seqStart":4625,"ops":[[12528,0,"n"],[12530,0,"tes.h\nLIB_H += o"],[14304,0,"notes.o\nLIB_OBJS += "],[9673,0,"notes.sh\nSCRIPT_SH += git-"]]},{"span":[139485,139503],"parents":[139421],"agent":"Johannes Schindelin","seqStart":4688,"ops":[[36877,0," xdiff/xpatience.o"]]},{"span":[139503,139698],"parents":[139386,139421],"agent":"René Scharfe","seqStart":614,"ops":[[38626,0,"+"],[38643,0,"\nTEST_PROGRAMS +="],[38666,1,""],[38666,0,"ctyp"],[38671,7,""],[38673,0,"\nTEST_PROGRAMS +="],[38702,0,"\nTEST_PROGRAMS"],[38717,0,"+= "],[38732,0,"\nTEST_PROGRAMS +="],[38755,2,""],[38755,0,"genr"],[38760,1,""],[38760,0,"ndom"],[38766,0,"\nTEST_PROGRAMS +="],[38802,0,"\nTEST_PROGRAMS +="],[38840,0,"\nTEST_PROGRAMS +="],[38876,0,"TEST_PROGRAMS += test-sha1$X\n"],[39151,0,"ctype$X: ctype.o\n\ntest-"]]},{"span":[139698,139856],"parents":[139386,139421],"agent":"Jeff King","seqStart":782,"ops":[[38626,0,"+"],[38643,0,"\nTEST_PROGRAMS"],[38658,16,""],[38658,0,"+="],[38672,0,"\nTEST_PROGRAMS +="],[38702,0,"\nTEST_PROGRAMS +="],[38725,2,""],[38725,0,"genr"],[38730,1,""],[38730,0,"ndom"],[38736,0,"\nTEST_PROGRAMS +="],[38772,0,"\nTEST_PROGRAMS +="],[38810,0,"\nTEST_PROGRAMS +="],[38846,0,"TEST_PROGRAMS += test-sha1$X\n"]]},{"span":[139856,139932],"parents":[139855],"agent":"Jeff King","seqStart":940,"ops":[[12896,0,"igchain.h\nLIB_H += s"],[15011,0,"igchain.o\nLIB_OBJS += s"],[38918,0,"TEST_PROGRAMS += test-sigchain$X\n"]]},{"span":[139932,140616],"parents":[139855],"agent":"Steffen Prohaska","seqStart":664,"ops":[[7557,0,"mandir\n#   infodir\n#   "],[7665,3,""],[7680,18,""],[7680,0,";"],[7683,5,""],[7684,6,""],[7721,5,""],[7721,0,"p"],[7723,0,"efix"],[7899,0,"_relative = bin\nbindir"],[7934,0,"$("],[7939,0,"dir_relative)"],[7962,10,""],[7982,10,""],[8006,10,""],[8065,2,""],[8070,4,""],[8097,0," "],[8099,2,""],[8099,0," "],[8105,4,""],[8158,0,"ETC_GITCONFIG = $(sysconfdir)/gitconfig\n"],[8229,16,""],[8246,5,""],[8246,0,"et"],[8249,7,""],[8260,0,"endif\nlib = lib\n"],[30154,0,"bindir_relative_SQ = $(subst ','\\'',$(bindir_relative))\n"],[35607,0,"\\\n\t\t"],[35648,0,"\\\n\t\t'-DBINDIR=\"$(bindir_relative_SQ)\"' \\\n\t\t'-DPREFIX=\"$(prefix_SQ)\"' \\\n\t\t"],[35724,0,"\n"],[39894,3,""],[39894,0,"ab"],[39897,0,"pa"],[39900,4,""],[39900,0,"h"],[39904,4,""],[39905,4,""],[39905,0,"emplate_dir))"],[39933,1,""],[39935,4,""],[39955,10,""],[39997,0,"prefix)/$("],[40060,3,""],[40060,0,"ab"],[40063,0,"pa"],[40066,4,""],[40066,0,"h"],[40070,4,""],[40070,0,"gi"],[40073,4,""],[40073,0,"execdir))"],[40095,1,""],[40097,4,""],[40116,10,""],[40155,0,"prefix)/$("],[28825,0,"ifdef RUNTIME_PREFIX\n\tCOMPAT_CFLAGS += -DRUNTIME_PREFIX\nendif\n"],[23330,0,"RUNTIME_PREFIX = YesPlease\n\t"],[23729,8,""],[23732,105,""]]},{"span":[140616,140651],"parents":[139855],"agent":"Brandon Casey","seqStart":492,"ops":[[41077,2,""],[41080,4,""],[41082,1,""],[41082,0," in "],[41122,1,""],[41122,0,";"],[41124,0,"do \\\n\t\t"],[41149,0,"$"],[41197,0,"$"],[41250,0,"$"],[41310,0,"$"],[41322,1,""],[41323,0,"\\\n\t  done "]]},{"span":[140651,140798],"parents":[139697,140650],"agent":"Junio C Hamano","seqStart":53410,"ops":[[38627,1,""],[38656,4,""],[38657,10,""],[38661,2,""],[38661,0,"test-"],[38670,0,"e$X"],[38702,17,""],[38749,14,""],[38750,3,""],[38759,4,""],[38760,4,""],[38783,17,""],[38819,14,""],[38820,3,""],[38857,14,""],[38858,3,""],[38872,23,""],[38873,6,""]]},{"span":[140798,140814],"parents":[139502,140797],"agent":"Ted Pavlic","seqStart":0,"ops":[[24255,0,"\tPTHREAD_LIBS =\n"]]},{"span":[140814,141096],"parents":[140813],"agent":"Serge van den Boom","seqStart":0,"ops":[[991,0,"EXPATDIR=/foo/bar if your expat header and library files are in\n# /foo/bar/include and /foo/bar/lib directories.\n#\n# Define "],[25191,0,"ifdef EXPATDIR\n\t\t\tBASIC_CFLAGS += -I$(EXPATDIR)/include\n\t\t\t"],[25268,0,"L$(EXPATDIR)/$("],[25284,0,"ib) $(CC_LD_DYNPATH)$(EXPATDIR)/$(lib) -lexpat\n\t\t"],[25334,0,"lse\n\t\t\tEXPAT_LIBEXPAT = -le"],[25367,0,"\tendif\n\t"]]},{"span":[141096,141108],"parents":[139931,141095],"agent":"Junio C Hamano","seqStart":53557,"ops":[[39258,3,""],[39260,2,""],[39260,0,"1"],[39287,0,"igc"],[39292,1,""],[39292,0,"in"]]},{"span":[141108,141131],"parents":[138827],"agent":"Guanqun Lu","seqStart":0,"ops":[[37209,0,"dump-cache-tree$X test-"]]},{"span":[141131,141260],"parents":[140615,141107,141130],"agent":"Junio C Hamano","seqStart":53569,"ops":[[39155,7,""],[39156,3,""],[39157,2,""],[39157,0,"yp"],[39162,0,"\nTEST_PROGRAMS"],[39177,0,"+= "],[39185,1,""],[39185,0,"da"],[39188,2,""],[39215,2,""],[39216,0,"lta"],[39245,0,"ump-cach"],[39254,1,""],[39254,0,"-"],[39256,1,""],[39256,0,"ree"],[40350,0,"n"],[40357,5,""],[40357,0,"fil"],[40361,1,""],[40361,0,"er"],[40364,0,"/%,"],[40369,6,""],[40369,0,"firs"],[40374,2,""],[40374,0,"wor"],[40378,5,""],[40378,0," "],[40395,0,"),)"],[40517,0,"n"],[40524,5,""],[40524,0,"fil"],[40528,1,""],[40528,0,"er"],[40531,0,"/%,"],[40536,1,""],[40536,0,"f"],[40538,0,"rs"],[40541,4,""],[40541,0,"wor"],[40545,5,""],[40545,0," "],[40560,0,"),)"]]},{"span":[141260,141325],"parents":[141259],"agent":"Jay Soffian","seqStart":418,"ops":[[19732,1,""],[19765,1,""],[19765,0,"[15678]"],[19819,0,"ifeq ($(shell expr \"$(uname_R)\" : '[15]\\.'),2)\n\t\t"],[19892,0,"endif\n\t"]]},{"span":[141325,141540],"parents":[139484,141324],"agent":"Kjetil Barvik","seqStart":0,"ops":[[5388,0,"NO_NSEC if your \"struct stat\" does not have \"st_ctim.tv_nsec\"\n# available.  This automatically turns "],[5493,0,"N"],[5495,0,"EC off.\n#\n# Define USE_S"],[22210,0,"NO_NSEC = YesPlease\n\t"],[23873,0,"NO_NSE"],[23880,0," = YesPlease\n\tC"],[26847,0,"NSEC\n\tBASIC_CFLAGS += -DNO_NSEC\nendif\nifdef NO_"]]},{"span":[141540,141773],"parents":[141539],"agent":"Brian Gernhardt","seqStart":861,"ops":[[5388,0,"USE_ST_TIMESPEC if your \"struct stat\" uses \"st_ctimespec\" instead of\n# \"st_ctim\"\n#\n# Define "],[20237,0,"\tUSE_ST_TIMESPEC = YesPlease\n"],[26965,0,"USE_ST_TIMESPEC\n\tBASIC_CFLAGS += -DUSE_ST_TIMESPEC\nendif\nifdef "],[26969,0,"NSEC\n\tBASIC_CFLAGS += -DUSE_NSEC\nendif\nifdef USE_"]]},{"span":[141773,141836],"parents":[139484,141324],"agent":"Junio C Hamano","seqStart":53698,"ops":[[9816,26,""],[12671,1,""],[12672,16,""],[14435,20,""]]},{"span":[141836,142044],"parents":[141835],"agent":"Stephan Beyer","seqStart":235,"ops":[[11347,5,""],[11373,0,"-pick"],[12279,1,""],[12279,0,"cygw"],[12285,2,""],[12304,4,""],[12304,0,"m"],[12307,0,"gw"],[12784,22,""],[12785,1,""],[13053,0,"string-list.h\nLIB_H += "],[13912,3,""],[13912,0,"l"],[13914,4,""],[13914,0,"b"],[13935,1,""],[13935,0,"no-"],[13939,1,""],[13939,0,"ndex"],[14671,1,""],[14671,0,"pa"],[14674,9,""],[14674,0,"h"],[14691,1,""],[14691,0,"k"],[14693,1,""],[14693,0,"-line"],[14714,2,""],[14714,0,"reload"],[14721,1,""],[14723,0,"d"],[14725,0,"x"],[15040,3,""],[15040,0,"-"],[15042,1,""],[15042,0,"ookup"],[15066,1,""],[15066,0,"_fi"],[15070,5,""],[15070,0,"e"],[15200,0,"tring-list.o\nLIB_OBJS += s"],[15406,0,"ag"],[15409,5,""],[15426,2,""],[15427,0,"rdiff"],[15591,18,""],[15592,10,""]]},{"span":[142044,142052],"parents":[142043],"agent":"Michael J Gruber","seqStart":140,"ops":[[8897,8,""]]},{"span":[142052,142713],"parents":[142051],"agent":"Thomas Rast","seqStart":0,"ops":[[46389,0,"### Test suite coverage testing\n#\n.PHONY: coverage coverage-clean coverage-build coverage-report\n\ncoverage:\n\t$(MAKE) coverage-build\n\t$(MAKE) coverage-report\n\ncoverage-clean:\n\trm -f *.gcda *.gcno\n\nCOVERAGE_CFLAGS = $(CFLAGS) -O0 -ftest-coverage -fprofile-arcs\nCOVERAGE_LDFLAGS = $(CFLAGS)  -O0 -lgcov\n\ncoverage-build: coverage-clean\n\t$(MAKE) CFLAGS=\"$(COVERAGE_CFLAGS)\" LDFLAGS=\"$(COVERAGE_LDFLAGS)\" all\n\t$(MAKE) CFLAGS=\"$(COVERAGE_CFLAGS)\" LDFLAGS=\"$(COVERAGE_LDFLAGS)\" \\\n\t\t-j1 test\n\ncoverage-report:\n\tgcov -b *.c\n\tgrep '^function.*called 0 ' *.c.gcov \\\n\t\t| sed -e 's/\\([^:]*\\)\\.gcov: *function \\([^ ]*\\) called.*/\\1: \\2/' \\\n\t\t| tee coverage-untested-functions\n"]]},{"span":[142713,142743],"parents":[142051],"agent":"Gerrit Pape","seqStart":248,"ops":[[41646,0,"\"$$bindir/"],[41659,4,""],[41661,0,"\""],[41707,0,"\"$$bindir/"],[41720,4,""],[41722,0,"\""]]},{"span":[142743,142812],"parents":[142742],"agent":"Jeff King","seqStart":1016,"ops":[[38765,0,"\t@echo NO_CURL=\\''$(subst ','\\'',$(subst ','\\'',$(NO_CURL)))'\\' >>$@\n"]]},{"span":[142812,143022],"parents":[142742],"agent":"Johannes Schindelin","seqStart":4706,"ops":[[6967,0,"#\n# Define NO_CROSS_DIRECTORY_HARDLINKS if you plan to distribute the installed\n# programs as a tar, where bin/ and libexec/ might be on different file systems.\n"],[41804,0,"test -z \"$(NO_CROSS_DIRECTORY_HARDLINKS)\" && \\\n\t\t"]]},{"span":[143022,143177],"parents":[141772,142712,142811],"agent":"Janos Laube","seqStart":0,"ops":[[23315,10,""],[23316,11,""],[23923,0,"USE_WIN32_MMAP = YesPlease\n\t"],[28128,0,"lse\n\tifdef USE_WIN32_MMAP\n\t\tCOMPAT_CFLAGS += -DUSE_WIN32_MMAP\n\t\tCOMPAT_OBJS += compat/win32mmap.o\n\tendif\ne"]]},{"span":[143177,143206],"parents":[143176],"agent":"Jeff King","seqStart":1085,"ops":[[21503,0,"USE_ST_TIMESPEC = YesPlease\n\t"]]},{"span":[143206,143227],"parents":[143205],"agent":"Christian Couder","seqStart":707,"ops":[[13621,0,"isect.o\nLIB_OBJS += b"]]},{"span":[143227,143395],"parents":[143205],"agent":"Johannes Schindelin","seqStart":4916,"ops":[[9761,0,"# Guard against environment variables\nBUILTIN_OBJS =\nBUILT_INS =\nCOMPAT_CFLAGS =\nCOMPAT_OBJS =\nLIB_H =\nLIB_OBJS =\nPROGRAMS =\nSCRIPT_PERL =\nSCRIPT_SH =\nTEST_PROGRAMS =\n\n"]]},{"span":[143395,143436],"parents":[143226,143394],"agent":"Christian Couder","seqStart":728,"ops":[[16151,0,"isect--helper.o\nBUILTIN_OBJS += builtin-b"]]},{"span":[143436,143474],"parents":[143394],"agent":"Markus Heidelberg","seqStart":116,"ops":[[32815,0,"'-DGIT_HTML_PATH=\"$(htmldir_SQ)\"' \\\n\t\t"]]},{"span":[143474,144090],"parents":[143473],"agent":"Jeff King","seqStart":1114,"ops":[[6191,0,"PERL if you do not want Perl scripts or libraries at all.\n#\n# Define NO_"],[12339,0,"\nifndef NO_PERL\nOTHER_PROGRAMS +="],[12391,0,"endif\n"],[30484,0,"ifeq ($(PERL_PATH),)\nNO_PERL=NoThanks\nendif\n\n"],[32545,0,"ifndef NO_PERL\n"],[32653,0,"endif\n"],[34041,0,"ifndef NO_PERL\n"],[36407,0,"else # NO_PERL"],[36422,0,"$(patsubst %.perl,%,$(SCRIPT_PERL)) git-instaweb: % : unimplemented.sh\n\t$(QUIET_GEN)$(RM) $@ $@+ && \\\n\tsed -e '1s|#!.*/sh|#!$(SHELL_PATH_SQ)|' \\\n\t    -e 's|@@REASON@@|NO_PERL=$(NO_PERL)|g' \\\n\t    unimplemented.sh >$@+ && \\\n\tchmod +x $@+ && \\\n\tmv $@+ $@\nendif # NO_PERL\n\n"],[45762,25,""],[45796,0,"ifndef NO_PERL\n\t$(RM) gitweb/gitweb.cgi\n"],[45859,0,"endif\n"],[40106,0,"\t@echo NO_PERL=\\''$(subst ','\\'',$(subst ','\\'',$(NO_PERL)))'\\' >>$@\n"]]},{"span":[144090,144195],"parents":[143394],"agent":"David Aguilar","seqStart":0,"ops":[[9996,0,"difftool--helper.sh\nSCRIPT_SH += git-"],[10609,0,"difftool.perl\nSCRIPT_PERL += git-"],[10231,0,"mergetool--lib.sh\nSCRIPT_SH += git-"]]},{"span":[144195,144252],"parents":[142742],"agent":"Nguyễn Thái Ngọc Duy","seqStart":117,"ops":[[10683,29,""],[10891,28,""]]},{"span":[144252,144571],"parents":[143435,144089,144194,144251],"agent":"Johannes Sixt","seqStart":2972,"ops":[[7257,0,"#\n# Define UNRELIABLE_FSTAT if your system's fstat does not return the same\n# information on a not yet closed file that lstat would return for the same"],[7409,0,"# file after it was closed.\n\n"],[23863,0,"\tUNRELIABLE_FSTAT = UnfortunatelyYes\n"],[24586,0,"UNRELIABLE_FSTAT = UnfortunatelyYes\n\t"],[30800,0,"ifdef UNRELIABLE_FSTAT\n\tBASIC_CFLAGS += -DUNRELIABLE_FSTAT\nendif\n"]]},{"span":[144571,144592],"parents":[144570],"agent":"Junio C Hamano","seqStart":53761,"ops":[[42992,0,"ifndef NO_PERL\n"],[43078,0,"endif\n"]]},{"span":[144592,144937],"parents":[144591],"agent":"Johannes Schindelin","seqStart":5084,"ops":[[7437,0,"#"],[7439,0,"# Define UNRELIABLE_HARDLINKS if your operating systems has problems when\n# hardlinking a file to another name and unlinking the original file right\n# away (some NTFS drivers seem to zero the contents in that scenario).\n\n"],[24845,0,"UNRELIABLE_HARDLINKS = UnfortunatelySometimes\n\t"],[29186,0,"UNRELIABLE_HARDLINKS\n\tCOMPAT_CFLAGS += -DUNRELIABLE_HARDLINKS=1\nendif\nifdef "]]},{"span":[144937,144938],"parents":[144936],"agent":"Mark Drago","seqStart":0,"ops":[[44217,0,";"]]},{"span":[144938,144967],"parents":[144937],"agent":"Patrick Welche","seqStart":0,"ops":[[22955,0,"\tUSE_ST_TIMESPEC = YesPlease\n"]]},{"span":[144967,145060],"parents":[144966],"agent":"Jeff King","seqStart":1730,"ops":[[12790,14,""],[12791,43,""],[35513,0,"OTHER_PROGRAMS += gitweb/gitweb.cgi\n"]]},{"span":[145060,145154],"parents":[145059],"agent":"Eric Blake","seqStart":24,"ops":[[43644,0,"test '$(DESTDIR_SQ)$(gitexec_instdir_SQ)/$p' -ef '$(DESTDIR_SQ)$(gitexec_instdir_SQ)/$p$X' || "]]},{"span":[145154,145292],"parents":[145153],"agent":"Johannes Schindelin","seqStart":5429,"ops":[[7448,2,""],[7448,0,"OBJECT_C"],[7458,2,""],[7459,2,""],[7459,0,"TION_US"],[7467,0,"S"],[7469,2,""],[7470,3,""],[7470,0,"E"],[7472,1,""],[7472,0,"AME"],[7515,0,"\n#"],[7522,2,""],[24825,2,""],[24825,0,"OBJECT_C"],[24835,1,""],[24835,0,"AT"],[24838,3,""],[24838,0,"ON_US"],[24844,0,"S"],[24846,2,""],[24847,3,""],[24847,0,"E"],[24849,1,""],[24849,0,"AME"],[24869,3,""],[24869,0,"N"],[24871,3,""],[24872,0,"d"],[24874,0,"To"],[29172,2,""],[29172,0,"OBJECT_C"],[29182,2,""],[29183,2,""],[29183,0,"TION_US"],[29191,0,"S"],[29193,2,""],[29194,3,""],[29194,0,"E"],[29196,1,""],[29196,0,"AME"],[29221,7,""],[29221,0,"O"],[29223,1,""],[29223,0,"J"],[29225,0,"CT"],[29228,2,""],[29228,0,"C"],[29230,2,""],[29230,0,"EAT"],[29234,0,"O"],[29236,2,""],[29236,0,"_MODE"]]},{"span":[145292,145510],"parents":[105283,145291],"agent":"Junio C Hamano","seqStart":53782,"ops":[[48749,218,""]]},{"span":[145510,145551],"parents":[145509],"agent":"Christian Couder","seqStart":769,"ops":[[34640,41,""]]},{"span":[145551,145609],"parents":[145509],"agent":"Junio C Hamano","seqStart":54000,"ops":[[11798,25,""],[18123,0,"ktree.o\nBUILTIN_OBJS += builtin-m"]]},{"span":[145609,145638],"parents":[145509],"agent":"Tony Kemp","seqStart":0,"ops":[[22523,0,"USE_ST_TIMESPEC = YesPlease\n\t"]]},{"span":[145638,145960],"parents":[143021,145637],"agent":"Junio C Hamano","seqStart":54058,"ops":[[7268,161,""],[7667,0,"#\n# Define NO_CROSS_DIRECTORY_HARDLINKS if you plan to distribute the installed\n# programs as a tar, where bin/ and libexec/ might be on different file systems.\n"]]},{"span":[145960,145966],"parents":[145959],"agent":"Johannes Sixt","seqStart":3291,"ops":[[39431,0," git.o"]]},{"span":[145966,145996],"parents":[145965],"agent":"Junio C Hamano","seqStart":54380,"ops":[[21332,0,"NO_EXTERNAL_GREP = YesPlease\n\t"]]},{"span":[145996,146148],"parents":[145995],"agent":"Thomas Rast","seqStart":661,"ops":[[6060,0,"GNU_ROFF if your target system uses GNU groff.  This forces\n# apostrophes to be ASCII so that cut&pasting examples to the shell\n# will work.\n#\n# Define "]]},{"span":[146148,146181],"parents":[145637],"agent":"Junio C Hamano","seqStart":54410,"ops":[[21141,0,"ifneq ($(uname_R),5.11)\n\t\t"],[21197,0,"endif\n\t"]]},{"span":[146181,146503],"parents":[143021,145550,145637],"agent":"Junio C Hamano","seqStart":54443,"ops":[[7268,161,""],[7667,0,"#\n# Define NO_CROSS_DIRECTORY_HARDLINKS if you plan to distribute the installed\n# programs as a tar, where bin/ and libexec/ might be on different file systems.\n"]]},{"span":[146503,146539],"parents":[146502],"agent":"Johannes Schindelin","seqStart":5567,"ops":[[9272,0,"pathsep = :\n"],[24351,0,"pathsep = ;\n\t"],[35467,1,""],[35467,0,"$(pathsep)"]]},{"span":[146539,146700],"parents":[145959,146538],"agent":"Junio C Hamano","seqStart":54765,"ops":[[7828,161,""]]},{"span":[146700,147073],"parents":[146699],"agent":"Brandon Casey","seqStart":527,"ops":[[21624,1,""],[21624,0,"/usr/ucb/"],[3957,0,"EEDS_RESOLV if linking with -lnsl and/or -lsocket is not enough.\n# Notably on Solaris hstrerror resides in libresolv and on Solaris 7\n# inet_ntop and inet_pton additionally reside there.\n#\n# Define N"],[21449,26,""],[21787,0,"ifdef NO_IPV6\n\t\tNEEDS_RESOLV = YesPlease\n\tendif\n\t"],[28047,0,"EEDS_RESOLV\n\tEXTLIBS += -lresolv\nendif\nifdef N"],[21487,0,"N"],[21489,2,""],[21490,5,""],[21490,0,"MKSTEMPS"],[21501,10,""],[21501,0,"Y"],[21503,0,"sP"],[21506,2,""],[21507,0,"a"],[21509,0,"e"],[21903,0," -D__sun__"]]},{"span":[147073,147492],"parents":[147072],"agent":"Junio C Hamano","seqStart":54926,"ops":[[108,0,"HELL_PATH to a POSIX shell if your /bin/sh is broken.\n#\n# Define SANE_TOOL_PATH to a colon-separated list of paths to prepend\n# to PATH if your tools in /usr/bin are broken.\n#\n# Define S"],[21599,0,"SA"],[21602,0,"E_T"],[21606,0,"OL"],[21609,0,"PATH = /usr/xpg6/bin:/usr/xpg4/bin\n\tNO_"],[25982,0,"d"],[25984,0,"f SANE_TOOL_PATH\nBROKEN_PATH_FIX = s|^. @@PATH@@|PATH=$(SANE_TOOL_PATH)|\nPATH := $(SANE_TOOL_PATH):${PATH}\nelse\nBROKEN_PATH_FIX = d\nendif\n\nife"],[35592,0,"-e '/^# @@PATH@@/$(BROKEN_PATH_FIX)' \\\n\t    "]]},{"span":[147492,147735],"parents":[147491],"agent":"Brandon Casey","seqStart":900,"ops":[[21763,0,"7)\n\t\tNEEDS_RESOLV = YesPlease\n\t\tNO_IPV6 = YesPlease\n\t\tNO_SOCKADDR_STORAGE = YesPlease\n\t\tNO_UNSETENV = YesPlease\n\t\tNO_SETENV = YesPlease\n\t\tNO_STRLCPY = YesPlease\n\t\tNO_C99_FORMAT = YesPlease\n\t\tNO_STRTOUMAX = YesPlease\n\tendif\n\tifeq ($(uname_R),5."]]},{"span":[147735,147879],"parents":[147734],"agent":"Junio C Hamano","seqStart":55345,"ops":[[26244,0,"SANE_TOOL_PATH_SQ = $(subst ','\\'',$(SANE_TOOL_PATH))\n"],[26316,0,"'"],[26320,1,""],[26320,0,"\\#"],[26325,0,"BROKEN_"],[26336,0,"_FIX"],[26342,0,"$$"],[26345,5,""],[26345,0,"git_broken_path_fix "],[26381,0,"_SQ"],[26386,0,"'"],[26445,0,"'/^\\# @@BROKEN_PATH_FIX@@$$/"],[26474,0,"'"],[35955,14,""],[35973,1,""]]},{"span":[147879,148529],"parents":[146699],"agent":"David Aguilar","seqStart":105,"ops":[[2162,0,"MKSTEMP"],[2170,0," if you don't have mkstemps in the C library.\n#\n# Define NO_S"],[19799,0,"NO_MKSTEMPS = YesPlease\n\t"],[19920,0,"NO_MKSTEMPS = YesPlease\n\t"],[20215,0,"NO_MKSTEMPS = YesPlease\n\t"],[20749,0,"NO_MKSTEMPS = YesPlease\n\t"],[21482,0,"N"],[21484,0,"_MKSTEMPS = YesPlease\n\tO"],[22022,0,"MKSTEMPS = YesPlease\n\tNO_"],[23355,0,"\tNO_MKSTEMPS = Y"],[23372,0,"sPlease\ne"],[23484,0,"MK"],[23488,0,"EMPS = YesPlease\n\tNO_ST"],[23873,0,"\tNO_MKSTEMPS = YesPl"],[23894,0,"ase\ne"],[24021,0,"MK"],[24025,0,"EMPS = YesPlease\n\tNO_ST"],[24346,0,"MKSTEMPS = YesPlease\n\tNO_"],[25099,0,"NO_MK"],[25105,0,"TEMPS = YesPlease\n\tS"],[25825,0,"\tNO_MKSTEMPS = YesPlease\n"],[29446,0,"MKSTEMPS\n\tCOMPAT_CFLAGS += -DNO_MKSTEMPS\n\tCOMPAT_OBJS += compat/mkstemps.o\nendif\nifdef NO_"],[2230,0,"LIBGEN_H if you don't have libgen.h.\n#\n# Define NO_"],[24828,0,"LIBGEN_H = YesPlease\n\tNO_"],[26570,0,"LIBGEN_H\n\tCOMPAT_CFLAGS += -DNO_LIBGEN_H\n\tCOMPAT_OBJS += compat/basename.o\nendif\n\nifdef NO_"]]},{"span":[148529,148616],"parents":[145608,146180,148528],"agent":"Junio C Hamano","seqStart":55489,"ops":[[21542,0,"O_MKSTEMPS = YesPlease\n\t"],[21591,24,""],[42982,0,"test-parse-options.o: parse-options.h\n\n"]]},{"span":[148616,148674],"parents":[147878,148615],"agent":"Junio C Hamano","seqStart":55576,"ops":[[21947,51,""],[21969,7,""]]},{"span":[148674,148737],"parents":[145608,146180,146699],"agent":"Christian Couder","seqStart":810,"ops":[[15981,0,"place_object.o\nLIB_OBJS += re"],[18741,0,"place.o\nBUILTIN_OBJS += builtin-re"]]},{"span":[148737,148795],"parents":[145608,146180,146699],"agent":"Johannes Schindelin","seqStart":5603,"ops":[[25242,41,""],[33250,0,"QUIET_BUILT_IN)$("]]},{"span":[148795,149174],"parents":[148794],"agent":"Marius Storm-Olsen","seqStart":0,"ops":[[7828,0,"#\n# Define USE_NED_ALLOCATOR if you want to replace the platforms default\n# memory allocators with the nedmalloc allocator written by Niall Douglas.\n"],[25194,0,"SE_"],[25198,0,"ED_ALLOCATO"],[25210,0," = YesPlease\n\tUNR"],[31602,0,"def USE_NED_ALLOCATOR\n       COMPAT_CFLAGS += -DUSE_NED_ALLOCATOR -DOVERRIDE_STRDUP -DNDEBUG -DREPLACE_SYSTEM_ALLOCATOR -Icompat/nedmalloc\n       COMPAT_OBJS += compat/nedmalloc/nedmalloc.o\nendif\n\nif"]]},{"span":[149174,149499],"parents":[149173],"agent":"Steffen Prohaska","seqStart":1348,"ops":[[24603,21,""],[24758,25,""],[25525,0,"ifneq (,$(wildcard ../THIS_IS_MSYSGIT))\n\thtmldir=doc/git/html/\n\tprefix =\n\tINSTALL = /bin/install\n\tEXTLIBS += /mingw/lib/libz.a\n\tNO_R_TO_GCC_LINKER = YesPlease\n\tINTERNAL_QSORT = YesPlease\n\tTHREADED_DELTA_SEARCH = YesPlease\nelse\n\tNO_CURL = YesPlease\n\tNO_PTHREADS = YesPlease\nendif\n"]]},{"span":[149499,149512],"parents":[149498],"agent":"Johannes Sixt","seqStart":3297,"ops":[[47182,0,"compat/*/*.o "]]},{"span":[149512,149763],"parents":[148673,149511],"agent":"Jeff King","seqStart":1823,"ops":[[8481,0,"#"],[8483,0,"# Define NO_RE"],[8498,0,"EX if you have no or inferior regex support in your C library.\n\nG"],[26444,0,"NO_REGEX = YesPlease\n\t"],[26530,15,""],[26645,6,""],[26646,15,""],[33506,0,"ifdef NO_REGEX\n\tCOMPAT_CFLAGS += -Icompat/regex\n\tCOMPAT_OBJS += compat/regex/regex.o\nendif\n"],[22200,0,"NO_REGEX = YesPlease\n\t"]]},{"span":[149763,149779],"parents":[149762],"agent":"Brandon Casey","seqStart":1143,"ops":[[22866,0," -DHAVE_ALLOCA_H"]]},{"span":[149779,149827],"parents":[145965,149778],"agent":"Jeff King","seqStart":2074,"ops":[[46646,4,""],[46740,4,""],[46797,4,""],[46820,13,""],[46821,10,""],[46832,1,""],[46888,4,""],[46937,4,""],[46993,4,""]]},{"span":[149827,149872],"parents":[149826],"agent":"Junio C Hamano","seqStart":55634,"ops":[[46626,0,"test \""],[46633,0,"$bindir/\" = \"$$execdir/\" || \\\n\t\t{ $"],[46845,0,"; } "]]},{"span":[149872,150507],"parents":[149871],"agent":"Brandon Casey","seqStart":1159,"ops":[[2465,0,"EEDS_LIBGEN if your libgen needs -lgen when linking\n#\n# Define N"],[29789,0,"LIBGEN\n\tEXTLIBS += -lgen\nendif\nifdef NEEDS_"],[25000,0,")\n\tNO_SETENV = YesPlease\n\tNO_UNSETENV = YesPlease\n\tNO_STRCASESTR = YesPlease\n\tNO_MEMMEM = YesPlease\n\tNO_MKSTEMPS = YesPlease\n\tNO_MKDTEMP = YesPlease\n\tNO_MMAP = YesPlease\n\tNO_EXTERNAL_GREP = UnfortunatelyYes\n\tSNPRINTF_RETURNS_BOGUS = YesPlease\n\tSHELL_PATH = /usr/gnu/bin/bash\n\tNEEDS_LIBGEN = YesPlease\nendif\nifeq ($(uname_S),IRIX"],[25336,2,""],[25336,0,"SETEN"],[25342,1,""],[25357,0,"UN"],[25365,0," "],[25367,0," "],[25455,1,""],[25455,0,"MKD"],[25459,3,""],[25459,0,"EM"],[25462,0," = "],[25466,0,"esPlease\n\tNO_MMAP"],[25500,0,"EXTERNAL_GREP = UnfortunatelyYes\n\t"],[25535,6,""],[25535,0,"NP"],[25538,0,"INTF"],[25543,1,""],[25543,0,"RE"],[25546,0,"URNS_B"],[25553,2,""],[25554,1,""],[25554,0,"US "],[25558,0," "],[25600,2,""],[25600,0,"NEED"],[25605,2,""],[25606,2,""],[25607,1,""],[25607,0,"IB"],[25610,1,""],[25610,0,"EN"],[25613,1,""],[25615,2,""],[25615,0,"Yes"],[25619,28,""],[25620,10,""],[25621,1,""],[25621,0,"a"],[25623,34,""],[25623,0,"e"]]},{"span":[150507,150535],"parents":[145995,150506],"agent":"Junio C Hamano","seqStart":55679,"ops":[[22262,0,"\n\t"],[22267,4,""],[22268,4,""],[22268,0,"E"],[22270,1,""],[22271,1,""],[22271,0,"X"],[22286,2,""],[22289,0,"EXTE"],[22294,1,""],[22294,0,"NAL_"],[22299,0,"R"],[22301,1,""],[22301,0,"P"]]},{"span":[150535,151154],"parents":[150534],"agent":"Jakub Narebski","seqStart":552,"ops":[[10501,0,"JS = gitweb.js\nGITWEB_"],[39714,0,"J"],[39716,0,"++|$(G"],[39724,0,"W"],[39726,0,"B"],[39728,0,"JS)|g' \\\n\t    -e 's|++GITWEB_SITE_"],[39973,0," gitweb/gitweb.js"],[40316,0,"/@@GITWEB_JS@@/r gitweb/gitweb.js' \\\n\t    -e '/@@GITWEB_JS@@/d' \\\n\t    -e '"],[8625,0,"#\n# Define JSMIN to point to JavaScript minifier that functions as\n# a filter to have gitweb.js minified.\n"],[10190,0,"JavaScript minifier invocation that can function as filter\nJSMIN =\n\n# "],[10670,0,"ifdef JSMIN\n"],[10701,0,"min."],[10708,0,"else\n"],[10720,0,"J"],[10722,0," = gitweb.js\nendif\nGITWEB_S"],[38889,0,"ifdef JSMIN\nOTHER_PROGRAMS += gitweb/gitweb.cgi   gitweb/gitweb.min.js\ngitweb/gitweb.cgi: gitweb/gitweb.perl gitweb/gitweb.min.js\nelse\n"],[39098,0,"endif\n"],[41126,0,"ifdef JSMIN\ngitweb/gitweb.min.js: gitweb/gitweb.js\n\t$(QUIET_GEN)$(JSMIN) <$< >$@\nendif # JSMIN\n\n"]]},{"span":[151154,151489],"parents":[150534],"agent":"Daniel Barkalow","seqStart":1465,"ops":[[17168,0,"ansport-helper.o\nLIB_OBJS += tr"],[28841,0,"PROGRAMS += git-remote-http$X git-remote-https$X git-remote-ftp$X git-http-fetch$X\n\t"],[42390,0,"git-remote-http$X git-remote-https$X git-remote-ftp$X: remote-curl.o http.o http-walker.o $(GITLIBS)\n\t$(QUIET_LINK)$(CC) $(ALL_CFLAGS) -o $@ $(ALL_LDFLAGS) $(filter %.o,$^) \\\n\t\t$(LIBS) $(CURL_LIBCURL) $(EXPAT_LIBEXPAT)\n\n"]]},{"span":[151489,151796],"parents":[151488],"agent":"Linus Torvalds","seqStart":9228,"ops":[[28803,38,""],[28885,62,""],[42091,0,":"],[42093,0,"ht"],[42096,4,""],[42097,0,".h\n\nhttp."],[42107,1,""],[42107,0," h"],[42110,0,"tp-walker"],[42123,0,"$(LIB_H)\n\ngit-"],[42141,0,"-fetch$X: revision.o http"],[42167,0,"o "],[42170,0,"ttp-push.o $(GITLIBS)"],[42192,0,"\t$(QUIET_LINK)$(CC) $(ALL_CFLAGS) -o $@ $(ALL_LDFLAGS) $(filter %.o,$^) \\\n\t\t$(LIBS) $(CURL_LIBCURL) $(EXPAT_LIBEXPAT)"]]},{"span":[151796,151815],"parents":[151795],"agent":"Mike Ralphson","seqStart":135,"ops":[[42174,0,"walker.o htt"],[42187,2,""],[42187,0,"-fetc"]]},{"span":[151815,151833],"parents":[151814],"agent":"Jeff King","seqStart":2122,"ops":[[42306,18,""]]},{"span":[151833,152441],"parents":[151832],"agent":"Junio C Hamano","seqStart":55707,"ops":[[28803,1,""],[28803,0,"CU"],[28806,0,"L_SYN"],[28812,3,""],[28812,0,"NY"],[28817,1,""],[28834,0,"s"],[28849,2,""],[28849,0,"f"],[28852,1,""],[28854,0,"\n\tPROGRAMS"],[28865,0,"+= "],[28879,1,""],[28879,0,"ht"],[28886,0,"$(CURL_SYNONYMS) "],[34878,0,"LNCP     = @echo '   ' LN/CP $@;\n\tQUIET_"],[42575,36,""],[42744,0,"CURL_SYNONYMS): git-remote-http$X\n\t$(QUIET_LNCP)$(RM) $@ && \\\n\tln $< $@ 2>/dev/null || \\\n\tln -s $< $@ 2>/dev/null || \\\n\tcp $< $@\n\n$("],[13611,1,""],[13625,0,","],[13627,0,"# excluding programs for built-in commands\n"],[46926,0,"filter-out $(CURL_SYNONYMS), $("],[46970,0,")"],[48223,0,"{ for p in $(CURL_SYNONYMS); do \\\n\t\t$(RM) \"$$execdir/$$p\" && \\\n\t\tln \"$$execdir/git-remote-http$X\" \"$$execdir/$$p\" 2>/dev/null || \\\n\t\tln -s \"git-remote-http$X\" \"$$execdir/$$p\" 2>/dev/null || \\\n\t\tcp \"$$execdir/git-remote-http$X\" \"$$execdir/$$p\" || exit; \\\n\t  done; } && \\\n\t"]]},{"span":[152441,152930],"parents":[152440],"agent":"Daniel Barkalow","seqStart":1800,"ops":[[28846,53,""],[28869,4,""],[28869,0,"curl"],[28876,17,""],[42542,4,""],[42542,0,"curl"],[42717,3,""],[42718,129,""],[47971,27,""],[47973,244,""]]},{"span":[152930,152962],"parents":[152929],"agent":"Junio C Hamano","seqStart":56315,"ops":[[46724,31,""],[46736,1,""]]},{"span":[152962,153010],"parents":[150534],"agent":"Junio C Hamano","seqStart":56347,"ops":[[13472,0,"tat$X\nBUILT_INS += git-s"],[13472,24,""]]},{"span":[153010,153266],"parents":[150534],"agent":"Linus Torvalds","seqStart":9535,"ops":[[3567,0,"BLK_SHA1 environment variable if you want the C version\n# of the SHA1 that assumes you can do unaligned 32-bit loads and\n# have a fast htonl() function.\n#\n# Define "],[33009,0,"BLK_SHA1\n\tSHA1_HEADER = \"block-sha1/sha1.h\"\n\tLIB_OBJS += block-sha1/sha1.o\nelse\nifdef "],[33433,0,"endif\n"]]},{"span":[153266,153969],"parents":[153265],"agent":"Nicolas Pitre","seqStart":1408,"ops":[[723,5,""],[723,0,"B"],[725,1,""],[725,0,"K"],[3836,118,""],[3843,143,""],[3844,1,""],[3845,69,""],[3846,1,""],[3847,3,""],[3848,7,""],[3849,61,""],[27178,9,""],[27179,9,""],[27180,73,""],[29415,5,""],[29415,0,"B"],[29417,1,""],[29417,0,"K"],[32672,15,""],[32688,166,""],[32731,12,""]]},{"span":[153969,154079],"parents":[153968],"agent":"Jonathan Nieder","seqStart":78,"ops":[[3593,4,""],[3593,0,"t"],[3595,1,""],[3596,1,""],[3596,0,"m"],[3598,5,""],[3598,0,"k"],[3601,5,""],[3601,0,"u"],[3603,5,""],[3603,0,"e"],[3612,20,""],[3612,0,"b"],[3614,3,""],[3615,1,""],[3616,5,""],[3617,3,""],[3618,17,""],[3622,3,""],[3622,0,"optimiz"],[3630,0,"d"],[3632,1,""],[3632,0,"C"],[3634,4,""],[3634,0,"SHA1"],[3639,2,""],[3639,0,"r"],[3641,6,""],[3642,2,""],[3644,1,""],[3645,0,"e"]]},{"span":[154079,154128],"parents":[148736,153265],"agent":"Brandon Casey","seqStart":1794,"ops":[[23056,49,""]]},{"span":[154128,154210],"parents":[153968,154127],"agent":"René Scharfe","seqStart":809,"ops":[[12670,37,""],[19892,0,"date-server-info.o\nBUILTIN_OBJS += builtin-up"]]},{"span":[154210,154417],"parents":[154209],"agent":"Brian Gernhardt","seqStart":1094,"ops":[[3855,3,""],[3855,0,"CRYPTO"],[3867,6,""],[3867,0,"SSL"],[3893,0,"hen us"],[3900,2,""],[3900,0,"ng"],[3936,0,"SS"],[3939,0,"_W"],[3942,0,"TH_CRYPTO if you need -lssl when using -lcrypto (Darwin).\n#\n# Define NEEDS_LI"],[21618,0,"CRYPTO_WITH_SSL = YesPlease\n\tNEEDS_"],[29523,0,"\tifdef NEEDS_CRYPTO_WITH_SSL\n\t\tOPENSSL_LINK += -lcrypto\n\tendif\n"]]},{"span":[154417,154456],"parents":[154209],"agent":"Jeff King","seqStart":2140,"ops":[[13701,0,"dvice.h\nLIB_H += a"],[14830,0,"dvice.o\nLIB_OBJS += a"]]},{"span":[154456,156167],"parents":[152961,154416,154455],"agent":"Marius Storm-Olsen","seqStart":379,"ops":[[26100,0,"def MSVC\n\tpathsep = ;\n\tNO_PREAD = YesPlease\n\tNO_OPENSSL = YesPlease\n\tNO_LIBGEN_H = YesPlease\n\tNO_SYMLINK_HEAD = YesPlease\n\tNO_IPV6 = YesPlease\n\tNO_SETENV = YesPlease\n\tNO_UNSETENV = YesPlease\n\tNO_STRCASESTR = YesPlease\n\tNO_STRLCPY = YesPlease\n\tNO_MEMMEM = YesPlease\n\t# NEEDS_LIBICONV = YesPlease\n\tNO_ICONV = YesPlease\n\tNO_C99_FORMAT = YesPlease\n\tNO_STRTOUMAX = YesPlease\n\tNO_STRTOULL = YesPlease\n\tNO_MKDTEMP = YesPlease\n\tNO_MKSTEMPS = YesPlease\n\tSNPRINTF_RETURNS_BOGUS = YesPlease\n\tNO_SVN_TESTS = YesPlease\n\tNO_PERL_MAKEMAKER = YesPlease\n\tRUNTIME_PREFIX = YesPlease\n\tNO_POSIX_ONLY_PROGRAMS = YesPlease\n\tNO_ST_BLOCKS_IN_STRUCT_STAT = YesPlease\n\tNO_NSEC = YesPlease\n\tUSE_WIN32_MMAP = YesPlease\n\t# USE_NED_ALLOCATOR = YesPlease\n\tUNRELIABLE_FSTAT = UnfortunatelyYes\n\tOBJECT_CREATION_USES_RENAMES = Unfortu"],[26901,0,"atelyNeedsTo\n\tNO_REGEX = Y"],[26928,0,"sPlease\n\tNO_CURL = YesPlease\n\tNO_PTHREADS = YesPlease\n\n\tCC = compat/vcbuild/scripts/clink.pl\n\tAR = compat/vcbuild/scripts/lib.pl\n\tCFLAGS =\n\tBASIC_CFLAGS = -nologo -I. -I../zlib -Icompat/vcbuild -Icompat/vcbuild/include -DWIN32-D_CONSOLE -DHAVE_STRING_H -D_CRT_SECURE_NO_WARNINGS -D_CRT_NONSTDC_NO_DEPRECATE\n\tCOMPAT_OBJS = compat/msvc.o compat/fnmatch/fnmatch.o compat/winansi.o\n\tCOMPAT_CFLAGS = -D__USE_MINGW_ACCESS -DNOGDI -DHAVE_STRING_H -DHAVE_ALLOCA_H -Icompat -Icompat/fnmatch -Icompat/regex -Icompat/fnmatch -DSTRIP_EXTENSION=\\\".exe\\\"\n\tBASIC_LDFLAGS = -IGNORE:4217 -IGNORE:4049 -NOLOGO -SUBSYSTEM:CONSOLE -NODEFAULTLIB:MSVCRT.lib\n\tEXTLIBS = advapi32.lib shell32.lib wininet.lib ws2_32.lib\n\tlib =\nifndef DEBUG\n\tBASIC_CFLAGS += -GL -Os -MT\n\tBASIC_LDFLAGS += -LTCG\n\tAR += -LTCG\nelse\n\tBASIC_CFLAGS += -Zi -MTd\nendif\n\tX = .exe\nelse\nifne"],[29107,0,"endif\n"],[38461,0,"o $@ -"],[26110,0,"GIT_VERSION := $(GIT_VERSION).MSVC\n\t"]]},{"span":[156167,156168],"parents":[156166],"agent":"Ramsay Jones","seqStart":263,"ops":[[27190,0," "]]},{"span":[156168,156244],"parents":[156166],"agent":"Erik Faye-Lund","seqStart":0,"ops":[[12501,0,"map-se"],[12509,0,"$X\nPROGRAMS += git-ind"],[31070,29,""],[27902,1,""],[27902,0,"EEDS"],[27907,1,""],[27907,0,"CRY"],[27911,2,""],[27911,0,"TO_WITH_"]]},{"span":[156244,156263],"parents":[156243],"agent":"Marius Storm-Olsen","seqStart":2090,"ops":[[26210,1,""],[26210,0,"EEDS"],[26215,1,""],[26215,0,"CRY"],[26219,2,""],[26219,0,"TO_WITH_"]]},{"span":[156263,156307],"parents":[156262],"agent":"Johannes Sixt","seqStart":3310,"ops":[[27057,0,"\tBLK_SHA1 = YesPlease\n"],[28709,0,"BLK_SHA1 = YesPlease\n\t"]]},{"span":[156307,156352],"parents":[156166],"agent":"Johannes Schindelin","seqStart":5661,"ops":[[14779,0,"submodule.h\nLIB_H += "],[17021,0,"ubmodule.o\nLIB_OBJS += s"]]},{"span":[156352,157257],"parents":[156166],"agent":"Brandon Casey","seqStart":1843,"ops":[[22379,0,"THREADED_DELTA_SEARCH = YesPlease\n\t"],[25380,0,"\tTHREADED_DELTA_SEARCH = YesPlease\n"],[25739,0,"\tTHREADED_DELTA_SEARCH = YesPlease\n"],[25229,0,"# When compiled with the MIPSpro 7.4.4m compiler, and without pthreads\n\t# (i.e. NO_PTHREADS is set), and _with_ MMAP (i.e. NO_MMAP is not set),\n\t# git dies with a segmentation fault when trying to access the first\n\t# entry of a reflog.  The conservative choice is made to always set\n\t# NO_MMAP.  If you suspect that your compiler is not affected by this\n\t# issue, comment out the NO_MMAP statement.\n\t"],[25990,0,"# When compiled with the MIPSpro 7.4.4m compiler, and without pthreads\n\t# (i.e. NO_PTHREADS is set), and _with_ MMAP (i.e. NO_MMAP is not set),\n\t# git dies with a segmentation fault when trying to access the first\n\t# entry of a reflog.  The conservative choice is made to always set\n\t# NO_MMAP.  If you suspect that your compiler is not affected by this\n\t# issue, comment out the NO_MMAP statement.\n\t"]]},{"span":[157257,157408],"parents":[156167,157256],"agent":"Jonathan Nieder","seqStart":188,"ops":[[6459,0,"\n# (not v1.73 or v1.71).\n#\n# Define ASCIIDOC_NO_ROFF if your DocBook XSL escapes raw roff directives\n# (versions 1.72 and later and 1.68.1 and earlier)"]]},{"span":[157408,157471],"parents":[157407],"agent":"Johannes Schindelin","seqStart":5706,"ops":[[14525,0,"n"],[14527,0,"tes.h\nLIB_H += o"],[16363,0,"notes.o\nLIB_OBJS += "],[11713,0,"notes.sh\nSCRIPT_SH += git-"]]},{"span":[157471,157805],"parents":[157407],"agent":"Ramsay Jones","seqStart":264,"ops":[[23743,0,"\tCOMPAT_OBJS += compat/cygwin.o\n\tUNRELIABLE_FSTAT = Unfortunat"],[23806,0,"lyYes\ne"],[27099,11,""],[27100,105,""],[9091,0,"ifdef MSVC\n\t"],[9105,0,"avoid the MingW and "],[9126,0,"ygwin configuration sections\n\tuname_S := Windows\n\tuname_O := Windows\nendif\n\n# C"],[27220,1,""],[27221,1,""],[27221,0,"q"],[27223,1,""],[27223,0,"($(uname_"],[27233,2,""],[27233,0,"),Windows)"],[28929,3,""],[28929,0,"ndif"],[30266,2,""],[30267,4,""]]},{"span":[157805,157865],"parents":[157407],"agent":"Philippe Bruhat (BooK)","seqStart":0,"ops":[[46915,0,"PERL_PATH=\\''$(subst ','\\'',$(PERL_PATH_SQ))'\\' >>$@\n\t@echo "]]},{"span":[157865,157906],"parents":[157407],"agent":"Ramsay Jones","seqStart":598,"ops":[[23524,0,"NO_ST_BLOCKS_IN_STRUCT_STAT = YesPlease\n\t"]]},{"span":[157906,157937],"parents":[157407],"agent":"Shawn O. Pearce","seqStart":16136,"ops":[[12942,0,"PROGRAMS += git-http-backend$X\n"]]},{"span":[157937,157947],"parents":[157407],"agent":"Carlos R. Mafra","seqStart":0,"ops":[[52490,1,""],[52490,0,"bl"],[52493,5,""],[52493,0,"ck"]]},{"span":[157947,157958],"parents":[157946],"agent":"Sebastian Schuberth","seqStart":0,"ops":[[38859,0,"-d '$p' -o "]]},{"span":[157958,158263],"parents":[157957],"agent":"Johan Herland","seqStart":48,"ops":[[6826,0,"PY"],[6829,0,"HON if you do not want Python scripts or libraries at all.\n#\n# Define NO_T"],[11430,0,"PYTHON =\n"],[11440,0,"CRIPT_S"],[12523,0,"$(patsubst %.py,%,$(SCRIPT_PYTHON)) \\\n\t  "],[14045,0,"ifndef PYTHON_PATH"],[14064,0,"\tPYTHON_PATH = /usr/bin/python\n"],[14096,0,"ndif\n\ne"],[14119,0,"export PYTHON_PATH\n"],[37189,0,"ifeq ($(PYTHON_PATH),)\nNO_PYTHON=NoThanks\nendif\n\n"],[38587,0,"PYTHON_PATH_SQ = $(subst ','\\'',$(PYTHON_PATH))\n"]]},{"span":[158263,159546],"parents":[158262],"agent":"Sverre Rabbelier","seqStart":0,"ops":[[39484,0,"ifndef NO_PYTHON\n"],[39518,0,"gi"],[39521,0,"_r"],[39525,0,"ote_hel"],[39533,0,"ers $(QUIET_SUBDIR1) PYTHON_PATH='$(PYTHON_PATH_SQ)' prefix='$(prefix_SQ)' all\nendif\n\t$(QUIET_SUBDIR0)temp"],[43690,0,"ifndef NO_PYTHON\n$(patsubst %.py,%,$(SCRIPT_PYTHON)): GIT-CFLAGS\n$(patsubst %.py,%,$(SCRIPT_PYTHON)): % : %.py\n\t$(QUIET_GEN)$(RM) $@ $@+ && \\\n\tINSTLIBDIR=`MAKEFLAGS= $(MAKE) -C git_remote_helpers -s \\\n\t\t--no-print-dire"],[43909,0,"t"],[43911,0,"ry prefix='$(prefix_SQ)' DESTDIR='$(DESTDIR_SQ)' \\\n\t\tinstlibdir` && \\\n\tsed -e '1{' \\\n\t    -e '\ts|#!.*pytho"],[44018,0,"|#!$(PYTHON_PATH_SQ)|' \\\n\t    -e '}' \\\n\t    -e 's|^import sys.*|&; \\\\\\\n\t           import os; \\\\\\\n\t           sys.path[0] = os.environ.has_key(\"GITPYTHONLIB\") and \\\\\\\n\t                         os.environ[\"GITPYTHONLIB\"] or \\\\\\\n\t                         \"@@INSTLIBDIR@@\"|' \\\n\t    -e 's|@@INSTLIBDIR@@|'\"$$INSTLIBDIR\"'|g' \\\n\t    $@.py >$@+ && \\\n\tchmod +x $@+ && \\\n\tmv $@+ $@\nelse # NO_PYTHON\n$(patsubst %.py,%,$(SCRIPT_PYTHON)): % : unimplemented.sh\n\t$(QUIET_GEN)$(RM) $@ $@+ && \\\n\tsed -e '1s|#!.*/sh|#!$(SHELL_PATH_SQ)|' \\\n\t    -e 's|@@REASON@@|NO_PYTHON=$(NO_PYTHON)|g' \\\n\t    unimplemented.sh >$@+ && \\\n\tchmod +x $@+ && \\\n\tmv $@+ $@\nendif # NO_PYTHON\n\ncon"],[51067,0,"PYTHON\n\t$(MAKE) -C git_remote_helpers prefix='$(prefix_SQ)' DESTDIR='$(DESTDIR_SQ)' install\nendif\nifndef NO_"],[54617,0,"ifndef NO_PYTHON\n\t$(MAKE) -C git_remote_helpers clean\nendif\n"]]},{"span":[159546,159619],"parents":[159545],"agent":"Jeff King","seqStart":2179,"ops":[[48538,0,"\t@echo NO_PYTHON=\\''$(subst ','\\'',$(subst ','\\'',$(NO_PYTHON)))'\\' >>$@\n"]]},{"span":[159619,160191],"parents":[157957],"agent":"Jonathan Nieder","seqStart":339,"ops":[[8620,0,"#\n# Define DEFAULT_EDITOR to a sensible editor command (defaults to \"vi\") if you\n# want to use something different.  The value will be interpreted by the shell\n# if necessary when it is used.  Examples:\n#\n#   DEFAULT_EDITOR='~/bin/vi',\n#   DEFAULT_EDITOR='$GIT_FALLBACK_EDITOR',\n#   DEFAULT_EDITOR='\"C:\\Program Files\\Vim\\gvim.exe\" --nofork'\n"],[38846,0,"# Quote for C\n\nifdef DEFAULT_EDITOR\nDEFAULT_EDITOR_CQ = \"$(subst \",\\\",$(subst \\,\\\\,$(DEFAULT_EDITOR)))\"\nDEFAULT_EDITOR_CQ_SQ = $(subst ','\\'',$(DEFAULT_EDITOR_CQ))\n\nBASIC_CFLAGS += -DDEFAULT_EDITOR='$(DEFAULT_EDITOR_CQ_SQ)'\nendif\n\n"]]},{"span":[160191,160590],"parents":[160190],"agent":"Junio C Hamano","seqStart":56395,"ops":[[8639,0,"PAGER to a sensible pager command (defaults to \"less\") if\n# you want to use something different.  The value will be interpreted by the\n# shell at runtime when it is used.\n#\n# Define D"],[8823,0,"FAULT_E"],[39267,0,"ifdef DEFAULT_PAGER\nDEFAULT_PAGER_CQ = \"$(subst \",\\\",$(subst \\,\\\\,$(DEFAULT_PAGER)))\"\nDEFAULT_PAGER_CQ_SQ = $(subst ','\\'',$(DEFAULT_PAGER_CQ))\n\nBASIC_CFLAGS += -DDEFAULT_PAGER='$(DEFAULT_PAGER_CQ_SQ)'\nendif\n\n"]]},{"span":[160590,160614],"parents":[157957],"agent":"Dmitry V. Levin","seqStart":13,"ops":[[14133,0,"bswap.h\nLIB_H += compat/"]]},{"span":[160614,160652],"parents":[146147,156351,160613],"agent":"Jonathan Nieder","seqStart":911,"ops":[[18686,38,""]]},{"span":[160652,160752],"parents":[157407],"agent":"Todd Zullinger","seqStart":0,"ops":[[51764,0,"\\\n\t\t--define \"_source_filedigest_algorithm md5\" \\\n\t\t--define \"_binary_filedigest_algorithm md5\" \\\n\t\t"]]},{"span":[160752,160773],"parents":[156306,157470,157804,157864,157936,160589,160651,160751],"agent":"Martin Storsjö","seqStart":0,"ops":[[29971,21,""]]},{"span":[160773,160781],"parents":[157905,160772],"agent":"Jonathan Nieder","seqStart":949,"ops":[[54083,8,""]]},{"span":[160781,161817],"parents":[160780],"agent":"Matthew Ogilvie","seqStart":0,"ops":[[14626,0,"what test wrappers are needed and 'install' will install, in bindir\nBINDIR_PROGRAMS_NEED_X += git\nBINDIR_PROGRAMS_NEED_X += git-upload-pack\nBINDIR_PROGRAMS_NEED_X += git-receive-pack\nBINDIR_PROGRAMS_NEED_X += git-upload-archive\nBINDIR_PROGRAMS_NEED_X += git-shell\n\nBINDIR_PROGRAM"],[14906,0,"_NO_X += git-cvsserver\n\n# S"],[49293,0,"_NEED_X"],[49316,2,""],[49330,0,"_NEED_X"],[49351,2,""],[49365,0,"_NEED_X"],[49385,2,""],[49399,0,"_NEED_X"],[49420,2,""],[49434,0,"_NEED_X"],[49465,2,""],[49479,0,"_NEED_X"],[49504,2,""],[49518,0,"_NEED_X"],[49545,2,""],[49559,0,"_NEED_X"],[49588,2,""],[49602,0,"_NEED_X"],[49628,2,""],[49642,0,"_NEED_X"],[49662,2,""],[49676,0,"_NEED_X"],[49700,0,"\n\nTEST_PROGRAMS = $(patsubst %,%$X,$(TEST_PROGRAMS_NEED_X))\n\ntest_bindir_programs := $(patsubst %,bin-wrappers/%,$(BINDIR_PROGRAMS_NEED_X) "],[49840,0,"(BINDIR_PROGRAMS_NO_X) $(TEST_PROGRAMS_NEED_"],[49885,0,"))"],[49911,0," $(test_bindir_programs)\n\nbin-wrappers/%: wrap-for-bin.sh\n\t@mkdir -p bin-wrappers\n\t$(QUIET_GEN)sed -e '1s|#!.*/sh|#!$(SHELL_PATH_SQ)|' \\\n\t     -e 's|@@BUILD_DIR@@|$(shell pwd)|' \\\n\t     -e 's|@@PROG@@|$(@F)|' < $< > $@ && \\\n\tchmod +x $@"],[51432,0,"_bindir_programs "],[51450,0,"="],[51452,0,"$(p"],[51456,0,"tsubst %,%$X,$(BINDIR_PROGRAMS_NEED_X)) $(BINDIR_PROGRAMS_NO_X)\n\ninsta"],[51528,0,": all"],[51720,3,""],[51721,3,""],[51721,0,"("],[51723,0,"ns"],[51726,3,""],[51726,0,"al"],[51729,2,""],[51729,0,"_bin"],[51734,9,""],[51735,2,""],[51736,19,""],[51736,0,"_"],[51738,1,""],[51738,0,"r"],[51740,0,"gr"],[51743,16,""],[51743,0,"m"],[51745,20,""],[51745,0,")"],[55044,0,"-r bin-wrappers\n\t$(RM) "]]},{"span":[161817,161818],"parents":[151153,159545,160780],"agent":"Junio C Hamano","seqStart":56794,"ops":[[45620,0,"\n"]]},{"span":[161818,162575],"parents":[161817],"agent":"Ilari Liusvaara","seqStart":0,"ops":[[14778,0,"ifdef NO_CURL\nREMOTE_CURL_PRIMARY =\nREMOTE_CURL_ALIASES =\nREMOTE_CURL_NAMES =\nelse\nREMOTE_CURL_PRIMARY = git-remote-http$X\nREMOTE_CURL_ALIASES = git-remote-https$X git-remote-ftp$X git-remote-ftps$X\nREMOTE_CURL_NAMES = $(REMOTE_CURL_PRIMARY) $(REMOTE_CURL_ALIASES)\nendif\n\n"],[33192,15,""],[33193,1,""],[33193,0,"(REMOTE_CURL_NAMES)"],[48839,9,""],[48839,0,"$(REMOTE_CURL_ALIASES): $(REMOTE_CURL_PRIMARY)\n\t$(QUIET_LNCP)$(RM) $@ && \\\n\tln $< $@ 2>/d"],[48929,0,"v/null || \\\n\tln "],[48946,1,""],[48946,0,"s $< $@ 2>/dev/n"],[48963,1,""],[48964,0,"l || \\\n\tcp "],[48976,1,""],[48976,0,"< $@\n\n$(REMOTE_CURL_PRIMARY)"],[54030,0,"\n"],[54614,0,"{ for p in $(REMOTE_CURL_ALIASES); do \\\n\t\t$(RM) \"$$execdir/$$p\" && \\\n\t\tln \"$$execdir/git-remote-http$X\" \"$$execdir/$$p\" 2>/dev/null || \\\n\t\tln -s \"git-remote-http$X\" \"$$execdir/$$p\" 2>/dev/null || \\\n\t\tcp \"$$execdir/git-remote-http$X\" \"$$execdir/$$p\" || exit; \\\n\t  done; } && \\\n\t"]]},{"span":[162575,162611],"parents":[162574],"agent":"Johannes Sixt","seqStart":3354,"ops":[[51763,0,"run-command$X\nTEST_PROGRAMS += test-"]]},{"span":[162611,162998],"parents":[151153,160780],"agent":"Junio C Hamano","seqStart":56795,"ops":[[7765,218,""],[23476,5,""],[23477,25,""],[26854,36,""],[26855,1,""],[27581,37,""],[37348,18,""],[37349,4,""],[37350,15,""],[37351,2,""],[37352,4,""],[37353,22,""]]},{"span":[162998,163049],"parents":[151153,160780],"agent":"Junio C Hamano","seqStart":57182,"ops":[[15952,0,"solve-undo.h\nLIB_H += re"],[18100,0,"solve-undo.o\nLIB_OBJS += re"]]},{"span":[163049,163050],"parents":[151153,159618,160780],"agent":"Junio C Hamano","seqStart":57233,"ops":[[45620,0,"\n"]]},{"span":[163050,163073],"parents":[151153,160780],"agent":"Junio C Hamano","seqStart":57234,"ops":[[25108,0,"OLD_ICONV = YesPlease\n\t"]]},{"span":[163073,163084],"parents":[153009,163049,163072],"agent":"Jonathan Nieder","seqStart":957,"ops":[[47154,0," GIT-CFLAGS"]]},{"span":[163084,163856],"parents":[163083],"agent":"Jonathan Nieder","seqStart":968,"ops":[[47107,0," .FORCE-LISTING"],[57379,0," .FORCE-LISTING"],[41542,4,""],[41543,2,""],[41555,0,"\ngit.o:"],[41563,4,""],[41563,0,"ALL_"],[41573,18,""],[41574,0,"+= "],[41613,1,""],[41646,44,""],[41793,15,""],[41807,11,""],[41808,18,""],[41808,0,"builtin"],[41816,4,""],[41816,0,"help"],[41822,3,""],[41822,0,":"],[41824,2,""],[41834,1,""],[41835,0,"+= "],[41841,1,""],[41877,1,""],[41913,1,""],[41946,3,""],[47135,11,""],[47136,7,""],[47137,35,""],[47146,1,""],[47147,0,"+= "],[47152,1,""],[47193,1,""],[47230,1,""],[47256,2,""],[47257,5,""],[47277,60,""],[47287,1,""],[47288,0,"+= \\\n\t"],[47343,3,""],[47355,16,""],[47356,35,""],[47365,1,""],[47366,0,"+= "],[47408,3,""],[47417,47,""],[47418,2,""],[47428,1,""],[47429,0,"+= "],[47471,3,""],[47507,0,".h\nhttp"],[47522,39,""],[47523,8,""],[47523,0,":"],[47525,2,""],[47535,1,""],[47536,0,"+= "],[47549,3,""],[41560,0,"s git."],[41827,0,"s builtin-help."],[47154,0,"s exec_cmd."],[47306,0,"s builtin-init-db."],[47402,0,"s config."],[47474,0,"s http."],[47588,0,"s http-walker."],[9504,1,""],[9508,17,""],[47007,1,""],[47012,8,""],[49601,1,""],[49606,11,""],[50003,1,""],[50008,18,""],[50538,1,""],[50543,13,""],[50721,1,""],[50722,28,""],[56900,1,""],[56904,17,""],[56922,66,""]]},{"span":[163856,165549],"parents":[105361,163072],"agent":"Jonathan Nieder","seqStart":1740,"ops":[[15236,0,"lor.h\nLIB_H += co"],[15451,0,"exec_cmd.h\nLIB_H += "],[16300,0,"LIB_H += xdiff-interface.h\nLIB_H += xdiff/xdiff.h\n"],[36936,0,"\tLIB_H += block-sha1/sha1.h\n"],[37050,0,"\tLIB_H += ppc/sha1.h\n"],[46909,0," remote-curl.o"],[46953,0," remote-curl.o"],[47630,0,"b"],[47632,0,"anch.o builtin-ch"],[47650,0,"ckout.o builtin-clone.o builtin-reset.o branch.o: branch.h\nbuiltin-bundle.o bundle.o transport.o: bundle.h\nbuiltin-bisect--helper.o builtin-re"],[47793,0,"-list.o bisect.o: bisect.h\nbuiltin-clon"],[47833,0,".o builtin-fetch-pack.o transport.o: fetch-pack.h\nbuiltin-send-pack.o transport.o: send-pack.h\nbuiltin-log.o builtin-shortlog.o: shortlog.h\nbuiltin-prune.o builtin-reflog.o reachable.o: reachable.h\nbuiltin-reve"],[48073,0,"builtin-tar-tree.o archive-tar.o: tar.h\nbuiltin-pack-objects.o: thread-utils.h\nhttp-fetch.o http-walker.o remote-curl.o transport.o walker.o: walker.h\n"],[48408,0,"xdiff-interface.o "],[48441,0,"\\\n\t"],[14069,0,"TEST_PROGRAMS += test-chmtime$X\nTEST_PROGRAMS += test-ctype$X\nTEST_PROGRAMS += test-date$X\nTEST_PROGRAMS += test-delta$X\nTEST_PROGRAMS += test-dump-cache-tree$X\nTEST_PROGRAMS += test-genrandom$X\nTEST_PROGRAMS += test-match-trees$X\nTEST_PROGRAMS += test-parse-options$X\nTEST_PROGRAMS += test-path-utils$X\nTEST_PROGRAMS += test-sha1$X\nTEST_PROGRAMS += test-sigchain$X\n\n"],[22064,0,"TEST_OBJS := $(patsubst test-%$X,test-%.o,$(TEST_PROGRAMS))\n\n"],[48016,0,"$(TEST_OBJS) "],[50802,254,""],[50803,44,""],[50804,68,""],[50805,1,""],[51158,22,""],[51173,17,""],[51188,29,""],[51193,2,""],[51194,4,""],[51194,0,"BJ"],[51197,1,""],[16655,21,""],[48459,0,"commit.o builtin-"],[46938,7,""],[48016,18,""]]},{"span":[165549,165587],"parents":[150534],"agent":"Nguyễn Thái Ngọc Duy","seqStart":174,"ops":[[44847,0,"TEST_PROGRAMS += test-index-version$X\n"]]},{"span":[165587,165668],"parents":[161816,163083,165586],"agent":"Junio C Hamano","seqStart":57257,"ops":[[51848,0,"TEST_PROGRAMS_NEED_X += test-index-version\n"],[52077,38,""]]},{"span":[165668,165669],"parents":[162574,165667],"agent":"Junio C Hamano","seqStart":57338,"ops":[[46225,1,""]]},{"span":[165669,165715],"parents":[165668],"agent":"Erik Faye-Lund","seqStart":76,"ops":[[30077,0,"YTHON = YesPlease\n\tNO_P"],[31753,0,"NO_PYTHON = YesPlease\n\t"]]},{"span":[165715,165941],"parents":[165714],"agent":"Andrzej K. Haczewski","seqStart":0,"ops":[[16112,0,"ompat/win32/pthread.h\nLIB_H += c"],[30128,2,""],[30128,0,"BLK"],[30132,2,""],[30132,0,"S"],[30134,2,""],[30135,2,""],[30135,0,"1"],[30150,1,""],[30150,0,"THREADED_DE"],[30162,1,""],[30162,0,"TA"],[30166,0,"EARC"],[30171,2,""],[30508,0," compat/win32/pthread.o"],[30669,0,"Icompat/win32 -"],[31878,0,"THREADED_DELTA_SEARCH = YesPlease\n\t"],[32102,0," \\"],[32106,0,"\tcompat/win32/pthread.o\n\t"],[32348,35,""],[32361,25,""]]},{"span":[165941,166465],"parents":[163855,165940],"agent":"Johannes Sixt","seqStart":3390,"ops":[[14760,272,""],[33117,0,"\tREMOTE_CURL_PRIMARY =\n\tREMOTE_CURL_ALIASES =\n\tREMOTE_CURL_NAMES =\n"],[33414,0,"REMOTE_CURL_PRIMARY = git-remote-http$X\n\tREMOTE_CURL_ALIASES = git-remote-https$X git-remote-ftp$X git-remote-ftps$X\n\tREMOTE_CURL_NAMES = $(REMOTE_CURL_PRIMARY) $(REMOTE_CURL_ALIASES)\n\t"]]},{"span":[166465,166474],"parents":[162610,162997,166464],"agent":"Junio C Hamano","seqStart":57339,"ops":[[51587,2,""],[51601,0,"_NEED_X"]]},{"span":[166474,167072],"parents":[163048,166473],"agent":"Linus Torvalds","seqStart":9791,"ops":[[17599,0,"hex.o\nLIB_OBJS += "],[13703,29,""],[20737,0,"erge-tree.o\nBUILTIN_OBJS += builtin-m"],[13585,30,""],[20251,0,"ash-object.o\nBUILTIN_OBJS += builtin-h"],[13869,22,""],[21895,0,"ar.o\nBUILTIN_OBJS += builtin-v"],[13729,27,""],[20905,0,"atch-id.o\nBUILTIN_OBJS += builtin-p"],[13643,30,""],[20592,0,"index.o\nBUILTIN_OBJS += builtin-merge-"],[13642,24,""],[20719,0,"ag.o\nBUILTIN_OBJS += builtin-mkt"],[13729,30,""],[21692,0,"file.o\nBUILTIN_OBJS += builtin-unpack-"],[13642,33,""],[20828,0,"dundant.o\nBUILTIN_OBJS += builtin-pack-re"],[13613,29,""],[20126,0,"dex-pack.o\nBUILTIN_OBJS += builtin-in"]]},{"span":[167072,167130],"parents":[167071],"agent":"Johan Herland","seqStart":353,"ops":[[12610,26,""],[20764,0,"notes.o\nBUILTIN_OBJS += builtin-"]]},{"span":[167130,167177],"parents":[167071],"agent":"Michael Lukashov","seqStart":0,"ops":[[30394,0,"PTHREAD_LIBS =\n\t"],[31529,0," -Icompat/win32"],[31712,0,"PTHREAD_LIBS =\n\t"]]},{"span":[167177,171340],"parents":[165548,167176],"agent":"Jonathan Nieder","seqStart":3433,"ops":[[12269,0,"_NEED_X"],[13732,0,"_NEED_X"],[13755,2,""],[13769,0,"_NEED_X"],[13790,2,""],[13804,0,"_NEED_X"],[13824,2,""],[13838,0,"_NEED_X"],[13859,2,""],[13873,0,"_NEED_X"],[13904,2,""],[13918,0,"_NEED_X"],[13943,2,""],[13957,0,"_NEED_X"],[13984,2,""],[13998,0,"_NEED_X"],[14027,2,""],[14041,0,"_NEED_X"],[14067,1,""],[14067,0,"\nTEST_PROGRAMS_NEED_"],[14088,0," += test-run-command"],[14122,0,"_NEED_X"],[14142,2,""],[14156,0,"_NEED_X"],[14180,0,"\nTEST_PROGRAMS_NEED_X += test-index-version\n\nTEST_PROGRAMS := "],[14243,0,"(patsubst %,%$X,$(TEST_PROGRAMS_NEED_"],[14281,0,"))"],[48778,22,""],[52715,164,""],[52719,20,""],[52720,59,""],[52793,0,"$"],[52838,0,"X"],[52842,0,"\nal"],[53289,0,"### Testing rules\n\n"],[50055,0," transport.o"],[48160,0,"GIT_OBJS := $(LIB_OBJS) $(BUILTIN_OBJS) $(TEST_OBJS) \\\n\tgit.o http.o http-walker.o remote-curl.o \\\n\t$(patsubst git-%$X,"],[48282,0,",$(PROGRAMS))\nXDIFF_OBJS = xdiff/xdiffi.o xdiff/xprepare.o xdiff/xutils.o xdiff/xemit.o \\\n\txdiff/xmerge.o xdiff/xpatience.o\n\n%.o"],[48604,0,"$(GIT_OBJS): $(LIB_H)\nbuiltin-branch.o builtin-checkout.o builtin-clone.o builtin-reset.o branch.o transport.o: branch.h\nbuiltin-bundle.o bundle.o transport.o: bundle.h\nbuiltin-bisect--helper.o builtin-rev-list.o bisect.o: bisect.h\nbuiltin-clone.o builtin-fetch-pack.o transport.o: fetch-pack.h\nbuiltin-send-pack.o transport.o: send-pack.h\nbuiltin-log.o builtin-shortlog.o: shortlog.h\nbuiltin-prune.o builtin-reflog.o reachable.o: reachable.h\nbuiltin-commit.o builtin-revert.o wt-status.o: wt-status.h\nbuiltin-tar-tree.o archive-tar.o: tar.h\nbuiltin-pack-objects.o: thread-utils.h\nhttp-fetch.o http-walker.o remote-curl.o transport.o walker.o: walker.h\nhttp.o http-walker.o http-push.o remote-curl.o: http.h\n\n\nxdiff-interface.o $(XDIFF_OBJS): \\\n\txdiff/xinclude.h xdiff/xmacros.h xdiff/xdiff.h xdiff/xtypes.h \\\n\txdiff/xutils.h xdiff/xprepare.h xdiff/xdiffi.h xdiff/xemit.h\n\n"],[50207,98,""],[50208,4,""],[50891,13,""],[50892,512,""],[50893,58,""],[50894,152,""],[50960,3,""],[50961,138,""],[50967,130,""],[48407,0,".SUFFIXES:\n\n"],[48406,0,"OBJECTS := $(GIT_OBJS) $(XDIFF_OBJS)"],[48443,0,"\nASM_SRC := $(wildcard $(OBJECTS:o=S))\nASM_OBJ := $(ASM_SRC:S=o)\nC_OBJ := $(filter-out $(ASM_OBJ),$(OBJECTS))\n\n"],[48566,0,"$(C_OBJ): "],[48706,0,"$(ASM_OBJ): "],[9267,0,"#\n# Define COMPUTE_HEADER_DEPENDENCIES if your compiler supports the -MMD option"],[9348,0,"# and you want to avoid rebuilding objects when an unrelated header file\n# changes.\n\n"],[48719,0,"ifdef COMPUTE_HEADER_DEPENDENCIES\ndep_dirs := $(addsuffix deps,$(sort $(dir $(OBJECTS))))\n$(dep_dirs):\n\tmkdir -p $@\n\nmissing_dep_dirs := $(filter-out $(wildcard $(dep_dirs)),$(dep_dirs))\nelse\ndep_dirs =\nmissing_dep_dirs =\nendif\n\n"],[48989,0," $(missing_dep_dirs)"],[49041,0,"dep_args) $("],[49163,0," $(missing_dep_dirs)"],[49215,0,"dep_args) $("],[49243,0,"ifdef COMPUTE_HEADER_DEPENDENCIES\n# Take advantage of gcc's on-the-fly dependency generation\n# See <http://gcc.gnu.org/gcc-3.0/features.html>.\ndep_files := $(wildcard $(foreach f,$(OBJECTS),$(dir f)deps/$(notdir $f).d))\nifneq ($(dep_files),)\ninclude $(dep_files)\nendif\n\ndep_file = $(dir $@)deps/$(notdir $@).d\ndep_args = -MF $(dep_file) -MMD -MP\nelse\ndep_args =\n\n# Dependencies on header files, for platforms that do not support\n# the gcc -MMD option.\n#\n# Dependencies on automatically generated headers such as common-cmds.h\n# should _not_ be included here, since they are necessary even when\n# building an object for the first time.\n#\n# XXX. Please check occasionally that these include all dependencies\n# gcc detects!\n\n"],[50674,1,""],[50836,0,"endif\n"],[59743,0,"-r $(dep_dirs)\n\t$(RM) "]]},{"span":[171340,171341],"parents":[171339],"agent":"Ramsay Jones","seqStart":639,"ops":[[48823,0,"@"]]},{"span":[171341,173920],"parents":[171339],"agent":"Jonathan Nieder","seqStart":7596,"ops":[[12375,0,"_OBJ"],[12383,0,"PROGRAMS =\n"],[13726,0,"\n"],[13734,0,"_OBJ"],[13743,4,""],[13754,2,""],[13754,0,".o"],[13764,0,"_OBJ"],[13773,1,""],[13774,3,""],[13782,2,""],[13782,0,".o"],[13792,0,"_OBJ"],[13801,4,""],[13806,2,""],[13806,0,".o"],[13816,0,"_OBJ"],[13825,4,""],[13835,2,""],[13835,0,".o"],[13845,0,"_OBJ"],[13854,4,""],[13865,2,""],[13865,0,".o"],[13875,0,"_OBJ"],[13884,4,""],[13896,0,".o\n\nPROGRAMS += "],[13913,0,"(patsubst %.o,git-%$"],[13934,0,",$(PROGRAM_OBJS))"],[34406,0,"_OBJS += http-fetch.o\n\tPROGRAM"],[34461,17,""],[34604,0,"_OBJ"],[34613,4,""],[34622,2,""],[34622,0,".o"],[35042,0,"_OBJ"],[35051,4,""],[35057,2,""],[35057,0,".o"],[48449,0,"PROGRAM_OBJS) $("],[48519,39,""],[9432,0,"#\n# Define CHECK_HEADER_DEPENDENCIES to check for problems in the hard-coded"],[9509,0,"# dependency rules.\n\n"],[33049,0,"CHECK_HEADER_DEPENDENCIES\nUSE_COMPUTED_HEADER_DEPENDENCIES =\nendif\n\nifdef COMPUTE_HEADER_DEPENDENCIES\nUSE_COMPUTED_HEADER_DEPENDENCIES = YesPlease\nendif\n\nifdef "],[48925,3,""],[48925,0,"dep"],[48929,3,""],[48929,0,"files"],[48940,6,""],[48940,0,"fo"],[48943,1,""],[48943,0,"each"],[48948,0,"f,"],[48958,4,""],[48960,13,""],[48960,0,","],[48963,21,""],[48963,0,"dir"],[48968,1,""],[48969,3,""],[48969,0,")d"],[48972,2,""],[48972,0,"ps/$(n"],[48979,1,""],[48980,0,"dir"],[48985,8,""],[48985,0,"f"],[48987,11,""],[48987,0,".d"],[49179,0,"d"],[49181,0,"p_fi"],[49186,0,"e = $(dir $@)deps/$(notdir $@).d\ndep_arg"],[49227,0," = -MF $(dep_fil"],[49244,0,") -MMD -MP\nifdef CHECK_HEADER_DEPENDENCIES"],[49287,0,"$(error cannot compute hea"],[49315,0,"r de"],[49320,0,"endencies outside a normal build. \\\nPlease unset CHECK_HEADER_DEPENDENCIES and try again)\nendif\nendif\n\nifndef COMPUTE_HEADER_DEPENDENCIES\nifndef CHECK_HEADER_DEPENDENCIES\ndep"],[49521,0,"dep_args =\nendif\nendif\n\nifd"],[49549,0,"f CHECK_HEADER_DEPENDENCIES\nif"],[49581,0,"ef PRINT_HEADER_DEPENDENCIES\nm"],[49612,0,"ssing_deps = $("],[49628,0,"ilter-out $(notdir $^), \\\n\t$(notdir $(shell $(MAKE) -s $@ \\\n\t\tCHECK_HEADER_DEPENDENCIES=YesPlease \\\n\t\tUSE_COMPUTED_HEADER_DEPENDENCIES=YesPlease \\\n\t\tPRINT_HEADER_DEPENDENCIES=YesPlease)))\nendif\nendif\n\nASM_SRC := $(wildcard $(OBJECTS:o=S))\nASM_OBJ := $(ASM_SRC:S=o)\nC_OBJ := $(filter-out $(ASM_OBJ),$(OBJECTS))"],[49951,0,"ifdef PRINT_HEADER_DEPENDENCIES\n"],[50002,4,""],[50002,0,"FOR"],[50006,0,"E\n\techo $^\n$(ASM_OBJ): %.o: %.S "],[50039,1,""],[50039,0,"ORCE\n\techo $^\n\nifndef CHECK_HE"],[50070,1,""],[50070,0,"DER_DEPENDENCIE"],[50086,1,""],[50086,0,"\n"],[50089,1,""],[50089,0,"error cannot pr"],[50105,1,""],[50105,0,"nt header dependencie"],[50127,0," dur"],[50134,1,""],[50134,0," a normal buil"],[50149,0,". \\\nPl"],[50156,1,""],[50156,0,"ase set CHECK_HEADER"],[50177,0,"DEPENDENCIES an"],[50193,0," try aga"],[50202,2,""],[50202,0,"n"],[50205,5,""],[50205,0,"endif\nendif\n\nifndef PRINT_HEADER_DEPENDENC"],[50249,1,""],[50249,0,"S\nifdef CHECK"],[50263,0,"HEADER_DEPENDEN"],[50279,0,"IES\n$("],[50286,0,"_OBJ"],[50291,0,": %.o: %.c "],[50304,0,"dep_files) FOR"],[50319,0,"E\n\t@set -e; echo CHE"],[50340,0,"K $@; \\\n\tmissing_deps=\"$(missing_deps"],[50378,0,"\"; \\\n\tif test \"$$missing_deps\"; \\\n\tthen"],[50418,1,""],[50418,0,"\\\n\t\tech"],[50427,0,"missing dependencies: $"],[50451,1,""],[50451,0,"missing_deps; \\\n\t\tfalse; \\\n\tfi\n$(ASM_OBJ): %"],[50497,0,": %.S $(dep_files)"],[50516,0,"FORCE\n\t@set "],[50529,0,"e; e"],[50534,0,"ho CHECK"],[50544,0,"@; \\\n\tmissing_deps=\"$"],[50566,0,"missing_"],[50577,0,"s)\"; \\\n\tif test \"$$missing"],[50604,2,""],[50604,0,"deps\"; \\\n\tthen \\\n\t\techo missin"],[50635,0," dependencie"],[50648,1,""],[50648,0,":"],[50651,1,""],[50651,0,"$missing_deps; \\\n\t\tfalse; \\\n\tfi\nendif\nendif\n\nifndef CHECK_HE"],[50712,2,""],[50712,0,"DER"],[50716,0,"DEPENDEN"],[50725,4,""],[50725,0,"IE"],[50728,0,"\n$(C_OBJ"],[50737,0,":"],[50739,3,""],[50741,1,""],[50741,0,"o"],[50759,5,""],[50759,0,"$(missing_dep_dirs)"],[50798,1,""],[50798,0,"o $*.o -c $(dep_args)"],[50947,0,"endif\n\n%.s: %.c GIT-CFLAGS FORCE\n\t$(QUIET_CC)$(CC) -S $(ALL_CFLAGS) $<\n"],[51025,0,"USE_"],[51036,0,"D"],[51176,0,"_present"],[51201,3,""],[51201,0,"d"],[51203,4,""],[51203,0,"p_"],[51206,15,""],[51207,5,""],[51207,0,"l"],[51209,1,""],[51210,15,""],[51231,0,"_present"],[51262,11,""],[51262,0,"_"],[51264,12,""],[51265,5,""],[51266,1,""],[51267,3,""],[51267,0,"e"],[51269,1,""],[51270,6,""],[51271,2,""],[51272,1,""],[51273,15,""],[51273,0,"n"],[51275,3,""],[51275,0,"i"],[51277,13,""],[51282,12,""],[48970,0,"."],[48974,1,""],[48974,0,"end"],[49053,0,"."],[49057,1,""],[49057,0,"end"],[49205,0,"."],[49209,1,""],[49209,0,"end"],[48994,35,""],[49053,0,"\nifdef COMPUTE_HEADER_DEPENDENCIES\n"],[23031,61,""],[48603,0,"TEST_OBJS := $(patsubst test-%$X,test-%.o,$(TEST_PROGRAMS))\n"]]},{"span":[173920,174573],"parents":[105361,167176],"agent":"Jonathan Nieder","seqStart":10175,"ops":[[12256,0,"SCRIP"],[12262,0,"_LIB =\nT"],[12537,30,""],[12566,3,""],[12567,2,""],[12615,33,""],[12799,0,"tas"],[12803,6,""],[12824,3,""],[12825,1,""],[12825,0,"ubmodule"],[12854,2,""],[12854,0,"web--"],[12860,1,""],[12860,0,"r"],[12862,3,""],[12862,0,"ws"],[12869,0,"\n"],[12877,2,""],[12877,0,"LIB"],[12888,1,""],[12888,0,"merg"],[12893,1,""],[12893,0,"tool"],[12899,0,"li"],[12902,0,"\nSCRIPT_LIB += git-pa"],[12924,2,""],[12926,1,""],[12926,0,"-remote\nSCRIPT_LIB += git-"],[12954,0,"-setup"],[41159,0,"SCRIPT_LIB) $("],[42753,10,""],[42753,0,"define"],[42760,15,""],[42760,0,"cmd"],[42764,13,""],[42764,0,"munge_"],[42771,1,""],[42771,0,"cript"],[42777,1,""],[42779,12,""],[42795,1,""],[42837,1,""],[42881,1,""],[42927,1,""],[42965,1,""],[42993,1,""],[43007,0,"\nendef\n\n$(patsubst %.sh,%,$(SCRIPT_SH)) : % :"],[43053,0,"%.sh\n\t$(QUIET_GEN)$(cmd_munge_script) "],[43127,0,"$(SCRIPT_LIB) : % : %.sh\n\t$(QUIET_GEN)$(cmd_munge_scr"],[43181,0,"pt) && \\\n\tmv $@+ $@\n\ni"],[54052,0,"-m 644 $(SCRIPT_LIB) '$(DESTDIR_SQ)$(gitexec_instdir_SQ)'\n\t$(INSTALL) "],[57784,0,"SCRIPT_LIB) $("],[58753,0,"SCRIPT_LIB) $("],[59897,0,"documented,git-bi"],[59916,0,"ct-lk2009 | \\\n\t\tdocume"],[59940,0,"ed.g"],[59945,0,"t-remote-helpers | \\\n\t\tdocume"],[59975,0,"t"],[59977,0,"d,gitworkflows | \\\n\t\tsentine"],[60079,0,"SCRIPT_LIB) $("]]},{"span":[174573,175226],"parents":[105361,167176],"agent":"Dan McGee","seqStart":0,"ops":[[7505,123,""],[22261,33,""],[22262,2,""],[22347,26,""],[22348,9,""],[23604,35,""],[23917,35,""],[25455,35,""],[25798,26,""],[25799,9,""],[26010,35,""],[26375,1,""],[26422,42,""],[27231,35,""],[27918,35,""],[29184,35,""],[30893,35,""],[37613,25,""],[37675,7,""],[37676,28,""],[37677,41,""],[37710,0,"\n"]]},{"span":[175226,177103],"parents":[105361,167176],"agent":"John 'Warthog9' Hawley","seqStart":0,"ops":[[10887,316,""],[10889,57,""],[10890,29,""],[10891,124,""],[43269,0,"\n.PHONY: gitweb\ngitweb:\n\t$(QUIET_SUBDIR0)g"],[43312,0,"tweb $(QUIET_SUBDIR1) all\n\ni"],[43563,6,""],[43563,0,"SUBDI"],[43569,1,""],[43569,0,"0"],[43571,19,""],[43571,0,"gitw"],[43576,0,"b"],[43578,15,""],[43580,11,""],[43581,20,""],[43581,0,"U"],[43583,3,""],[43584,12,""],[43586,3,""],[43587,27,""],[43587,0,"U"],[43589,2,""],[43592,3,""],[43592,0,"1) "],[43597,0,"patsu"],[43603,13,""],[43603,0,"st"],[43606,4,""],[43606,0,"gitw"],[43611,22,""],[43611,0,"b/%,%,"],[43618,14,""],[43618,0,"@"],[43620,5,""],[43621,6,""],[43621,0,"\nifd"],[43626,0,"f"],[43628,19,""],[43628,0,"J"],[43630,4,""],[43631,6,""],[43632,7,""],[43633,12,""],[43633,0,"\n"],[43635,10,""],[43635,0,"itw"],[43639,53,""],[43639,0,"b/"],[43642,10,""],[43642,0,"itw"],[43646,2,""],[43646,0,"b.min.j"],[43654,40,""],[43654,0,": "],[43657,10,""],[43657,0,"itw"],[43661,49,""],[43661,0,"b/"],[43664,10,""],[43664,0,"itw"],[43668,2,""],[43668,0,"b.j"],[43672,62,""],[43674,31,""],[43676,1,""],[43676,0,"QU"],[43679,5,""],[43680,4,""],[43682,29,""],[43683,22,""],[43683,0,"U"],[43685,4,""],[43685,0,"D"],[43687,7,""],[43688,1,""],[43688,0,"0"],[43690,1,""],[43691,10,""],[43691,0,"itw"],[43695,0,"b"],[43697,23,""],[43699,12,""],[43699,0,"Q"],[43701,23,""],[43702,2,""],[43703,1,""],[43703,0,"T"],[43705,2,""],[43706,11,""],[43706,0,"U"],[43708,2,""],[43708,0,"D"],[43710,2,""],[43710,0,"R1"],[43713,10,""],[43714,26,""],[43716,31,""],[43716,0,"pat"],[43720,44,""],[43720,0,"ub"],[43723,44,""],[43723,0,"t"],[43725,40,""],[43726,10,""],[43726,0,"itw"],[43730,18,""],[43730,0,"b/%,%,"],[43737,10,""],[43737,0,"@"],[43739,5,""],[43740,6,""],[43741,58,""],[43741,0,"ndif"],[43746,2,""],[43746,0,"#"],[43748,35,""],[43748,0,"J"],[43750,0,"M"],[43752,52,""],[43752,0,"N"],[43754,10,""],[44606,97,""]]},{"span":[177103,177196],"parents":[175225,177102],"agent":"Eyvind Bernhardsen","seqStart":0,"ops":[[9144,0,"#"],[9146,0,"# Define NATIVE_CRLF if your platform uses CRLF for line endings.\n\n"],[28739,0,"\tNATIVE_CRLF = YesPlease\n"]]},{"span":[177196,177230],"parents":[175225,177102],"agent":"Matthieu Moy","seqStart":44,"ops":[[35189,34,""]]},{"span":[177230,177513],"parents":[177229],"agent":"Jonathan Nieder","seqStart":10828,"ops":[[11624,0,"# Having this variable in your environment would break pipelines because\n# you cause \"cd\" to echo its destination to stdout.  It can also take\n# scripts to unexpected places.  If you like CDPATH, define it for your\n# interactive shell sessions without exporting it.\nunexport CDPATH\n\n"]]},{"span":[177513,177598],"parents":[177512],"agent":"David Aguilar","seqStart":755,"ops":[[44652,1,""],[44652,0,".insert("],[44661,1,""],[44661,0,","],[44663,2,""],[44666,0,"get"],[44672,12,""],[44687,8,""],[44687,0,","],[44716,38,""],[44731,7,""],[44747,0,"));"]]},{"span":[177598,177654],"parents":[177512],"agent":"Holger Weiß","seqStart":0,"ops":[[26988,0,"\tNEEDS_LIBICONV = YesPlease\n"],[27703,0,"\tNEEDS_LIBICONV = YesPlease\n"]]},{"span":[177654,177691],"parents":[177512],"agent":"R. Tyler Ballance","seqStart":0,"ops":[[25343,0,"\tPYTHON_PATH = /usr/local/bin/python\n"]]},{"span":[177691,177998],"parents":[177653,177690],"agent":"Chris Webb","seqStart":0,"ops":[[1297,0,"HAVE_PATHS_H if you have paths.h and want to use the default PATH\n# it specifies.\n#\n# Define "],[22111,0,"\tHAVE_PATHS_H = Y"],[22129,0,"sPlease\ne"],[22223,0,"\tHAVE_PATHS_H = YesPlease\n"],[25525,0,"\tHAVE_PATHS_H = YesPlease\n"],[25763,0,"\tHAVE_PATHS_H = Y"],[25781,0,"sPlease\ne"],[26056,0,"\tHAVE_PATHS_H = YesPlease\n"],[26557,0,"\tHAVE_PATHS_H = Y"],[26575,0,"sPlease\ne"],[37782,0,"HAVE_PATHS_H\n\tBASIC_CFLAGS += -DHAVE_PATHS_H\nendif\n\nifdef "]]},{"span":[177998,178046],"parents":[177597,177653,177690],"agent":"Michael J Gruber","seqStart":148,"ops":[[53277,0,"test x\"$(REMOTE_CURL_ALIASES)\" = x || \\\n\t\t{ "],[53590,0,"; } "]]},{"span":[178046,178139],"parents":[178045],"agent":"Rafael Gieschke","seqStart":0,"ops":[[2412,0,"GECOS_IN_PWENT if you don't have pw_gecos in struct passwd\n# in the C library.\n#\n# Define NO_"]]},{"span":[178139,178349],"parents":[174572,175225,177102],"agent":"Linus Torvalds","seqStart":10389,"ops":[[11422,0," -I."],[13151,1,""],[13151,0,"/"],[13236,1,""],[13236,0,"/"],[18295,1,""],[18295,0,"/"],[18325,1,""],[18325,0,"/"],[18360,1,""],[18360,0,"/"],[18392,1,""],[18392,0,"/"],[18426,1,""],[18426,0,"/"],[18467,1,""],[18467,0,"/"],[18499,1,""],[18499,0,"/"],[18532,1,""],[18532,0,"/"],[18565,1,""],[18565,0,"/"],[18600,1,""],[18600,0,"/"],[18637,1,""],[18637,0,"/"],[18680,1,""],[18680,0,"/"],[18721,1,""],[18721,0,"/"],[18756,1,""],[18756,0,"/"],[18788,1,""],[18788,0,"/"],[18820,1,""],[18820,0,"/"],[18858,1,""],[18858,0,"/"],[18891,1,""],[18891,0,"/"],[18924,1,""],[18924,0,"/"],[18964,1,""],[18964,0,"/"],[18999,1,""],[18999,0,"/"],[19036,1,""],[19036,0,"/"],[19073,1,""],[19073,0,"/"],[19109,1,""],[19109,0,"/"],[19140,1,""],[19140,0,"/"],[19178,1,""],[19178,0,"/"],[19215,1,""],[19215,0,"/"],[19247,1,""],[19247,0,"/"],[19287,1,""],[19287,0,"/"],[19326,1,""],[19326,0,"/"],[19357,1,""],[19357,0,"/"],[19386,1,""],[19386,0,"/"],[19417,1,""],[19417,0,"/"],[19455,1,""],[19455,0,"/"],[19486,1,""],[19486,0,"/"],[19523,1,""],[19523,0,"/"],[19557,1,""],[19557,0,"/"],[19587,1,""],[19587,0,"/"],[19622,1,""],[19622,0,"/"],[19658,1,""],[19658,0,"/"],[19692,1,""],[19692,0,"/"],[19727,1,""],[19727,0,"/"],[19763,1,""],[19763,0,"/"],[19795,1,""],[19795,0,"/"],[19832,1,""],[19832,0,"/"],[19869,1,""],[19869,0,"/"],[19907,1,""],[19907,0,"/"],[19944,1,""],[19944,0,"/"],[19986,1,""],[19986,0,"/"],[20023,1,""],[20023,0,"/"],[20055,1,""],[20055,0,"/"],[20088,1,""],[20088,0,"/"],[20117,1,""],[20117,0,"/"],[20152,1,""],[20152,0,"/"],[20191,1,""],[20191,0,"/"],[20232,1,""],[20232,0,"/"],[20268,1,""],[20268,0,"/"],[20303,1,""],[20303,0,"/"],[20342,1,""],[20342,0,"/"],[20374,1,""],[20374,0,"/"],[20405,1,""],[20405,0,"/"],[20441,1,""],[20441,0,"/"],[20480,1,""],[20480,0,"/"],[20513,1,""],[20513,0,"/"],[20546,1,""],[20546,0,"/"],[20580,1,""],[20580,0,"/"],[20613,1,""],[20613,0,"/"],[20645,1,""],[20645,0,"/"],[20680,1,""],[20680,0,"/"],[20716,1,""],[20716,0,"/"],[20749,1,""],[20749,0,"/"],[20778,1,""],[20778,0,"/"],[20814,1,""],[20814,0,"/"],[20849,1,""],[20849,0,"/"],[20887,1,""],[20887,0,"/"],[20922,1,""],[20922,0,"/"],[20959,1,""],[20959,0,"/"],[20998,1,""],[20998,0,"/"],[21028,1,""],[21028,0,"/"],[21063,1,""],[21063,0,"/"],[21101,1,""],[21101,0,"/"],[21142,1,""],[21142,0,"/"],[21181,1,""],[21181,0,"/"],[21218,1,""],[21218,0,"/"],[21263,1,""],[21263,0,"/"],[21304,1,""],[21304,0,"/"],[21334,1,""],[21334,0,"/"],[21372,1,""],[21372,0,"/"],[21409,1,""],[21409,0,"/"],[41112,1,""],[41112,0,"/"],[41142,1,""],[41142,0,"/"],[41157,1,""],[41157,0,"/"],[45734,1,""],[45734,0,"/"],[45752,1,""],[45752,0,"/"],[47210,1,""],[47210,0,"/"],[55566,0,"builtin/*.o "]]},{"span":[178349,178381],"parents":[173919,174572,175225,177102],"agent":"Junio C Hamano","seqStart":57348,"ops":[[13929,1,""],[49922,0,"grep.o: thread-utils.h\nbuiltin-"]]},{"span":[178381,178623],"parents":[178380],"agent":"Johannes Sixt","seqStart":3914,"ops":[[29648,0,"\tASYNC_AS_THREAD = YesPlease\n"],[31387,0,"ASYNC_AS_THREAD = YesPlease\n\t"],[38435,0,"ifdef ASYNC_AS_THREAD\n\tBASIC_CFLAGS += -DASYNC_AS_THREAD\nendif\n"],[29648,28,""],[29649,1,""],[31358,29,""],[38376,63,""]]},{"span":[178623,178695],"parents":[177229,178348,178380],"agent":"Junio C Hamano","seqStart":57380,"ops":[[49618,1,""],[49618,0,"/"],[49635,1,""],[49635,0,"/"],[49654,1,""],[49654,0,"/"],[49670,1,""],[49670,0,"/"],[49717,1,""],[49717,0,"/"],[49765,1,""],[49765,0,"/"],[49790,1,""],[49790,0,"/"],[49828,1,""],[49828,0,"/"],[49844,1,""],[49844,0,"/"],[49891,1,""],[49891,0,"/"],[49922,1,""],[49922,0,"/"],[49967,1,""],[49967,0,"/"],[49981,1,""],[49981,0,"/"],[50012,1,""],[50012,0,"/"],[50028,1,""],[50028,0,"/"],[50070,1,""],[50070,0,"/"],[50087,1,""],[50087,0,"/"],[50129,1,""],[50129,0,"/"],[50169,1,""],[50169,0,"/"],[51913,1,""],[60611,0,"remote-* | git-stage | \\\n\t\tgit-"],[61620,1,""],[61620,0,","]]},{"span":[178695,178697],"parents":[167129,178694],"agent":"Junio C Hamano","seqStart":57452,"ops":[[21127,1,""],[21127,0,"/"]]},{"span":[178697,178755],"parents":[178696],"agent":"Ben Walton","seqStart":609,"ops":[[41822,0," SHELL_PATH='$(SHELL_PATH_SQ)' PERL_PATH='$(PERL_PATH_SQ)'"]]},{"span":[178755,178889],"parents":[178696],"agent":"Jonathan Nieder","seqStart":11111,"ops":[[11801,0,"EXTRA_CPPFLAGS =\n"],[42070,0,"EXTR"],[42075,2,""],[42077,0,"PP"],[42085,1,""],[42349,0,"EXTR"],[42354,2,""],[42356,0,"PP"],[42364,1,""],[48811,0,"(EXTRA_CPPFLAGS) $"],[48939,0,"(EXTRA_CPPFLAGS) $"],[49028,0,"(EXTRA_CPPFLAGS) $"],[50604,0,"EXTR"],[50609,2,""],[50611,0,"PP"],[50619,1,""],[50766,0,"EXTR"],[50771,2,""],[50773,0,"PP"],[50781,1,""],[50856,0,"EXTR"],[50861,2,""],[50863,0,"PP"],[50871,1,""],[50929,0,"EXTR"],[50934,2,""],[50936,0,"PP"],[50944,1,""],[51031,0,"EXTR"],[51036,2,""],[51038,0,"PP"],[51046,1,""]]},{"span":[178889,178929],"parents":[177512,178888],"agent":"Sverre Rabbelier","seqStart":1283,"ops":[[13193,0,"_PYTHON += git-remote-testgit.py\n\nSCRIPT"]]},{"span":[178929,179145],"parents":[178928],"agent":"Brian Gernhardt","seqStart":1301,"ops":[[45913,15,""],[45946,12,""],[45947,2,""],[45961,19,""],[45962,16,""],[45962,0,"("],[45964,4,""],[45965,3,""],[45966,17,""],[45967,2,""],[45967,0,"ge"],[45970,10,""],[45973,12,""],[45988,7,""],[45989,38,""],[45989,0,")"],[45991,14,""],[45991,0,"^)"],[45994,6,""],[45994,0,"*)|"],[45998,27,""],[45998,0,"1,"],[46016,0,")"]]},{"span":[179145,179194],"parents":[177653,178888],"agent":"Jeff King","seqStart":2252,"ops":[[16325,0,"n"],[16327,0,"tes-cache.h\nLIB_H += o"],[18281,0,"notes-cache.o\nLIB_OBJS += "]]},{"span":[179194,179966],"parents":[177653,178888],"agent":"Mark Rada","seqStart":0,"ops":[[60344,0," gitweb/gitweb.min.*"],[8624,0,"CSSMIN to point to a CSS minifier in order to generate a minified\n# version of gitweb.css\n#\n# Define "],[11069,0,"/CSS"],[11130,0,"CSSMIN =\n"],[44485,1,""],[44485,0,"GI"],[44488,1,""],[44488,0,"W"],[44490,1,""],[44490,0,"B"],[44518,2,""],[44518,0,"m"],[44520,0,"n.js\nendif\nifdef"],[44537,0,"CSSMIN\nGITWEB_PROGRAMS"],[44560,0,"+="],[44581,1,""],[44581,0,"c"],[44583,0,"s\nendif"],[44591,0,"OTHER_PROGRAMS +=  "],[44627,1,""],[44628,0," $(GITWEB_PROGRAMS)\n"],[44662,4,""],[44662,0,"cgi:"],[44681,7,""],[44681,0,"p"],[44683,0,"r"],[44685,4,""],[44685,0," $(GI"],[44691,1,""],[44691,0,"W"],[44693,1,""],[44693,0,"B"],[44703,4,""],[44703,0,")\n\t$(QUIET_SUBDIR0)"],[44728,1,""],[44728,0," $(QUIET_SUBDIR1) $(patsubst "],[44763,3,""],[44763,0,"/%,%,$@)\n\n"],[44774,0,"fdef JSMIN"],[44799,2,""],[44799,0,"m"],[44801,0,"n.js"],[44821,10,""],[44821,0,"js"],[44891,0,"endif # JSMIN"],[44911,1,""],[44911,0,"CS"],[44936,1,""],[44936,0,"cs"],[44955,1,""],[44955,0,"cs"],[45034,1,""],[45034,0,"CS"],[11057,83,""],[44442,0,"GITWEB_JS = gitw"],[44459,0,"b/gitweb.mi"],[44471,0,".js\nelse\nGITWEB_JS = gitweb/gitweb.js\nen"],[44569,0,"GITWEB_CSS = gitweb/gitweb.min.css\nelse\nGITWEB_CSS = gitweb/gitweb.css\n"],[45446,17,""],[45446,0,"$(GITWEB_CSS)"],[45519,16,""],[45519,0,"$(GITWEB_JS)"],[45605,0,"            -e 's|@@GITWEB_CSS_NAME@@|$(GITWEB_CSS)|' \\\n            -e 's|@@GITWEB_JS_NAME@@|$(GITWEB_JS)|' \\\n"]]},{"span":[179966,180176],"parents":[177653,178888],"agent":"Eric Blake","seqStart":118,"ops":[[1467,7,""],[1474,10,""],[1474,0,"1.5,"],[1485,3,""],[1485,0,"i"],[1487,0," Cygw"],[1493,2,""],[1493,0,"n 1.7"],[4551,0,"1"],[25316,0,"ifneq ($(wordlist 1, 2, $(subst ., ,$(uname_R))),1 7)\n\t\t"],[25405,0,"\t"],[25438,0,"\t"],[25466,0,"\t"],[25490,0,"\t"],[25516,0,"\t"],[25546,0,"\tNO_IPV6 = YesPlease\n\t\tOLD_ICO"],[25577,0,"V = UnfortunatelyYes\n\tendif\n\tN"],[25701,30,""],[25937,19,""],[25938,2,""]]},{"span":[180176,180231],"parents":[180175],"agent":"Jonathan Nieder","seqStart":11245,"ops":[[25318,1,""],[25324,4,""],[25324,0,"shel"],[25329,17,""],[25330,2,""],[25330,0,"expr"],[25335,1,""],[25335,0,"\""],[25346,1,""],[25346,0,"\" : '1\\.[1-6]\\.'"],[25364,3,""],[25364,0,"4"]]},{"span":[180231,180287],"parents":[177690,178754,180230],"agent":"Junio C Hamano","seqStart":57454,"ops":[[28090,28,""],[28764,28,""]]},{"span":[180287,180464],"parents":[177597,179965,180286],"agent":"Gary V. Vaughan","seqStart":0,"ops":[[10188,0,"PPFLAGS) $(C"],[11253,0,"PTHREAD_CFLAGS =\n"],[27367,0,"lse\n\t\tPTHREAD_LIBS = -lpthread\n\te"],[38789,0,"BASIC_CFLAGS += $(PTHREAD_CFLAGS)\n\t"],[11133,0,"DIFF = diff\n"],[41565,0,"DIFF "],[54190,0,"DIFF=\\''$(subst ','\\'',$(subst ','\\'',$(DIFF)))'\\' >>$@\n\t@echo "]]},{"span":[180464,180549],"parents":[180463],"agent":"Junio C Hamano","seqStart":57510,"ops":[[39344,0,"def GIT_TEST_CMP_USE_COPIED_CONTEXT\n\texport GIT_TEST_CMP_USE_COPIED_CONTEXT\nendif\n\nif"]]},{"span":[180549,181882],"parents":[180548],"agent":"Gary V. Vaughan","seqStart":177,"ops":[[24980,0,"\tGIT_TEST_CMP = cmp\n\t"],[25136,0,"\tGIT_TEST_CMP = cmp\n\t"],[25292,0,"\tGIT_TEST_CMP = cmp\n\t"],[27480,0,"\tGIT_TEST_CMP = cmp\n"],[29272,0,"\tGIT_TEST_CMP = cmp\n"],[294,0,"OCKLE"],[300,0,"_T to a suitable type (such as 'size_t') if your\n# system headers do not define a socklen_t type.\n#\n# Define SN"],[33066,0,"neq (,$(SOCKLEN_T))\n\tBASIC_CFLAGS += -Dsocklen_t=$(SOCKLEN_T)\nendif\n\nif"],[409,0,"INLINE to a suitable substitute (such as '__inline' or '') if git\n# fails to compile with errors about undefined inline functions or similar.\n#\n# Define "],[33227,0,"INLINE))\n\tBASIC_CFLAGS += -Dinline=$(INLINE)\nendif\n\nifneq (,$("],[27750,0,"ifeq ($(shell expr \"$(uname_V).$(uname_R)\" : '5\\.1'),3)\n\t\tINLINE=''\n\tendif\n\t"],[25032,0,"6)\n\t\tSOCKLEN_T = int\n\t\tNO_HSTRERROR = YesPlease\n\t\tNO_IPV6 = YesPlease\n\t\tNO_SOCKADDR_STORAGE = YesPlease\n\t\tNO_UNSETENV = YesPlease\n\t\tNO_SETENV = YesPlease\n\t\tNO_STRLCPY = YesPlease\n\t\tNO_C99_FORMAT = YesPlease\n\t\tNO_STRTOUMAX = YesPlease\n\t\tGIT_TEST_CMP = cmp\n\tendif\n\tifeq ($(uname_R),5."],[29623,0,"INLINE = __inline\n\t"],[29919,0,"NO_NSEC = YesPlease\n\tifeq ($(uname_R),B.11.00)\n\t\tNO_INET_NTOP = YesPlease\n\t\tNO_INET_PTON = YesPlease\n\tendif\n\tifeq ($(uname_R),B.10.20)\n\t\t# Override HP-UX 11.x setting:\n\t\tINLINE =\n\t\tSOCKLEN_T = size_t\n\t\tNO_PREAD = YesPlease\n\t\tNO_INET_NTOP = YesPlease\n\t\tNO_INET_PTON = YesPlease\n\tendif\n\t"],[23301,0,"OSF1)\n\t# Need this for u_short definitions et al\n\tBASIC_CFLAGS += -D_OSF_SOURCE\n\tSOCKLEN_T = int\n\tNO_STRTOULL = YesPlease\n\tNO_NSEC = YesPlease\nendif\nifeq ($(uname_S),"]]},{"span":[181882,182152],"parents":[181881],"agent":"Junio C Hamano","seqStart":57595,"ops":[[42344,0,"DIFF_SQ = $(subst ','\\'',$(DIFF))\n"],[44939,0,"|@@DIFF@@|$(DIFF_SQ)|' \\\n    -e 's"],[56004,0,"ifdef GIT_TEST_CMP\n\t@echo GIT_TEST_CMP=\\''$(subst ','\\'',$(subst ','\\'',$(GIT_TEST_CMP)))'\\' >>$@\nendif\nifdef GIT_TEST_CMP_USE_COPIED_CONTEXT\n\t@echo GIT_TEST_CMP_USE_COPIED_CONTEXT=YesPlease >>$@\nendif\n"]]},{"span":[182152,182216],"parents":[177597,179965,180286],"agent":"Jonathan Nieder","seqStart":11300,"ops":[[47518,0,"\nifndef NO_CURL\n\tGIT_OBJS"],[47544,0,"+= "],[47582,0,"endif\n"],[32383,0,"COMPUTE_HEADER_DEPENDENCIES =\n"]]},{"span":[182216,182260],"parents":[177597,179965,180286],"agent":"Jakub Narebski","seqStart":1171,"ops":[[58238,0,"gitweb:\n\t$(MAKE) -C gitweb install\n\ninstall-"]]},{"span":[182260,182298],"parents":[177597,179965,180286],"agent":"Ramsay Jones","seqStart":640,"ops":[[60794,1,""],[60795,0,"AKE"],[60800,7,""],[60800,0,"-C "],[60809,1,""],[60809,0," "],[60811,7,""],[60811,0,"l"],[60813,11,""],[60813,0,"a"],[60815,2,""]]},{"span":[182298,182334],"parents":[182297],"agent":"Johannes Sixt","seqStart":4156,"ops":[[31362,36,""]]},{"span":[182334,182354],"parents":[179144,179193,182297],"agent":"Junio C Hamano","seqStart":57865,"ops":[[46599,10,""],[46600,2,""],[46617,1,""],[46617,0,"\\"],[46619,0,"["],[46622,0,"]"],[46626,0,"\\"],[46645,1,""],[46646,2,""]]},{"span":[182354,182372],"parents":[177997,182259,182353],"agent":"Jeff King","seqStart":2301,"ops":[[19531,0,"rl.o\nLIB_OBJS += u"]]},{"span":[182372,182893],"parents":[177997,182259,182353],"agent":"Pavan Kumar Sunkara","seqStart":0,"ops":[[44924,0,"static/"],[44964,0,"static/"],[45009,0,"static/"],[45071,0,"static/"],[45113,0,"static/"],[45160,0,"static/"],[45385,0,"static/"],[45414,0,"static/"],[45532,0,"static/"],[45562,0,"static/"],[45719,0,"static/"],[45744,0,"static/"],[10894,0,"gitwebdir = $(sharedir)/gitweb\n"],[41059,0,"gitwebdir_SQ = $(subst ','\\'',$(gitwebdir))\n"],[46005,1,""],[46005,0,"s|"],[46015,3,""],[46015,0,"D"],[46017,0,"R"],[46020,10,""],[46020,0,"|$("],[46029,33,""],[46030,29,""],[46030,0,"i"],[46032,9,""],[46033,1,""],[46034,1,""],[46034,0,"Q"],[46036,72,""],[46036,0,"|g"],[46051,29,""],[46079,19,""],[46080,37,""],[46083,54,""],[56967,0,"\t$(MAKE) -C gitweb gitwebdir=$(gitwebdir_SQ) install\n"]]},{"span":[182893,182957],"parents":[177997,178045,182259,182353],"agent":"Brandon Casey","seqStart":2748,"ops":[[54333,0,"PYTHON_PATH=\\''$(subst ','\\'',$(PYTHON_PATH_SQ))'\\' >>$@\n\t@echo "]]},{"span":[182957,182979],"parents":[177997,178045,182259,182353],"agent":"Jeff King","seqStart":2319,"ops":[[27296,0,"DEFAULT_PAGER = more\n\t"]]},{"span":[182979,183037],"parents":[178045,182297],"agent":"Ævar Arnfjörð Bjarmason","seqStart":0,"ops":[[44204,2,""],[44204,0,"'\"$$"],[44218,2,""],[44219,0,"'\""],[44269,48,""]]},{"span":[183037,183059],"parents":[178045,182297],"agent":"Jeff King","seqStart":2341,"ops":[[26984,0,"DEFAULT_PAGER = more\n\t"]]},{"span":[183059,183081],"parents":[182978,183058],"agent":"Junio C Hamano","seqStart":57885,"ops":[[27318,22,""]]},{"span":[183081,183215],"parents":[182151,182215,182333,182371,182892,182956,183036,183080],"agent":"Junio C Hamano","seqStart":57907,"ops":[[11496,0," gitwebdir"],[55837,11,""],[55837,0,"DIFF"],[55862,14,""],[55862,0,"subst ','\\'',$(DIFF)"],[55900,4,""],[55900,0,"PYTHON_PATH"],[55932,20,""],[55932,0,"PYTHON_PATH_SQ"],[58946,26,""]]},{"span":[183215,183351],"parents":[177195,178622,183214],"agent":"Junio C Hamano","seqStart":58041,"ops":[[9602,1,""],[9678,25,""],[9679,27,""],[9680,4,""],[9681,11,""],[9863,0,"#\n# Define NATIVE_CRLF if your platform uses CRLF for line endings.\n"]]},{"span":[183351,183382],"parents":[183350],"agent":"Jeff King","seqStart":2363,"ops":[[22843,0,"kew.o\nBUILTIN_OBJS += builtin/s"]]},{"span":[183382,183413],"parents":[183381],"agent":"Junio C Hamano","seqStart":58177,"ops":[[22843,31,""]]},{"span":[183413,183499],"parents":[177997,183058],"agent":"Brandon Casey","seqStart":2812,"ops":[[57989,2,""],[58202,2,""],[58206,3,""],[58257,2,""],[58516,2,""],[58520,4,""],[58213,2,""],[58213,0,"remo"],[58219,0,"_curl_aliase"],[58232,3,""],[58232,0,"="],[58258,3,""],[58258,0,"&&"],[58261,3,""],[58264,1,""],[58274,7,""],[58274,0,"$remote"],[58282,4,""],[58282,0,"curl"],[58287,8,""],[58287,0,"aliases"],[58526,3,""]]},{"span":[183499,183748],"parents":[183350,183498],"agent":"Petr Onderka","seqStart":0,"ops":[[10822,0,"  ETC_GITATTRIBUTES\n# "],[11444,0,"ETC_GITATTRIBUTES = $(sysconfdir)/gitattribut"],[11490,0,"s\ne"],[11554,0,"ETC_GITATTRIBUTES = etc/gitattributes\n"],[42444,0,"ETC_GITATTRIBUTES_SQ = $(subst ','\\'',$(ETC_GITATTRIBUTES))\n"],[53746,0,"attr.s attr.o: EXTRA_CPPFLAGS = -DETC_GITATTRIBUTES='\"$(ETC_GITATTRIBUTES_SQ)\"'\n\n"]]},{"span":[183748,183753],"parents":[183350,183498],"agent":"Spencer E. Olson","seqStart":0,"ops":[[53616,0,"HTTP_"]]},{"span":[183753,183836],"parents":[183350,183498],"agent":"Ævar Arnfjörð Bjarmason","seqStart":58,"ops":[[53730,0,"ifdef NO_REGEX\ncompat/regex/regex.o: EXTRA_CPPFLAGS = -DGAWK -DNO_MBSUPPORT\nendif\n\n"]]},{"span":[183836,184220],"parents":[183350,183498],"agent":"Brandon Casey","seqStart":2898,"ops":[[59881,0,"filter $(install_bindir_programs),$(BUILT_INS)); do \\\n\t\t$(RM) \"$$bindir/$$p\" && \\\n\t\tln \"$$bindir/git$X\" \"$$bindir/$$p\" 2>/dev/null || \\\n\t\tln -s \"git$X\" \"$$bindir/$$p\" 2>/dev/null || \\\n\t\tcp \"$$bindir/git$X\" \"$$bindir/$$p\" || exit; \\\n\tdone && \\\n\tfor p in $("],[59679,2,""],[59680,0," for p in git"],[59694,0,"X $(filter $"],[59707,0,"install_bindir_programs),$(ALL_PROG"],[59743,0,"A"],[59745,0,"S)"],[59748,0,"; do \\\n\t\t$(RM)"],[59774,3,""],[59775,1,""],[59775,0,"$p"],[59848,3,""],[59849,1,""],[59849,0,"$p"],[59864,3,""],[59865,1,""],[59865,0,"$p"],[59901,3,""],[59902,1,""],[59902,0,"$p"],[59917,1,""],[59917,0,"$$p\" || ex"],[59929,3,""],[59931,1,""],[59931,0,"\\\n\t "],[59936,0,"done"],[59942,0,"\\\n\t"]]},{"span":[184220,184250],"parents":[183350,183498],"agent":"Thomas Rast","seqStart":813,"ops":[[64727,0,"revisions | \\\n\t\tdocumented,git"]]},{"span":[184250,184299],"parents":[184249],"agent":"Johan Herland","seqStart":411,"ops":[[16925,0,"n"],[16927,0,"tes-merge.h\nLIB_H += o"],[18907,0,"notes-merge.o\nLIB_OBJS += "]]},{"span":[184299,184356],"parents":[184249],"agent":"Jonathan Nieder","seqStart":11364,"ops":[[52948,0,"connect.o transport.o http-backend.o: url.h\n"],[53097,0,"http-fetch.o "]]},{"span":[184356,184509],"parents":[184219,184355],"agent":"Jonathan Nieder","seqStart":11421,"ops":[[16238,0,"VCSSVN_LIB=vcs-svn/lib.a\n"],[49543,0,"VCSSVN_OBJS =\n"],[49593,0," $(VCSSVN_OBJS)"],[53349,0,"\n$(VCSSVN_OBJS):\n"],[54960,0,"$(VCSSVN_LIB): $(VCSSVN_OBJS)\n\t$(QUIET_AR)$(RM) $@ && $(AR) rcs $@ $(VCSSVN_OBJS)\n"]]},{"span":[184509,184569],"parents":[184508],"agent":"David Barr","seqStart":0,"ops":[[14559,0,"obj-pool\nTEST_PROGRAMS_NEED_X += test-"],[53403,0," \\\n\tvcs-svn/obj_pool.h"]]},{"span":[184569,184618],"parents":[184568],"agent":"Jason Evans","seqStart":0,"ops":[[14793,0,"treap\nTEST_PROGRAMS_NEED_X += test-"],[53460,0," vcs-svn/trp.h"]]},{"span":[184618,185070],"parents":[184617],"agent":"David Barr","seqStart":60,"ops":[[14793,0,"s"],[14796,0,"ing-pool\nTEST_PROGRAMS_NEED_X += t"],[14831,0,"st-tre"],[49670,0," vcs-svn/string_pool.o"],[53537,0," vcs-svn/string_pool.h"],[58011,0,"test-string-pool$X: vcs-svn/lib.a\n\n"],[58175,0,"filter %.a,$^) $("],[14518,0,"line-buffer\nTEST_PROGRAMS_NEED_X += test-"],[49733,0," vcs-svn/line_buffer.o"],[53622,0," \\"],[53625,0,"\tvcs-svn/lin"],[53638,0,"_buffer.h\ne"],[58065,0,"line-buffer$X: vcs-svn/lib.a\n\ntest-"],[49755,0," \\"],[49758,0,"\tvcs-svn/repo_tree.o vcs-svn/fast_export.o\n"],[53692,0," vcs-svn/repo_tree.h vcs-svn/fast_export.h"],[14875,0,"svn-fe\nTEST_PROGRAMS_NEED_X += test-"],[49836,0," vcs-svn/svndump.o"],[53788,0," \\\n\tvcs-svn/svndump.h"],[58331,0,"test-svn-fe$X: vcs-svn/lib.a\n\n"]]},{"span":[185070,185304],"parents":[185069],"agent":"Jonathan Nieder","seqStart":11574,"ops":[[63650,0,"vcs-svn/*.o "],[63702,0," $(VCSSVN_LIB)"],[2767,0,"STRTOK_R if you don't have strtok_r in the C library.\n#\n# Define NO_"],[31476,0,"STRTOK_R = YesPlease\n\tNO_"],[33284,0,"STRTOK_R = YesPlease\n\tNO_"],[38814,0,"TRTOK_R\n\tCOMPAT_CFLAGS += -DNO_STRTOK_R\n\tCOMPAT_OBJS += compat/strtok_r.o\nendif\nifdef NO_S"]]},{"span":[185304,185942],"parents":[184219,184355],"agent":"Ævar Arnfjörð Bjarmason","seqStart":141,"ops":[[2767,0,"FNMATCH if you don't have fnmatch in the C library.\n#\n# Define NO_"],[31258,0,"FN"],[31261,0,"ATCH = YesPlease\n\tNO_M"],[32242,24,""],[32243,1,""],[32363,9,""],[32372,8,""],[32397,17,""],[33006,0,"FN"],[33009,0,"ATCH = YesPlease\n\tNO_M"],[33666,17,""],[33745,25,""],[33765,4,""],[38488,0,"FNMATCH\n\tCOMPAT_CFLAGS += -Icompat/fnmatch\n\tCOMPAT_CFLAGS += -DNO_FNMATCH\n\tCOMPAT_OBJS += compat/fnmatch/fnmatch.o\nendif\nifdef NO_"],[2833,0,"FNMATCH_CASEFO"],[2848,0,"D if your fnmatch function doesn't have the\n# FNM_CASEFOLD GNU extension.\n#\n# Define NO_L"],[25709,0,"NO_FNMATCH_CASEFOLD = YesPlease\n\t"],[38740,0,"lse\nifdef NO_FNMATCH_CASEFOLD\n\tCOMPAT_CFLAGS += -Icompat/fnmatch\n\tCOMPAT_CFLAGS += -DNO_FNMATCH_CASEFOLD\n\tCOMPAT_OBJS += compat/fnmatch/fnmatch.o\nendif\ne"]]},{"span":[185942,186569],"parents":[184219,184355],"agent":"Ævar Arnfjörð Bjarmason","seqStart":779,"ops":[[41944,0,"GCOV     = @echo '   ' GCOV $@;\n\tQUIET_"],[65808,0,"object_dirs := $(sort $(dir $(OBJECTS)))\n"],[65866,0,"$(RM) $(addsuffix *.gcov,$(object_di"],[65903,1,""],[65903,0,"s))\n\t$(RM)"],[65914,1,""],[65914,0,"$(addsu"],[65922,0,"fix"],[65932,0,",$(object_dirs))\n\t$(RM) $(addsuffix"],[65974,0,",$(object_dirs))"],[65991,0,"\t$(RM) coverage-untested-functions\n"],[66131,0,"GCOVFLAGS = --preserve-paths --branch-probabilities --all-blocks\n"],[66398,0,"$(QUIET_GCOV)for dir in $(object_dirs); do \\\n\t\t"],[66450,0,"$(GCOVFLAGS) -"],[66465,0,"o"],[66467,0,"ject-directory=$$dir"],[66488,0,"$$dir"],[66496,0," || exit; \\\n\tdone"],[66627,5,""],[66627,0,">"],[66514,0,"\ncoverage-untested-functions: coverage-report\n"],[66026,0,"\t$(RM) -r cover_db/\n"],[66723,0,"\ncover_db: coverage-report\n\tgcov2perl -db cover_db *.gcov\n"],[66046,0,"\t$(RM) -r cover_db_html/\n"],[66806,0,"\ncover_db_html: cover_db\n\tcover -report html -outputdir cover_db_html cover_db\n"]]},{"span":[186569,186592],"parents":[186568],"agent":"Thomas Rast","seqStart":843,"ops":[[11753,0,"GCOV = gcov\n"],[66502,4,""],[66502,0,"$(GCOV)"]]},{"span":[186592,186636],"parents":[183752,183835,185303,186591],"agent":"Brandon Casey","seqStart":3282,"ops":[[29761,0,"NO_REGEX = YesPlease\n\t"],[30472,0,"NO_REGEX = YesPlease\n\t"]]},{"span":[186636,186845],"parents":[184219,184355],"agent":"René Scharfe","seqStart":891,"ops":[[41089,26,""],[41090,48,""],[53713,0,"ifdef USE_NED_ALLOCATOR\ncompat/nedmalloc/nedmalloc.o: EXTRA_CPPFLAGS = \\\n\t-DNDEBUG -DOVERRIDE_STRDUP -DREPLACE_SYSTEM_ALLOCATOR\nendif\n\n"]]},{"span":[186845,187011],"parents":[186635,186844],"agent":"Junio C Hamano","seqStart":58208,"ops":[[54542,0,"NO_REGEX\ncompat/regex/regex.o: EXTRA_CPPFLAGS = -DGAWK -DNO_MBSUPPORT\nendif\n\nifdef "],[54746,83,""]]},{"span":[187011,187055],"parents":[105405,187010],"agent":"Junio C Hamano","seqStart":58374,"ops":[[66801,44,""]]},{"span":[187055,187128],"parents":[187054],"agent":"Ilari Liusvaara","seqStart":757,"ops":[[22764,0,"mote-fd.o\nBUILTIN_OBJS += builtin/re"],[22769,0,"ext.o\nBUILTIN_OBJS += builtin/remote-"]]},{"span":[187128,187134],"parents":[187054],"agent":"Ævar Arnfjörð Bjarmason","seqStart":1406,"ops":[[56382,0,"CC):$("]]},{"span":[187134,187251],"parents":[187054],"agent":"Junio C Hamano","seqStart":58418,"ops":[[13987,0,"ETAGS_TARGET = TAGS\n\n"],[33958,0,"ETAGS_TARGET = ETAGS\n\t"],[56166,0,"$(E"],[56173,0,"_TARGET)"],[56182,0," FORCE"],[56196,0,"$(E"],[56203,0,"_TARGET)"],[56262,0," -o $(ETAGS_TARGET)"],[56288,0," FORCE"],[64446,0,"$(E"],[64453,0,"_TARGET)"],[65204,10,""]]},{"span":[187251,187291],"parents":[183747,187133,187250],"agent":"Nguyễn Thái Ngọc Duy","seqStart":212,"ops":[[15085,0,"ubprocess\nTEST_PROGRAMS_NEED_X += test-s"]]},{"span":[187291,187889],"parents":[183747,187133,187250],"agent":"Markus Duft","seqStart":0,"ops":[[33204,0,"eq ($(uname_S),Interix)\n\tNO_SYS_POLL_H = YesPlease\n\tNO_INTTYPES_H = YesPlease\n\tNO_INITGROUPS = YesPlease\n\tNO_IPV6 = YesPlease\n\tNO_MEMMEM = YesPlease\n\tNO_MKDTEMP = YesPlease\n\tNO_STRTOUMAX = YesPlease\n\tNO_NSEC = YesPlease\n\tNO_MKSTEMPS = YesPlease\n\tifeq ($(uname_R),3.5)\n\t\tNO_INET_NTOP = YesPlease\n\t\tNO_INET_PTON = YesPlease\n\tendif\n\tifeq ($(uname_R),5.2)\n\t\tNO_INET_NTOP = YesPlease\n\t\tNO_INET_PTON = YesPlease\n\te"],[33613,0,"dif\n"],[33618,0,"ndif\nifne"],[39911,0,"SYS_POLL_H\n\tBASIC_CFLAGS += -DNO_SYS_POLL_H\nendif\nifdef NO_INTTYPES_H\n\tBASIC_CFLAGS += -DNO_INTTYPES_H\nendif\nifdef NO_INITGROUPS\n\tBASIC_CFLAGS += -DNO_INITGROUPS\nendif\nifdef NO_"]]},{"span":[187889,188028],"parents":[183747,187133,187250],"agent":"Mike Pape","seqStart":0,"ops":[[16941,0,"ompat/win32/syslog.h\nLIB_H += c"],[32745,0," compat/win32/syslog.o"],[34372,0," compat/win32/syslog.o"],[40378,0,"\tBASIC_CFLAGS += -DNO_INET_NTOP\n"],[40467,0,"\tBASIC_CFLAGS += -DNO_INET_PTON\n"]]},{"span":[188028,188464],"parents":[188027],"agent":"Erik Faye-Lund","seqStart":122,"ops":[[16972,0,"ompat/win32/sy"],[16987,0,"/poll.h\nLIB_H += cs"],[32800,0," compat/win32/sys/poll.o"],[34451,0," \\\n\t\tcompat/win32/sys/poll.o"],[14263,0,"daemon.o\nPROGRAM_OBJS += "],[32079,22,""],[32081,14,""],[32397,0,"O_POSIX_GOODIES = UnfortunatelyYes\n\tN"],[33872,22,""],[33874,14,""],[34188,0,"NO_INET_PTON = YesPlease\n\tNO_INET_NTOP = YesPlease\n\tNO_POSIX_GOODIES = UnfortunatelyYes\n\t"],[37270,8,""],[37271,3,""],[37272,2,""],[37273,7,""],[37274,42,""],[40782,0,"NO_POSIX_GOODIES\n\tBASIC_CFLAGS += -DNO_POSIX_GOODIES\nendif\n\nifdef "]]},{"span":[188464,188475],"parents":[188463],"agent":"Ramsay Jones","seqStart":678,"ops":[[33135,0,"user32.lib "]]},{"span":[188475,188558],"parents":[188463],"agent":"Erik Faye-Lund","seqStart":558,"ops":[[17030,0,"ompat/win32/dirent.h\nLIB_H += c"],[32813,0,"\\\n\t\t"],[32862,0,"\\\n\t\t"],[32889,0," compat/win32/dirent.o"],[34619,0," compat/win32/dirent.o"]]},{"span":[188558,188577],"parents":[183747,187133,187250],"agent":"Jonathan Nieder","seqStart":11808,"ops":[[20583,0,"LIB_OBJS += zlib.o\n"]]},{"span":[188577,188583],"parents":[187250],"agent":"Tay Ray Chuan","seqStart":0,"ops":[[53755,0," url.h"]]},{"span":[188583,188599],"parents":[187250],"agent":"Diego Elio Pettenò","seqStart":0,"ops":[[55059,0," $(LIB_4_CRYPTO)"]]},{"span":[188599,188622],"parents":[188463,188598],"agent":"Erik Faye-Lund","seqStart":641,"ops":[[45895,0,"help.o: common-cmds.h\n\n"]]},{"span":[188622,188806],"parents":[185941,187888,188463,188598],"agent":"Junio C Hamano","seqStart":58535,"ops":[[35052,0,"\\\n\t\t"],[39767,0,"STRTOK_R\n\tCOMPAT_CFLAGS += -DNO_STRTOK_R\n\tCOMPAT_OBJS += compat/strtok_r.o\nendif\nifdef NO_"],[40118,6,""],[40122,3,""],[40124,81,""]]},{"span":[188806,188958],"parents":[188576,188805],"agent":"Jonathan Nieder","seqStart":11827,"ops":[[51651,0,"VCSSVN_TEST_OBJS = test-obj-pool.o test-string-pool.o \\\n\ttest-line-buffer.o test-treap.o\n"],[55547,0," $(VCSSVN_TEST_OBJS)"],[55569,0,"$(LIB_H) "],[55724,0,"\ntest-svn-fe.o: vcs-svn/svndump.h\n"]]},{"span":[188958,189039],"parents":[184298,187127,188957],"agent":"Jonathan Nieder","seqStart":11979,"ops":[[55004,0," builtin/pack-objects.o transport-helper.o"],[55304,10,""],[55305,4,""],[55306,16,""],[55307,9,""]]},{"span":[189039,189083],"parents":[187133,188598],"agent":"Junio C Hamano","seqStart":58719,"ops":[[37329,0,"O_OPENSSL\n\tLIB_4_CRYPTO =\nelse\nifdef N"],[37487,0,"endif\n"]]},{"span":[189083,189145],"parents":[183747,187133,187250],"agent":"Jeff King","seqStart":2394,"ops":[[6748,1,""],[6748,0,"7"],[6800,1,""],[6800,0,"7"],[6928,3,""],[6953,0,"does not "],[6968,1,""],[7003,6,""],[7003,0,"68.1"],[7008,2,""],[7009,1,""],[7009,0,"h"],[7011,0,"ough"],[7016,4,""],[7016,0,"v"],[7018,3,""],[7019,13,""],[7019,0,"72"],[42726,1,""],[42726,0,"7"],[42744,1,""],[42744,0,"7"]]},{"span":[189145,189181],"parents":[188474,188557,188582,188621,189038,189082,189144],"agent":"Arnout Engelen","seqStart":0,"ops":[[15351,0,"TEST_PROGRAMS_NEED_X += test-mktemp\n"]]},{"span":[189181,189247],"parents":[188474,188557,188582,188621,189038,189082,189144],"agent":"Brandon Casey","seqStart":3326,"ops":[[30363,0,"NO_FNMATCH_CASEFOLD = YesPlease\n\t"],[31107,0,"NO_FNMATCH_CASEFOLD = YesPlease\n\t"]]},{"span":[189247,189280],"parents":[187290,189246],"agent":"Michal Rokos","seqStart":377,"ops":[[31562,0,"NO_FNMATCH_CASEFOLD = YesPlease\n\t"]]},{"span":[189280,189556],"parents":[189180,189279],"agent":"Kacper Kornet","seqStart":0,"ops":[[11589,40,""],[11607,3,""],[11607,0,"git_et"],[11614,3,""],[11651,12,""],[11654,7,""],[11654,0,"_e"],[11657,11,""],[11658,3,""],[11661,11,""],[11662,58,""],[11677,6,""],[35705,0,"eq ($(prefix),/usr)\nsysconfdir = /etc\ngit_etcdir = /etc\nelse\nsysconfdir = $(prefix)/etc\ngit_etcdir = etc\nendif\n\nif"]]},{"span":[189556,189832],"parents":[189555],"agent":"Junio C Hamano","seqStart":58763,"ops":[[11589,0,"ifeq ($(prefix),/usr)\nsysconfdir = /etc\n"],[11647,6,""],[11647,0,"sys"],[11651,0,"onf"],[11691,0,"sysconfdir)/"],[11706,1,""],[11706,0,"attributes\nels"],[11721,1,""],[11721,0,"\nsys"],[11726,0,"onf"],[11732,0," = $(prefix"],[11745,0,"etc\nETC_GITCONFIG = etc/gitconfig\nETC_GITATTRIBUTES = etc/"],[11817,0,"endif\n"],[35847,114,""]]},{"span":[189832,190117],"parents":[189831],"agent":"Johannes Sixt","seqStart":4192,"ops":[[11010,23,""],[11020,23,""],[11542,22,""],[11543,18,""],[11631,1,""],[11632,11,""],[11633,80,""],[11634,14,""],[35659,0,"ndef sysconfdir\nifeq ($(prefix),/usr)\nsysconfdir = /etc\nelse\nsysconfdir = etc\nendif\nendif\n\nif"]]},{"span":[190117,190645],"parents":[187290,189246],"agent":"Jonathan Nieder","seqStart":12060,"ops":[[1877,303,""],[26338,28,""],[26591,4,""],[26592,24,""],[26702,28,""],[26830,28,""],[31910,27,""],[34164,27,""],[38977,35,""],[38978,24,""]]},{"span":[190645,190931],"parents":[187290,189180,189246],"agent":"David Barr","seqStart":512,"ops":[[15226,41,""],[51924,10,""],[51925,12,""],[51938,3,""],[51958,0,"\\\n\t"],[52028,12,""],[52029,7,""],[52036,3,""],[55948,22,""],[60935,17,""],[60936,18,""],[15301,35,""],[52019,13,""],[55886,14,""],[14991,38,""],[51952,7,""],[51953,9,""],[55812,22,""]]},{"span":[190931,191684],"parents":[187290,189180,189246],"agent":"Jonathan Nieder","seqStart":12588,"ops":[[12683,0,"XDIFF_H =\nXDIFF_OBJS =\nVCSSVN_H =\nVCSSVN_OBJS =\nVCSSVN_TEST_OBJS =\n"],[51900,0,"\n"],[51912,0,"+"],[51929,0,"\nXDIFF_OBJS +="],[51960,0,"\nXDIFF_OBJS +="],[51989,0,"\nXDIFF_OBJS"],[52001,0,"+= "],[52017,2,""],[52018,1,""],[52018,0,"XDIFF_OBJS += "],[52046,0,"\nXDIFF_OBJS +="],[52079,0,"\n"],[52092,0,"+"],[52116,0,"\nVCSSVN_OBJS +="],[52153,0,"\nVCSSVN_OBJS +="],[52169,3,""],[52188,0,"\nVCSSVN_OBJS"],[52201,0,"+= "],[52225,0,"\nVCSSVN_OBJS"],[52238,0,"+= "],[52259,0,"\n"],[52277,0,"+"],[52295,0,"\nVCSSVN_TEST_OBJS"],[52313,0,"+= "],[52334,2,""],[52335,1,""],[52335,0,"VCSSVN_TEST_OBJS += "],[52373,0,"\nVCSSVN_TEST_OBJS +="],[52407,0,"\n"],[56047,20,""],[56053,6,""],[56053,0,"H"],[56055,3,""],[56055,0,"+= "],[56074,0,"\nXDIFF_H +="],[56101,0,"\nXDIFF_H"],[56110,0,"+= "],[56126,0,"\nXDIFF_H"],[56135,0,"+= "],[56152,2,""],[56153,1,""],[56153,0,"XDIFF_H += "],[56178,0,"\nXDIFF_H"],[56187,0,"+= "],[56206,0,"\nXDIFF_H +="],[56232,0,"\nXDIFF_H"],[56241,0,"+= "],[56259,0,"xdiff-interface.o "],[56279,6,""],[56279,0,"XDIFF"],[56290,0,":"],[56294,0,"XDIFF_H)\n\n"],[56310,5,""],[56311,6,""],[56311,0,"H"],[56313,8,""],[56313,0,"+="],[56316,3,""],[56334,0,"\nVCSSVN_H +="],[56360,0,"\nVCSSVN_H +="],[56394,2,""],[56395,1,""],[56395,0,"VCSSVN_H += "],[56428,0,"\nVCSSVN_H +="],[56460,0,"\nVCSSVN_H +="],[56494,0,"\nVCSSVN_H"],[56504,3,""],[56504,0,"+= "],[56526,13,""],[56526,0,"$(VCSSVN_OBJS) $(VCSSVN_TEST_OBJS)"],[56562,17,""],[56562,0,"$(LIB_H) $(VCSSVN_H)"],[52177,0,"sliding_window.o\nVCSSVN_OBJS += vcs-svn/"],[56489,0,"sliding_window.h\nVCSSVN_H += vcs-svn/"],[52293,0,"iff.o\nVCSSVN_OBJS += vcs-svn/svnd"],[56629,0,"iff.h\nVCSSVN_H += vcs-svn/svnd"]]},{"span":[191684,192003],"parents":[187290,189180,189246],"agent":"Ævar Arnfjörð Bjarmason","seqStart":1412,"ops":[[17439,0,"ettext.h\nLIB_H += g"],[9099,0,"GETTEXT_POISON if you are debugging the choice of strings marked\n# for translation.  This will turn all strings that use gettext into gibberish.\n#\n# Define "],[40016,0,"GETTEXT_POISO"],[40030,0,"\n\tBASIC_CFLAGS += -DGETTEXT_P"],[40060,0,"ISON\nendif\nifdef NO"],[60163,0,"\t@echo GETTEXT_POISON=\\''$(subst ','\\'',$(subst ','\\'',$(GETTEXT_POISON)))'\\' >>$@\n"]]},{"span":[192003,192171],"parents":[192002],"agent":"Jonathan Nieder","seqStart":13341,"ops":[[9184,0,"In a GET"],[9193,3,""],[9193,0,"EXT_POISON"],[9204,1,""],[9204,0,"bu"],[9208,1,""],[9208,0,"d,"],[9211,0,"you can "],[9236,2,""],[9236,0,"m"],[9238,1,""],[9238,0,"rked\n#"],[9245,3,""],[9245,0,"for"],[9249,2,""],[9250,0,"ransla"],[9257,3,""],[9257,0,"ion"],[9275,0," by setting the GIT_GETTEXT_POISON variable\n# (to any value) in your environment"],[40145,0,"LIB_OBJS += gettext.o\n\t"]]},{"span":[192171,192605],"parents":[192170],"agent":"Ævar Arnfjörð Bjarmason","seqStart":1731,"ops":[[12313,0,"XGETTEXT = xgettext\n"],[44639,0,"X"],[44641,0,"ETTEXT = @echo '   ' XGETTEXT $@;\n\tQUIET_G"],[58796,0,"XGETTEXT_FLAGS = \\\n\t--force-po \\\n\t--add-comments \\\n\t--msgid-bugs-address=\"Git Mailing List <git@vger.kernel.org>\" \\\n\t--from-code=UTF-8\nXGETTEXT_FLAGS_C = $(XGETTEXT_FLAGS) --keyword=_ --keyword=N_ --language=C\nLOCALIZED_C := $(C_OBJ:o=c)\n\npo/git.pot: $(LOCALIZED_C)\n\t$(QUIET_XGETTEXT)$(XGETTEXT) -o$@+ $(XGETTEXT_FLAGS_C) $(LOCALIZED_C) && \\\n\tmv $@+ $@\n\npot: po/git.pot\n\n"]]},{"span":[192605,192623],"parents":[192604],"agent":"Jonathan Nieder","seqStart":13509,"ops":[[67212,0,"\t$(RM) po/git.pot\n"]]},{"span":[192623,192655],"parents":[189279,192622],"agent":"Stephen Boyd","seqStart":0,"ops":[[62281,1,""],[62281,0,"$(patsubst %.o, %"],[62300,0,", $(GIT_OBJS))"]]},{"span":[192655,192693],"parents":[190644,192654],"agent":"Ævar Arnfjörð Bjarmason","seqStart":2165,"ops":[[58475,0,"language=C \\\n\t--"],[58516,7,""],[58516,0,"k"],[58518,0,"yword"],[58524,1,""],[58524,0,"\"Q_:1,2\""]]},{"span":[192693,193590],"parents":[192692],"agent":"Ramsay Jones","seqStart":689,"ops":[[12113,139,""],[12127,31,""],[27915,0,"\tSPARSE_FLAGS = -isyst"],[27938,0,"m /usr/i"],[27947,0,"clu"],[27951,0,"e/w32ap"],[27959,0," -Wno-one-bit-signed-bitfield\nendi"],[35317,0,"\tSPARSE_FLAGS = -Wno-one-bit-signed-bitfield\n"],[61692,0,"@"],[61772,1,""],[61772,0,"echo '   ' SP $$i; \\\n\t\t\tcgcc -no-com"],[61809,3,""],[61809,0,"il"],[17477,0,"file.h\nLIB_H += merge-"],[44198,0,"P       = @echo '   ' SP $<;\n\tQUIET_S"],[47056,0,"p"],[47062,0,"s git."],[47294,0,"sp help."],[47333,0,"sp builtin/help."],[47380,0,"p"],[47395,0,"s builtin/help."],[56192,0,"p exec_cmd.s"],[56359,0,"p builtin/init-db.s"],[56477,0,"p config.s"],[56515,0,"\\\n\t"],[56565,0,"p attr.s"],[56599,0,"\\\n\t"],[56657,0,"p"],[56664,0,"s http."],[56691,0,"\\\n\t"],[56768,0,"p http-walker.s"],[56868,0,"sp compat/regex/regex."],[56910,0,"\\\n\t"],[56993,0,"sp compat/nedmalloc/nedmalloc."],[61912,51,""],[61912,0,"SP_OBJ"],[61919,2,""],[61919,0,"="],[61936,1,""],[61938,1,""],[61938,0,"sp"],[61941,1,""],[61943,3,""],[61943,0,"C"],[61948,1,""],[61950,3,""],[61951,6,""],[61952,7,""],[61952,0,"$(SP_OBJ):"],[61963,1,""],[61963,0,"%.sp:"],[61969,3,""],[61969,0,"%.c"],[61973,0,"GIT-CFLAG"],[61983,1,""],[61984,6,""],[61984,0,"FORCE"],[61991,2,""],[61991,0,"$(QUIET_SP)"],[62035,0,"EXTRA_CPPFLAGS) \\\n\t\t$("],[62072,0,"<\n\n.PHONY: sparse "],[62091,0,"(SP_OBJ)\nsparse: $(SP_OBJ)\n\ncheck: common-cmds.h\n\t@"],[62143,0,"f sparse;"],[62153,2,""],[62153,0,"\\\n\tthen"],[62161,0,"\\\n\t\t"],[62166,1,""],[62166,0,"cho 2>&1 \"Use 'make sparse' "],[62195,0,"ns"],[62198,0,"ead\""],[62208,1,""],[62208,0,"$(MAKE) --n"],[62220,0,"-pri"],[62225,0,"t-directory spars"]]},{"span":[193590,193704],"parents":[190930,191683,192692],"agent":"Jonathan Nieder","seqStart":13527,"ops":[[51930,15,""],[52030,3,""],[52147,20,""],[52148,20,""],[52161,20,""],[56056,1,""],[56057,35,""]]},{"span":[193704,193818],"parents":[190930,191683,192692],"agent":"Jonathan Nieder","seqStart":13641,"ops":[[51930,15,""],[52030,3,""],[52147,20,""],[52148,20,""],[52161,20,""],[56056,1,""],[56057,35,""]]},{"span":[193818,193890],"parents":[192692],"agent":"Jon Seymour","seqStart":0,"ops":[[47142,0," \\\n\t'-DGIT_MAN_PATH=\"$(mandir_SQ)\"' \\\n\t'-DGIT_INFO_PATH=\"$(infodir_SQ)\"'"]]},{"span":[193890,194361],"parents":[192692],"agent":"Michał Kiedrowicz","seqStart":0,"ops":[[1013,0,"USE_LIBPCRE if you have and want to use libpcre. git-grep will be\n# able to use Perl-compatible regular expressions.\n#\n# Define LIBPCREDIR=/foo/bar if your libpcre header and library files are in\n# /foo/bar/include and /foo/bar/lib directories.\n#\n# Define "],[37203,0,"USE_LIBPCRE\n\tBASIC_CFLAGS += -DUSE_LIBPCRE\n\tifdef LIBPCREDIR\n\t\tBASIC_CFLAGS += -I$(LIBPCREDIR)/include\n\t\tEXTLIBS += -L$(LIBPCREDIR)/$(lib) $(CC_LD_DYNPATH)$(LIBPCREDIR)/$(lib)\n\tendif\n\tEXTLIBS += -lpcre\nendif\n\nifdef "]]},{"span":[194361,194438],"parents":[194360],"agent":"Junio C Hamano","seqStart":59039,"ops":[[60394,0,"USE_LIBPCRE=\\''$(subst ','\\'',$(subst ','\\'',$(USE_LIBPCRE)))'\\' >>$@\n\t@echo "]]},{"span":[194438,195276],"parents":[192692],"agent":"Jakub Narebski","seqStart":1215,"ops":[[49831,60,""],[49017,778,""]]},{"span":[195276,195323],"parents":[195275],"agent":"Jeff King","seqStart":2456,"ops":[[18061,0,"array.h\nLIB_H += sha1-"],[20385,0,"array.o\nLIB_OBJS += sha1-"]]},{"span":[195323,195364],"parents":[190116,195275],"agent":"Tay Ray Chuan","seqStart":6,"ops":[[1069,4,""],[1069,0,"fetch"],[1162,0," (neither smart nor dumb)"],[1455,0," (dumb)"]]},{"span":[195364,195611],"parents":[187290,189180,189246],"agent":"Martin von Zweigbergk","seqStart":0,"ops":[[13512,0,"--merge.sh\nSCRIPT_SH += git-rebase"],[13474,0,"am.sh\nSCRIPT_SH += git-rebase--"],[13472,4,""],[13494,4,""],[13495,7,""],[13495,0,"p"],[13498,4,""],[13498,0,"k"],[13522,2,""],[13522,0,"que"],[13526,1,""],[13526,0,"t"],[13528,6,""],[13528,0,"pull"],[13553,3,""],[13553,0,"st"],[13557,1,""],[13557,0,"h"],[13579,1,""],[13579,0,"submodul"],[13588,4,""],[13609,4,""],[13609,0,"w"],[13611,2,""],[13611,0,"b"],[13613,4,""],[13613,0,"-browse"],[13624,0,"\n"],[13632,2,""],[13632,0,"LIB"],[13643,1,""],[13643,0,"merge"],[13649,6,""],[13649,0,"ool--lib"],[13665,2,""],[13665,0,"LIB"],[13676,0,"par"],[13680,2,""],[13680,0,"e-re"],[13686,3,""],[13686,0,"t"],[13688,3,""],[13696,2,""],[13696,0,"LIB"],[13707,1,""],[13707,0,"r"],[13710,6,""],[13710,0,"a"],[13713,4,""],[13713,0,"--am"],[13736,2,""],[13737,1,""],[13738,4,""],[13738,0,"base"],[13744,1,""],[13745,1,""],[13745,0,"nteractive"],[13774,1,""],[13774,0,"reb"],[13778,1,""],[13781,2,""],[13781,0,"-"],[13783,2,""],[13784,0,"rge"]]},{"span":[195611,195849],"parents":[193589,193889,195610],"agent":"Ævar Arnfjörð Bjarmason","seqStart":2203,"ops":[[14476,0,"PROGRAM_OBJS += sh-i18n--envsubst.o\n"],[13631,0,"SCRIPT_LIB += git-sh-i18n\n"],[58917,0,"XGETTEXT_FLAGS_SH = $(XGETTEXT_FLAGS) --language=Shell\n"],[59000,0,"LOCALIZED_SH := $(SCRIPT_SH)\n"],[59127,0,"\n\t$(QUIET_XGETTEXT)$(XGETTEXT) -o$@+ --join-existing"],[59180,2,""],[59180,0,"$(XGETTEXT_FLAGS_SH)"],[59204,0,"\t$(LOCALIZED_SH)\n\t"]]},{"span":[195849,195894],"parents":[193589,193889,195275,195610],"agent":"Junio C Hamano","seqStart":59116,"ops":[[18051,0,"eam"],[18057,0,".h\nLIB_H += string"],[20456,0,"eaming.o\nLIB_OBJS += str"]]},{"span":[195894,196052],"parents":[190116,193589,193889,195275,195610],"agent":"Jeff King","seqStart":2503,"ops":[[14592,0,"index-version\nTEST_PROGRAMS_NEED_X += test-"],[14717,0,"mktemp\nTEST_PROGRAMS_NEED_X += test-"],[15108,79,""]]},{"span":[196052,196242],"parents":[195848,196051],"agent":"Markus Duft","seqStart":598,"ops":[[33632,27,""],[33634,27,""],[33873,0,"\tNO_SOCKADDR_STORAGE = YesPlease\n\t\tNO_FNMATCH_CASEFOLD = YesPlease\n\t"],[34025,0,"\tNO_SOCKADDR_STORAGE = YesPlease\n\t\tNO_FNMATCH_CASEFOLD = YesPlease\n\t"]]},{"span":[196242,196428],"parents":[178138,195848,196051],"agent":"Junio C Hamano","seqStart":59161,"ops":[[2532,93,""],[2701,0,"GECOS_IN_PWENT if you don't have pw_gecos in struct passwd\n# in the C library.\n#\n# Define NO_"]]},{"span":[196428,196473],"parents":[194437,195322,196427],"agent":"Junio C Hamano","seqStart":59347,"ops":[[17388,0,"onnected.h\nLIB_H += c"],[18959,0,"nected.o\nLIB_OBJS += con"]]},{"span":[196473,196689],"parents":[194437,195322,196427],"agent":"Junio C Hamano","seqStart":59392,"ops":[[6101,0,"NO_NORETURN if using buggy versions of gcc 4.6+ and profile feedback,\n# as the compiler can crash (http://gcc.gnu.org/bugzilla/show_bug.cgi?id=49299)\n#\n# Define "],[40090,0,"ORETURN\n\tBASIC_CFLAGS += -DNO_NORETURN\nendif\nifdef NO_N"]]},{"span":[196689,197169],"parents":[196688],"agent":"Andi Kleen","seqStart":0,"ops":[[71498,0,"\n### profile feedback build\n#\n.PHONY: profile-all profile-clean\n\nPROFILE_GEN_CFLAGS := $(CFLAGS) -fprofile-generate -DNO_NORETURN=1\nPROFILE_USE_CFLAGS := $(CFLAGS) -fprofile-use -fprofile-correction -DNO_NORETURN=1\n\nprofile-clean:\n\t$(RM) $(addsuffix *.gcda,$(object_dirs))\n\t$(RM) $(addsuffix *.gcno,$(object_dirs))\n\nprofile-all: profile-clean\n\t$(MAKE) CFLAGS=\"$(PROFILE_GEN_CFLAGS)\" all\n\t$(MAKE) CFLAGS=\"$(PROFILE_GEN_CFLAGS)\" -j1 test\n\t$(MAKE) CFLAGS=\"$(PROFILE_USE_CFLAGS)\" all\n"]]},{"span":[197169,197214],"parents":[194437,195322,196427],"agent":"Ramkumar Ramachandra","seqStart":0,"ops":[[18187,0,"equencer."],[18197,0,"\nLIB_H += sh"],[20532,0,"equencer.o\nLIB_OBJS += s"]]},{"span":[197214,197563],"parents":[194437,195322,196427],"agent":"Fredrik Kuivinen","seqStart":383,"ops":[[47877,0,"GIT-LDFLAGS "],[56999,0,"GIT-LDFLAGS "],[57132,0,"GIT-LDFLAGS "],[57353,0,"GIT-LDFLAGS "],[57523,0,"GIT-LDFLAGS "],[57867,0,"GIT-LDFLAGS "],[59632,0,"TRACK_LDFLAGS = $(subst ','\\'',$(ALL_LDFLAGS))\n\nGIT-LDFLAGS: FORCE\n\t@FLAGS='$(TRACK_LDFLAGS)'; \\\n\t    if test x\"$$FLAGS\" != x\"`cat GIT-LDFLAGS 2>/dev/null`\" ; then \\\n\t\techo 1>&2 \"    * new link flags\"; \\\n\t\techo \"$$FLAGS\" >GIT-LDFLAGS; \\\n            fi\n\n"],[62202,0,"GIT-LDFLAGS "],[68534,0,"LDFLAGS GIT-"]]},{"span":[197563,198214],"parents":[195893,196241,197168,197562],"agent":"Thomas Cort","seqStart":0,"ops":[[4655,0,"SS"],[4658,0,"_WITH_CURL if you need -lssl with -lcurl (Minix).\n#\n# Define NEEDS_IDN_W"],[4731,0,"TH_CURL if you need -lidn when using -lcurl (Minix).\n#\n# Define NEEDS_LI"],[34855,0,"eq ($(uname_S),Mi"],[34873,0,"ix)\n\tNO_IPV6 = YesPlease\n\tNO_ST_BLOCKS_IN_STRUCT_STAT = YesPlease\n\tNO_NSEC = YesPl"],[34956,0,"ase\n\tNEEDS_LIBGEN =\n\tNEEDS_CRYPTO_WITH_SSL = YesPlease\n\tNEEDS_IDN_WITH_CURL = YesPlease\n\tNEEDS_SSL_WITH_CURL = YesPlease\n\tNEEDS_RESOLV =\n\tNO_HSTRERROR = YesPlease\n\tNO_MMAP = YesPlease\n\tNO_CURL =\n\tNO_EXPAT =\nendif\nifne"],[38633,0,"ifdef NEEDS_SSL_WITH_CU"],[38657,0,"L\n\t\tCURL_LIBCURL +=\t-lssl\n\t\tifdef NEEDS_CRYPTO_WITH_SSL\n\t\t\tCURL_LIBCURL += -lcrypto\n\t\tendif\n\tendif\n\tifdef NE"],[38766,0,"DS_IDN_WITH_CURL\n\t\tCURL_LIBCURL += -lidn\n\tendif\n\n\tRE"],[39856,2,""],[39856,0,"BSSL"]]},{"span":[198214,198264],"parents":[183412,198213],"agent":"Dmitry Ivankov","seqStart":0,"ops":[[20369,0,"rse-options-cb.o\nLIB_OBJS += pa"],[63112,0," parse-options-cb.o"]]},{"span":[198264,198306],"parents":[194437,195322,196427],"agent":"Nick Alcock","seqStart":0,"ops":[[2312,0,"both "],[2322,0,"imax and strto"],[2347,0,"\n#"],[2360,2,""],[40624,0," compat/strtoimax.o"]]},{"span":[198306,198353],"parents":[194437,195322,196427],"agent":"Jeff King","seqStart":2661,"ops":[[17063,0,"rgv-array.h\nLIB_H += a"],[18700,0,"rgv-array.o\nLIB_OBJS += a"]]},{"span":[198353,198372],"parents":[194437,195322,196427],"agent":"Tay Ray Chuan","seqStart":47,"ops":[[51804,0," xdiff/xhistogram.o"]]},{"span":[198372,198759],"parents":[183412,195363,198213,198371],"agent":"Fredrik Kuivinen","seqStart":732,"ops":[[10493,165,""],[36793,0,"lse\nifndef COMPUTE_HEADER_DEPENDENCIES\ndep_check = $(shell sh -c \\\n\t'$(CC) -c -MF /dev/null -MMD -MP -x c /dev/null -o /dev/null 2>&1; \\\n\techo $$?')\nifeq ($(dep_check),0)\nCOMPUTE_HEADER_DEPENDENCIES=YesPlease\nendif\nendif\ne"]]},{"span":[198759,198787],"parents":[198758],"agent":"David Aguilar","seqStart":840,"ops":[[36852,2,""],[36852,0,"$(CC)"],[36858,7,""],[36860,0,"ALL_"],[36865,1,""],[36865,0,"FLAGS"],[36872,0,"\\\n\t"],[36946,1,""]]},{"span":[198787,198879],"parents":[183412,195363,198213,198371],"agent":"Fredrik Kuivinen","seqStart":1119,"ops":[[17607,0,"obstack.h\nLIB_H += compat/"],[19281,0,"mpat/obstack.o\nLIB_OBJS += co"],[18009,0,"kwset.h\nLIB_H += "],[19980,0,"kwset.o\nLIB_OBJS += "]]},{"span":[198879,199307],"parents":[183412,195363,198213,198371],"agent":"David Aguilar","seqStart":868,"ops":[[12072,0,"mergetoolsdir = $(gitexecdir)/mergetools\n"],[64327,0,"fneq ($(filter /%,$(firstword $(mergetoolsdir))),)\nmergetools_instdir = $(mergetoolsdir)\nelse\nmergetools_instdir = $(prefix)/$(mergetoolsdir)\nendif\nmergetools_instdir_SQ = $(subst ','\\'',$(mergetools_instdir))\n\ni"],[65012,0,"\t$(INSTALL) -d -m 755 '$(DESTDIR_SQ)$(mergetools_instdir_SQ)'\n\t(cd mergetools && $(TAR) cf - .) | \\\n\t(cd '$(DESTDIR_SQ)$(mergetools_instdir_SQ)' && umask 022 && $(TAR) xof -)\n"]]},{"span":[199307,199384],"parents":[199306],"agent":"Jonathan Nieder","seqStart":13755,"ops":[[65075,0,"$"],[65077,2,""],[65077,0,"INSTALL) -m 644"],[65103,27,""],[65103,0,"/*"],[65145,30,""]]},{"span":[199384,199409],"parents":[198263,198878,199306],"agent":"Junio C Hamano","seqStart":59608,"ops":[[17924,0,"mt-merge-msg.h\nLIB_H += f"]]},{"span":[199409,199679],"parents":[198263,198878,199306],"agent":"Junio C Hamano","seqStart":59633,"ops":[[60202,0,"FIND_SOURCE_FILES = ( git ls-files '*.[hcS]' 2>/dev/null || \\\n\t\t\t$(FIND) . \\( -name .git -type d -prune \\) \\\n\t\t\t\t-o \\( -name '*.[hcS]' -type f -print \\) )\n\n"],[60411,0,"_SOURCE_FILES"],[60426,25,""],[60494,16,""],[60494,0,"_SOURCE_FILE"],[60507,9,""],[60507,0,")"],[60557,16,""],[60557,0,"_"],[60559,9,""],[60559,0,"OURCE_FILES)"]]},{"span":[199679,199720],"parents":[198263,198878,199306],"agent":"Jonathan Nieder","seqStart":13832,"ops":[[25620,0,"\tDIR_HAS_BSD_GROUP_SEMANTICS = YesPlease\n"]]},{"span":[199720,199773],"parents":[171340,196472,197213,198352,198786,199383,199719],"agent":"Junio C Hamano","seqStart":59903,"ops":[[17864,0,"pg-inte"],[17872,0,"f"],[17874,0,"ce.h\nLIB_H += gra"],[19880,0,"pg-interface.o\nLIB_OBJS += g"]]},{"span":[199773,199839],"parents":[171340,196472,197213,198352,198786,199383,199678,199719],"agent":"Erik Faye-Lund","seqStart":664,"ops":[[32846,0,"S_POLL_H = YesPlease\n\tNO_SY"],[34089,4,""],[35543,0,"S_POLL_H = YesPlease\n\tNO_SY"],[36593,4,""],[17600,4,""]]},{"span":[199839,202261],"parents":[199838],"agent":"Ævar Arnfjörð Bjarmason","seqStart":2441,"ops":[[1855,0,"NO_GETTEXT if you don't want Git output to be translated.\n# A translated Git requires GNU libintl or another gettext implementation,\n# plus libintl-perl at runtime.\n#\n# Define "],[2036,0,"LIBCHARSET_H if you haven't set NO_GETTEXT and you can't\n# trust the langinfo.h's nl_langinfo(CODESET) function to return the\n# current character set. GNU and Solaris have a nl_langinfo(CODESET),\n# FreeBSD can use either, but MinGW and some others need to use\n# libcharset.h's locale_charset() instead.\n#\n# Define LIBC_CONTAINS_LIBINTL if your gettext implementation doesn't\n# need -lintl when linking.\n#\n# Define NO_MSGFMT_EXTENDED_OPTIONS if your implementation of msgfmt\n# doesn't support GNU extensions like --check and --statistics\n#\n# Define HAVE_"],[12735,0,"localedir = $(sharedir)/locale\n"],[13006,0," localedir"],[13173,0,"MSGFMT = msgfmt\n"],[20637,0,"ettext.o\nLIB_OBJS += g"],[26284,0,"\tLIBC_CONTAINS_LIBINTL = Y"],[26311,0,"sPlease\ne"],[26472,0,"\tLIBC_CONTAINS_LIBINTL = Y"],[26499,0,"sPlease\ne"],[28110,0,"NO_MSGFMT_EXTENDED_OPTIONS = YesPlease\n\t"],[31439,0,"\tLIBC_CONTAINS_LIBINTL = YesPlease\n"],[37851,0,"\tHAVE_LIBCHARSET_H = YesPlease\n"],[41849,0,"ndef NO_GETTEXT\nifndef LIBC_CONTAINS_LIBINTL\n\tEXTLIBS += -lintl\nendif\nendif\nif"],[42806,1,""],[42806,0,"BAS"],[42810,1,""],[42810,0,"C"],[42812,3,""],[42812,0,"CFLAG"],[42822,1,""],[42822,0,"-DGETTEXT_POISON\n"],[42840,2,""],[42840,0,"ndif\nifd"],[42849,4,""],[42849,0,"f NO_GETTEXT"],[42881,0,"NO_"],[42891,7,""],[46241,0,"HAVE_LIBCHARSET_H\n\tBASIC_CFLAGS += -"],[46278,0,"HAVE_L"],[46285,0,"BCHA"],[46290,0,"SET"],[46295,0,"\nendif\n\nifdef DIR_H"],[46760,0,"ndef NO_MSGFMT_EXTENDED_OPTIONS\n\tMSGFMT += --check --statistics\nendif\n\nif"],[47494,0,"MSGFMT   = @echo '   ' MSGFMT $@;\n\tQUIET_"],[48276,0,"localedir_SQ = $(subst ','\\'',$(localedir))\n"],[50009,0,"loc"],[50014,0,"edir='$(localedir_SQ)' al"],[51580,0,"|@@LOCALEDIR@@|$(localedir_SQ)|g' \\\n    -e 's"],[59411,0,"gettext.sp gettext.s gettext.o: EXTRA_CPPFLAGS = \\\n\t-DGIT_LOCALE_PATH='\"$(localedir_SQ)\"'\n\n"],[61690,0,"XGETTEXT_FLAGS_PERL = $(XGETTEXT_FLAGS) --keyword=__ --language=Perl\n"],[61816,0,"LOCALIZED_PERL := $(SCRIPT_PERL)\n\nifdef XGETTEXT_INCLUDE_TESTS"],[61879,0,"LOCALIZED_C += t/t0200/test.c\nLOCALIZED_SH += t/t0200/test.sh\nLOCALIZED_PERL += t/t0200/test."],[61973,0,"erl\nendif\n\np"],[62176,0,"$(QUIET_XGETTEXT)$(XGETTEXT) -o$@+ --join-existing $(XGETTEXT_FLAGS_PERL) \\\n\t\t$(LOCALIZED_PERL)\n\t"],[62301,0,"POFILES := $(wildcard po/*.po)\nMOFILES := $(patsubst po/%.po,po/build/locale/%/LC_MESSAGES/git.mo,$(PO"],[62405,0,"LES))\n\nifndef "],[62420,0,"O_GETTEXT\nall:: $(MOFILES)\nendif\n\npo/build/locale/%/LC_MESSAGES/git.mo: po/%.po\n\t$(QUIET_MSGFMT)mkdir -p $(dir $@) && $(MSGFMT) -o $@ $<\n\nFIN"],[63100,0,":\\"],[63103,0,"             $(localedir_SQ)\n"],[64612,0,"NO_"],[64622,0,"=\\''$(subst ','\\'',$(subst ','\\'',$(NO"],[64661,0,"GETTEXT)))'\\' >>$@\n\t@echo GETTEXT_"],[67880,0,"GETTEXT\n\t$(INSTALL) -d -m 755 '$(DESTDIR_SQ)$(localedir_SQ)'\n\t(cd po/build/locale && $(TAR) cf - .) | \\\n\t(cd '$(DESTDIR_SQ)$(localedir_SQ)' && umask 022 && $(TAR) xof -)\nendif\nifndef NO_"],[72217,0,"-r po/build/\n\t$(RM) "]]},{"span":[202261,202312],"parents":[171340,196472,197213,198352,198786,199383,199678,199719],"agent":"Junio C Hamano","seqStart":59956,"ops":[[17351,0,"bulk-checkin.h\nLIB_H += "],[19173,0,"lk-checkin.o\nLIB_OBJS += bu"]]},{"span":[202312,202352],"parents":[198352,199719],"agent":"Jonathan Nieder","seqStart":13873,"ops":[[17817,0,"onvert.h\nLIB_H += c"],[56524,0," thread-utils.o"],[56825,0,"url.o "]]},{"span":[202352,202364],"parents":[199838,202351],"agent":"Junio C Hamano","seqStart":60007,"ops":[[17650,1,""],[17650,0,"n"],[17652,1,""],[17652,0,"c"],[17654,0,"ed"],[17671,1,""],[17671,0,"v"],[17673,1,""],[17673,0,"r"],[17675,2,""]]},{"span":[202364,203087],"parents":[202363],"agent":"Jonathan Nieder","seqStart":13913,"ops":[[10493,0,"OMPUTE_"],[10502,0,"ADER_DEPENDEN"],[10516,0,"IES to \"yes\" if you want dependencies on\n# header files to be automatically computed, to avoid rebuilding objects when\n# an unrelated header file changes.  Define it to \"no\" to use the hard-coded\n# dependency rules.  The default is \"auto\", which means to use computed header\n# dependencies if your compiler is detected to support it.\n#\n# Define CHEC"],[37528,0," no"],[37568,3,""],[37568,0,"ndif\n"],[37609,0,"COMPUTE_HEADER_DEPENDENCIES = auto\nen"],[37647,0,"if\n\nif"],[37654,0,"q ($(COMPUTE_HEADER_DEPENDENCIES),auto)\nde"],[37832,0,"override "],[37868,0," "],[37870,1,""],[37870,0," y"],[37874,2,""],[37874,0,"\n"],[37876,1,""],[37876,0,"l"],[37880,0,"overrid"],[37888,0," COMPUTE_HEADER_DEPENDENCIES = "],[37920,3,""],[37920,0,"o"],[37937,1,""],[37938,1,""],[37938,0,"q"],[37940,0,"($("],[37970,0,"),yes)"],[38023,0,"lse\nif"],[38030,0,"eq ($(COMPUTE_HEADER_DEPENDENCIES),no)\n$(error please set COMPUTE_HEADER_DEPENDENCIES to yes, no, or auto \\\n(not \"$(COMPUTE_HEADER_DEPENDENCIES)\"))\nen"],[38184,0,"endif\n"],[54394,1,""],[54395,1,""],[54395,0,"q"],[54397,0,"($("],[54427,0,"),yes)"],[54782,1,""],[54783,1,""],[54783,0,"q"],[54785,0,"($("],[54815,0,"),yes)"]]},{"span":[203087,203278],"parents":[203086],"agent":"Jeff King","seqStart":2708,"ops":[[15401,0,"redential\nTEST_PROGRAMS_NEED_X += tes"],[15439,0,"-ct"],[18097,0,"redential.h\nLIB_H += c"],[19845,0,"redential.o\nLIB_OBJS += c"],[15280,0,"PROGRAM_OBJS += credential-cache.o\nPROGRAM_OBJS += credential-cache--daemon.o\n"],[22003,0,"ix-socket.o\nLIB_OBJS += un"]]},{"span":[203278,203756],"parents":[203277],"agent":"Johannes Sixt","seqStart":4477,"ops":[[5750,0,"UNIX_SOCKETS if your system does not offer unix sockets.\n#\n# Define NO_"],[15351,34,""],[15359,4,""],[15364,40,""],[21978,24,""],[21979,2,""],[33463,0,"UNIX_"],[33469,0,"OCKETS = YesPlease\n\tNO_S"],[36168,0,"UNIX_"],[36174,0,"OCK"],[36179,0,"S = YesPlease\n\tNO_SET"],[44927,0,"ifndef NO_UNIX_SOCKETS\n\tLIB_OBJS += unix-socket.o\n\tLIB_H += unix-socket.h\n\tPROGRAM_OBJS += credential-cache.o\n\tPROGRAM_OBJS += credential-cache--daemon.o\nendif\n"],[63692,0,"\t@echo NO_UNIX_SOCKETS=\\''$(subst ','\\'',$(subst ','\\'',$(NO_UNIX_SOCKETS)))'\\' >>$@\n"]]},{"span":[203756,203791],"parents":[203755],"agent":"Jeff King","seqStart":2899,"ops":[[15351,0,"PROGRAM_OBJS += credential-store.o\n"]]},{"span":[203791,204031],"parents":[203790],"agent":"Jeff King","seqStart":2934,"ops":[[18881,0,"prompt.h\nLIB_H += "],[21271,0,"prompt.o\nLIB_OBJS += "],[9556,0,"HAVE_DEV_TTY if your system can open /dev/tty to interact with the\n# user.\n#\n# Define "],[18132,0,"terminal.h\nLIB_H += compat/"],[19975,0,"mpat/terminal.o\nLIB_OBJS += co"],[46436,0,"HAVE_DEV_TTY\n\tBASIC_CFLAGS += -DHAVE_DEV_TTY\nendif\n\nifdef "]]},{"span":[204031,204057],"parents":[204030],"agent":"Ben Walton","seqStart":667,"ops":[[27995,0,"HAVE_DEV_TTY = YesPlease\n\t"]]},{"span":[204057,204109],"parents":[204030],"agent":"Jeff King","seqStart":3174,"ops":[[26239,0,"\tHAVE_DEV_TTY = YesPlease\n"],[27717,0,"\tHAVE_DEV_TTY = YesPlease\n"]]},{"span":[204109,204155],"parents":[203086],"agent":"Thomas Rast","seqStart":866,"ops":[[15549,0,"scrap-cache-tree\nTEST_PROGRAMS_NEED_X += test-"]]},{"span":[204155,204380],"parents":[198305,199408,199772,202260,202311,203790,204154],"agent":"Alex Riesen","seqStart":1705,"ops":[[2031,0,"USE_GETTEXT_SC"],[2046,0,"EME and set it to 'fallthrough', if you don't trust\n# the installed gettext translation of the shell scripts output.\n#\n# Define H"],[53122,0,"'s/@@USE_GETTEXT_SCHEME@@/$(USE_GETTEXT_SCHEME)/g' \\\n    -e "],[64689,0,":$(USE_GETTEXT_SCHEME)"]]},{"span":[204380,204415],"parents":[204379],"agent":"Junio C Hamano","seqStart":60019,"ops":[[44174,0,"\tUSE_GETTEXT_SCHEME = fallthrough\n"],[44194,0,"?"]]},{"span":[204415,204527],"parents":[198305,199408,199772,202260,202311,204108,204154],"agent":"Junio C Hamano","seqStart":60054,"ops":[[27242,26,""],[27276,0,"\tHAVE_DEV_TTY = YesPlease\n"],[47798,1,""],[47798,0,"LIBCHARS"],[47807,1,""],[47807,0,"T"],[47809,3,""],[47809,0,"H"],[47835,1,""],[47835,0,"LIBCHARS"],[47844,1,""],[47844,0,"T"],[47846,3,""],[47846,0,"H"],[47866,8,""],[47866,0,"D"],[47868,0,"V_"],[47871,2,""],[47871,0,"TY"],[47898,8,""],[47898,0,"D"],[47900,1,""],[47900,0,"V"],[47902,1,""],[47902,0,"TTY"]]},{"span":[204527,204574],"parents":[193703,193817,204526],"agent":"Junio C Hamano","seqStart":60166,"ops":[[17142,30,""],[17143,1,""],[56309,0,"\nXDIFF_OBJS +="],[67817,0,"o"],[67836,1,""]]},{"span":[204574,204592],"parents":[204414,204573],"agent":"Jiang Xin","seqStart":0,"ops":[[74088,18,""]]},{"span":[204592,204629],"parents":[204526],"agent":"Jonathan Nieder","seqStart":14636,"ops":[[62866,0,"export DEFAULT_EDITOR DEFAULT_PAGER\n\n"]]},{"span":[204629,204713],"parents":[204526],"agent":"René Scharfe","seqStart":1100,"ops":[[16797,0,"ergesort\nTEST_PROGRAMS_NEED_X += test-m"],[19729,0,"mergesort.h\nLIB_H += "],[22014,0,"mergesort.o\nLIB_OBJS += "]]},{"span":[204713,205960],"parents":[204526],"agent":"Theodore Ts'o","seqStart":17,"ops":[[49447,0,"## profile feedback build\n#\n\n# Can adjust this to be a global directory if you want to do extended\n# data gathering\nPROFILE_DIR := $(CURDIR)\n\nifeq \"$(PROFILE)\" \"GEN\"\n\tCFLAGS += -fprofile-generate=$(PROFILE_DIR) -DNO_NORETURN=1\n\tEXTLIBS += -lgcov\n\texport CCACHE_DISABLE=t\n\tV=1\nelse ifneq \"$(PROFILE)\" \"\"\n\tCFLAGS += -fprofile-use=$(PROFILE_DIR) -fprofile-correction -DNO_NORETURN=1\n\texport CCACHE_DISABLE=t\n\tV=1\nendif\n\n#"],[51532,0,"\n\nifeq \"$(PROFILE)\" \"BUILD\"\nifeq ($(filter all,$(MAKECMDGOALS)),all)\nall:: profile-clean\n\t$(MAKE) PROFILE=GEN all\n\t$(MAKE) PROFILE=GEN -j1 test\nendif\nendif\n\nall::"],[74255,0,"profile-"],[74277,0,"$(addsuffix "],[74291,0,"gcda,$(addprefix $(PROFILE_DIR)/, $(object_dirs)))\n\t$(RM) $(addsuffix *.gcno,$(addprefix $(PROFILE_DIR)/, $(object_dirs)))\n\nclean: profile-clean\n\t$(RM) *."],[75439,0,"profile-clean "],[78487,19,""],[78488,5,""],[78489,108,""],[78490,347,""]]},{"span":[205960,205976],"parents":[205959],"agent":"Johannes Sixt","seqStart":4955,"ops":[[49594,0,"("],[49607,1,""],[49607,0,","],[49613,0,")"],[49729,1,""],[49729,0,"\n"],[49736,0,"("],[49749,1,""],[49749,0,","],[49752,0,")"],[49867,0,"endif\n"]]},{"span":[205976,206166],"parents":[204526],"agent":"Дилян Палаузов","seqStart":0,"ops":[[2350,0,"CHARSET_LIB to you need to link with library other than -liconv to\n# use locale_charset() function.  On some platforms this needs to set to\n# -lcharset\n#\n# Define "],[48011,0,"\tEXTLIBS += $(CHARSET_LIB)\n"]]},{"span":[206166,206167],"parents":[204526],"agent":"Ævar Arnfjörð Bjarmason","seqStart":4863,"ops":[[13568,1,""]]},{"span":[206167,206220],"parents":[198305,203086],"agent":"Michael Palimaka","seqStart":0,"ops":[[15300,0,"# Binary suffix, set to .exe for Windows builds\nX =\n\n"]]},{"span":[206220,206244],"parents":[204414,204573,206219],"agent":"Junio C Hamano","seqStart":60213,"ops":[[16488,12,""],[16541,0,"PROGRAMS += "]]},{"span":[206244,206290],"parents":[205975,206166,206243],"agent":"Heiko Voigt","seqStart":0,"ops":[[17178,0,"evision-walking\nTEST_PROGRAMS_NEED_X += test-r"]]},{"span":[206290,206314],"parents":[206166,206219],"agent":"Junio C Hamano","seqStart":60237,"ops":[[16277,12,""],[16330,0,"PROGRAMS += "]]},{"span":[206314,206326],"parents":[205975,206243,206313],"agent":"Junio C Hamano","seqStart":60261,"ops":[[16552,12,""]]},{"span":[206326,206996],"parents":[206165,206325],"agent":"Thomas Rast","seqStart":912,"ops":[[67349,0,"\t@echo NO_UNIX_SOCKETS=\\''$(subst ','\\'',$(subst ','\\'',$(NO_UNIX_SOCKETS)))'\\' >>$@\n"],[67449,0,"OPTS\n\t@echo GIT_TEST_OPTS=\\''$(subst ','\\'',$(subst ','\\'',$(GIT_TEST_OPTS)))'\\' >>$@\nendif\nifdef GIT_TEST_"],[67901,0,"ifdef GIT_PERF_REPEAT_COUNT\n"],[67936,1,""],[67936,0,"GIT_PERF_REPEAT_C"],[67954,0,"UNT=\\''$(subst ','\\'',$(subst ','\\'',$(GIT"],[67997,0,"PERF_REPEAT_CO"],[68013,0,"T)))'\\' >>$@\nendif\nifdef GIT_PERF_REPO\n\t@echo GIT_PERF_REPO=\\''$(subst ','\\'',$(subst ','\\'',$(G"],[68110,1,""],[68110,0,"T_PERF"],[68117,1,""],[68117,0,"REP"],[68121,2,""],[68121,0,")))'\\' >>$@\nendif\nifdef GIT_PERF_LARGE_R"],[68162,0,"PO\n\t@echo GI"],[68175,1,""],[68175,0,"_PERF_LARGE_REPO"],[68227,2,""],[68227,0,"GIT_PERF_LARGE"],[68242,2,""],[68242,0,"REPO)))'\\' >>$@\nendif\nifdef G"],[68272,1,""],[68272,0,"T_PERF"],[68279,0,"MAKE_OPT"],[68288,0,"\n\t@echo GIT_PERF_MAKE_"],[68311,1,""],[68311,0,"PTS=\\''$(subst ','\\'',$(subst ','\\'',$(GIT_PERF_MA"],[68363,0,"_OP"],[68380,0,"endif\n"],[69336,0,"perf: all\n\t$(MAKE) -C t/perf/ all\n\n.PHONY: test perf\n\n"]]},{"span":[206996,207132],"parents":[206995],"agent":"Nguyễn Thái Ngọc Duy","seqStart":252,"ops":[[21161,0,"lumn.o\nLIB_OBJS += co"],[24352,0,"lumn.o\nBUILTIN_OBJS += builtin/co"],[61254,0,"column.o help.o pager.o: column.h\n"],[61254,0,"builtin/branch.o builtin/commit.o builtin/tag.o "]]},{"span":[207132,207156],"parents":[198305,203086],"agent":"Dmitry V. Levin","seqStart":37,"ops":[[19096,0,"hread-utils.h\nLIB_H += t"]]},{"span":[207156,207177],"parents":[206995,207155],"agent":"Nguyễn Thái Ngọc Duy","seqStart":388,"ops":[[60847,0,"index-pack.o builtin/"]]},{"span":[207177,207365],"parents":[204591,206995,207155],"agent":"Ben Walton","seqStart":693,"ops":[[51761,0,"ifdef SHELL_PATH\nSHELL_PATH_CQ = \"$(subst \",\\\",$(subst \\,\\\\,$(SHELL_PATH)))\"\nSHELL_PATH_CQ_SQ = $(subst ','\\'',$(SHELL_PATH_CQ))\n\nBASIC_CFLAGS += -DSHELL_PATH='$(SHELL_PATH_CQ_SQ)'\nendif\n\n"]]},{"span":[207365,207404],"parents":[204591,206995,207155],"agent":"Junio C Hamano","seqStart":60273,"ops":[[20753,0,"varint.h\nLIB_H += "],[23673,0,"varint.o\nLIB_OBJS += "]]},{"span":[207404,207766],"parents":[204591,206995,207155],"agent":"Thomas Rast","seqStart":1582,"ops":[[12226,0,"#\n# Define XDL_FAST_HASH to use an alternative line-hashing method in\n# the diff algorithm.  It gives a nice speedup if your processor has\n# fast unaligned word loads.  Does NOT work on big-endian systems!"],[12432,0,"# Enabled by default on x86_64.\n\n"],[27563,0,"M),x86_64)\n\tXDL_FAST_HA"],[27587,0,"H = YesPlease\nendif\nifeq ($(uname_S"],[49136,0,"neq (,$(XDL_FAST_HASH))\n\tBASIC_CFLAGS += -DXDL_FAST_HASH\nendif\n\nif"]]},{"span":[207766,207793],"parents":[204591,206995,207155],"agent":"Pete Wyckoff","seqStart":0,"ops":[[16085,0,"SCRIPT_PYTHON += git-p4.py\n"]]},{"span":[207793,208816],"parents":[1032,204591,206995,207155],"agent":"David A. Greene","seqStart":0,"ops":[[0,1023,""]]},{"span":[208816,209955],"parents":[207364,208815],"agent":"Nguyễn Thái Ngọc Duy","seqStart":409,"ops":[[14575,0,"MISC_H =\n"],[19004,0,"XDIFF_H += xdiff/xinclude.h\nXDIFF_H += xdiff/xmacros.h\nXDIFF_H += xdiff/xdiff.h\nXDIFF_H += xdiff/xtypes.h\nXDIFF_H += xdiff/xutils.h\nXDIFF_H += xdiff/xprepare.h\nXDIFF_H += xdiff/xdiffi.h\nXDIFF_H += xdiff/xemit.h\n\nVCSSVN_H += vcs-svn/line_buffer.h\nVCSSVN_H += vcs-svn/sliding_window.h\nVCSSVN_H += vcs-svn/repo_tree.h\nVCSSVN_H += vcs-svn/fast_export.h\nVCSSVN_H += vcs-svn/svndiff.h\nVCSSVN_H += vcs-svn/svndump.h\n\nMISC_H += branch.h\nMISC_H += bundle.h\nMISC_H += bisect.h\nMISC_H += fetch-pack.h\nMISC_H += thread-utils.h\nMISC_H += send-pack.h\nMISC_H += shortlog.h\nMISC_H += reachable.h\nMISC_H += wt-status.h\nMISC_H += tar.h\nMISC_H += url.h\nMISC_H += walker.h\n\n"],[62222,11,""],[62227,201,""],[62265,138,""],[62266,29,""],[62267,31,""],[65175,0," $(LIB_H) $(XDIFF_H) $(VCSSVN_H) $(MISC_H)"],[19481,0,"common-cmds.h\nMISC_H += "]]},{"span":[209955,210379],"parents":[204628,204712,206289,207131,207403,207765,207792,209954],"agent":"Nguyễn Thái Ngọc Duy","seqStart":1548,"ops":[[16671,0,"cre"],[16675,0,"enti"],[16680,2,""],[16680,0,"l-st"],[16685,1,""],[16685,0,"re"],[16706,1,""],[16706,0,"d"],[16708,4,""],[16708,0,"e"],[16710,1,""],[16711,2,""],[16711,0,"n"],[16731,0,"fast-"],[16738,1,""],[16739,5,""],[16739,0,"ort"],[16761,1,""],[16762,0,"ttp-back"],[16771,2,""],[16771,0,"nd"],[16792,0,"imap-"],[16798,5,""],[16798,0,"e"],[16801,2,""],[16820,6,""],[16820,0,"sh"],[16823,4,""],[16823,0,"i18n--envsubst"],[16856,0,"s"],[16858,8,""],[16859,2,""],[16859,0,"ll"],[16882,0,"ow"],[16886,2,""],[16887,2,""],[16887,0,"d"],[16889,7,""],[16889,0,"x"],[16909,9,""],[16909,0,"up"],[16912,3,""],[16913,2,""],[16913,0,"ad-pack"],[17243,46,""],[17695,0,"crap-cache-tree\nTEST_PROGRAMS_NEED_X += test-s"],[19775,3,""],[19775,0,"ise"],[19779,1,""],[19779,0,"t"],[19794,1,""],[19794,0,"ra"],[19797,3,""],[19797,0,"ch"],[19813,2,""],[19813,0,"undl"],[19818,2,""],[19878,2,""],[19881,5,""],[19881,0,"chab"],[19886,1,""],[19886,0,"e"],[19943,5,""],[19943,0,"t"],[19945,3,""],[19945,0,"r"],[19959,1,""],[19960,3,""],[19960,0,"hre"],[19964,1,""],[19964,0,"d-"],[19967,0,"til"],[19984,2,""],[19984,0,"u"],[19986,0,"l"],[20000,1,""],[20000,0,"walke"],[20006,1,""],[20020,0,"t-st"],[20025,4,""],[20025,0,"tus"],[20388,3,""],[20388,0,"di"],[20392,2,""],[20392,0,"nt"],[20419,4,""],[20419,0,"p"],[20421,1,""],[20421,0,"ll"],[20449,3,""],[20449,0,"thread"],[20480,6,""],[20480,0,"syslog"],[20622,4,""],[20638,0,"core"],[22977,5,""],[22977,0,"et"],[22981,5,""],[22981,0,"xt"],[22999,2,""],[22999,0,"pg-in"],[23006,2,""],[23006,0,"rface"],[24156,2,""],[24156,0,"qu"],[24159,3,""],[24160,2,""],[24160,0,"cer"],[24180,3,""],[24180,0,"rver-info"],[24206,1,""],[24206,0,"t"],[24208,5,""],[24208,0,"p"]]},{"span":[210379,210414],"parents":[205975,206165,206313,207155],"agent":"Ramsay Jones","seqStart":1586,"ops":[[17169,0,"egex\nTEST_PROGRAMS_NEED_X += test-r"]]},{"span":[210414,210420],"parents":[205975,206165,206313,207155],"agent":"Jonathan Nieder","seqStart":14673,"ops":[[59562,0,"o $@ -"]]},{"span":[210420,210768],"parents":[205975,206165,206313,207155],"agent":"Junio C Hamano","seqStart":60312,"ops":[[10238,0,"NO_INSTALL_HARDLINKS if you prefer to use either symbolic links or\n# copies to install built-in git commands e.g. git-cat-file.\n#\n# Define "],[49851,0,"ifdef NO_INSTALL_HARDLINKS\n\texport NO_INSTALL_HARDLINKS\nendif\n\n"],[71711,0,"INSTALL_HARDLINKS)$(NO_"],[71982,0,"test -z \"$(NO_INSTALL_HARDLINKS)\" && \\\n\t\t"],[72242,0,"test -z \"$(NO_INSTALL_HARDLINKS)\" && \\\n\t\t"],[72567,0,"test -z \"$(NO_INSTALL_HARDLINKS)\" && \\\n\t\t"]]},{"span":[210768,211085],"parents":[207176,210378,210767],"agent":"Vincent van Ravesteijn","seqStart":0,"ops":[[12603,0,"#\n# Define DEFAULT_HELP_FORMAT to \"man\", \"info\" or \"html\""],[12661,0,"# (defaults to \"man\") if you want to have a different default when\n# \"git help\" is called without a parameter specifying the format.\n\n"],[37609,0,"\tDEFAULT_HELP_FORMAT = html\n"],[53669,0,"ifdef DEFAULT_HELP_FORMAT\nBASIC_CFLAGS += -DDEFAULT_HELP_FORMAT='\"$(DEFAULT_HELP_FORMAT)\"'\nendif\n\n"]]},{"span":[211085,211199],"parents":[207176,210378,210767],"agent":"Jeff King","seqStart":3226,"ops":[[8420,66,""],[8421,7,""],[51153,6,""],[51158,7,""],[51159,28,""]]},{"span":[211199,211206],"parents":[202351],"agent":"Erik Faye-Lund","seqStart":730,"ops":[[52697,0,"http.o "]]},{"span":[211206,211928],"parents":[207176,210378,210767,211205],"agent":"Jeff King","seqStart":3340,"ops":[[24936,0,"version.o\nLIB_OBJS += "],[54845,33,""],[55348,0,"version.sp version.s version.o: EXTRA_CPPFLAGS = \\\n\t'-DGIT_VERSION=\""],[55418,0,"GIT_VERSION)\"'\n\n$("],[58670,1,""],[58670,0,"vers"],[58675,1,""],[58675,0,"on"],[12603,0,"#"],[12605,0,"# Define "],[12617,0,"_USER_AGENT if you want to change how git identifies itself during\n# network interactions.  The default is \"git/$(GIT_VERSION)\".\n\nGIT"],[28586,0,"GIT_USER_AGENT = git/$(GIT_VERSION)\n\n"],[53652,0,"GIT_USER_"],[53662,0,"GENT_SQ = $(subst ','\\'',$(GIT_USER_AGENT))\nGIT_USER_AGENT_CQ = \"$(subst \",\\\",$(subst \\,\\\\,$(GIT_USER_AGENT)))\"\nGIT_USER_AGENT_CQ_SQ = $(subst ','\\'',$(GIT_USER_AGENT_CQ))\nBASIC_CF"],[53843,0,"AGS += -DGIT_USER_AGENT='$(GIT_USER_AGENT_CQ_SQ)'\n\nAL"],[56366,0,"GIT_USER_AGENT@@|$(GIT_USER_AGENT_SQ)|g' \\\n    -e 's|@@"],[59166,7,""],[64383,89,""]]},{"span":[211928,213402],"parents":[211927],"agent":"Jeff King","seqStart":4062,"ops":[[20462,0,"-tree"],[20483,5,""],[21346,0,"-cache"],[21370,4,""],[21370,0,"merg"],[21392,6,""],[21426,0,"-refs"],[21450,2,""],[21450,0,"vindex"],[21472,9,""],[22000,0,"-walk"],[22021,5,""],[15095,4,""],[15095,0,"GENERATED"],[20051,61,""],[20051,0,"GENERATED"],[20080,1,""],[20080,0,"\nL"],[20083,2,""],[20083,0,"B"],[20090,7,""],[20091,0,"dvi"],[20095,1,""],[20095,0,"e"],[20099,1,""],[20099,0,"L"],[20101,2,""],[20101,0,"B"],[20108,2,""],[20109,0,"r"],[20112,3,""],[20112,0,"iv"],[20118,1,""],[20118,0,"L"],[20120,2,""],[20120,0,"B"],[20127,6,""],[20128,18,""],[20129,3,""],[20130,14,""],[20130,0,"v-"],[20134,15,""],[20135,1,""],[20136,7,""],[20136,0,"y"],[20140,1,""],[20140,0,"L"],[20142,18,""],[20142,0,"B"],[20149,1,""],[20150,18,""],[20151,4,""],[20152,2,""],[20152,0,"r"],[20155,1,""],[20165,3,""],[20165,0,"b"],[20167,1,""],[20167,0,"s"],[20169,0,"ct"],[20183,7,""],[20183,0,"blob"],[20199,1,""],[20199,0,"b"],[20201,3,""],[20202,5,""],[20202,0,"nc"],[20205,14,""],[20218,0,"ui"],[20221,2,""],[20221,0,"tin"],[20238,1,""],[20239,1,""],[20239,0,"k-check"],[20262,0,"nd"],[20265,4,""],[20266,4,""],[20336,0,"lumn.h\nLIB_H += co"],[20811,0,"etch-pack.h\nLIB_H += f"],[21009,0,"http.h\nLIB_H += "],[21484,0,"achable.h\nLIB_H += re"],[21647,0,"nd-pack.h\nLIB_H += se"],[21733,0,"hortlog.h\nLIB_H += s"],[21891,0,"ar.h\nLIB_H += t"],[22012,0,"rl.h\nLIB_H += u"],[22080,0,"walker.h\nLIB_H += wt-status.h\nLIB_H += "],[62818,589,""],[62819,39,""],[62820,279,""],[65756,4,""],[65756,0,"GENERATED"]]},{"span":[213402,214153],"parents":[213401],"agent":"Jonathan Nieder","seqStart":14679,"ops":[[15034,10,""],[15037,7,""],[15038,4,""],[15055,19,""],[19601,2,""],[19601,0,"L"],[19603,2,""],[19603,0,"B"],[19627,2,""],[19627,0,"L"],[19629,2,""],[19629,0,"B"],[19652,2,""],[19652,0,"L"],[19654,2,""],[19654,0,"B"],[19675,2,""],[19675,0,"L"],[19677,2,""],[19677,0,"B"],[19699,2,""],[19699,0,"L"],[19701,2,""],[19701,0,"B"],[19723,2,""],[19723,0,"L"],[19725,2,""],[19725,0,"B"],[19749,2,""],[19749,0,"L"],[19751,2,""],[19751,0,"B"],[19773,2,""],[19773,0,"L"],[19775,2,""],[19775,0,"B"],[19797,6,""],[19797,0,"LIB"],[19828,6,""],[19828,0,"LIB"],[19862,6,""],[19862,0,"LIB"],[19891,6,""],[19891,0,"LIB"],[19922,6,""],[19922,0,"LIB"],[19949,6,""],[19949,0,"LIB"],[59192,93,""],[59194,29,""],[59195,86,""],[59625,7,""],[59635,1,""],[59635,0,":"],[59638,0,"$(pa"],[59643,0,"subst t"],[59654,3,""],[59654,0,"%$X,t"],[59660,0,"st"],[59663,6,""],[59663,0,"%"],[59666,1,""],[59666,0,",$(TEST_PROGRAMS))"],[59698,0,"LIB_OBJS) $(BUILTIN_OBJS) $(PRO"],[59730,1,""],[59730,0,"RAM_OBJS) $(TES"],[59753,0,"\\\n\t"],[59770,0,"\\\n\t"],[59787,0," \\\n\tgit.o\nifndef NO_CURL\n\tOBJECTS += http.o http-walker.o remote-curl.o\nendif"],[62576,1,""],[62577,85,""],[62579,4,""],[62582,84,""],[62583,1,""],[62583,0,"C"],[62585,4,""],[62594,12,""],[65403,23,""]]},{"span":[214153,214535],"parents":[214152],"agent":"Jeff King","seqStart":5536,"ops":[[55147,21,""],[55445,0,"s help."],[55499,0,"s builtin/help."],[56301,55,""],[53768,1,""],[53768,0,"GIT-USER-"],[53778,2,""],[53778,0,"GENT: FOR"],[53788,0,"E\n\t@if test x'$(GIT_USER"],[53813,3,""],[53815,0,"ENT_"],[53820,0,"Q)'"],[53824,1,""],[53824,0,"!"],[53827,2,""],[53827,0,"x\"`cat "],[53837,1,""],[53837,0,"-"],[53842,1,""],[53842,0,"-"],[53848,1,""],[53848,0," 2>/dev/null`\"; then \\\n\t\techo >&2 \"    * new user-agent flag\"; \\\n\t\techo "],[53938,3,""],[53942,0," >GIT-USER-AGENT; \\\n\tfi"],[55876,0,"GIT-USER-AGENT\nversion.sp version.s version.o: "],[55975,0," \\\n\t'-DGIT_USER_AGENT=$(GIT_USER_AGENT_CQ_SQ)'"],[77765,0,"\t$(RM) GIT-USER-AGENT\n"]]},{"span":[214535,214577],"parents":[214534],"agent":"Jonathan Nieder","seqStart":15430,"ops":[[53878,42,""]]},{"span":[214577,216240],"parents":[214576],"agent":"Jeff King","seqStart":5918,"ops":[[55260,0,"GIT-PR"],[55267,0,"FI"],[55270,0,"\ngit.sp git.s git.o: EX"],[55658,0," GIT-PREFIX"],[56994,0,"GIT-PREFIX "],[58356,0," GIT-PREFIX"],[62840,0,"GIT-PREFIX\nexec_cmd.sp exec_cmd.s exec_cmd.o: "],[63067,0,"GIT-PR"],[63074,0,"FI"],[63077,0,"\nbuiltin/init-db.sp builtin/init-db.s builtin/init-db.o: EX"],[63234,0,"GIT-PREFIX\nconfig.sp config.s config.o: "],[63358,0,"GIT-PR"],[63365,0,"FI"],[63368,0,"\nattr.sp attr.s attr.o: EX"],[63493,0,"GIT-PR"],[63500,0,"FI"],[63503,0,"\ngettext.sp gettext.s gettext.o: EX"],[67044,1,""],[67044,0,"PRE"],[67048,4,""],[67048,0,"IX"],[67055,51,""],[67117,0,"\t\t$(localedir_SQ)\n\nGIT-PREFIX:"],[67148,0,"FORCE\n\t@FLAGS='$(TRACK_PREFIX)'; \\\n\tif test x\"$$FLAGS\" != x\"`cat GIT-PREFIX 2>/dev/null`\""],[67238,0,";"],[67240,0,"then"],[67245,0,"\\\n\t\techo"],[67254,0,"1>&2"],[67259,0,"\""],[67264,0,"*"],[67266,0,"new"],[67270,0,"prefix"],[67277,2,""],[67277,0,"f"],[67279,2,""],[67280,1,""],[67280,0,"gs\"; \\\n\t\t"],[67290,1,""],[67290,0,"cho \"$$FLAGS\" >GIT-PREFIX; \\\n\tf"],[67322,1,""],[67322,0,"\n\nTRACK"],[67330,0,"CFLAG"],[67336,1,""],[67336,0," = $(CC"],[67347,0,"subst ','\\'',$(ALL_CFLAGS)):$("],[67547,10,""],[78206,0," GIT-PREFIX"],[56484,46,""],[57732,47,""],[59206,35,""],[56313,0,"SCRIPT_DEFINES = $(SHELL_PATH_SQ):$(DIFF_SQ):$(GIT_VERSION):\\\n\t$(locale"],[56385,0,"ir_SQ):$(NO_CURL):$(USE_GETTEXT_SCHEME):$(SANE_TOOL_PATH_SQ)\nd"],[56801,0,"GIT-SCRIPT-DEFINES: FORCE\n\t@FLAGS='"],[56838,0,"SCRIPT_DEFINES)'; \\\n\t    if test x\"$$FLAGS\" != x\"`cat $@ 2>/dev/null`\" ; then \\\n\t\techo 1>&2 \"    * new script parameters\"; \\\n\t\techo \"$$FLAGS\" >$@; \\\n            fi\n\n\n$("],[57046,0," GIT-SCRIPT-DEFINES"],[57159,0," GIT-SCRIPT-DEFINES"],[78463,0," GIT-SCRIPT-DEFINES"],[56445,0,":\\"],[56448,0,"\t$(gitweb"],[56458,0,"ir_SQ):$(PERL_PATH_SQ)\nd"],[56818,0,"-e 's|@@GITWEBDIR@@|"],[56839,0,"(gitwebdir_SQ)|g' \\\n    -e 's|@"],[56871,0,"PERL@@|$(PERL_PATH_SQ)|g' \\\n    $@"],[58155,0," GIT-SCRIPT-DEFINES"],[58190,19,""],[58190,0,"cm"],[58193,54,""],[58194,18,""],[58194,0,"mun"],[58198,10,""],[58199,2,""],[58199,0,"_"],[58201,18,""],[58201,0,"cr"],[58204,0,"p"],[58206,9,""],[58207,63,""],[55880,0,"VERSION-FILE GIT-"],[57644,0," GIT-VERSION-FILE"],[59385,0," GIT-VERSION-FILE"],[59535,92,""],[59536,20,""],[75718,0," GIT-VERSION-FILE"]]},{"span":[216240,217697],"parents":[216239],"agent":"Jonathan Nieder","seqStart":15472,"ops":[[55240,0,"### Target-specific flags and dependencies\n\n# The generic compilation pattern rule and automatically\n# computed header dependencies (falling back to a dependency on\n# LIB_H) are enough to describe how most targets should be built,\n# but some targets are special enough to need something a little\n# different.\n#\n# - When a source file \"foo.c\" #includes a generated header file,\n#   we need to list that dependency for the \"foo.o\" target.\n#\n#   We also list it from other targets that are built from foo.c\n#   like \"foo.sp\" and \"foo.s\", even though that is easy to forget\n#   to do because the generated header is already present around\n#   after a regular build attempt.\n#\n# - Some code depends on configuration kept in makefile\n#   variables. The target-specific variable EXTRA_CPPFLAGS can\n#   be used to convey that information to the C preprocessor\n#   using -D options.\n#\n#   The \"foo.o\" target should have a corresponding dependency on\n#   a file that changes when the value of the makefile variable\n#   changes.  For example, targets making use of the\n#   $(GIT_VERSION) variable depend on GIT-VERSION-FILE.\n#\n#   Technically the \".sp\" and \".s\" targets do not need this\n#   dependency because they are force-built, but they get the\n#   same dependency for consistency. This way, you do not have to\n#   know how each target is implemented. And it means the\n#   dependencies here will not need to change if the force-build\n#   details change some day.\n\n"]]},{"span":[217697,218177],"parents":[211084,211927],"agent":"Junio C Hamano","seqStart":60660,"ops":[[12604,0,"\n# Define GIT_USER_AGENT if you want to change how git identifies itself during\n# network interactions.  The default is \"git/$(GIT_VERSION)\".\n"],[12804,9,""],[12933,107,""],[12934,2,""],[12935,24,""],[53874,5,""],[53875,10,""],[53876,17,""],[53877,16,""],[53878,13,""],[53879,15,""],[53880,22,""],[54113,0,"ifdef DEFAULT_HELP_FORMAT\nBASIC_CFLAGS += -DDEFAULT_HELP_FORMAT='\"$(DEFAULT_HELP_FORMAT)\"'\nendif\n\n"]]},{"span":[218177,218254],"parents":[218176],"agent":"Javier Roucher Iglesias","seqStart":0,"ops":[[17570,5,""],[17571,35,""],[26127,0,"credential.o\nBUILTIN_OBJS += builtin/"]]},{"span":[218254,218367],"parents":[207176,210378,210767,211205],"agent":"Torsten Bögershausen","seqStart":0,"ops":[[20494,0,"precompose_u"],[20507,0,"f8.h\nLIB_H += compat/t"],[30556,0,"\tCOMPAT_OBJS += compat/precompose_utf8.o\n\tBASIC_CFLAGS += -DPRECOMPOSE_UNICODE\n"]]},{"span":[218367,218625],"parents":[207176,210378,210767,211205],"agent":"Junio C Hamano","seqStart":61140,"ops":[[6466,0,"THREAD_SA"],[6476,0,"E_PRE"],[6482,0,"D if your pread() implementation is not\n# thread-safe. (e.g. compat/pread.c or cygwin)\n#\n# Define NO_FA"],[32148,0,"O_THREAD_SAFE_PREAD = YesPlease\n\tN"],[47788,0,"\tNO_THREAD_SAFE_PREAD = YesPlease\nendif\nifdef NO_THREAD_SAFE_PREAD\n\tBASIC_CFLAGS += -DNO_THREAD_SAFE_PREAD\n"]]},{"span":[218625,218673],"parents":[211198,217696,218253,218366,218624],"agent":"Jiang Xin","seqStart":18,"ops":[[67898,0," \\\n\t--keyword=gettextln --keyword=eval_gettextln"]]},{"span":[218673,219182],"parents":[211198,217696,218253,218366,218624],"agent":"Stefano Lattarini","seqStart":0,"ops":[[79206,0,"\t$(RM) config.log config.status config.cache"],[79251,0,"\t$(RM) config.mak.autogen config.mak.ap"],[79291,0,"end\n\t$(RM) -"],[79304,0," aut"],[79309,0,"m4te.cache\n\npro"],[79866,107,""],[61565,0,"ifdef AUTOCONFIGURED\nconfig.status: configure\n\t$(QUIET_GEN)if test -f config.status; then \\\n\t  ./config.status --recheck; \\\n\telse \\\n\t  ./configure; \\\n\tfi\nreconfigure config.mak.autogen: config.status\n\t$(QUIET_GEN)./config.status\n.PHONY: reconfigure # This is a convenience target.\nendif\n\n"]]},{"span":[219182,219364],"parents":[154078,210419,219181],"agent":"Junio C Hamano","seqStart":61398,"ops":[[59408,0,"perl/PM.stamp\n\nperl/PM.stamp: FORCE\n\t$(QUIET_GEN)find perl -type f -name '*.pm' | sort >$@+ && \\\n\t{ cmp $@+ $@ >/dev/null 2>/dev/null || mv $@+ $@; } && \\\n\t$(RM) $@+\n\nperl/perl.mak: "]]},{"span":[219364,219375],"parents":[218672,219363],"agent":"Johannes Sixt","seqStart":4971,"ops":[[59457,4,""],[59457,0,"$(FIND)"]]},{"span":[219375,220477],"parents":[219374],"agent":"Jeff King","seqStart":7581,"ops":[[81137,0," gitweb"],[82532,0,"gitweb "],[82417,0,"documented,gitcredentials | \\\n\t\tdocumented,gitnamespaces | \\\n\t\tdocumented,gitweb.conf | \\\n\t\t"],[81061,19,""],[81061,0,"ALL_COMMANDS"],[81074,1,""],[81074,0,"="],[81076,3,""],[81118,0,"\nALL_COMMANDS"],[81132,0,"+= "],[81138,0,"\nALL_COMMANDS +="],[81159,0,"\nALL_COMMANDS"],[81173,0,"+= "],[81182,0,"\ncheck-docs::\n\t@(for v in $(ALL_COMMANDS)"],[82657,2,""],[82657,0,"C"],[82659,2,""],[82659,0,"MM"],[82662,27,""],[82663,0,"D"],[82666,16,""],[81183,0,"ALL_COMMANDS += git-gui git-citool\n"],[81956,35,""],[81961,17,""],[81801,2,""],[81801,0,"$(MAKE)"],[81810,1,""],[81810,0,"C"],[81825,2,""],[81825,0," pr"],[81829,0,"n"],[81831,1,""],[81831,0,"-man1 | \\\n\t\tgrep '\\."],[81854,0,"$$'"],[81953,140,""],[81954,2,""],[81956,1,""],[81959,549,""]]},{"span":[220477,220529],"parents":[204056,219374],"agent":"Junio C Hamano","seqStart":61580,"ops":[[31239,26,""],[31279,0,"HAVE_DEV_TTY = YesPlease\n\t"]]},{"span":[220529,220736],"parents":[220528],"agent":"Florian Achleitner","seqStart":0,"ops":[[17337,0,"PROGRAM_OBJS += remote-testsvn.o\n"],[67279,0,"git-remote-testsvn$X: remote-testsvn.o GIT-LDFLAGS $(GITLIBS) $(VCSSVN_LIB)\n\t$(QUIET_LINK)$(CC) $(ALL_CFLAGS) -o $@ $(ALL_LDFLAGS) $(filter %.o,$^) $(LIBS) \\\n\t$(VCSSVN_LIB)\n\n"]]},{"span":[220736,221043],"parents":[220528],"agent":"Joachim Schmitz","seqStart":0,"ops":[[6398,0,"SETITIMER if you don't have setitimer()\n#\n# Define NO_STRUCT_ITIMERVAL if you don't have struct itimerval\n# "],[6507,0,"his also implies NO_SETITIMER\n#\n# Define NO_T"],[48225,0,"STRUCT_ITIMERVAL\n\tCOMPAT_CFLAGS += -DNO_STRUCT_ITIMERVAL\n\tNO_SETITIMER=YesPlease\nendif\nifdef NO_SETITIMER\n\tCOMPAT_CFLAGS += -DNO_SETITIMER\nendif\nifdef NO_"]]},{"span":[221043,221237],"parents":[220528],"agent":"Joachim Schmitz","seqStart":307,"ops":[[3736,0,"MKDIR_WO_TRAILI"],[3752,0,"G_SLASH if your mkdir() can't deal with trailing slash.\n#\n# Define N"],[47498,0,"MKDIR_WO_TRAILING_SLASH\n\tCOMPAT_CFLAGS += -DMKDIR_WO_TRAILING_SLASH\n\tCOMPAT_OBJS += compat/mkdir.o\nendif\nifdef "]]},{"span":[221237,221289],"parents":[154078,204056,210419,218624],"agent":"Junio C Hamano","seqStart":61632,"ops":[[30875,26,""],[30915,0,"HAVE_DEV_TTY = YesPlease\n\t"]]},{"span":[221289,221315],"parents":[220528,221288],"agent":"Junio C Hamano","seqStart":61684,"ops":[[31305,26,""]]},{"span":[221315,221356],"parents":[220476,221314],"agent":"Michael Haggerty","seqStart":0,"ops":[[18187,0,"tring-list\nTEST_PROGRAMS_NEED_X += test-s"]]},{"span":[221356,221386],"parents":[210413,220476,221314],"agent":"Junio C Hamano","seqStart":61710,"ops":[[17983,13,""],[17984,0,"ex"],[18018,0,"vision-walkin"],[18032,2,""]]},{"span":[221386,221416],"parents":[210413,221288],"agent":"Junio C Hamano","seqStart":61740,"ops":[[17797,13,""],[17798,0,"ex"],[17832,0,"vision-walkin"],[17846,2,""]]},{"span":[221416,221500],"parents":[221415],"agent":"Nguyễn Thái Ngọc Duy","seqStart":1972,"ops":[[18082,0,"TEST_PROGRAMS_NEED_X += test-wildmatch\n"],[22091,0,"wildmatch.h\nLIB_H += "],[25102,0,"ildmatch.o\nLIB_OBJS += w"]]},{"span":[221500,221648],"parents":[221499],"agent":"Nguyễn Thái Ngọc Duy","seqStart":2056,"ops":[[4041,0,"USE_WILDMATCH if you want to use Git's wildmatch\n# implementation as fnmatch\n#\n# Define "],[47059,0,"USE_WILDMATCH\n\tCOMPAT_CFLAGS += -DUSE_WILDMATCH\nendif\nifdef "]]},{"span":[221648,221730],"parents":[221415],"agent":"Adam Spiers","seqStart":0,"ops":[[21472,0,"athspec.h\nLIB_H += p"],[24021,0,"athspec.o\nLIB_OBJS += p"],[25584,0,"ignore.o\nBUILTIN_OBJS += builtin/check-"]]},{"span":[221730,221745],"parents":[221042,221236,221385,221415],"agent":"Junio C Hamano","seqStart":61770,"ops":[[18222,2,""],[18254,13,""]]},{"span":[221745,224368],"parents":[221744],"agent":"Joachim Schmitz","seqStart":501,"ops":[[6303,0,"SYS_POLL_H if you don't have sys/poll.h.\n#\n# Define NO_"],[6359,0,"OLL if you do not have or don't want to use poll().\n# "],[6414,0,"his also implies NO_SYS_POLL_"],[6444,0,".\n#\n# Define NO_PTH"],[20958,0,"oll/poll.h\nLIB_H += compat/p"],[21057,18,""],[21058,11,""],[37409,4,""],[37413,2,""],[38706,20,""],[40136,4,""],[40141,2,""],[41213,20,""],[46898,0,"POLL\n\tNO_SYS_POLL_H = YesPlease\n\tCOMPAT_CFLAGS += -DNO_POLL -Icompat/poll\n\tCOMPAT_OBJS += compat/poll/poll.o\nendif\nifdef NO_"],[5974,0,"LIBINTL_BEFORE_LIBICONV if you need libintl before libiconv.\n#\n# Define NO_INTPTR_T if you don't have intptr_t nor uintptr_t.\n#\n# Define NO_UINTMAX_T if you don't have uintmax_t.\n#\n# Define NEEDS_"],[40196,0,"eq ($(uname_S),NONSTOP_KERNEL)\n\t# Needs some C99 features, \"i"],[40258,0,"line\" is just one of th"],[40282,0,"m.\n\t# INLINE='' would just replace one set of warnings with another and\n\t# still not compile in c89 mode, due to non-const array initializations.\n\tCC = cc -c99\n\t# Disable all optimization, seems to result in bad code, with -O or -O2\n\t# or even -O1 (default), /usr/local/libexec/git-core/git-pack-objects\n\t# abends on \"git push\". Needs more investigation.\n\tCFLAGS = -g -O0\n\t# We'd want it to be here.\n\tprefix = /usr/local\n\t# Our's are in ${prefix}/bin (perl might also be in /usr/bin/perl).\n\tPERL_PATH = ${prefix}/bin/perl\n\tPYTHON_PATH = ${prefix}/bin/python\n\n\t# As detected by './configure'.\n\t# Missdetected, hence commented out, see below.\n\t#NO_CURL = YesPlease\n\t# Added manually, see above.\n\tNEEDS_SSL_WITH_CURL = YesPlease\n\tHAVE_LIBCHARSET_H = YesPlease\n\tNEEDS_LIBICONV = YesPlease\n\tNEEDS_LIBINTL_BEFORE_LIBICONV = YesPlease\n\tNO_SYS_SELECT_H = UnfortunatelyYes\n\tNO_D_TYPE_IN_DIRENT = YesPlease\n\tNO_HSTRERROR = YesPlease\n\tNO_STRCASESTR = YesPlease\n\tNO_FNMATCH_CASEFOLD = YesPlease\n\tNO_MEMMEM = YesPlease\n\tNO_STRLCPY = YesPlease\n\tNO_SETENV = YesPlease\n\tNO_UNSETENV = YesPlease\n\tNO_MKDTEMP = YesPlease\n\tNO_MKSTEMPS = YesPlease\n\t# Currently libiconv-1.9.1.\n\tOLD_ICONV = UnfortunatelyYes\n\tNO_REGEX = YesPlease\n\tNO_PTHREADS = UnfortunatelyYes\n\n\t# Not detected (nor checked for) by './configure'.\n\t# We don't have SA_RESTART on NonStop, unfortunalety.\n\tCOMPAT_CFLAGS += -DSA_RESTART=0\n\t# Apparently needed in compat/fnmatch/fnmatch.c.\n\tCOMPAT_CFLAGS += -DHAVE_STRING_H=1\n\tNO_ST_BLOCKS_IN_STRUCT_STAT = YesPlease\n\tNO_NSEC = YesPlease\n\tNO_PREAD = YesPlease\n\tNO_MMAP = YesPlease\n\tNO_POLL = YesPlease\n\tNO_INTPTR_T = UnfortunatelyYes\n\t# Bug report 10-120822-4477 submitted to HP NonStop development.\n\tMKDIR_WO_TRAILING_SLASH = YesPlease\n\t# RFE 10-120912-4693 submitted to HP NonStop development.\n\tNO_SETITIMER = UnfortunatelyYes\nendif\nifne"],[47831,0,"ifdef NEEDS_LIBINTL_B"],[47853,0,"FORE_LIBICONV\n\t\tICONV_LINK += -lintl\n\tendif\n\tE"],[51406,0,"INTPTR_T\n\tCOMPAT_CFLAGS += -DNO_INTPTR_T\nendif\nifdef NO_"]]},{"span":[224368,224536],"parents":[224367],"agent":"Joachim Schmitz","seqStart":3124,"ops":[[42102,0,"\tSANE_TOOL_PATH=/usr/coreutils/bin:/usr/local/bin\n\tSHELL_PATH=/usr/local/bin/bash\n\t# as of H06.25/J06.14, we might better use this\n\t#SHELL_PATH=/usr/coreutils/bin/bash\n"]]},{"span":[224536,224564],"parents":[221355,224367],"agent":"Ramsay Jones","seqStart":1621,"ops":[[76286,0,"export TEST_NO_MALLOC_CHECK\n"]]},{"span":[224564,224633],"parents":[220735,224563],"agent":"Nguyễn Thái Ngọc Duy","seqStart":2204,"ops":[[24410,0,".o\nLIB_OBJS += merge"],[25250,0,"nd-pack.o\nLIB_OBJS += se"],[24032,0,"etch-pack.o\nLIB_OBJS += f"]]},{"span":[224633,224799],"parents":[224632],"agent":"Mark Levedahl","seqStart":195,"ops":[[33228,0,"\tV15_MINGW_HEADERS = YesPlease\n\t"],[53706,0,"ifdef V15_MINGW_HEADERS\n\tCOMPAT_CFLAGS += -DV15_MINGW_HEADERS\nendif\n"],[33229,0,"CYGWIN_"],[33240,1,""],[33240,0,"W"],[33243,5,""],[33243,0,"32"],[33246,4,""],[33246,0,"PI"],[53714,0,"CYGWIN_"],[53725,1,""],[53725,0,"W"],[53728,5,""],[53728,0,"32"],[53731,4,""],[53731,0,"PI"],[53754,0,"CYGWIN_"],[53765,1,""],[53765,0,"W"],[53768,5,""],[53768,0,"32"],[53771,4,""],[53771,0,"PI"]]},{"span":[224799,225007],"parents":[224798],"agent":"Mark Levedahl","seqStart":361,"ops":[[11314,0,"CYGWIN_V15_WIN32API if you are using Cygwin v1.7.x but are not\n# using the current w32api packages. The recommended approach, however,\n# is to update your installation if compilation errors occur.\n#\n# Define "]]},{"span":[225007,225012],"parents":[224535,224798],"agent":"Felipe Contreras","seqStart":0,"ops":[[17328,3,""],[17328,0,"py"]]},{"span":[225012,225024],"parents":[224563],"agent":"Paul Gortmaker","seqStart":0,"ops":[[46694,0,"2>/dev/null "]]},{"span":[225024,225031],"parents":[224535,224798,225023],"agent":"Junio C Hamano","seqStart":61815,"ops":[[24456,2,""],[24456,0,"b"],[24458,1,""],[24458,0,"obs"]]},{"span":[225031,225038],"parents":[225030],"agent":"Ramsay Jones","seqStart":1649,"ops":[[21938,2,""],[21938,0,"b"],[21940,1,""],[21940,0,"obs"]]},{"span":[225038,225093],"parents":[224535,224798,225023],"agent":"Stefano Lattarini","seqStart":509,"ops":[[15068,0," "],[20369,0," "],[20371,0," "],[20390,0," "],[20392,0," "],[20415,0," "],[20417,0," "],[34847,0," "],[34849,0," "],[35071,0," "],[35073,0," "],[35295,0," "],[35297,0," "],[35379,0," "],[35381,0," "],[36265,0," "],[36267,0," "],[36317,0," "],[36319,0," "],[36925,0," "],[36927,0," "],[37029,0," "],[37031,0," "],[37052,0," "],[37054,0," "],[37079,0," "],[37081,0," "],[42321,0," "],[42323,0," "],[42369,0," "],[42371,0," "],[42453,0," "],[42455,0," "],[43850,0," "],[43852,0," "],[46586,1,""],[46586,0," "],[51321,0," "],[51323,0," "],[54377,0," "],[54379,0," "],[54424,0," "],[54426,0," "],[54475,0," "],[54477,0," "],[55651,0," "],[55653,0," "],[55658,0," "],[55660,0," "],[55791,0," "],[55793,0," "],[55798,0," "],[55800,0," "],[82003,0," "],[82005,0," "]]},{"span":[225093,225461],"parents":[225092],"agent":"Christian Couder","seqStart":1585,"ops":[[64285,0," GIT-PYTHON-VARS"],[76342,0,"### Detect Python interpreter path changes\nifndef NO_PYTHON\nTRACK_PYTHON = $(subst ','\\'',-DPYTHON_PATH='$(PYTHON_PATH_SQ)')\n\nGIT-PYTHON-VARS: FORCE\n\t@VARS='$(TRACK_PYTHON)'; \\\n\t    if test x\"$$VARS\" != x\"`cat $@ 2>/dev/null`\" ; then \\\n\t\techo 1>&2 \"    * new Python interpreter location\"; \\\n\t\techo \"$$VARS\" >$@; \\\n            fi\nendif\n\n"],[84946,0," GIT-PYTHON-VARS"]]},{"span":[225461,226173],"parents":[225023],"agent":"Christian Couder","seqStart":873,"ops":[[75399,20,""],[75401,19,""],[75402,36,""],[75403,29,""],[75404,222,""],[83580,3,""],[83581,10,""],[63858,0," GIT-PYTHON-VARS"],[75415,0,"### Detect Python interpreter path changes\nifndef NO_PYTHON\nTRACK_PYTHON = $(subst ','\\'',-DPYTHON_PATH='$(PYTHON_PATH_SQ)')\n\nGIT-PYTHON-VARS: FORCE\n\t@VARS='$(TRACK_PYTHON)'; \\\n\t    if test x\"$$VARS\" != x\"`cat $@ 2>/dev/null`\" ; then \\\n\t\techo 1>&2 \"    * new Python interpreter location\"; \\\n\t\techo \"$$VARS\" >$@; \\\n            fi\nendif\n\n"],[84004,0," GIT-PYTHON-VARS"],[62098,1,""],[72972,1,""],[73237,1,""],[73489,1,""],[75654,1,""]]},{"span":[226173,226524],"parents":[225023],"agent":"David Michael","seqStart":0,"ops":[[6656,0,"SYS_"],[6661,0,"ARAM_H if you don't have sys/param.h.\n#\n# Define NO_P"],[50583,0,"SYS_PARAM_H\n\tBASIC_CFLAGS += -DNO_SYS_PARAM_H\nendif\nifdef NO_"],[48449,0,"GECOS_IN_PWENT\n\tBASIC_CFLAGS += -DNO_GECOS_IN_PWENT\nendif\nifdef NO_"],[3198,0,"HAVE_STRI"],[3208,0,"GS_H if you have strings.h and need it for strcasecmp.\n#\n# Define N"],[41214,0,"HAVE_STRINGS_H = YesPlease\n\t"],[53582,0,"STRINGS_H\n\tBASIC_CFLAGS += -DHAVE_STRINGS_H\nendif\n\nifdef HAVE_"]]},{"span":[226524,226677],"parents":[226523],"agent":"Junio C Hamano","seqStart":61822,"ops":[[6730,1,""],[6730,0,"EEDS"],[6754,0,"nee"],[6758,0," t"],[6761,0," i"],[6764,6,""],[6764,0,"clud"],[6781,0," to compile,\n# *PLEASE* REPORT to git@vger"],[6824,0,"kernel.org if your platform needs this;\n# we want to know more about the issue."],[50881,1,""],[50881,0,"EEDS"],[50918,1,""],[50918,0,"EEDS"]]},{"span":[226677,227195],"parents":[226676],"agent":"Matt Kraai","seqStart":37,"ops":[[3379,0,"GETPAGE"],[3387,0,"IZE if you don't have getpagesize.\n#\n# Define NO_S"],[44068,0,"ifeq ($(uname_S),QNX)\n\tCOMPAT_CFLAGS += -DSA_RESTART=0\n\tHAVE_STRINGS_H = YesPlease\n\tNEEDS_SOCKET = YesPlease\n\tNO_FNMATCH_CASEFOLD = YesPlease\n\tNO_GETPAGESIZE = YesPlease\n\tNO_ICONV = YesPlease\n\tNO_MEMMEM = YesPlease\n\tNO_MKDTEMP = YesPlease\n\tNO_MKSTEMPS = YesPlease\n\tNO_NSEC = YesPlease\n\tNO_PTHREADS = YesPlease\n\tNO_R_TO_GCC_LINKER = YesPlease\n\tNO_STRCASESTR = YesPlease\n\tNO_STRLCPY = YesPlease\nendif\n"],[53707,0,"NO_GETPAGESIZE\n\tCOMPAT_CFLAGS += -DNO_GETPAGESIZE\nendif\nifdef "]]},{"span":[227195,242608],"parents":[225092,227194],"agent":"Jeff King","seqStart":8940,"ops":[[13907,478,""],[29362,248,""],[29363,90,""],[29364,28,""],[29365,40,""],[29366,40,""],[29367,1025,""],[29368,99,""],[29369,30,""],[29371,33,""],[29372,320,""],[29373,9,""],[29374,52,""],[29375,24,""],[29376,71,""],[29377,10,""],[29378,12,""],[29379,40,""],[29380,2,""],[29381,1,""],[29382,135,""],[29383,245,""],[29384,246,""],[29385,89,""],[29386,2262,""],[29387,1192,""],[29388,348,""],[29392,27,""],[29393,8217,""]]},{"span":[242608,242638],"parents":[220476,221314,221415],"agent":"Junio C Hamano","seqStart":61785,"ops":[[14524,0,"mandir htmldir "],[14524,15,""]]},{"span":[242638,242662],"parents":[220476,221314,221415],"agent":"Jonathan Nieder","seqStart":16929,"ops":[[41662,0,"Q /dev/null -M"],[41683,0,"\\\n\t"],[63058,0,"Q $@ -M"]]},{"span":[242662,243010],"parents":[220476,221314,221415],"agent":"Jonathan Nieder","seqStart":16953,"ops":[[61764,0,"# We avoid depending on 'configure' here, because it gets rebuilt\n# every time GIT-VERSION-FILE is modified, only to update the embedded\n# version number string, which config.status does not care about.  We\n# do want to recheck when the platform/environment detection logic\n# changes, hen"],[62053,0,"e this depends "],[62070,0," configure.ac.\ncon"],[62109,0,".ac"],[62126,0,"$(MAKE) configure && \\\n\t"]]},{"span":[243010,243267],"parents":[243009],"agent":"Jeff King","seqStart":8683,"ops":[[61568,0,"CONFIGURE_RECIPE = $(RM) "],[61602,1,""],[61615,42,""],[61623,0,"\t   "],[61674,3,""],[61674,0,"\t\tconfigure.ac"],[61689,3,""],[61690,3,""],[61690,0,"configure.ac"],[61710,0,"\t   "],[61726,2,""],[61726,0,"configure"],[61736,2,""],[61736,0,"configure.ac"],[61756,0,"\t   "],[61766,0,"configure.ac+\n\nconfigure: configure.ac GIT-VERSION-FILE\n\t$(QUIET_GEN)"],[61836,2,""],[61836,0,"(CONFIGURE_RECIPE)"],[62241,3,""],[62241,0,"CONFIGURE_RECIP"],[62258,10,""]]},{"span":[243267,243291],"parents":[221499,225011,225092,226172,227194,243009],"agent":"Junio C Hamano","seqStart":61975,"ops":[[23247,4,""],[23247,0,"ildm"],[23253,2,""],[23253,0,"ch"],[23268,4,""],[23268,0,"t-st"],[23274,2,""],[23274,0,"us"]]},{"span":[243291,243659],"parents":[225006,225460,242607,243290],"agent":"Junio C Hamano","seqStart":61999,"ops":[[50182,16,""],[62577,31,""],[62579,52,""],[62581,82,""],[62582,171,""],[70831,16,""]]},{"span":[243659,243862],"parents":[225030,243658],"agent":"Junio C Hamano","seqStart":62367,"ops":[[9751,0,"PERL_PATH to the path of your Perl binary (usually /usr/bin/perl).\n#\n# Define "],[10029,0,"PYTHON_PATH to the path of your Python binary (often /usr/bin/python\n# but /usr/bin/python2.7 on some platforms).\n#\n# Define "]]},{"span":[243862,244249],"parents":[74181,221647,221729,225037,243861],"agent":"Junio C Hamano","seqStart":62570,"ops":[[52,387,""]]},{"span":[244249,245311],"parents":[242661,244248],"agent":"Matthieu Moy","seqStart":78,"ops":[[17703,0,"# Generated files for scripts\n"],[17739,0,"_"],[17741,0,"H_GEN"],[17780,2,""],[17781,1,""],[17781,0,"SCRIPT_PERL_GEN"],[17797,0,"="],[17834,2,""],[17835,1,""],[17835,0,"SCRIPT_PYTHON_GEN"],[17853,0,"="],[17890,0,"\n\n# Individual rules to allow e.g.\n# \"make -C ../.. SCRIPT_PERL=contrib/foo/bar.perl build-perl-script\"\n# from subdirectories like contrib/*/\n.PHONY: build-perl-script build-sh-script build-python-script\nbuild-perl-script: $(SCRIPT_PERL_GEN)\nbuild-sh-script: $(SCRIPT_SH_GEN)\nbuild-python-script: $(SCRIPT_PYTHON_GEN)\n\n.PHONY: install-perl-script install-sh-script install-python-script\ninstall-sh-script: $(SCRIPT_SH_GEN)\n\t$(INSTALL) $(SCRIPT_SH_GEN) '$(DESTDIR_SQ)$(gitexec_instdir_SQ)'\ninstall-perl-script: $(SCRIPT_PERL_GEN)\n\t$(INSTALL) $(SCRIPT_PERL_GEN) '$(DESTDIR_SQ)$(gitexec_instdir_SQ)'\ninstall-python-script: $(SCRIPT_PYTHON_GEN)\n\t$(INSTALL) $(SCRIPT_PYTHON_GEN) '$(DESTDIR_SQ)$(gitexec_instdir_SQ)'\n\n.PHONY: clean-perl-script clean-sh-script clean-python-script\nclean-sh-script:\n\t$(RM) $(SCRIPT_SH_GEN)\nclean-perl-script:\n\t$(RM) $(SCRIPT_PERL_GEN)\nclean-python-script:\n\t$(RM) $(SCRIPT_PYTHON_GEN)\n\nSCRIPTS = $(SCRIPT_SH_GEN) \\\n\t  $(SCRIPT_PERL_GEN) \\\n\t  $(SCRIPT_PYTHON_GEN)"]]},{"span":[245311,245530],"parents":[242661,244248],"agent":"Matt Kraai","seqStart":555,"ops":[[1855,0,"EXPAT_"],[1862,0,"EEDS_XMLPARSE_H if you have an old version of expat (e.g.,\n# 1.1 or 1.2) that provides xmlparse.h instead of expat.h.\n#\n# Define N"],[33519,0,"\tifdef EXPAT_NEEDS_XMLPARSE_H\n\t\t\tBASIC_CFLAGS += -DEXPAT_NEEDS_XMLPARSE_H\n\t\tendif\n\t"]]},{"span":[245530,245540],"parents":[242661,244248],"agent":"Matt Kraai","seqStart":774,"ops":[[70615,10,""]]},{"span":[245540,245698],"parents":[243266,245310,245529,245539],"agent":"Erik Faye-Lund","seqStart":737,"ops":[[4159,68,""],[37209,36,""],[37210,54,""]]},{"span":[245698,245745],"parents":[245697],"agent":"Bo Yang","seqStart":0,"ops":[[23354,0,"ne-range.h\nLIB_H += li"],[25855,0,"ne-range.o\nLIB_OBJS += li"]]},{"span":[245745,245788],"parents":[245744],"agent":"Thomas Rast","seqStart":1944,"ops":[[23357,0,"log.h\nLIB_H += line-"],[25878,0,"log.o\nLIB_OBJS += line-"]]},{"span":[245788,246010],"parents":[245697],"agent":"Filipe Cabecinhas","seqStart":0,"ops":[[3026,0,"NEEDS_CLIPPED_WRITE if your write(2) cannot write more than\n# INT_MAX bytes at once (e.g. MacOS X).\n#\n# Define "],[41839,0,"def NEEDS_CLIPPED_WRITE\n\tBASIC_CFLAGS += -DNEEDS_CLIPPED_WRITE\n\tCOMPAT_OBJS += compat/clipped-write.o\nendif\n\nif"]]},{"span":[246010,246487],"parents":[225006,225037,225460,242661,243009],"agent":"John Keeping","seqStart":8,"ops":[[14529,35,""],[14731,0,"Additionally, the following will be treated as relative by \"git\" if they\n# begin with \"$(prefix)/\":\n#   mandir\n#   infodir\n#   htmldir\n# "],[15012,0,"$(prefix)/"],[15042,0,"$(prefix)/"],[15273,0,"$(prefix)/"],[15424,0,"mandir_r"],[15433,0,"lative = $(patsubst $(prefi"],[15461,0,")/%,%,$(mandir))\ninfodir_relative = $(patsubst $(prefix)/%,%,$(infodir))\nhtmldir_relative = $(patsubst $(prefix)/%,%,$(htmldir))\n\nex"],[56711,0,"relative_"],[56748,0,"_relative"],[56768,0,"relative_"],[56806,0,"_relative"],[56966,0,"relative_"],[57004,0,"_relative"],[61382,0,"relative_"],[61426,0,"relative_"],[61472,0,"relative_"],[61835,0,"relative_"],[61879,0,"relative_"],[61925,0,"relative_"]]},{"span":[246487,247214],"parents":[225006,225037,225460,242661,243266],"agent":"René Scharfe","seqStart":1184,"ops":[[20641,376,""],[22704,0,"vcs-svn/fast_export.h\nLIB_H += vcs-svn/line_buffer.h\nLIB_H += vcs-svn/repo_tree.h\nLIB_H += vcs-svn/sliding_windo"],[22817,0,".h\nLIB_H += vcs-svn/svndiff.h\nLIB_H += vcs-svn/svndump.h\nLIB_H += w"],[22963,0,"LIB_H += xdiff/xdiffi.h\nLIB_H += xdiff/xemit.h\nLIB_H += xdiff/xinclude.h\nLIB_H += xdiff/xmacros.h\nLIB_H += xdiff/xprepare.h\nLIB_H += xdiff/xtypes.h\nLIB_H += xdiff/xutils.h\n"]]},{"span":[247214,247259],"parents":[247213],"agent":"Michael Haggerty","seqStart":41,"ops":[[21930,21,""],[24827,24,""]]},{"span":[247259,247294],"parents":[242637,245697,246486,247213],"agent":"Junio C Hamano","seqStart":62957,"ops":[[17345,0,"mote-testgit.sh\nSCRIPT_SH += git-re"]]},{"span":[247294,247381],"parents":[245697,247213],"agent":"Junio C Hamano","seqStart":62992,"ops":[[20061,0,"prio-queue\nTEST_PROGRAMS_NEED_X += test-"],[23401,0,"i"],[23403,0,"-queue.h\nLIB_H += pro"],[26576,0,"io-queue.o\nLIB_OBJS += pr"]]},{"span":[247381,247512],"parents":[245697,247213],"agent":"John Keeping","seqStart":485,"ops":[[62955,0,"TEST_OUTPUT_DIRECTORY\n\t@echo TEST_OUTPUT_DIRECTORY=\\''$(subst ','\\'',$(subst ','\\'',$(TEST_OUTPUT_DIRECTORY)))'\\' >>$@\nendif\nifdef "]]},{"span":[247512,247792],"parents":[242637,245697,246486,247213],"agent":"Ramsay Jones","seqStart":1656,"ops":[[11992,208,""],[41429,72,""]]},{"span":[247792,247861],"parents":[242637,245697,246486,247213],"agent":"Ramsay Jones","seqStart":1936,"ops":[[58349,0,"compat/nedmalloc/nedmalloc.sp: SPARSE_FLAGS += -Wno-non-pointer-null\n"]]},{"span":[247861,248336],"parents":[242637,245697,246486,247213],"agent":"David Aguilar","seqStart":1296,"ops":[[33063,0,"NO_REGEX = YesPlease\n\t"],[5660,0,"NO_APPLE_COMMON_CRYPTO if you are building on Darwin/Mac OS X\n# and do not want to use Apple's CommonCrypto library.  This allows you\n# to provide your own OpenSSL library, for example from MacPorts.\n#\n# Define "],[33274,0,"ifndef NO_APPLE_COMMON_CRYPTO\n\t\tAPPLE_COMMON_CRYPTO = YesPlease\n\t\tCOMPAT_CFLAGS += -DAPPLE_COMMON_CRYPTO\n\tendif\n\t"],[40799,0,"ifdef APPLE_COMMON_CRYPTO\n"],[40826,0,"COMPAT_CFLAGS += -DCOMMON_DIGE"],[40857,0,"T_FOR_OPENSSL\n\tSHA1_HEADER = <CommonCrypto/CommonDigest.h>\nelse\n\tS"],[40992,0,"endif\n\n"]]},{"span":[248336,248399],"parents":[248335],"agent":"Jeremy Huddleston","seqStart":0,"ops":[[40826,0,"LIB_4_CRYPTO += -framework Security -framework CoreFoundation\n\t"]]},{"span":[248399,248557],"parents":[248398],"agent":"Brian Gernhardt","seqStart":1517,"ops":[[35877,0,"ifdef APPLE_COMMON_CRYPTO\n\tLIB_4_CRYPTO += -framework Security -framework CoreFoundation\n"],[35972,0,"endif\n"],[40912,14,""],[40919,49,""]]},{"span":[248557,248627],"parents":[246009,248335],"agent":"Ramkumar Ramachandra","seqStart":45,"ops":[[66873,70,""]]},{"span":[248627,248958],"parents":[242637,245697,246486,247213],"agent":"Thomas Rast","seqStart":1987,"ops":[[74277,2,""],[74277,0,"comp"],[74283,1,""],[74283,0,"e"],[74294,0,"test cove"],[74304,0,"ag"],[74307,0,"-re"],[74344,5,""],[74344,0,"test"],[74818,7,""],[74820,8,""],[74820,0,"mpi"],[74825,2,""],[74825,0,":"],[74898,0,"\ncoverage-test: coverage-clean-results coverage-compile\n"],[71985,0," coverage-clean"],[74330,0,".PHONY: coverage-clean-results\n"],[74476,0,"-results"],[74550,10,""],[74551,2,""],[74552,15,""],[74553,15,""],[74651,0,"coverage-clean: coverage-clean-results\n\t$(RM) $(addsuffix *.gcno,$(object_dirs))\n\n"],[75119,0,"DEFAULT_TEST_TARGET=test "],[74413,1,""],[74413,0,"untest"],[74420,1,""],[74420,0,"d-functi"],[74429,2,""],[74429,0,"ns"]]},{"span":[248958,249174],"parents":[245787,246009,247258,247293,247511,247860,248335,248957],"agent":"Pat Thoyts","seqStart":0,"ops":[[43629,0,"RC       = @echo '   ' RC $@;\n\tQUIET_"],[51469,0,"git.res: git.rc\n\t$(QUIET_RC)$(RC) \\\n\t  $(join -DMAJOR= -DMINOR= -DPATCH=, $(wordlist 1,3,$(subst ., ,$(GIT_VERSION)))) \\\n\t  -DGIT_VERSION=\"\\\\\\\"$(GIT_VERSION)\\\\\\\"\" $< -o $@\n\n"],[73199,0,"*.res "]]},{"span":[249174,249187],"parents":[249173],"agent":"Johannes Schindelin","seqStart":5769,"ops":[[51566,0,"-, ,$(subst "],[51599,0,")"]]},{"span":[249187,249204],"parents":[249186],"agent":"Pat Thoyts","seqStart":216,"ops":[[51484,0," GIT-VERSION-FILE"]]},{"span":[249204,249299],"parents":[242637,245697,246486,247213],"agent":"Kyle J. McKay","seqStart":0,"ops":[[20717,0,"urlmatch-normalization\nTEST_PROGRAMS_NEED_X += test-"],[24310,0,"rlmatch.h\nLIB_H += u"],[27773,0,"rlmatch.o\nLIB_OBJS += u"]]},{"span":[249299,249317],"parents":[242637,245697,246486,247213],"agent":"Nguyễn Thái Ngọc Duy","seqStart":2273,"ops":[[4325,3,""],[4325,0,"NO"],[4345,0,"do not "],[37782,0,"n"],[37787,3,""],[37787,0,"NO"]]},{"span":[249317,249366],"parents":[242637,245697,246486,247213],"agent":"Johan Herland","seqStart":460,"ops":[[23480,0,"-utils"],[23498,0,"n"],[23500,0,"tes.h\nLIB_H += o"],[26468,0,"notes-utils.o\nLIB_OBJS += "]]},{"span":[249366,249786],"parents":[242637,245697,246486,247213],"agent":"Felipe Contreras","seqStart":5,"ops":[[52055,18,""],[52068,1,""],[52068,0,"_GEN"],[52115,18,""],[52128,1,""],[52128,0,"_GEN"],[52559,18,""],[52574,1,""],[52574,0,"_GEN"],[18693,15,""],[18693,0,"^"],[18785,17,""],[18785,0,"^"],[18881,19,""],[18881,0,"^"],[46953,16,""],[46953,0,"^"],[49323,3,""],[49324,1,""],[49324,0,"<"],[49353,3,""],[49354,1,""],[49354,0,"<"],[49380,3,""],[49381,1,""],[49381,0,"<"],[51437,6,""],[51437,0,"<"],[52420,4,""],[52420,0,"<"],[18259,0,"SCRIPT_SH_INS = $(filter-out $(NO_INSTALL),$(SCRIPT_SH_GEN))\nSCRIPT_PERL_INS = $(filter-out $(NO_INSTALL),$(SCRIPT_PERL_GEN))\nSCRIPT_PYTHON_INS = $(filter-out $(NO_INSTALL),$(SCRIPT_PYTHON_GEN))\n\n"],[18871,2,""],[18871,0,"I"],[18873,0,"S"],[18963,2,""],[18963,0,"I"],[18965,0,"S"],[19059,2,""],[19059,0,"I"],[19061,0,"S"],[19337,2,""],[19337,0,"I"],[19339,0,"S"],[19361,2,""],[19361,0,"I"],[19363,0,"S"],[19387,2,""],[19387,0,"I"],[19389,0,"S"],[18070,0,"NO_INSTALL += git-remote-testpy\n\n"]]},{"span":[249786,249891],"parents":[247293,249785],"agent":"Felipe Contreras","seqStart":425,"ops":[[64958,0,"all:: $(NO_INSTALL)\n"],[72359,0," $(NO_INSTALL)"],[18134,0,"git\nNO_INSTALL += git-remote-test"],[59788,10,""],[59788,0,"^"],[59857,12,""],[59857,0,"^"],[59928,13,""],[59928,0,"^"]]},{"span":[249891,249931],"parents":[242637,245697,246486,247213],"agent":"René Scharfe","seqStart":1911,"ops":[[20362,0,"ad-cache\nTEST_PROGRAMS_NEED_X += test-re"]]},{"span":[249931,249971],"parents":[105408,247791,249203,249316,249365,249890,249930],"agent":"Eric Sunshine","seqStart":0,"ops":[[28892,0,"mailmap.o\nBUILTIN_OBJS += builtin/check-"]]},{"span":[249971,249996],"parents":[105408,247380,247791,248626,249203,249316,249365,249890,249930],"agent":"Ramsay Jones","seqStart":2005,"ops":[[23027,25,""]]},{"span":[249996,250056],"parents":[249970,249995],"agent":"Stefan Beller","seqStart":0,"ops":[[17500,27,""],[31048,0,"ack.o\nBUILTIN_OBJS += builtin/rep"]]},{"span":[250056,250278],"parents":[249970,249995],"agent":"Steffen Prohaska","seqStart":1673,"ops":[[3026,111,""],[42678,111,""]]},{"span":[250278,250300],"parents":[250277],"agent":"John Keeping","seqStart":1257,"ops":[[59596,11,""],[59769,11,""]]},{"span":[250300,250941],"parents":[248556,249970,249995],"agent":"John Keeping","seqStart":616,"ops":[[18180,11,""],[18181,27,""],[18220,31,""],[18221,1,""],[47557,17,""],[47574,2,""],[47575,2,""],[47577,61,""],[47578,52,""],[53186,54,""],[53187,38,""],[53188,57,""],[53226,48,""],[53227,71,""],[53228,1,""],[68572,108,""],[73310,20,""],[73311,28,""],[73312,8,""],[73313,4,""]]},{"span":[250941,251038],"parents":[249298,250277,250940],"agent":"Ramsay Jones","seqStart":2030,"ops":[[58555,0,"http-push.sp http.sp http-walker.sp remote-curl.sp: SPARSE_FLAGS += \\\n\t-DCURL_DISABLE_TYPECHECK\n\n"]]},{"span":[251038,251151],"parents":[251037],"agent":"Karsten Blees","seqStart":0,"ops":[[20265,0,"hashmap\nTEST_PROGRAMS_NEED_X += test-"],[23536,0,"ashmap.h\nLIB_H += h"],[26440,0,"ashmap.o\nLIB_OBJS += h"],[23523,16,""],[26389,19,""]]},{"span":[251151,251468],"parents":[250055,251037],"agent":"Vicent Marti","seqStart":0,"ops":[[23848,0,"objects.h\nLIB_H += pack-"],[26948,0,"objects.o\nLIB_OBJS += pack-"],[23288,0,"ewah/ewok.h\nLIB_H += ewah/ewok_rlw.h\nLIB_H += "],[26252,0,"wah/bitmap.o\nLIB_OBJS += ewah/ewah_bitmap.o\nLIB_OBJS += ewah/ewah_io.o\nLIB_OBJS += ewah/ewah_rlw.o\nLIB_OBJS += e"],[72952,0,"\n\t$(RM)"],[72982,4,""],[72982,0,"ewah/*.o "],[73002,0,"\n\t$(RM)"],[23956,0,"ck-bitmap.h\nLIB_H += pa"],[27104,0,"bitmap.o\nLIB_OBJS += pack-bitmap-write.o\nLIB_OBJS += pack-"]]},{"span":[251468,251561],"parents":[250055,251037],"agent":"John Keeping","seqStart":1279,"ops":[[21535,31,""],[17104,31,""],[21473,31,""]]},{"span":[251561,251677],"parents":[251560],"agent":"Jonathan Nieder","seqStart":17301,"ops":[[21379,37,""],[29565,0,"et-tar-commit-id.o\nBUILTIN_OBJS += builtin/g"],[31361,35,""]]},{"span":[251677,252150],"parents":[250055,251037],"agent":"Jonathan Nieder","seqStart":17417,"ops":[[51965,0,"PERL_DEFINES = $(PERL_PATH_SQ)\n"],[52044,0,"perl/perl.mak "],[52062,0,"PERL-DEFINES GIT-"],[52508,0,"GIT-PERL-DEFINES: FORCE\n\t@FLAGS='$(PERL_DEFINES)'; \\"],[52561,0,"\t    if test x\"$$FLAGS\" != x\"`cat $@ 2>/dev/null`\" ; then \\\n\t\techo >&2 \"    * new perl-specific parameters\"; \\\n\t\techo \"$$FLAGS\" >$@; \\\n\t    fi\n\n\n"],[73783,0,"\n\t$(RM)"],[73815,0,"ERL-DEFINES GIT-P"],[45359,0,"PERLLIB_EXTRA_SQ = $(subst ','\\'',$(PERLLIB_EXTRA))\n"],[52047,0,":$(PERLLIB_EXTRA_SQ)"],[52277,0,"INSTLIBDIR_EXTRA='$(PERLLIB_EXTRA_SQ)' && \\\n\tINSTLIBDIR=\"$$INSTLIBDIR$${INSTLIBDIR_EXTRA:+:$$INSTLIBDIR_EXTRA}\" && \\\n\t"]]},{"span":[252150,252151],"parents":[105410,252149],"agent":"Junio C Hamano","seqStart":63079,"ops":[[75324,1,""]]},{"span":[252151,252162],"parents":[251676,252150],"agent":"Johannes Sixt","seqStart":4982,"ops":[[51357,9,""],[51372,1,""],[51372,0,"2"]]},{"span":[252162,252301],"parents":[250299,252161],"agent":"Kirill Smelkov","seqStart":0,"ops":[[1269,0,"HAVE_ALLOCA_H if you have working alloca(3) defined in that header.\n#\n# Define "],[34237,0,"HAVE_ALLOCA_H\n\tBASIC_CFLAGS += -DHAVE_ALLOCA_H\nendif\n\nifdef "]]},{"span":[252301,252525],"parents":[250299,252161],"agent":"Nguyễn Thái Ngọc Duy","seqStart":2291,"ops":[[7679,117,""],[39584,107,""]]},{"span":[252525,252585],"parents":[250299,252161],"agent":"Дилян Палаузов","seqStart":190,"ops":[[2644,0,"the library "],[2678,1,""],[2679,5,""],[2679,0,"n"],[2682,2,""],[2682,0,"rd"],[2686,13,""],[2774,0,", on others to -liconv ."]]},{"span":[252585,253191],"parents":[250299,252161],"agent":"Nguyễn Thái Ngọc Duy","seqStart":2515,"ops":[[4159,140,""],[4160,123,""],[37853,161,""],[37854,12,""],[37855,170,""]]},{"span":[253191,253501],"parents":[250299,252161],"agent":"Thomas Gummerer","seqStart":0,"ops":[[14397,0,"#\n# Define TEST_GIT_INDEX_VERSION to 2, 3 or 4 to run the test suite\n# with a different indexfile format version.  If it isn't set the index\n# file format used is index-v[23].\n"],[65618,0,"ifdef TEST_GIT_INDEX_VERSION\n\t@echo TEST_GIT_INDEX_VERSION=\\''$(subst ','\\'',$(subst ','\\'',$(TEST_GIT_INDEX_VERSION)))'\\' >>$@\nendif\n"]]},{"span":[253501,253526],"parents":[250299,252161],"agent":"Nguyễn Thái Ngọc Duy","seqStart":3121,"ops":[[28127,0,"versioncmp.o\nLIB_OBJS += "]]},{"span":[253526,253551],"parents":[250299,252161],"agent":"Torsten Bögershausen","seqStart":113,"ops":[[24447,0,"nicode_width.h\nLIB_H += u"]]},{"span":[253551,253552],"parents":[250299,252161],"agent":"Justin Lebar","seqStart":0,"ops":[[6591,1,""]]},{"span":[253552,253784],"parents":[245697,247213],"agent":"Jeff King","seqStart":24353,"ops":[[14388,0,"#\n# Define GMTIME_UNRELIABLE_ERRORS if your gmtime() function does not\n# return NULL when it receives a bogus time_t.\n"],[41887,0,"def GMTIME_UNRELIABLE_ERRORS\n\tCOMPAT_OBJS += compat/gmtime.o\n\tBASIC_CFLAGS += -DGMTIME_UNRELIABLE_ERRORS\nendif\n\nif"]]},{"span":[253784,253824],"parents":[253551,253783],"agent":"René Scharfe","seqStart":1951,"ops":[[20890,0,"ha1-array\nTEST_PROGRAMS_NEED_X += test-s"]]},{"span":[253824,254060],"parents":[251150,251467,252584,253190,253500,253525,253783],"agent":"Junio C Hamano","seqStart":63080,"ops":[[14163,118,""],[14328,0,"#\n# Define GMTIME_UNRELIABLE_ERRORS if your gmtime() function does not\n# return NULL when it receives a bogus time_t.\n"]]},{"span":[254060,255593],"parents":[253551,254059],"agent":"Dave Borowitz","seqStart":0,"ops":[[1460,0,"_CONFIG to the path to a curl-config binary other than the\n# default 'curl-config'.\n#\n# "],[1549,0,"efine CURLD"],[1665,0,"  This overrides CURL_CONFIG,"],[1696,0," but is less robust.\n#"],[6220,0,"  Only used\n# if CURLDIR is set."],[6328,0,"  Only\n# used if CURLDIR is set."],[35064,30,""],[35073,6,""],[35102,0,"\t"],[35127,0,"\t"],[35159,0,"\t"],[35187,0,"\t"],[35195,0,"\t"],[35203,0,"\t"],[35232,0,"\t"],[35256,0,"\tendif\n\telse\n\t\tCURL_CONFIG ?= curl-config\n\t\tBASIC_CFLAGS += $(shell $(CURL_CONFIG) --cflags)\n\t\tCURL_LIBCURL = $(shell $(CURL_CONFIG) --libs)\n\t\tifeq \"$(CURL_LIBCURL)\" \"\"\n\t\t\t$(error curl not detected; try setting CURLDIR)\n\t\tendif\n\t"],[1559,0,"_STATIC to statically link libcurl.  Only applies if\n# CURL_CONFIG is used.\n#\n# "],[1640,0,"efine CURLD"],[35442,0,"ifdef CURL_STATIC\n\t\t\t"],[35503,0,"static-"],[35518,0,"\t"],[35548,0,"\t"],[35557,0,"lib"],[35577,0," or not compiled with static support)\n\t\t\tendif\n\t\telse\n\t\t\tCURL_LIBCURL = $(shell $(CURL_CONFIG) --libs)\n\t\t\tifeq \"$(CURL_LIBCURL)\" \"\"\n\t\t\t\t$(error libcurl not detected"],[35766,0,"\tendif\n\t\t"],[1543,0,"  If CURL_CONFIG is unset or points to a binary that\n# is not found, defaults to the CURLDIR behavior."],[1874,0,"\n#"],[1889,2,""],[1909,0,"  If not set, and CURL_CONFIG is not set,"],[1952,0," uses -lcurl with no additional library detection (other than"],[2016,0,"NEE"],[2020,0,"S_*_WITH_CURL).\n#\n# D"],[35221,0,"CURL_LIBCURL =\n\telse\n\t\tCURL_CONFIG = curl-config\n\t\tifeq \"$(CURL_CONFIG)\" \"\"\n\t\t\tCURL_LIBCURL =\n\t\telse\n\t\t\tCURL_LIBCURL := $(shell $(CURL_CONFIG) --libs)\n\t\tendif\n\tendif\n\n\tifeq \"$(CURL_LIBCURL)\" \"\"\n\t\tifdef CURL_STATIC\n$(error \"CURL_STATIC must be used with CURL_CONFIG\")\n\t\tendif\n\t\tifdef CURLDIR\n\t\t\t"],[35570,0,"\t"],[35610,0,"\t"],[35689,0,"else\n\t\t\tCURL_LIBCURL = -lcurl\n\t\tend"],[35726,0,"\n\t\tif"],[35926,29,""],[36080,4,""],[36144,149,""]]},{"span":[255593,255606],"parents":[253551,254059],"agent":"Jiang Xin","seqStart":66,"ops":[[61240,0,"=TRANSLATORS:"]]},{"span":[255606,255678],"parents":[255592,255605],"agent":"Nguyễn Thái Ngọc Duy","seqStart":3146,"ops":[[28591,0,"plit-index.o\nLIB_OBJS += s"],[20749,0,"dump-split-index\nTEST_PROGRAMS_NEED_X += test-"]]},{"span":[255678,256771],"parents":[255592,255605],"agent":"Junio C Hamano","seqStart":63316,"ops":[[1460,172,""],[1463,120,""],[1566,16,""],[1568,74,""],[1570,12,""],[1571,75,""],[6069,32,""],[6145,32,""],[34688,294,""],[34743,1,""],[34780,1,""],[34859,1,""],[34864,1,""],[34888,1,""],[34896,1,""],[34922,1,""],[34948,1,""],[34976,1,""],[35006,1,""],[35012,1,""],[35020,1,""],[35046,1,""],[35069,253,""]]},{"span":[256771,256811],"parents":[252300,252524,253550,256770],"agent":"Michael J Gruber","seqStart":196,"ops":[[32059,0,"commit.o\nBUILTIN_OBJS += builtin/verify-"]]},{"span":[256811,256973],"parents":[252300,252524,253550,256770],"agent":"Karsten Blees","seqStart":113,"ops":[[14407,0,"#"],[14409,0,"# Define HAVE_CLOCK_"],[14430,0,"ETT"],[14434,0,"ME if your platform has clock_gettime in librt.\n\nGI"],[42951,0,"def HAVE_CLOCK_GETTIME\n\tBASIC_CFLAGS += -DHAVE_CLOCK_GETTIME\n\tEXTLIBS += -lrt\nendif\n\nif"]]},{"span":[256973,257028],"parents":[252300,252524,253550,256770],"agent":"Pat Thoyts","seqStart":233,"ops":[[42410,0,"ifdef NATIVE_CRLF\n\tBASIC_CFLAGS += -DNATIVE_CRLF\nendif\n"]]},{"span":[257028,257355],"parents":[252300,252524,253550,256770],"agent":"Andi Kleen","seqStart":480,"ops":[[44114,0,"BASIC_"],[44263,0,"BASIC_"],[46935,0,"\t$(MAKE) PROFILE=GEN -j1 perf\n"],[46819,0,"all:: prof"],[46830,0,"le\nendif\n\npro"],[46844,0,"il"],[46847,1,""],[46847,0,"::"],[46850,3,""],[46850,0,"pro"],[46856,1,""],[46857,1,""],[46857,0,"-clean\n\t$(MAKE) PROFILE=GEN"],[46888,1,""],[46888,0,"\n\t"],[46896,3,""],[46896,0,") PROFILE="],[46907,0,"EN -j1 test\n\t$(MAKE) PR"],[46931,0,"FILE=GEN -j1 perf\n\t$(M"],[46954,0,"KE) PROFI"],[46964,0,"E=U"],[46968,3,""],[46968,0,"E "],[46973,1,""],[46974,1,""],[46974,0,"\nprofi"],[46981,2,""],[46981,0,"e-fast"],[47053,1,""],[47053,0,"p"],[47055,2,""],[47055,0,"rf"],[47075,1,""],[47075,0,"US"],[47078,5,""],[47079,10,""],[47079,0,"all"],[47083,5,""],[68456,0,"profile-install: profile\n\t$(MAKE) install\n\nprofile-fast-install: profile-fast\n\t$(MAKE) install\n\n"]]},{"span":[257355,257472],"parents":[257354],"agent":"Jeff King","seqStart":24585,"ops":[[46920,0,"@if test -n \"$"],[46935,0,"GIT_PERF_REPO\" || test -d .git; then \\\n\t\t$"],[47004,0,"; \\\n\telse \\\n\t\techo \"Skipping profile of perf tests...\"; \\\n\tfi"]]},{"span":[257472,257508],"parents":[255677,256810,256972,257354],"agent":"Tanay Abhra","seqStart":0,"ops":[[20139,0,"config\nTEST_PROGRAMS_NEED_X += test-"]]},{"span":[257508,257528],"parents":[255677,256810,256972,257354],"agent":"Jonathan Nieder","seqStart":17890,"ops":[[62235,3,""],[62235,0,"GENER"],[62241,3,""],[62241,0,"T"],[62245,0,"H) FOR"],[62252,1,""],[62252,0,"E"]]},{"span":[257528,261694],"parents":[257527],"agent":"Jeff King","seqStart":24702,"ops":[[16648,8,""],[22587,1,""],[22588,34,""],[22589,43,""],[22589,0,"$("],[22592,74,""],[22594,20,""],[22595,54,""],[22596,10,""],[22597,13,""],[22597,0,"$(F"],[22601,6,""],[22601,0,"ND)"],[22605,6,""],[22606,7,""],[22607,17,""],[22607,0,"\\"],[22609,133,""],[22609,0,"\t-"],[22613,15,""],[22614,13,""],[22615,10,""],[22616,23,""],[22617,29,""],[22618,80,""],[22619,37,""],[22620,9,""],[22621,125,""],[22623,21,""],[22624,64,""],[22625,20,""],[22626,106,""],[22627,12,""],[22628,27,""],[22629,1,""],[22630,9,""],[22631,15,""],[22631,0,"\\"],[22633,120,""],[22633,0,"\t"],[22635,42,""],[22636,6,""],[22637,21,""],[22638,19,""],[22639,32,""],[22640,8,""],[22641,8,""],[22642,7,""],[22643,19,""],[22644,4,""],[22645,3,""],[22645,0,"u"],[22647,1,""],[22648,12,""],[22649,20,""],[22650,28,""],[22651,10,""],[22652,34,""],[22652,0,"\\"],[22654,12,""],[22654,0,"\t"],[22656,2,""],[22657,92,""],[22658,59,""],[22659,2,""],[22660,8,""],[22661,70,""],[22661,0,"D"],[22663,24,""],[22664,16,""],[22665,187,""],[22666,50,""],[22667,23,""],[22668,4,""],[22669,18,""],[22670,14,""],[22671,41,""],[22672,1,""],[22673,95,""],[22674,9,""],[22675,6,""],[22676,11,""],[22677,1,""],[22678,27,""],[22679,22,""],[22680,9,""],[22681,8,""],[22682,6,""],[22683,16,""],[22684,63,""],[22685,11,""],[22685,0,"\\"],[22687,56,""],[22687,0,"\t"],[22689,1,""],[22690,4,""],[22691,69,""],[22692,27,""],[22693,11,""],[22694,13,""],[22694,0,"'*"],[22698,6,""],[22698,0,"'"],[22700,10,""],[22700,0,"-"],[22703,19,""],[22704,4,""],[22704,0,"n"],[22706,30,""],[22706,0,")"],[38141,18,""],[38142,6,""],[38543,14,""],[38544,14,""],[38630,21,""],[59343,1,""],[59395,1,""],[59425,1,""],[13387,97,""],[29899,6,""],[29905,101,""],[53386,131,""],[53387,24,""],[53394,6,""],[53437,33,""],[53474,89,""],[53475,148,""],[53476,6,""],[53477,29,""],[53478,12,""],[53485,6,""],[53603,232,""],[53604,322,""],[53605,146,""],[53606,46,""],[53607,32,""],[53861,6,""]]},{"span":[261694,261761],"parents":[257471,257507,261693],"agent":"Christian Couder","seqStart":1953,"ops":[[25721,0,"iler.o\nLIB_OBJS += tra"],[27712,0,"interpret-trailers.o\nBUILTIN_OBJS += builtin/"]]},{"span":[261761,261763],"parents":[255677,256810,256972,257471],"agent":"Ian Liu Rodrigues","seqStart":0,"ops":[[591,1,""],[813,1,""]]},{"span":[261763,261793],"parents":[255677,256810,256972,257471],"agent":"David Michael","seqStart":351,"ops":[[50061,0,"$(ALL_LDFLAGS) "],[50099,15,""]]},{"span":[261793,262291],"parents":[253823,257027,261760,261762,261792],"agent":"Bernhard Reiter","seqStart":0,"ops":[[32161,0,"IMAP_SEND_BUILDDEPS =\nIMAP_SEND_LDFLAGS = $(OPENSSL_LINK) $(OPENSSL_LIBSSL) $(LIB_4_CRYPTO)\n\n"],[33214,0,"curl_check := $(shell (echo 072200; curl-config --vernum) 2>/dev/null | sort -r | sed -ne 2p)\n\tifeq \"$(curl_check)\" \"072200\"\n\t\tUSE_CURL_FOR_IMAP_SEND = YesPlease\n\tendif\n\tifdef USE_CURL_FOR_IMAP_SEND\n\t\tBASIC_CFLAGS += -DUSE_CURL_FOR_IMAP_SEND\n\t\tIMAP_SEND_BUILDDEPS = http.o\n\t\tIMAP_SEND_LDFLAGS += $(CURL_LIBCURL)\n\tendif\n\t"],[56083,0," imap-send.sp"],[56725,0,"$(IMAP_SEND_BUILDDEPS) "],[56857,1,""],[56857,0,"IMA"],[56861,0,"_S"],[56865,3,""],[56865,0,"D"],[56868,13,""],[56868,0,"DF"],[56871,5,""],[56871,0,"AG"],[56874,17,""]]},{"span":[262291,262326],"parents":[253823,257027,261760,261762,261792],"agent":"Nguyễn Thái Ngọc Duy","seqStart":3218,"ops":[[29791,0,"orktree.o\nBUILTIN_OBJS += builtin/w"]]},{"span":[262326,262610],"parents":[255677,256810,256972,257471],"agent":"David Michael","seqStart":381,"ops":[[7785,0,"EEDS_MODE_TRANSLATION if your OS strays from the typical file type\n# bits in mode values (e.g. z/OS defines I_SFMT to 0xFF000000 as opposed to the\n# usual 0xF000).\n#\n# Define N"],[40346,0,"EEDS_MODE_TRANSLATION\n\tCOMPAT_CFLAGS += -DNEEDS_MODE_TRANSLATION\n\tCOMPAT_OBJS += compat/stat.o\nendif\nifdef N"]]},{"span":[262610,262725],"parents":[255677,256810,256972,257471],"agent":"Jeff King","seqStart":28868,"ops":[[52128,0,"# This makes sure we depend on the NO_PERL setting itself.\n$(patsubst %.perl,%,$(SCRIPT_PERL)): GIT-BUILD-OPTIONS\n\n"]]},{"span":[262725,262950],"parents":[262724],"agent":"Jonathan Nieder","seqStart":17910,"ops":[[51711,18,""],[51720,0,"_GEN"],[51725,1,""],[52172,20,""],[52185,1,""],[52185,0,"_GEN"],[52228,20,""],[52239,0,"_GEN"],[52244,1,""],[52661,20,""],[52674,0,"_GEN"],[52679,1,""],[53680,20,""],[53693,1,""],[53693,0,"_GEN"],[53933,0,"# This makes sure we depend on the NO_PYTHON setting itself.\n$(SCRIPT_PYTHON_GEN): GIT-BUILD-OPTIONS\n\n"]]},{"span":[262950,263493],"parents":[253823,257027,261760,261762,261792,262949],"agent":"Kyle J. McKay","seqStart":95,"ops":[[14383,0,"#"],[14385,0,"# Define USE_PARENS_AROUND_"],[14413,0,"ETTEXT_N to \"yes\" if your compiler happily\n# compiles the following initialization:\n#\n#   static const char s[] = (\"FOO\");\n#\n# and define it to \"no\" if you need to remove the parentheses () around the\n# constant.  The default is \"auto\", which means to use parentheses if your\n# compiler is detected to support it.\n\nG"],[31431,0,"yes,$(USE_PARENS_AROUND_GETTEXT_N))\n\tBASIC_CFLAGS += -DUSE_PARENS_AROUND_GETTEXT_N=1\nelse\nifeq (no,$(USE_PARENS_AROUND_GETTEXT_N))\n\tBASIC_CFLAGS += -DUSE_PARENS_AROUND_GETTEXT_N=0\nendif\nendif\n\nifeq ("]]},{"span":[263493,263864],"parents":[262290,262609,262949],"agent":"Reuben Hawkins","seqStart":0,"ops":[[14559,0,"#"],[14561,0,"# Define HAVE_CLOCK_MONOTONIC if your platform has CLOCK_MONOTONIC in librt.\n\n"],[41277,0,"def HAVE_CLOCK_MONOTONIC\n\tBASIC_CFLAGS += -DHAVE_CLOCK_MONOTONIC\nendif\n\nif"],[14638,0,"#\n# Define NO_HMAC_CTX_CLEANUP if your OpenSSL is version 0.9.6b or earlier to\n# cleanup the HMAC context with the older HMAC_cleanup function.\n"],[34653,0,"\tifdef NO_HMAC_CTX_CLEANUP\n\t\tBASIC_CFLAGS += -DNO_HMAC_CTX_CLEANUP\n\tendif\n"]]},{"span":[263864,263918],"parents":[263863],"agent":"Tom G. Christensen","seqStart":0,"ops":[[33479,0," | sed -e '/^70[BC]/s/^/0/'"],[33696,0," | sed -e '/^70[BC]/s/^/0/'"]]},{"span":[263918,264064],"parents":[263863],"agent":"Kyle J. McKay","seqStart":638,"ops":[[14782,0,"#\n# Define HAVE_BSD_SYSCTL if your platform has a BSD-compatible sysctl function.\n"],[41651,0,"def HAVE_BSD_SYSCTL\n\tBASIC_CFLAGS += -DHAVE_BSD_SYSCTL\nendif\n\nif"]]},{"span":[264064,264120],"parents":[263492,263863],"agent":"Junio C Hamano","seqStart":64597,"ops":[[14560,1,""],[14561,27,""],[14782,0,"#"],[14784,0,"# Define USE_PARENS_AROUND_"]]},{"span":[264120,264170],"parents":[263917,264119],"agent":"Nguyễn Thái Ngọc Duy","seqStart":3253,"ops":[[20971,0,"dump-untracked-cache\nTEST_PROGRAMS_NEED_X += test-"]]},{"span":[264170,264334],"parents":[263917,264063,264119],"agent":"Junio C Hamano","seqStart":64653,"ops":[[14783,82,""],[15126,0,"#\n# Define HAVE_BSD_SYSCTL if your platform has a BSD-compatible sysctl function.\n"]]},{"span":[264334,264463],"parents":[264333],"agent":"Jeff King","seqStart":29092,"ops":[[15208,0,"#"],[15210,0,"# Define HAVE_"],[15225,0,"ETDEL"],[15231,0,"M if your system has the getdelim() function.\n\nGI"],[42381,0,"def HAVE_GETDELIM\n\tBASIC_CFLAGS += -DHAVE_GETDELIM\nendif\n\nif"]]},{"span":[264463,264529],"parents":[105483,264333],"agent":"Junio C Hamano","seqStart":64817,"ops":[[74132,66,""]]},{"span":[264529,264637],"parents":[264528],"agent":"Eric Sunshine","seqStart":40,"ops":[[73524,0,"1,/^### command list/d' -e '"],[73700,0,"1,/^### command list/d' \\\n\t\t    -e '"],[49915,2,""],[49932,2,""],[49932,0,"perl"],[50019,2,""],[50019,0,"$(PERL_PATH) "],[50049,0,"perl command-li"],[50065,1,""],[50065,0,"t.txt"]]},{"span":[264637,264665],"parents":[264636],"agent":"Eric Sunshine","seqStart":148,"ops":[[49932,4,""],[49932,0,"sh"],[50017,13,""],[50017,0,"./"],[50036,4,""],[50036,0,"sh"],[50057,1,""]]},{"span":[264665,264679],"parents":[264664],"agent":"Alejandro R. Sedeño","seqStart":0,"ops":[[50017,0,"$(SHELL_PATH) "]]},{"span":[264679,264788],"parents":[253823,257027,261760,261762,261792,262949],"agent":"Jeff King","seqStart":28983,"ops":[[50922,7,""],[60620,0,"+"],[60681,0,"+"],[60745,0,"+"],[60810,0,"+"],[60872,0,"+"],[60942,0,"+"],[61020,0,"+"],[61090,0,"+"],[61164,0,"+"],[61250,0,"+"],[61376,0,"+"],[61484,0,"+"],[61589,0,"+"],[61688,0,"+"],[61770,0,"+"],[61854,0,"+"],[61980,0,"+"],[62088,0,"+"],[62214,0,"+"],[62337,0,"+"],[62472,0,"+"],[62480,0,"\t@if cmp $@+ $@ >/dev/null 2>&1; then $(RM) $@+; else mv $@+ $@; fi\n"],[49664,12,""],[49664,0,"@"]]},{"span":[264788,265241],"parents":[253823,257027,261760,261762,261792,262949],"agent":"Atousa Pahlevan Duprat","seqStart":0,"ops":[[5927,0,"SHA1_MAX_BLOCK_SIZE to limit the amount of data that will be hashed\n# in one call to the platform's SHA1_Update(). e.g. APPLE_COMMO"],[6059,0,"_CRYPTO\n# wants 'SHA1_MAX_BLOCK_SIZ"],[6095,0,"=1024L*1024L*1024L' defined.\n#\n# Define NE"],[38615,0,"APPLE_COMMON_CRYPTO\n\t# Apple CommonCrypto requires chunking\n\tSHA1_MAX_"],[38687,0,"OC"],[38692,0,"IZE = 1024L*1024L*1024L\nendif\n\nifdef BLK_S"],[39101,0,"SHA1_MAX_BLOCK_SIZE\n\tLIB_OBJS += compat/sha1-chunked.o\n\tBASIC_CFLAGS += -DSHA1_MAX_BLOCK_SIZE=\"$(SHA1_MAX_BLOCK_SIZE)\"\nendif\nifdef "]]},{"span":[265241,265358],"parents":[252524,256770],"agent":"Junio C Hamano","seqStart":64409,"ops":[[14599,0,"Create as necessary, replace existing, make ranlib unneeded.\nARFL"],[14665,0,"GS = rcs\n\n# A"],[60674,3,""],[60674,0,"$(ARFLAGS)"],[60750,3,""],[60750,0,"$(ARFLAGS)"],[60828,3,""],[60828,0,"$(ARFLAGS)"]]},{"span":[265358,265429],"parents":[252524,256770],"agent":"Junio C Hamano","seqStart":64526,"ops":[[64028,0,"NO_EXPAT=\\''$(subst ','\\'',$(subst ','\\'',$(NO_EXPAT)))'\\' >>$@\n\t@echo "]]},{"span":[265429,265506],"parents":[264169,264462,264636,265428],"agent":"Heiko Voigt","seqStart":46,"ops":[[21935,0,"module-config\nTEST_PROGRAMS_NEED_X += test-sub"],[26686,0,"ubmodule-config.o\nLIB_OBJS += s"]]},{"span":[265506,265529],"parents":[264169,264462,264636,265428],"agent":"Michael Haggerty","seqStart":86,"ops":[[26681,0,"empfile.o\nLIB_OBJS += t"]]},{"span":[265529,265585],"parents":[264169,264462,264636,265428],"agent":"Paul Tan","seqStart":0,"ops":[[29590,0,"ll.o\nBUILTIN_OBJS += builtin/pu"],[18109,25,""]]},{"span":[265585,265610],"parents":[264169,264462,264636,265428],"agent":"Karthik Nayak","seqStart":0,"ops":[[26112,0,"f-filter.o\nLIB_OBJS += re"]]},{"span":[265610,265925],"parents":[264169,264462,264636,265428],"agent":"Karsten Blees","seqStart":275,"ops":[[8925,1,""],[8925,0,"."],[8927,1,""],[8927,0,"O"],[8929,1,""],[8932,0,"L"],[8934,1,""],[8934,0,"nux,"],[8939,3,""],[8939,0,"kerne"],[8946,5,""],[8946,0,"2.6.11"],[8953,10,""],[8953,0,"or"],[8956,6,""],[8956,0,"newer"],[8962,0,"i"],[8964,5,""],[8964,0," requ"],[8970,1,""],[8970,0,"red "],[8975,0,"or"],[8978,0,"reli"],[8983,0,"ble sub-seco"],[8998,3,""],[8998,0,"file "],[9004,1,""],[9005,0,"mes\n# o"],[9013,1,""],[9014,2,""],[9014,0,"f"],[9016,2,""],[9016,0,"le"],[9019,1,""],[9019,0,"sys"],[9023,0,"ems"],[9029,2,""],[9029,0,"th"],[9032,3,""],[9033,0,"xact"],[9039,2,""],[9040,2,""],[9040,0,"1 "],[9043,1,""],[9043,0,"s "],[9046,3,""],[9046,0,"r 1 s"],[9052,1,""],[9054,3,""],[9054,0,"sol"],[9058,0,"tio"],[9062,4,""],[9062,0,". If"],[9070,1,""],[9071,1,""],[9071,0,"inte"],[9077,0," to us"],[9084,3,""],[9084,0," G"],[9087,0,"t\n# o"],[9093,1,""],[9094,0,"other "],[9104,0," "],[9111,1,""],[9112,3,""],[9112,0," (e.g. CEPH, CIFS, NTFS, UDF), d"],[9145,1,""],[9145,0,"n'"],[9148,1,""],[9149,4,""],[9150,3,""],[9150,0,"na"],[9153,2,""],[9153,0,"l"],[9155,4,""],[9155,0," USE_NSEC. See"],[9172,0,"Documen"],[9180,0,"at"],[9183,1,""],[9183,0,"on/t"],[9188,4,""],[9188,0,"chnical/rac"],[9200,2,""],[9200,0,"-git.t"],[9208,1,""],[9209,1,""],[9209,0,"f"],[9211,0,"r d"],[9215,3,""],[9216,1,""],[9216,0,"ails"]]},{"span":[265925,265926],"parents":[264169,264462,264636,264787,265428],"agent":"Junio C Hamano","seqStart":64883,"ops":[[63030,0,"+"]]},{"span":[265926,265927],"parents":[264528,264787,265428],"agent":"Junio C Hamano","seqStart":64884,"ops":[[62821,0,"+"]]},{"span":[265927,265928],"parents":[265925,265926],"agent":"Junio C Hamano","seqStart":64885,"ops":[[63031,1,""]]},{"span":[265928,265980],"parents":[262325,265584,265609,265924,265927],"agent":"Paul Tan","seqStart":56,"ops":[[27379,0,"m.o\nBUILTIN_OBJS += builtin/a"],[17964,23,""]]},{"span":[265980,266003],"parents":[264678,265505,265528,265979],"agent":"Michael Rappazzo","seqStart":0,"ops":[[27274,0,"orktree.o\nLIB_OBJS += w"]]},{"span":[266003,266149],"parents":[264678,265505,265528,265979],"agent":"Jeff King","seqStart":29221,"ops":[[3219,77,""],[36658,69,""]]},{"span":[266149,266172],"parents":[264678,265505,265528,265979],"agent":"Junio C Hamano","seqStart":64886,"ops":[[25341,0,"info.o\nLIB_OBJS += mail"]]},{"span":[266172,266216],"parents":[262325,265505,265584,265609,265924,265927],"agent":"Stefan Beller","seqStart":60,"ops":[[30497,0,"ubmodule--helper.o\nBUILTIN_OBJS += builtin/s"]]},{"span":[266216,266619],"parents":[262325,264664,265924,265927],"agent":"Remi Pommarel","seqStart":0,"ops":[[33489,50,""],[35122,0,"IMAP_SEND_LDFLAGS += $(OPENSSL_LINK) $(OPENSSL_LIBSSL) $(LIB_4_CRYPTO)\n"],[58900,8,""],[58915,0," $(LIBS)"],[59061,8,""],[59092,0," $(LIBS)"],[59579,8,""],[59610,0," $(LIBS)"],[1655,0,"CURL_CONFIG to curl's configuration program that prints information\n# about the library (e.g., its version number).  The default is 'curl-config'.\n#\n# Define "],[17179,0,"CURL_CONFIG = curl-config\n"],[34481,11,""],[34481,0,"$(CURL_CONFIG)"],[34701,11,""],[34701,0,"$(CURL_CONFIG)"]]},{"span":[266619,266661],"parents":[81101,265357,266002,266148,266171,266215,266618],"agent":"Michael Haggerty","seqStart":109,"ops":[[26428,0,"s/files-backend.o\nLIB_OBJS += ref"],[72850,0,"refs/*.o "]]},{"span":[266661,266699],"parents":[265240,266660],"agent":"Johannes Schindelin","seqStart":5782,"ops":[[21626,0,"fake-ssh\nTEST_PROGRAMS_NEED_X += test-"]]},{"span":[266699,267040],"parents":[81101,264678,265240,265357,265505,265528,265979,266618],"agent":"Elia Pinto","seqStart":0,"ops":[[60756,0,".PHONY: "],[60767,0," man html info pdf\ndoc"],[61939,0,".PHONY: "],[61950,0,"\npot"],[68321,0,".PHONY: "],[68344,0," profile-fast-install\nprofile-install"],[71077,0,".PHONY: "],[71099,0," install-doc install-man install-html install-info install-pdf\n.PHONY"],[71169,0," quick-install-doc quick-install-man quick-install-html\ninstall-gitweb:"],[72631,0,".PHONY: dist-doc distclean\n"],[74824,0,"\n.PHONY: "],[74843,0,"\ncheck-docs"],[76004,0,"untested-functions cover_db cover_db_html\n.PHONY: coverage-"]]},{"span":[267040,267244],"parents":[266660,267039],"agent":"Lars Schneider","seqStart":0,"ops":[[15944,0,"ifdef DEVELOPER\nCFLAGS += -Werror \\\n\t-Wdeclaration-after-statement \\\n\t-Wno-format-zero-length \\\n\t-Wold-style-definition \\\n\t-Woverflow \\\n\t-Wpointer-arith \\\n\t-Wstrict-prototypes \\\n\t-Wunused \\\n\t-Wvla\nendif\n\n"]]},{"span":[267244,267458],"parents":[81101,264678,265240,265357,265505,265528,265979,266618],"agent":"Junio C Hamano","seqStart":64909,"ops":[[11012,0,"Define SANE_TEXT_GREP to \"-a\" if you use recent versions of GNU grep\n# and egrep that are pickier when their input contains non-ASCII data.\n#\n# "],[51602,0,":$(SANE_TEXT_GREP)"],[52043,0,"-e 's|@@SANE_TEXT_GREP@@|$(SANE_TEXT_GREP)|g' \\\n    "]]},{"span":[267458,267494],"parents":[266698,267243,267457],"agent":"Junio C Hamano","seqStart":65129,"ops":[[75300,0,"$(MAKE) -C Documentation lint-docs\n\t"]]},{"span":[267494,267814],"parents":[266698,267243,267457],"agent":"Junio C Hamano","seqStart":65165,"ops":[[17645,20,""],[72159,20,""],[72160,31,""],[72161,52,""],[72356,7,""],[72357,2,""],[72526,28,""],[72680,0,":\n\t@echo >&2 \"Use"],[72702,13,""],[72702,0,"ro"],[72705,6,""],[72705,0,"package"],[72713,5,""],[72714,2,""],[72719,9,""],[72721,0," "],[72723,4,""],[72724,0," "],[72726,4,""],[72726,0,"un"],[72729,0,"rp"],[72732,0,"buil"],[72737,1,""],[72738,2,""],[72739,1,""],[72740,4,""],[72740,0,"@"],[72742,9,""],[72743,5,""],[72744,4,""],[72744,0,"s"],[72746,19,""],[72747,5,""],[72747,0,".PHONY:"],[72755,17,""],[72756,3,""],[72756,0,"pm"]]},{"span":[267814,267821],"parents":[267813],"agent":"Todd Zullinger","seqStart":100,"ops":[[74105,7,""]]},{"span":[267821,267830],"parents":[267813],"agent":"Dennis Kaarsemaker","seqStart":0,"ops":[[72205,9,""]]},{"span":[267830,267850],"parents":[266698,267243,267457],"agent":"Vasco Almeida","seqStart":50,"ops":[[61898,0," git-parse-remote.sh"]]},{"span":[267850,268068],"parents":[81101,264678,265240,265357,265505,265528,265979,266618],"agent":"Kazuki Yamaguchi","seqStart":0,"ops":[[15124,144,""],[36077,74,""]]},{"span":[268068,268074],"parents":[265926],"agent":"Junio C Hamano","seqStart":65123,"ops":[[66170,1,""],[66172,1,""],[66172,0,"2"],[66261,1,""],[66263,1,""],[66263,0,"2"]]},{"span":[268074,268129],"parents":[266698,267243,267457,268067,268073],"agent":"Michael Haggerty","seqStart":151,"ops":[[26911,0,"s/iterator.o\nLIB_OBJS += ref"],[25368,0,"dir-iterator.o\nLIB_OBJS += "]]},{"span":[268129,268241],"parents":[266698,267243,267457,268073],"agent":"Junio C Hamano","seqStart":65485,"ops":[[74011,8,""],[74013,13,""],[74014,39,""],[74022,42,""],[74022,0,"$(OBJECTS)"]]},{"span":[268241,268385],"parents":[268240],"agent":"Nguyễn Thái Ngọc Duy","seqStart":3303,"ops":[[22986,0,"t/helper/"],[56728,5,""],[56732,5,""],[66861,0,"patsubst test-%,t/helper/test-%,$("],[66898,0,")"],[67249,0,"/helper/t"],[67281,0,"/helper/t"],[67319,0,"/helper/t"],[67370,0,"/helper/t"],[67414,0,"/helper/t"],[67481,0,"/helper/t"],[67545,0,"/helper/t"],[67564,0,"/helper/t"],[67716,0,"/helper/t"],[67737,1,""],[67737,0,"t/helper"]]},{"span":[268385,268625],"parents":[268384],"agent":"Jeff King","seqStart":29367,"ops":[[67262,111,""],[67263,10,""],[67288,48,""],[67289,3,""],[67290,16,""],[67277,13,""],[67277,0,"$(VCSSVN_LIB)"],[67316,13,""],[67316,0,"$(VCSSVN_LIB)"]]},{"span":[268625,268716],"parents":[267493,267829,267849,268067,268384],"agent":"Vasco Almeida","seqStart":70,"ops":[[61659,0,"\nLOCALIZED_SH +="],[61706,0,"SH += git-sh-setup.sh\nLOCALIZED_"],[61716,0,"rebase--interactive.sh\nLOCALIZED_SH += git-"]]},{"span":[268716,269503],"parents":[267849,268067,268073],"agent":"Matthieu Moy","seqStart":1140,"ops":[[15944,204,""],[31742,0,"def DEVELOPER\nCFLAGS += -Werror \\\n\t-Wdeclaration-after-statement \\\n\t-Wno-format-zero-length \\\n\t-Wold-style-definition \\\n\t-Woverflow \\\n\t-Wpointer-arith \\\n\t-Wstrict-prototypes \\\n\t-Wunused \\\n\t-Wvla\nendif\n\nif"],[15858,0,"DEVELOPER_CFLAGS = -Werror \\\n\t-Wdeclaration-after-statement \\\n\t-Wno-format-zero-length \\\n\t-Wold-style-definition \\\n\t-Woverflow \\\n\t-Wpointer-arith \\\n\t-Wstrict-prototypes \\\n\t-Wunused \\\n\t-Wvla\n"],[31956,170,""],[31956,0,"$(DEVELOPER_CFLAGS)"]]},{"span":[269503,270171],"parents":[267493,267829,268384,269502],"agent":"Eric Wong","seqStart":1196,"ops":[[15675,0,"#\n# Define PAGER_ENV to a SP separated VAR=VAL pairs to define\n# default environment variables to be passed when a pager is spawned, e.g.\n#\n#    PAGER_ENV = LESS=FRX LV=-c\n#\n# to say \"export LESS=FRX (and LV=-c) if the environment variable"],[15915,0,"# LESS (and LV) is not set, respectively\".\n\n"],[44115,0,"ifndef PAGER_ENV\nPAGER_ENV = LESS=FRX LV=-c\nendif\n\n"],[47758,0,"PAGER_ENV_SQ = $(subst ','\\'',$(PAGER_ENV))\nPAGER_ENV_CQ = \"$(subst \",\\\",$(subst \\,\\\\,$(PAGER_ENV)))\"\nPAGER_ENV_CQ_SQ = $(subst ','\\'',$(PAGER_ENV_CQ))\nBASIC_CFLAGS += -DPAGER_ENV='$(PAGER_ENV_CQ_SQ)'\n\n"],[52185,0,":$(PAGER_ENV)"],[52673,0,"-e 's|@@PAGER_ENV@@|"],[52694,0,"(PAGER_ENV_SQ)|g' \\\n    $"],[65271,0,"\t@echo PAGER_ENV=\\''$(subst ','\\'',$(subst ','\\'',$(PAGER_ENV)))'\\' >>$@+\n"]]},{"span":[270171,270594],"parents":[267493,267829,268624,269502],"agent":"René Scharfe","seqStart":1991,"ops":[[12561,0,"OVERRIDE_STRDUP to override the libc version of strdup(3).\n# This is necessary when using a custom allocator in order to avoid\n# crashes due to allocation and free working on different 'heaps'.\n# It's defined automatically if USE_"],[12792,0,"ED_ALL"],[12799,0,"CATOR is set.\n#\n# Define NO"],[43224,7,""],[43224,0,"\t"],[43261,7,""],[43261,0,"\t"],[43306,0,"\tOVERRIDE_STRDUP = YesPlease\n"],[43348,0,"OVERRIDE_STRDUP\n\tCOMPAT_CFLA"],[43377,0,"S += -DOVERR"],[43390,0,"DE_STRDUP\n\tCOMPA"],[43408,0,"OBJS += compat/strdup.o\nendif\n\nifdef GI"],[43448,0,"_T"],[59811,18,""]]},{"span":[270594,270655],"parents":[267849,268067,268073],"agent":"Johannes Schindelin","seqStart":5820,"ops":[[12576,0,"r"],[12578,4,""],[12578,0,"C"],[12580,6,""],[12580,0,"l"],[12582,3,""],[12582,0,"b"],[12584,2,""],[12584,0,"a"],[12586,0,"y"],[12588,0,"lacks "],[12608,0,"w"],[12610,6,""],[12610,0,"th"],[12613,1,""],[12613,0,"REG_STARTEND\n#"],[12628,4,""],[12628,0,"fe"],[12631,0,"tu"],[12634,1,""],[12634,0,"e"]]},{"span":[270655,270851],"parents":[267849,268067,268073],"agent":"Ronald Wampler","seqStart":0,"ops":[[15090,9,""],[15160,0,".\n#\n# Define NEEDS_LIBRT if your platform"],[15202,0,"requ"],[15207,0,"res li"],[15214,0,"king with"],[15229,0," (glibc version\n# before 2.17) for clock_gettime and CLOCK_MONOTONIC"],[43552,3,""],[43553,14,""],[43641,0,"NEEDS_LIBRT\n\tEXTLIBS += -lrt\nendif\n\nifdef "]]},{"span":[270851,271218],"parents":[267849,268067,268073],"agent":"Jeff King","seqStart":29607,"ops":[[31797,0,"common-main.o "],[46217,0,"# We must filter out any object files from $(GITLIBS),\n# as it is typically used like:\n#\n#   foo: foo.o $(GITLIBS)\n#\t$(CC) $(filter %.o,$^) $("],[46363,0,")\n#\n#"],[46369,0,"where we use it as a dependency. Since we also pull object files\n# from the dependency list, that would make each entry appear twice.\nLIBS "],[46512,0,"filter-out %.o, $("],[46538,0,")"],[50904,6,""],[50910,12,""],[50910,0,"filter %.o,$^"],[56957,0,"common-main.o \\\n\t"]]},{"span":[271218,271236],"parents":[268715,269502,271217],"agent":"Jeff King","seqStart":29974,"ops":[[26118,0,"mru.o\nLIB_OBJS += "]]},{"span":[271236,271631],"parents":[268128,268624,270170,270850,271235],"agent":"René Scharfe","seqStart":2414,"ops":[[18040,0,"SPATCH = spatch\n"],[69117,0,"C_SOURCES = $(patsubst %.o,%.c,$(C_OBJ))\n%.cocci.patch: %.cocci $(C_SOURCES)\n\t@echo '    ' SPATCH $<; \\\n\tfor f in $(C_SOURCES); do \\\n\t\t$(SPATCH) --sp-file $< $$f; \\\n\tdone >$@ 2>$@.log; \\\n\tif test -s $@; \\\n\tthen \\\n\t\techo '    ' SPATCH result: $@; \\\n\tfi\ncoccicheck: $(patsubst %.cocci,%.cocci.patch,$(wildcard contrib/coccinelle/*.cocci))\n\n"],[75662,0,"RM) contrib/coccinelle/*.cocci.patch*\n\t$("]]},{"span":[271631,271651],"parents":[268128,268624,268715,269502,270850,271217],"agent":"Christian Couder","seqStart":2020,"ops":[[24562,0,"pply.o\nLIB_OBJS += a"]]},{"span":[271651,271710],"parents":[270170,270593,271235,271650],"agent":"Vasco Almeida","seqStart":161,"ops":[[63114,0,"language=Perl \\\n\t--"],[63146,7,""],[63146,0,"k"],[63148,0,"yword"],[63154,4,""],[63154,0,"\"__n:1,2\""],[63154,0,"N__ --keyword="]]},{"span":[271710,271756],"parents":[270593,270654,271630,271650],"agent":"René Scharfe","seqStart":2809,"ops":[[18370,0,"SPATCH_FLAGS = --all-includes\n"],[69694,0," $(SPATCH_FLAGS)"]]},{"span":[271756,271781],"parents":[270593,270654,271630,271650],"agent":"Jeff King","seqStart":29992,"ops":[[28314,0,"mp-objdir.o\nLIB_OBJS += t"]]},{"span":[271781,271789],"parents":[105491,271755,271780],"agent":"Junio C Hamano","seqStart":65597,"ops":[[77955,8,""]]},{"span":[271789,271814],"parents":[267493,267829,268624,269502,271217],"agent":"Lars Schneider","seqStart":204,"ops":[[33672,0,"NO_OPENSSL = YesPlease\n\t\t"]]},{"span":[271814,271896],"parents":[271788,271813],"agent":"Johannes Schindelin","seqStart":5881,"ops":[[19952,0,"legacy-"],[29980,0,"difftool.o\nBUILTIN_OBJS += builtin/"],[19952,40,""]]},{"span":[271896,272216],"parents":[271788,271813],"agent":"Jeff King","seqStart":30017,"ops":[[64215,0,"\\\n\t"],[64258,1,""],[64259,1,""],[64270,0,"\n\t\t\\"],[64307,2,""],[64349,0,"\\\n\t"],[64231,0,"\\\n\t\t"],[64245,0,"\\\n\t\t':!*[tp][0-9][0-9][0-9][0-9]*' \\\n\t\t"],[64365,0,"[tp][0-9][0-9][0-9][0-9]' -type d -prune \\) \\\n\t\t-o \\( -name build -type d -prune \\) \\\n\t\t-o \\( -name 'trash*' -type d -prune \\) \\\n\t\t-o \\( -name '"],[64250,0,"*.sh' \\\n\t\t'"],[64400,0,"*"],[64404,2,""],[64405,6,""],[64543,0,"\t-o \\( -name '*.sh' -type f -print \\) \\\n\t"],[64295,0,"':!contrib' \\\n\t\t"],[64445,0,"contrib -type d -prune \\) \\\n\t\t-o \\( -name "]]},{"span":[272216,272244],"parents":[272215],"agent":"Ævar Arnfjörð Bjarmason","seqStart":4864,"ops":[[54626,0,"$(PERL_PATH) -V >>$@+ && \\\n\t"]]},{"span":[272244,272363],"parents":[272215],"agent":"Jeff King","seqStart":30641,"ops":[[69984,0,"ret=0; \\\n\t"],[70066,0," || \\\n\t\t\t{ ret=$$?; break; }"],[70107,0,"+"],[70130,0,"$$ret != 0; \\\n\tthen \\\n\t\tcat $@.log; \\\n\t\texit 1; \\\n\tfi; \\\n\tmv $@+ $@; \\\n\tif test "]]},{"span":[272363,272412],"parents":[272215],"agent":"Jeff Hostetler","seqStart":0,"ops":[[22672,0,"azy-init-name-hash\nTEST_PROGRAMS_NEED_X += test-l"]]},{"span":[272412,272453],"parents":[272411],"agent":"Jeff Hostetler","seqStart":49,"ops":[[22877,0,"online-cpus\nTEST_PROGRAMS_NEED_X += test-"]]},{"span":[272453,272757],"parents":[271788,271813],"agent":"Jeff King","seqStart":30337,"ops":[[14441,238,""],[43963,66,""]]},{"span":[272757,272776],"parents":[271709,272215,272756],"agent":"Steven Penny","seqStart":0,"ops":[[54059,0,"-i "],[61149,8,""],[61167,0," $(LIBS)"]]},{"span":[272776,272826],"parents":[74231,271709,272215,272756],"agent":"Junio C Hamano","seqStart":65605,"ops":[[52,50,""]]},{"span":[272826,273055],"parents":[271788,271813],"agent":"René Scharfe","seqStart":2855,"ops":[[11702,0,"HAVE_ISO_QSORT_S if your platform provides a qsort_s() that's\n# compatible with the one described in C11 Annex K.\n#\n# Define "],[43155,0,"HAVE_ISO_QSORT_S\n\tCOMPAT_CFLAGS += -DHAVE_ISO_QSORT_S\nelse\n\tCOMPAT_OBJS += compat/qsort_s.o\nendif\nifdef "]]},{"span":[273055,273086],"parents":[271788,271813],"agent":"Johannes Schindelin","seqStart":5963,"ops":[[20128,31,""]]},{"span":[273086,273307],"parents":[271788,271813],"agent":"brian m. carlson","seqStart":6,"ops":[[10412,0,"USE_ASCIIDOCTOR to use Asciidoctor instead of AsciiDoc to build the\n# documentation.\n#\n# Define ASCIIDOCTOR_EXTENSIONS_LAB to point to the location of the Asciidoctor\n# Extensions Lab if you have it available.\n#\n# Define "]]},{"span":[273307,273328],"parents":[271895,272775,272825,273054,273085,273306],"agent":"Jeff King","seqStart":30760,"ops":[[27088,0,"oidset.o\nLIB_OBJS += "]]},{"span":[273328,273369],"parents":[271895,272775,272825,273054,273085,273306],"agent":"Johannes Schindelin","seqStart":5994,"ops":[[31507,0,"base--helper.o\nBUILTIN_OBJS += builtin/re"]]},{"span":[273369,273679],"parents":[271895,272775,272825,273054,273085,273306],"agent":"brian m. carlson","seqStart":227,"ops":[[42228,0,"LIB_OBJ"],[42236,10,""],[42237,0,"+"],[42240,1,""],[42256,2,""],[42256,0,"o"],[42259,1,""],[42259,0,"BAS"],[42263,1,""],[42263,0,"C"],[42265,3,""],[42265,0,"CFLAG"],[42275,5,""],[42276,3,""],[42276,0,"DSHA"],[42281,7,""],[42281,0,"_BLK"],[42307,28,""],[42344,0,"\tBASIC_CFLAGS += -DSHA1_PPC\n"],[42450,2,""],[42450,0,"B"],[42452,1,""],[42452,0,"SIC"],[42456,2,""],[42456,0,"CFL"],[42460,3,""],[42460,0,"GS"],[42463,0,"+"],[42466,20,""],[42466,0,"-"],[42468,15,""],[42473,2,""],[42474,1,""],[42474,0,"PPL"],[42478,7,""],[42478,0,"\n"],[42480,3,""],[42481,1,""],[42482,5,""],[42482,0,"e"],[42512,0,"\tBASIC_CFLAGS += -DSHA1_OPENSSL\n"],[46431,6,""],[46432,42,""],[47694,34,""],[47695,3,""]]},{"span":[273679,274049],"parents":[273678],"agent":"Jeff King","seqStart":30781,"ops":[[6008,0,"DC_SHA1 to unconditionally enable the collision-detecting sha1\n# algorithm. This is slower, but may detect attempted collision attacks.\n# Takes priority over other *_"],[6178,0," knobs.\n#\n# Define SHA1"],[42407,0,"DC_SHA1\n\tLIB_OBJS += sha1dc/sha1.o\n\tLIB_OBJS += sha1dc/ubc_check.o\n\tBASIC_CFLAGS += -DSHA1_DC\nelse\nifdef "],[42856,0,"endif\n"],[67113,0,"\t@echo DC_SHA1=\\''$(subst ','\\'',$(subst ','\\'',$(DC_SHA1)))'\\' >>$@+\n"]]},{"span":[274049,274329],"parents":[274048],"agent":"Junio C Hamano","seqStart":65655,"ops":[[6197,0,"OPENSSL_SHA1 environment variable when running make to link\n# with the SHA1 routine from openssl library.\n#\n# Define "],[42524,2,""],[42524,0,"OPENSSL"],[42538,0,"EXT"],[42543,3,""],[42544,1,""],[42549,15,""],[42549,0,"$("],[42555,0,"4_CRYPT"],[42563,25,""],[42563,0,")"],[42589,2,""],[42589,0,"OPENSSL"],[42875,3,""],[42875,0,"DC_SHA1 := YesPlease\n\t"],[42900,0,"_OBJ"],[42909,2,""],[42909,0,"sha1dc/sha1.o\n\t"],[42928,1,""],[42928,0,"OBJS += sha1dc/ubc"],[42947,7,""],[42947,0,"check.o"],[42979,7,""],[42979,0,"DC"]]},{"span":[274329,274453],"parents":[271895,272775,272825,273054,273085,273306],"agent":"Ramsay Jones","seqStart":2127,"ops":[[4267,68,""],[39930,56,""]]},{"span":[274453,274585],"parents":[271895,272775,272825,273054,273085,273306],"agent":"Jeff King","seqStart":31151,"ops":[[68018,0,"GIT_INTEROP_MAKE_OPTS\n\t@echo GIT_INTEROP_MAKE_OPTS=\\''$(subst ','\\'',$(subst ','\\'',$(GIT_INTEROP_MAKE_OPTS)))'\\' >>$@+\nendif\nifdef "]]},{"span":[274585,274624],"parents":[273327,273368,273678,274452,274584],"agent":"Nguyễn Thái Ngọc Duy","seqStart":3447,"ops":[[22969,0,"f-store\nTEST_PROGRAMS_NEED_X += test-re"]]},{"span":[274624,274653],"parents":[274623],"agent":"Michael Haggerty","seqStart":206,"ops":[[27733,0,"s/ref-cache.o\nLIB_OBJS += ref"]]},{"span":[274653,274679],"parents":[272411,273327,273368,274328,274452,274584],"agent":"Ben Peart","seqStart":0,"ops":[[28632,0,"ub-process.o\nLIB_OBJS += s"]]},{"span":[274679,274722],"parents":[272362,272411,273327,273368,274328,274452,274584],"agent":"Jeff Hostetler","seqStart":90,"ops":[[23605,0,"cmp-offset\nTEST_PROGRAMS_NEED_X += test-str"]]},{"span":[274722,274753],"parents":[272243,272452,274652,274721],"agent":"Jeff King","seqStart":31283,"ops":[[897,0," (or even to fopen\n# it at all)"]]},{"span":[274753,276529],"parents":[272243,272452,274652,274721],"agent":"Ævar Arnfjörð Bjarmason","seqStart":4892,"ops":[[1060,0,"Various\n# commands such as lo"],[1090,3,""],[1090,0," and "],[1100,1,""],[1100,0,"offer runt"],[1111,4,""],[1111,0,"m"],[1113,2,""],[1114,4,""],[1114,0,"options"],[1128,0,"\n#"],[1166,0," instead of standard or extended\n# POSIX regular expressions"],[68697,0,"PERF_MAKE_COMMAND\n\t@echo GIT_PERF_MAKE_COMMAND=\\''$(subst ','\\'',$(subst ','\\'',$(GIT_PERF_MAKE_COMMAND)))'\\' >>$@+\nendif\nifdef GIT_"],[35699,0,"1"],[67161,0,"1"],[67303,0,"THREADS=\\''$(subst ','\\'',$(subst ','\\'',$(NO_PTHREADS)))'\\' >>$@+\n\t@echo NO_P"],[1232,0,"When using USE_LIBPCRE1, define NO_LIBPCRE1_JIT if the PCRE v1\n# library is compiled without --enable-jit. We will auto-detect\n# whether the version of the PCRE v1 library in use has JIT support at\n# all, but we unfortunately can't auto-detect whether JIT support\n# hasn't been compiled in in an otherwise JIT-supporting version. If\n# you have link-time errors about a missing `pcre_jit_exec` define\n# this, or recompile PCRE v1 with --enable-jit.\n#\n# "],[36312,0,"\nifd"],[36317,0,"f NO_LIBPCRE1_JIT\n\tBASIC_CFLAGS += -DNO_LIBPCRE1_JIT\ne"],[36376,0,"endif\n"],[67748,0,"LIBPCRE1_JIT=\\''$(subst ','\\'',$(subst ','\\'',$(NO_LIBPCRE1_JIT)))'\\' >>$@+\n\t@echo NO_"],[1232,0,"Currently USE_LIBPCRE is a synonym for USE_LIBPCRE1, define\n# USE_LIBPCRE2 instead if you'd like to use version 2 of the PCRE\n# library. The USE_LIBPCRE flag will likely be changed to mean v2 by\n# default in future releases.\n#\n# "],[1948,7,""],[1948,0,"PCRE"],[1981,0,"\n#"],[1986,2,""],[2033,0," Which version of\n# PCRE this points to determined by the USE_LIBPCRE1 and USE_LIBPCRE2\n# variables."],[36429,0,"USE_LIBPCRE1 ?= $(USE_LIBPCRE)\n\nifneq (,$(USE_LIBPCRE1))\n\t"],[36504,0,"2\n$(error Only set USE_LIBPCRE1 (or its alias USE_LIBPCRE) or USE_LIBPCRE2, not both!)\n\tendif\n"],[36632,0,"EXTLIBS += -lpcre\n\n"],[36657,0,"NO_"],[36667,1,""],[36667,0,"1_J"],[36671,1,""],[36671,0,"T"],[36674,1,""],[36691,3,""],[36691,0,"DNO_"],[36702,1,""],[36702,0,"1_J"],[36706,3,""],[36706,0,"T\nend"],[36712,0,"f\ne"],[36716,3,""],[36717,0,"if\n\nifd"],[36725,3,""],[36725,0,"f US"],[36730,11,""],[36730,0,"_"],[36732,3,""],[36738,1,""],[36738,0,"2\n\tBAS"],[36745,12,""],[36746,0,"_"],[36748,1,""],[36748,0,"F"],[36750,0,"AGS += -"],[36759,0,"USE"],[36763,10,""],[36770,18,""],[36770,0,"2"],[36790,0,"2-8\nendif"],[36807,3,""],[36814,3,""],[36814,0,"D"],[36816,1,""],[36816,0,"R"],[36836,0,"I$(LIBPCREDIR)/include\n\tEXTLIBS += -L$(LIBPCREDIR)/$(lib) $(CC_L"],[36901,0,"_DY"],[36905,2,""],[36905,0,"PATH)$("],[36919,3,""],[36919,0,"D"],[36921,5,""],[36921,0,"R)/$(l"],[36928,1,""],[36928,0,"b)"],[68280,0,"1)))'\\' >>$@+\n\t@echo USE_LIBPCRE2=\\''$(subst ','\\'',$(subst ','\\'',$(USE_LIBPCRE2"]]},{"span":[276529,276563],"parents":[272243,272452,274652,274721],"agent":"Michael Haggerty","seqStart":235,"ops":[[28174,0,"packed-backend.o\nLIB_OBJS += refs/"]]},{"span":[276563,276583],"parents":[272243,272452,274652,274721],"agent":"Jeff Smith","seqStart":0,"ops":[[25796,0,"ame.o\nLIB_OBJS += bl"]]},{"span":[276583,276898],"parents":[272243,272452,274652,274721],"agent":"Ævar Arnfjörð Bjarmason","seqStart":6668,"ops":[[43111,0,"\\\n\t\t-DSHA1_DC \\\n\t\t-DSHA1DC_NO_STANDARD_INCLUDES \\\n\t\t-DSHA1DC_INIT_SAFE_HASH_DEFAULT=0 \\\n\t\t"],[43207,0,"DC_CUSTOM"],[43217,0,"INCLU"],[43223,0,"E_SHA1_C=\"\\\"cache.h\\\"\" \\\n\t\t-DSHA1DC_CUSTOM_TRAILING_IN"],[43278,0,"LUDE_SHA1_C=\"\\\"sha1dc_git.c\\\"\" \\\n\t\t-DSHA1DC_CUSTOM_TRAILING_INCLUDE_SHA1_H=\"\\\"sha1dc_git.h\\\"\" \\\n\t\t-DSHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=\"\\\"git-compat-util.h\\\"\""]]},{"span":[276898,277346],"parents":[276897],"agent":"Ævar Arnfjörð Bjarmason","seqStart":6983,"ops":[[6129,0,"DC_SHA1_SUBMODULE in addition to DC_SHA1 to use the\n# sha1collisiondetection shipped as a submodule instead of the\n# non-submodule copy in sha1dc/. This is an experimental option used\n# by the git project to migrate to using sha1collisiondetection as a\n# submodule.\n#\n# Define "],[43312,0,"ifdef DC_SHA1_SUBMODULE\n\tLIB_OBJS += sha1collisiondetection/lib/sha1.o\n\tLIB_OBJS += sha1collisiondetection/lib/ubc_check.o\n\tBASIC_CFLAGS += -DDC_SHA1_SUBMODULE\nelse\n"],[43536,0,"endif\n"]]},{"span":[277346,277465],"parents":[277345],"agent":"Junio C Hamano","seqStart":65935,"ops":[[33553,0,"feq ($(wildcard sha1collisiondetection/lib/sha1.h),sha1collisiondetection/lib/sha1.h)\nDC_SHA1_SUBMODULE = auto\nendif\n\ni"]]},{"span":[277465,277490],"parents":[274678,276528,276582,276897],"agent":"Brandon Williams","seqStart":0,"ops":[[29173,0,"pository.o\nLIB_OBJS += re"]]},{"span":[277490,277697],"parents":[276897],"agent":"Jeff King","seqStart":31314,"ops":[[33404,0,"def SANITIZE\nBASIC_CFLAGS += -fsanitize=$(SANITIZE) -fno-sanitize-recover=$(SANITIZE)\nendif\n\nif"],[33490,0,"BASIC_CFLAGS += -fno-omit-frame-pointer\nifeq ($(SANITIZE),undefined)\nBASIC_CFLAGS += -DNO_UNALIGNED_LOADS\nendif\n"]]},{"span":[277697,277854],"parents":[277696],"agent":"René Scharfe","seqStart":3084,"ops":[[33402,0,"comma := ,\nempty :=\nspace := $(empty) $(empty)\n\n"],[33465,0,"SANITIZERS := $(foreach flag,$(subst $(comma),$(space),$(SANITIZE)),$(flag))\n"],[33657,0,"n"],[33664,0,"filter undefined,$("],[33691,0,"RS)"],[33696,9,""]]},{"span":[277854,278654],"parents":[274752,277464,277489,277696],"agent":"Junio C Hamano","seqStart":66054,"ops":[[66626,0,"## Note that this is meant to be run only by the localization coordinator\n## under a very controlled condition, i.e. (1) it is to be run in a\n## Git repository (not a tarball extract), (2) any local modifications\n## will be lost.\n## Gettext tools cannot work with our own custom PRItime type, so\n## we replace PRItime with PRIuMAX.  We need to update this to\n## PRIdMAX if we switch to a signed type later.\n\n"],[67068,0,"# All modifications will be reverted at the end, so we do not\n\t# want to have any local change.\n\tgit diff --quiet HEAD && git diff --quiet --cached\n\n\t@for s in $(LOCALIZED_C) $(LOCALIZED_SH) $(LOCALIZED_PERL); \\\n\tdo \\\n\t\tsed -e 's|PRItime|PRIuMAX|g' <\"$$s\" >\"$$s+\" && \\\n\t\tcat \"$$s+\" >\"$$s\" && rm \"$$s+\"; \\\n\tdone\n\n\t"],[67641,0,"\n\t# Reverting the munged source, leaving only the updated $@\n\tgit reset --hard\n"]]},{"span":[278654,279288],"parents":[277853,278653],"agent":"Takashi Iwai","seqStart":0,"ops":[[45051,0,"\tBASIC_CFLAGS += -DSHA1_DC\n\tLIB_OBJS += sha1dc_g"],[45100,0,"t.o\ni"],[45350,14,""],[45466,126,""],[7046,0,"EXTERNAL in addition to DC_"],[7074,0,"HA1 if you want to build / link\n# git with the external SHA1 collision-detect library.\n# Without this option, i.e. the default behavior is to build git with its\n# own built-in code (or submodule).\n#\n# Define DC_SHA1_S"],[45362,0,"EXTERNAL\n\tifdef DC_SHA1_SUBMODULE\n$(error Only set DC_SHA1_EXTERNAL or DC_SHA1_SUBMODULE, not both)\n\tendif\n\tBASIC_CFLAGS += -DDC_SHA1_EXTERNAL\n\tEXTLIBS += -lsha1detectcoll\nelse\nifdef DC_SHA1_"],[45995,0,"endif\n"]]},{"span":[279288,279338],"parents":[105587,277853,278653],"agent":"Junio C Hamano","seqStart":66854,"ops":[[82939,50,""]]},{"span":[279338,279379],"parents":[279337],"agent":"Kevin Willford","seqStart":0,"ops":[[24549,0,"write-cache\nTEST_PROGRAMS_NEED_X += test-"]]},{"span":[279379,279456],"parents":[279337],"agent":"Brandon Williams","seqStart":25,"ops":[[74229,0,".PHONY: style\nstyle:\n\tgit clang-format --style file --diff --extensions c,h\n\n"]]},{"span":[279456,279479],"parents":[276562,279337],"agent":"Jonathan Tan","seqStart":0,"ops":[[28729,0,"file.o\nLIB_OBJS += pack"]]},{"span":[279479,279514],"parents":[270593,270654,271630,271813],"agent":"Jonathan Nieder","seqStart":18135,"ops":[[57939,35,""]]},{"span":[279514,279601],"parents":[279378,279478,279513],"agent":"Jeff King","seqStart":31521,"ops":[[35215,0,"ifneq ($(filter leak,$(SANITIZERS)),)\nBASIC_CFLAGS += -DSUPPRESS_ANNOTATED_LEAKS\nendif\n"]]},{"span":[279601,279624],"parents":[279287,279455,279600],"agent":"Brandon Williams","seqStart":102,"ops":[[29508,0,"protocol.o\nLIB_OBJS += "]]},{"span":[279624,279642],"parents":[279287,279455,279600],"agent":"Gargi Sharma","seqStart":0,"ops":[[28828,18,""]]},{"span":[279642,279663],"parents":[279287,279455,279600],"agent":"Jonathan Tan","seqStart":23,"ops":[[28992,0,"map.o\nLIB_OBJS += oid"]]},{"span":[279663,279862],"parents":[279378,279478,279513],"agent":"Michael Haggerty","seqStart":269,"ops":[[8546,0,"MMAP_PREVE"],[8557,0,"TS_DELETE if a file that is currently mmapped cannot be\n# deleted or cannot be replaced using rename().\n#\n# Define N"],[43333,0,"MMAP_PREVENTS_DELETE\n\tBASIC_CFLAGS += -DMMAP_PREVENTS_DELETE\nendif\nifdef "]]},{"span":[279862,279938],"parents":[279662,279861],"agent":"Jeff Hostetler","seqStart":133,"ops":[[28715,0,"ist-objects-filter.o\nLIB_OBJS += list-objects-filter-options.o\nLIB_OBJS += l"]]},{"span":[279938,279965],"parents":[279937],"agent":"Jonathan Tan","seqStart":44,"ops":[[28387,0,"object.o\nLIB_OBJS += fetch-"]]},{"span":[279965,280074],"parents":[279378,279478,279513],"agent":"Ben Peart","seqStart":26,"ops":[[28055,0,"fsmonitor.o\nLIB_OBJS += "],[23891,0,"fsmonitor\nTEST_PROGRAMS_NEED_X += test-dump-"],[23842,0,"rop-caches\nTEST_PROGRAMS_NEED_X += test-d"]]},{"span":[280074,280160],"parents":[279337,279513],"agent":"Johannes Schindelin","seqStart":6035,"ops":[[57355,0," -DMICRO= -DPATCHLEVEL="],[57392,2,""],[57393,7,""],[57394,1,""],[57394,0,"4"],[57397,1,""],[57397,0,"\\\n\t    "],[57407,4,""],[57407,0,"hell"],[57412,2,""],[57412,0,"echo"],[57417,1,""],[57431,1,""],[57431,0," 0 0 0 0 | tr '.a-zA-Z-' ' '"]]},{"span":[280160,280183],"parents":[279662,279861,280073,280159],"agent":"Thomas Gummerer","seqStart":310,"ops":[[27610,0,"heckout.o\nLIB_OBJS += c"]]},{"span":[280183,280224],"parents":[105537,279662,279861,280073,280159],"agent":"Junio C Hamano","seqStart":66904,"ops":[[83897,41,""]]},{"span":[280224,280515],"parents":[279623,280223],"agent":"Eric Sunshine","seqStart":176,"ops":[[18249,0,"#\n# When cross-compiling, define HOST_CPU as the canonical name of the CPU on"],[18327,0,"# which the built "],[18346,0,"it will run (for instance \"x86_64\").\n\nG"],[36955,0,"eq (,$(HOST_CPU))\n\tBASIC_CFLAGS += -DGIT_HOST_CPU=\"\\\"$(firstword $(subst -, ,$(uname_M)))\\\"\"\nelse\n\tBASIC_CFLAGS += -DGIT_HOST_CPU=\"\\\"$(HOST_CPU)\\\"\"\nendif\n\nif"]]},{"span":[280515,280636],"parents":[280514],"agent":"Johannes Schindelin","seqStart":6121,"ops":[[56998,0," \\\n\t'-DGIT_BUILT_FROM_COMMIT=\"$(shell GIT_CEILING_DIRECTORIES=\\\"$(CURDIR)/..\\\" \\\n\t\tgit rev-parse -q --verify HEAD || :)\"'"]]},{"span":[280636,280657],"parents":[280635],"agent":"Johannes Schindelin","seqStart":6242,"ops":[[57036,0,"\\\n\t\t"],[57064,1,""],[57077,1,""],[57114,4,""],[57114,0,"2>/dev/null"]]},{"span":[280657,280703],"parents":[279623,280223],"agent":"Jonathan Tan","seqStart":71,"ops":[[24437,0,"example-decorate\nTEST_PROGRAMS_NEED_X += test-"]]},{"span":[280703,280909],"parents":[279937,280182,280635,280702],"agent":"Brandon Williams","seqStart":125,"ops":[[23985,30,""],[31191,0,"pload-pack.o\nLIB_OBJS += u"],[35137,0,"upload-pack.o\nBUILTIN_OBJS += builtin/"],[25075,0,"kt-line\nTEST_PROGRAMS_NEED_X += test-p"],[30562,0,".o\nLIB_OBJS += serve"],[34697,0,"erve.o\nBUILTIN_OBJS += builtin/s"],[29179,0,"ls-refs.o\nLIB_OBJS += "]]},{"span":[280909,280953],"parents":[279937,280182,280702],"agent":"Ævar Arnfjörð Bjarmason","seqStart":9986,"ops":[[1002,28,""],[1004,2,""],[40872,4,""],[40873,10,""]]},{"span":[280953,282831],"parents":[279662,279861,280073,280159],"agent":"Ævar Arnfjörð Bjarmason","seqStart":7431,"ops":[[12512,10,""],[12518,61,""],[12519,4,""],[12520,14,""],[12521,35,""],[12522,1,""],[12523,3,""],[19393,0,"per"],[19397,0,"libdir = $(sharedir)/perl5\nl"],[19874,0,"perllibdir "],[46570,56,""],[50496,0,"SQ = $(subst ','\\'',$(mandi"],[50524,0,"))\nmandir_r"],[50641,0,"per"],[50645,0,"libdir_SQ = $(subst ','\\'',$(perllibdir))\nl"],[53869,34,""],[53870,9,""],[53884,21,""],[53887,78,""],[56993,0,":\\"],[56996,0,"\t$(perllib"],[57007,0,"ir_SQ)\nd"],[58338,213,""],[58339,19,""],[58340,148,""],[58392,0,":$(perllibdir_SQ)"],[58436,10,""],[58440,4,""],[58500,81,""],[58780,0," || \"'\"$(perllibdir_SQ"],[58803,0,"\"'\")"],[68426,0,"PM"],[68430,0,"LES := $(wildcard perl/*.pm perl/*/*.pm perl/*/*/*.pm perl/*/*/*/*.pm)\nPMCFILES := $(patsubst perl/%.pm,perl/build/lib/%.pmc,$(PMFILES))\n\nifndef "],[68576,0,"O_PERL\nall:: $(PMCFILES)\nendif\n\nperl/build/lib/%.pmc: perl/%.pm\n\t$(QUIET_GEN)mkdir -p $(dir $@) && \\\n\tsed -e 's|@@LOCALE"],[68697,0,"IR@@|$(localedir"],[68715,0,"Q)|g' < $< > $@\n\nperl/build/man/man3/Git.3pm: perl/Git.pm\n\t$(QUIET_GEN)mkdir -p $(dir $@) && \\\n\tpod2man $< $@\n\nFIND_S"],[77212,1,""],[77212,0,"INST"],[77217,2,""],[77217,0,"LL"],[77222,1,""],[77222,0,"d"],[77224,4,""],[77224,0,"-m"],[77227,7,""],[77227,0,"755 "],[77234,0,"DESTDIR_SQ)$("],[77248,0,"e"],[77250,2,""],[77250,0,"llibd"],[77256,1,""],[77256,0,"r"],[77262,0,"\n\t(cd perl/build/lib &&"],[77286,3,""],[77286,0,"$("],[77289,2,""],[77289,0,"A"],[77291,1,""],[77291,0,") cf - .) | \\\n\t(cd "],[77324,0,"$(perllibdir_SQ)"],[77342,2,""],[77342,0,"&& uma"],[77349,4,""],[77349,0,"k 022 && $(TAR) xof -)"],[79407,0," install-man-perl"],[79472,0," install-man-perl"],[79537,0,"man-perl: perl/build/man/man3/Git.3pm\n\t$(INSTALL) -d -m 755 '$(DESTDIR_SQ)$(mandir_SQ)/man3'\n\t(cd perl/build/man/man3 && $(TAR) cf - .) | \\\n\t(cd '$(DESTDIR_SQ)$(mandir_SQ)/man3' && umask 022 && $(TAR) xof -)\n\ninstall-"],[82306,0,"R"],[82308,3,""],[82311,1,""],[82311,0,"r"],[82317,2,""],[82317,0,"/bui"],[82322,3,""],[82322,0,"d/"],[68426,3,""],[68426,0,"L"],[68428,1,""],[68428,0,"B_P"],[68432,1,""],[68432,0,"RL"],[68454,1,""],[68454,0,"Git"],[68466,1,""],[68466,0,"Git"],[68480,1,""],[68480,0,"Git"],[68496,1,""],[68496,0,"Git"],[68510,0,"LIB_"],[68515,4,""],[68515,0,"ER"],[68518,0,"_G"],[68521,1,""],[68521,0,"N"],[68566,1,""],[68569,3,""],[68569,0,"L"],[68571,0,"B_PER"],[68577,2,""],[68604,4,""],[68604,0,"L"],[68606,0,"B_PER"],[68612,0,"_G"],[68615,1,""],[68615,0,"N"],[68644,1,""]]},{"span":[282831,282893],"parents":[282830],"agent":"Jonathan Nieder","seqStart":18170,"ops":[[58517,0,"='$(perllibdir_SQ)' && \\\n\tINSTLIBDIR"],[58813,26,""]]},{"span":[282893,283003],"parents":[282892],"agent":"SZEDER Gábor","seqStart":0,"ops":[[66035,0,"man-perl "],[66062,0," man-perl"],[66107,0," man-perl"],[66148,0,"man-perl: perl/build/man/man3/Git.3pm\n\n"],[79350,0,"man-perl install-"],[79656,11,""],[79659,11,""],[79659,0,"-"],[79661,1,""],[79661,0,"erl"]]},{"span":[283003,283060],"parents":[283002],"agent":"Christian Hesse","seqStart":0,"ops":[[59161,0,"perllibdir:\n\t@echo '$(perllibdir_SQ)'\n"],[59161,0,".PHONY: perllibdir\n"]]},{"span":[283060,283737],"parents":[279662,279861,280073,280159],"agent":"Ævar Arnfjörð Bjarmason","seqStart":9309,"ops":[[45910,0,"\t\tifneq ($(DC_SHA1_SUBMODULE),auto)\n"],[46013,0,"\tendif\n\t"],[80486,0,"ifdef DC_SHA1_SUBMODULE\n\t@mkdir -p $(GIT_TARNAME)/sha1collisiondetection/lib\n\t@cp sha1collisiondetection/LICENSE.txt \\\n\t\t$(GIT_TARNAME)/sha1collisiondetection/\n\t@cp sha1collisiondetection/LICENSE.txt \\\n\t\t$(GIT_TARNAME)/sha1collisiondetection/\n\t@cp sha1collisiondetection/lib/sha1.[ch] \\\n\t\t$(GIT_TARNAME)/sha1collisiondetection/lib/\n\t@cp sha1collisiondetection/lib/ubc_check.[ch] \\\n\t\t$(GIT_TARNAME)/sha1collisiondetection/lib/\n\t$(TAR) rf $(GIT_TARNAME).tar \\\n\t\t$(GIT_TARNAME)/sha1collisiondetection/LICENSE.txt \\\n\t\t$(GIT_TARNAME)/sha1collisiondetection/lib/sha1.[ch] \\\n\t\t$(GIT_TARNAME)/sha1collisiondetection/lib/ubc_check.[ch]\nendif\n"]]},{"span":[283737,284059],"parents":[279662,279861,280159],"agent":"Jeff King","seqStart":31608,"ops":[[18249,0,"#"],[18251,0,"# Define TEST_SHELL_PATH if you want to use a shell besides SHELL_PATH for\n# running the test scripts (e.g., bash has better support for \"set -x\"\n# tracing).\n\n"],[27046,0,"TEST_SHELL_PATH = $(SHELL_PATH)\n\n"],[51156,0,"TEST_SHELL_"],[51168,0,"ATH_SQ = $(subst ','\\'',$(TEST_SH"],[51202,0,"LL_PATH))\nPE"],[70978,0,"TEST_SHELL_PATH=\\''$(subst ','\\'',$(TEST_SHELL_PATH_SQ))'\\' >>$@+\n\t@echo "]]},{"span":[284059,284249],"parents":[279937,280182,280635,280702,284058],"agent":"Junio C Hamano","seqStart":66945,"ops":[[18253,95,""],[18409,0,"#"],[18411,0,"# When cross-compiling, define HOST_CPU as the canonical name of the CPU on\n# which the built "]]},{"span":[284249,284306],"parents":[280952,284248],"agent":"Ramsay Jones","seqStart":2251,"ops":[[65555,0,"pack-revindex.sp: SPARSE_FLAGS += -Wno-memcpy-max-count\n\n"]]},{"span":[284306,284565],"parents":[267820,279641,279964,283002,283736,284305],"agent":"Ævar Arnfjörð Bjarmason","seqStart":10331,"ops":[[1233,10,""],[1273,1,""],[1273,0,"2"],[1282,2,""],[1294,1,""],[1294,0,"1\n#"],[1327,0,"the legacy "],[1346,1,""],[1346,0,"1"],[1371,5,""],[1372,9,""],[1372,0,"upport"],[1380,3,""],[1380,0,"or version 1"],[1408,5,""],[1408,0,"r"],[1410,3,""],[1410,0,"m"],[1412,6,""],[1413,7,""],[1413,0,"e"],[1415,6,""],[1419,0,"some "],[1430,0,"\n#"],[1440,0," of Git, as upstream ha"],[1464,0," all but abandoned it"],[38543,1,""],[38543,0,"2"],[38585,1,""],[38585,0,"2"],[38607,1,""],[38607,0,"1"],[38637,1,""],[38637,0,"2"],[38680,1,""],[38680,0,"1"],[38732,1,""],[38732,0,"2"],[38752,0,"2-8\nendif"],[38769,2,""],[38769,0,"USE"],[38781,4,""],[38801,2,""],[38801,0,"USE"],[38813,4,""],[38814,6,""],[38814,0,"\tEXTLIBS += -lpcr"],[38832,4,""],[38840,3,""],[38840,0,"NO"],[38850,1,""],[38850,0,"1_JIT"],[38875,3,""],[38875,0,"NO"],[38885,1,""],[38885,0,"1_JIT"],[38891,17,""],[38892,3,""],[38892,0,"ndif"]]},{"span":[284565,285707],"parents":[267820,279641,279964,283002,283736,284305],"agent":"Ævar Arnfjörð Bjarmason","seqStart":10590,"ops":[[19414,9,""],[19417,13,""],[19427,2,""],[19430,13,""],[19883,0,"bindir_relative = $(patsubst $(prefix)/%,%,$(bindir))\n"],[20047,0,"gitexecdir_relative = $(patsubst $(prefix)/%,%,$(gitexecdir))\n"],[51517,0,"gitexecdir_relative_SQ = $(subst ','\\'',$(gitexecdir_relative))\n"],[14094,0,"INSTALL_SYMLINKS if you prefer to have everything that can be\n# symlinked between bin/ and libexec/ to use relative symlinks between\n# the two. This option overrides "],[14289,0,"and\n# NO_INSTALL_HARDLINKS which will also use syml"],[14341,0,"nking by indirection\n# within the same directory in some cases, INSTALL_SYMLINKS will\n# always symlink to the "],[14452,0,"inal"],[14457,0,"target directl"],[14472,0,".\n#\n# Define NO_CROSS_DIRECTORY_HARDLINKS if y"],[79476,0,"destdir_from_execdir_SQ=$$(echo '$(gitexecdir_relative_SQ)' | sed -e 's|[^/][^/]*|..|g') && \\\n\t"],[79724,0,"n \"$(INSTALL_SYMLINKS)\" && \\\n\t\tln -s \"$$destdir_from_execdir_SQ/$(bindir_relative_SQ)/$$p\" \"$$execdir/$$p\" || \\\n\t\t{ test -"],[79912,0,"  "],[79967,0,"  "],[80012,0,"} "],[80137,0,"n \"$(INSTALL_SYMLINKS)\" && \\\n\t\tln -s \"git$X\" \"$$bindir/$$p\" || \\\n\t\t{ test -"],[80247,0,"  "],[80303,0,"  "],[80353,0,"  "],[80399,0,"} "],[80480,0,"n \"$(INSTALL_SYMLINKS)\" && \\\n\t\tln -s \"$$destdir_from_execdir_SQ/$(bindir_relative_SQ)/git$X\" \"$$execdir/$$p\" || \\\n\t\t{ test -"],[80639,0,"  "],[80697,0,"  "],[80748,0,"  "],[80796,0,"} "],[80937,0,"n \"$(INSTALL_SYMLINKS)\" && \\\n\t\tln -s \"git-remote-http$X\" \"$$execdir/$$p\" || \\\n\t\t{ test -"],[81060,0,"  "],[81130,0,"  "],[81193,0,"  "],[81253,0,"} "]]},{"span":[285707,286127],"parents":[284305],"agent":"Nguyễn Thái Ngọc Duy","seqStart":3486,"ops":[[18513,0,"#\n# Define DEVELOPER to enable more compiler warnings. Compiler version\n# and family are auto detected, but could be overridden by defining"],[18653,0,"# COMPILER_FEATURES (see config.mak.dev)\n\n"],[18870,33,""],[18871,3,""],[18873,20,""],[18874,70,""],[18875,63,""],[18876,1,""],[35795,6,""],[35795,0,"include"],[35803,22,""],[35803,0,"config.mak.dev"]]},{"span":[286127,286689],"parents":[286126],"agent":"Ævar Arnfjörð Bjarmason","seqStart":11732,"ops":[[18694,0,"#\n# When DEVELOPER is set, DEVOPTS can be used to control compiler\n# options.  This variable contains keywords separated by\n# whitespace. The following keywords are are recognized:\n#\n#    no-error:\n#\n#        suppresses the -Werror that implicitly comes with\n#        DEVELOPER=1. Useful for getting the full set of errors\n#        without immediately dying, or for logging them.\n#\n#    extra-all:\n#\n#        The DEVELOPER mode enables -Wextra with a few exceptions. By\n#        setting this flag the exceptions are removed, and all of\n#        -Wextra is used.\n"]]},{"span":[286689,286723],"parents":[284305],"agent":"Eric Sunshine","seqStart":467,"ops":[[41650,0,"ndef NO_ICONV\n\tif"],[41687,0,"\t"],[41705,0,"\t"],[41746,0,"\t"],[41817,0,"\t"],[41825,0,"\t"],[41840,0,"\t"],[41848,0,"\t"],[41887,0,"\t"],[41910,0,"\t"],[41918,0,"\t"],[41952,0,"\tendif\n"]]},{"span":[286723,286879],"parents":[279641,279964,280952,282892,283736,284248],"agent":"Ævar Arnfjörð Bjarmason","seqStart":10030,"ops":[[69428,0,"LIB_CPAN := $(wildcard perl/FromCPAN/*.pm perl/FromCPAN/*/*.pm)\nLIB_CPAN_GEN := $(patsubst perl/%.pm,perl/build/lib/%.pm,$(LIB_CPAN))\n"],[69600,0,"all:: $(LIB_CPAN_GEN)\n"]]},{"span":[286879,287239],"parents":[286878],"agent":"Todd Zullinger","seqStart":107,"ops":[[12547,0,"NO_PERL_CPAN_FALLBACKS if you do not want to install bundled\n# copies of CPAN modules that serve as a fallback in case the modules\n# are not available on the system. This option is intended for\n# distributions that want to use their packaged versions of Perl\n# modules, instead of the fallbacks shipped with Git.\n#\n# Define "],[69924,0,"ifndef NO_PERL_CPAN_FALLBACKS\n"],[69982,0,"endif\n"]]},{"span":[287239,287384],"parents":[287238],"agent":"Ævar Arnfjörð Bjarmason","seqStart":10186,"ops":[[69982,0,"NO_PERL_CPAN_FALLBACKS_SQ = $(subst ','\\'',$(NO_PERL_CPAN_FALLBACKS))\n"],[70171,0,"\\\n\t    -e 's|@@NO_PERL_CPAN_FALLBACKS@@|$(NO_PERL_CPAN_FALLBACKS_SQ)|g' \\\n\t"]]},{"span":[287384,287407],"parents":[267820,283002,284305,287383],"agent":"Jameson Miller","seqStart":0,"ops":[[29672,0,"m-pool.o\nLIB_OBJS += me"]]},{"span":[287407,290382],"parents":[267820,283002,284305,287383],"agent":"Nguyễn Thái Ngọc Duy","seqStart":3906,"ops":[[21330,0,"BUILTINS_OBJS =\nTEST_"],[26139,0,"tool\nTEST_PROGRAMS_NEED_X += test-"],[62802,0," $(patsubst %,t/helper/%,$(TEST_BUILTINS_OBJS))"],[76312,0,"tool$X: $(patsubst %,t/helper/%,$(TEST_BUILTINS_OBJS))\n\nt/helper/test-"],[24533,9,""],[24533,0,"BUILTI"],[24540,3,""],[24540,0,"S"],[24542,1,""],[24542,0,"OBJS"],[24562,0,".o\nTEST_BUILTINS_OBJS += test-sha1.o\n"],[25825,27,""],[25826,7,""],[76554,4,""],[76554,0,"tool"],[24592,0,"lazy-init-name-hash.o\nTEST_BUILTINS_OBJS += test-"],[25217,49,""],[24592,0,"config.o\nTEST_BUILTINS_OBJS += test-"],[24719,36,""],[24628,0,"ctype.o\nTEST_BUILTINS_OBJS += test-"],[24719,35,""],[24663,0,"date.o\nTEST_BUILTINS_OBJS += test-"],[24753,34,""],[24697,0,"delta.o\nTEST_BUILTINS_OBJS += test-"],[24788,35,""],[24732,0,"drop-caches.o\nTEST_BUILTINS_OBJS += test-"],[24829,41,""],[24773,0,"dump-cache-tree.o\nTEST_BUILTINS_OBJS += test-"],[24874,45,""],[24818,0,"dump-split-index.o\nTEST_BUILTINS_OBJS += test-"],[24964,46,""],[24864,0,"example-decorate.o\nTEST_BUILTINS_OBJS += test-"],[25059,46,""],[24910,0,"genrandom.o\nTEST_BUILTINS_OBJS += test-"],[25137,39,""],[24949,0,"hashmap.o\nTEST_BUILTINS_OBJS += test-"],[25174,37,""],[24986,0,"index-version.o\nTEST_BUILTINS_OBJS += test-"],[25217,43,""],[25078,0,"match-trees.o\nTEST_BUILTINS_OBJS += test-"],[25299,41,""],[25119,0,"mergesort.o\nTEST_BUILTINS_OBJS += test-"],[25338,39,""],[25158,0,"mktemp.o\nTEST_BUILTINS_OBJS += test-"],[25374,36,""],[25194,0,"online-cpus.o\nTEST_BUILTINS_OBJS += test-"],[25415,41,""],[25235,0,"path-utils.o\nTEST_BUILTINS_OBJS += test-"],[25497,40,""],[25275,0,"prio-queue.o\nTEST_BUILTINS_OBJS += test-"],[25538,40,""],[25315,0,"read-cache.o\nTEST_BUILTINS_OBJS += test-"],[25578,40,""],[25355,0,"ref-store.o\nTEST_BUILTINS_OBJS += test-"],[25657,39,""],[25394,0,"regex.o\nTEST_BUILTINS_OBJS += test-"],[25693,35,""],[25429,0,"revision-walking.o\nTEST_BUILTINS_OBJS += test-"],[25739,46,""],[25475,0,"run-command.o\nTEST_BUILTINS_OBJS += test-"],[25780,41,""],[25517,0,"crap-cache-tree.o\nTEST_BUILTINS_OBJS += test-s"],[25825,46,""],[25566,0,"-array.o\nTEST_BUILTINS_OBJS += test-sha1"],[25866,40,""],[25609,0,"TEST_BUILTINS_OBJS += test-sigchain.o\n"],[25904,38,""],[25647,0,"TEST_BUILTINS_OBJS += test-strcmp-offset.o\n"],[25947,43,""],[25690,0,"TEST_BUILTINS_OBJS += test-string-list.o\n"],[25988,41,""],[25731,0,"TEST_BUILTINS_OBJS += test-submodule-config.o\n"],[26034,46,""],[25777,0,"TEST_BUILTINS_OBJS += test-subprocess.o\n"],[26074,40,""],[25817,0,"TEST_BUILTINS_OBJS += test-urlmatch-normalization.o\n"],[26196,52,""],[25869,0,"TEST_BUILTINS_OBJS += test-wildmatch.o\n"],[26235,39,""],[25908,0,"TEST_BUILTINS_OBJS += test-write-cache.o\n"],[26165,41,""]]},{"span":[290382,290406],"parents":[284564,285706,290381],"agent":"Stefan Beller","seqStart":104,"ops":[[32451,1,""],[32451,0,"-"],[32454,1,""],[32454,0,"-"],[29606,1,""],[29606,0,"-"],[65100,1,""],[65100,0,"-"],[65112,1,""],[65112,0,"-"],[65123,1,""],[65123,0,"-"],[65146,1,""],[65146,0,"-"],[65158,1,""],[65158,0,"-"],[65169,1,""],[65169,0,"-"],[31639,1,""],[31639,0,"-"],[31615,1,""],[31615,0,"-"],[31322,1,""],[31322,0,"-"]]},{"span":[290406,294517],"parents":[284564,285706,290381],"agent":"Dan Jacques","seqStart":0,"ops":[[60102,6,""],[60103,1,""],[60103,0,"ERL"],[60107,1,""],[60107,0,"H"],[60109,0,"ADE"],[60113,0,"_TEMP"],[60119,0,"ATE = perl/header_templates/fixed"],[60153,6,""],[60153,0,"prefix.template.pl"],[60240,0,"\n"],[60293,0,"PERL-HEADER GIT-"],[60346,133,""],[60347,21,""],[60421,55,""],[60421,0,"r"],[60425,0,"-"],[60429,1,""],[60430,19,""],[60430,0,"-HEA"],[60435,1,""],[60435,0,"E"],[60437,7,""],[60451,16,""],[60451,0,"G"],[60763,0,"GIT-PERL-HEADER: $(PERL_HEADER_TEMPLATE) GIT-PERL-DEFINES Makefile\n\t$(QUIET_GEN)$(RM) $@ && \\\n\tINSTLIBDIR='$(perllibdir_SQ)' && \\\n\tINSTLIBDIR_EXTRA='$(PERLLIB_EXTRA_SQ)' && \\"],[60938,0,"\tINSTLIBDIR=\"$$INSTLIBDIR$${INSTLIBDIR_EXTRA:+:$$INSTLIBDIR_EXTRA}\" && \\\n\tsed -e 's=@@PATHSEP@@=$(pathsep)=g' \\\n\t    -e 's=@@INSTLIBDIR@@='$$INSTLIBDIR'=g' \\\n\t    -e 's=@@PERLLIBDIR@@='$(perllibdir_SQ)'=g' \\\n\t    $< >$@+ && \\\n\tmv $@+ $@\n\n"],[86450,0,"ERL-HEADER GIT-P"],[19129,0,"#"],[19131,0,"# Define RUNTIME_PREFIX to configure "],[19169,0,"it to resolve its ancillary tooling and\n# support files relative to the location of the runtime binary, rather than\n# hard-coding them into the binary. Git installations built with RUNTIME_PREF"],[19363,0,"X\n# can be moved to arbitrary filesystem locations. RUN"],[19419,0,"IME_PREFIX also causes\n# Perl scripts to use a modified entry point header allowing them to resolve\n# support files at runtime.\n\nGIT"],[20495,0,"  localedir\n#   perllibdir\n# "],[21300,0,"localedir_relative = $(patsubst $(prefix)/%,%,$(localedir))\n"],[21416,0,"perllibdir_relative = $(patsubst $(prefix)/%,%,$(perllibdir))\n"],[52840,0,"localedir_relative_SQ = $(subst ','\\'',$(localedir_relative))\n"],[53158,0,"perllibdir_relative_SQ = $(subst ','\\'',$(perllibdir_relative))\n"],[53596,0,"RUNTIME_PREFIX's resolution logic requires resource paths to be expressed\n# relative to each other and share an installation path.\n#\n# This is a dependency in:\n# - Git's binary RUNTIME_PREFIX logic in (see \"exec_cmd.c\").\n# - The runtime prefix Perl header (see\n#   \"perl/header_templates/runtime_prefix.template.pl\").\nifdef RUNTIME_PREFIX\n\nifneq ($(filter /%,$(firstword $(gitexecdir_relative))),)\n$(error RUNTIME_PREFIX requires a relative gitexecdir, not: $(gitexecdir))\nendif\n\nifneq ($(filter /%,$(firstword $(localedir_relative))),)\n$(error RUNTIME_PREFIX requires a relative localedir, not: $(localedir))\nendif\n\nifndef NO_PERL\nifneq ($(filter /%,$(firstword $(perllibdir_relative))),)\n$(error RUNTIME_PREFIX requires a relative perllibdir, not: $(perllibdir))\nendif\nendif\n\nendif\n\n# "],[61569,0,"# Used for substitution in Perl modules. Disabled when using RUNTIME_PREFIX\n# since the locale directory is injected.\nperl_localedir_SQ = $(localedir_SQ)\n\n"],[61878,0,"PERL_DEFINES := $(PERL_PATH_SQ) $(PERLLIB_EXTRA_SQ) $(perllibdir_SQ)\nPERL_DEFINES += $(RUNTIME_PREFIX)\n\n# Support Perl runtime prefix. In this mode, a different header is installed\n# into Perl scripts.\nifdef RUNTIME_PREFIX\n\nPERL_HEADER_TEMPLATE = perl/header_templates/runtime_prefix.template.pl\n\n# Don't export a fixed $(localedir) path; it will be resolved by the Perl header\n# at runtime.\nperl_localedir_SQ =\n\nendif\n\nPERL_DEFINES += $(gitexecdir) $(perllibdir) $(localedir)\n\n"],[62681,0,"PERL_DEFINES := $(subst $(space),:,$(PERL_DEFINES))\n"],[63318,0,"-e 's=@@PERLLIBDIR_REL@@=$(perllibdir_relative_SQ)=g' \\\n\t    -e 's=@@GITEXECDIR_REL@@=$(gitexecdir_relative_SQ)=g' \\\n\t    -e 's=@@LOCALEDIR_REL@@="],[63465,0,"(localedir_relative_SQ)=g' \\\n\t    $"],[73524,0,"perl_"],[19547,0,"#\n# When using RUNTIME_PREFIX, define HAVE_BSD_KERN_PROC_SYSCTL if your platform\n# supports the KERN_PROC BSD sysctl function.\n#\n# When using RUNTIME_PREFIX, define PROCFS_EXECUTABLE_PATH if your platform\n# mounts a \"procfs\" filesystem capable of resolving the path of the current\n# executable. If defined, this must be the canonical path for the \"procfs\"\n# current executable path.\n#\n# When using RUNTIME_PREFIX, define HAVE_NS_GET_EXECUTABLE_PATH if your platform"],[20013,0,"# supports calling _NS"],[20036,0,"etExecutablePath to retrieve the path of the running\n# executable.\n\nG"],[51222,0,"BSD_KERN_PROC_SYSCTL\n\tBASIC_CFLAGS += -DHAVE_BSD_KERN_PROC_SYSCTL\nendif\n\nifdef HAVE_"],[51357,0,"n"],[51364,0,"PROCFS_EXECUTABLE_PA"],[51385,0,"H),)\n\tprocfs_executable_path_SQ = $(subst ','\\'',$(PROCFS_EXE"],[51447,0,"UTAB"],[51452,0,"E_PA"],[51457,0,"H))\n\tBASIC_CFLAGS += '-DPROCFS_EXECUTABLE_PATH=\"$(procfs_executable_path_SQ)\"'\nendif\n\nifdef HAVE_NS_GET_EXECUTABLE_PATH\n\tBASIC_CFLAGS += -DHAVE_NS_GET_EXECUTABLE_PATH\nendif\n\nifeq ($(TCLT"],[68737,0,"GIT_LOCALE_PATH=\"$(localedir_relative_SQ)\"' \\\n\t'-D"],[69426,0,"relative_"]]},{"span":[294517,294769],"parents":[294516],"agent":"Johannes Schindelin","seqStart":6263,"ops":[[20103,0,"#\n# When using RUNTIME_PREFIX, define HAVE_WPGMPTR if your platform offers\n# the global variable _wpgmptr containing the absolute path of the current\n# executable (this is the case on Windows).\n"],[51827,0,"def HAVE_WPGMPTR\n\tBASIC_CFLAGS += -DHAVE_WPGMPTR\nendif\n\nif"]]},{"span":[294769,294825],"parents":[294768],"agent":"Jonathan Nieder","seqStart":18232,"ops":[[64454,50,""],[64393,1,""],[64393,0,"\""],[64411,1,""],[64423,1,""],[64425,1,""],[64425,0,"\""]]},{"span":[294825,294826],"parents":[294824],"agent":"Alejandro R. Sedeño","seqStart":14,"ops":[[63705,0," "]]},{"span":[294826,294843],"parents":[294768],"agent":"Philip Oakley","seqStart":0,"ops":[[69077,0,"FALLBACK_RUNTIME_"]]},{"span":[294843,295418],"parents":[284564,285706,290381],"agent":"Nguyễn Thái Ngọc Duy","seqStart":6881,"ops":[[28207,0," command-list.h"],[58572,0,"COMMON "],[58598,0,"command-list.h: generate-cmdlist.sh command-list.txt\n\ncommand-list.h: $(wildcard Documentation/git-*.txt)\n\t$(QUIET_GEN)$(SHELL_PATH) ./generate-cmdlist.sh command-list.txt >$@+ && mv $@+ $@\n\n"],[65170,0," or command-list.h"],[77683,0," command-list.h"],[85876,0,"command-list.h "],[57690,0," command-list.h"],[57768,0,"command-list.h "],[28198,14,""],[57662,14,""],[57730,14,""],[58390,35,""],[58401,4,""],[58402,13,""],[58405,11,""],[58406,14,""],[58407,40,""],[58442,25,""],[58460,54,""],[64947,12,""],[64948,2,""],[64949,3,""],[77448,5,""],[77449,9,""],[85621,6,""],[85622,8,""],[58488,1,""]]},{"span":[295418,295432],"parents":[280908,284564,285706,290381],"agent":"Junio C Hamano","seqStart":67135,"ops":[[26634,7,""],[26665,0,"kt-line"]]},{"span":[295432,295459],"parents":[267820,283002,284305,287383],"agent":"Jeff King","seqStart":31930,"ops":[[28192,0,"dir-notify.o\nLIB_OBJS += ch"]]},{"span":[295459,295548],"parents":[287406,290405,295458],"agent":"Alban Gruin","seqStart":0,"ops":[[22756,0,"preserve-"],[22770,0,"s"],[22790,0,"reba"],[22795,0,"e--merge\nSCRIPT_LIB += git-s"],[68908,0,"rebase--preserve-merges.sh\nLOCALIZED_SH += git-"]]},{"span":[295548,295562],"parents":[280908,287406,290405,295458],"agent":"Junio C Hamano","seqStart":67149,"ops":[[26634,7,""],[26665,0,"kt-line"]]},{"span":[295562,295576],"parents":[280908,287406,290405,295458],"agent":"Junio C Hamano","seqStart":67163,"ops":[[26634,7,""],[26665,0,"kt-line"]]},{"span":[295576,295691],"parents":[283059,294824,295575],"agent":"Junio C Hamano","seqStart":67177,"ops":[[64294,57,""],[64844,0,"perllibdir\nperllibdir:\n\t@echo '$(perllibdir_SQ)'\n\n.PHONY: "]]},{"span":[295691,295757],"parents":[267820,283002,284305,287383],"agent":"Jeff King","seqStart":31957,"ops":[[24324,29,""],[35101,0,"index.o\nBUILTIN_OBJS += builtin/show-"]]},{"span":[295757,295823],"parents":[279641,279964,280952,282892,283736,284248],"agent":"Derrick Stolee","seqStart":0,"ops":[[32436,0,"mmit-graph.o\nBUILTIN_OBJS += builtin/co"],[27981,0,"mit-graph.o\nLIB_OBJS += com"]]},{"span":[295823,297309],"parents":[286688,295690,295822],"agent":"Junio C Hamano","seqStart":67292,"ops":[[19130,139,""],[19164,87,""],[19165,72,""],[19166,2,""],[19167,1,""],[19168,442,""],[20297,0,"#\n# Define DEVELOPER to enable more compiler warnings. Compiler version\n# and family are auto detected, but could be overridden by defining\n# COMPILER_FEATURES (see config.mak.dev)\n#\n# When DEVELOPER is set, DEVOPTS can be used to control compiler\n# options.  This variable contains keywords separated by\n# whitespace. The following keywords are are recognized:\n#\n#    no-error:\n#\n#        suppresses the -Werror that implicitly comes with\n#        DEVELOPER=1. Useful for getting the full set of errors\n#        without immediately dying, or for logging them.\n#\n#    extra-all:\n#\n#        The DEVELOPER mode enables -Wextra with a few exceptions. By\n#        setting this flag the exceptions are removed, and all of\n#        -Wextra is used.\n"]]},{"span":[297309,297316],"parents":[294842,295431,297308],"agent":"Junio C Hamano","seqStart":68778,"ops":[[28544,7,""]]},{"span":[297316,297341],"parents":[295417,297315],"agent":"Nguyễn Thái Ngọc Duy","seqStart":7456,"ops":[[61952,0," Documentation/config.txt"]]},{"span":[297341,297348],"parents":[295561,297315],"agent":"Junio C Hamano","seqStart":68785,"ops":[[28544,7,""]]},{"span":[297348,297370],"parents":[294842,297308],"agent":"Brandon Williams","seqStart":331,"ops":[[33251,0,"spec.o\nLIB_OBJS += ref"]]},{"span":[297370,297437],"parents":[295417,297347,297369],"agent":"Jeff Hostetler","seqStart":209,"ops":[[27370,0,"json-writer.o\nTEST_BUILTINS_OBJS += test-"],[31864,0,"json-writer.o\nLIB_OBJS += "]]},{"span":[297437,297535],"parents":[295417,297347,297369],"agent":"Jonathan Tan","seqStart":117,"ops":[[31566,0,"negotiator.o\nLIB_OBJS += fetch-"],[32361,0,"egotiator/default.o\nLIB_OBJS += negotiator/skipping.o\nLIB_OBJS += n"]]},{"span":[297535,297636],"parents":[286722,295417,297347,297369],"agent":"Derrick Stolee","seqStart":66,"ops":[[36759,0,"ulti-pack-index.o\nBUILTIN_OBJS += builtin/m"],[32305,0,"midx.o\nLIB_OBJS += "],[27698,0,"ad-midx.o\nTEST_BUILTINS_OBJS += test-re"]]},{"span":[297636,297684],"parents":[286722,295417,297347,297369],"agent":"Jeff Hostetler","seqStart":276,"ops":[[28277,0,"indows-named-pipe.o\nTEST_BUILTINS_OBJS += test-w"]]},{"span":[297684,297833],"parents":[286722,295417,297347,297369],"agent":"Beat Bolli","seqStart":0,"ops":[[21040,0,"#\n#    pedantic:\n#\n#        Enable -pedantic compilation. This also disables\n#        USE_PARENS_AROUND_GETTEXT_N to produce only relevant warnings.\n"]]},{"span":[297833,298062],"parents":[280656,286722,294825,295417,295547,295756,297347,297369],"agent":"Alban Gruin","seqStart":89,"ops":[[33095,0,"base-interactive.o\nLIB_OBJS += re"],[37228,0,"interactive2.o\nBUILTIN_OBJS += builtin/rebase--"],[24590,38,""],[37190,3,""],[37190,0,"h"],[37192,6,""],[37192,0,"lp"],[37195,1,""],[37195,0,"r"],[37231,1,""],[37231,0,"int"],[37235,2,""],[37235,0,"ractiv"],[37242,1,""],[73548,24,""],[73549,19,""],[37190,41,""]]},{"span":[298062,298086],"parents":[280656,286722,294825,295417,295547,295756,297347,297369],"agent":"Eric Sunshine","seqStart":501,"ops":[[31836,0,"interdiff.o\nLIB_OBJS += "]]},{"span":[298086,298423],"parents":[280656,286722,294825,295417,295547,295756,297347,297369],"agent":"SZEDER Gábor","seqStart":110,"ops":[[82912,0,".PHONY: coccicheck\n\n"],[82840,1,""],[82841,1,""],[82841,0,"dd"],[82845,3,""],[82845,0,"ffix"],[82850,15,""],[82480,0,"ifdef DC_SHA1_SUBMODULE\nCOCCI_SOURCES = $(filter-out sha1collisiondetection/%,$(C_SOURCES))\nelse\nCOCCI_SOURCES = $(filter-out sha1dc/"],[82614,0,",$(C_SOURCES))\nendif\n\n%"],[82662,0,"OCCI"],[82726,0,"OCCI"],[23174,0," --patch ."],[90313,0,"occic"],[90323,0,"\n\t$(RM)"],[90331,0,"contrib/coccinelle/*.cocci."],[90359,0,"atch*\n\nclean: p"],[90401,0," cocciclean"],[90862,41,""],[91298,0,"occiclean c"]]},{"span":[298423,298463],"parents":[286722,295417,295547,295756,297347,297369],"agent":"Jonathan Tan","seqStart":215,"ops":[[27785,0,"pository.o\nTEST_BUILTINS_OBJS += test-re"]]},{"span":[298463,298525],"parents":[298462],"agent":"Derrick Stolee","seqStart":167,"ops":[[30848,0,"mit-reach.o\nLIB_OBJS += com"],[27672,0,"ch.o\nTEST_BUILTINS_OBJS += test-rea"]]},{"span":[298525,298598],"parents":[280656,294825,297534,298462],"agent":"Pratik Karki","seqStart":0,"ops":[[24304,0,"legacy-"],[37338,0,".o\nBUILTIN_OBJS += builtin/rebase"],[24597,0,"common\nSCRIPT_LIB += git-rebase--"]]},{"span":[298598,298626],"parents":[280656,294825,297534,298462],"agent":"Jeff King","seqStart":32023,"ops":[[31124,0,"elta-islands.o\nLIB_OBJS += d"]]},{"span":[298626,298720],"parents":[280656,294825,297534,298462],"agent":"Johannes Schindelin","seqStart":6515,"ops":[[31850,0,"linear-assignment.o\nLIB_OBJS += "],[37322,0,"ange-diff.o\nBUILTIN_OBJS += builtin/r"],[33215,0,"ange-diff.o\nLIB_OBJS += r"]]},{"span":[298720,298721],"parents":[297340,297436,297832,298422,298719],"agent":"Nguyễn Thái Ngọc Duy","seqStart":7481,"ops":[[62540,0,"*"]]},{"span":[298721,298779],"parents":[298720],"agent":"Antonio Ospite","seqStart":0,"ops":[[28401,0,"module-nested-repo-config.o\nTEST_BUILTINS_OBJS += test-sub"]]},{"span":[298779,298811],"parents":[298720],"agent":"Ben Peart","seqStart":135,"ops":[[17501,0,"GIT_"],[17508,4,""],[80757,0,"GIT_"],[80764,4,""],[80787,0,"GIT_"],[80794,4,""],[80845,0,"GIT_"],[80852,4,""]]},{"span":[298811,299185],"parents":[297635,298085,298524,298625,298720],"agent":"Ramsay Jones","seqStart":2308,"ops":[[54308,0,"HD"],[54311,0,"      = @echo '   ' HDR $<;\n\tQUIET_R"],[82904,0,"GEN_HDRS := command-list.h unicode-width.h\nEXCEPT_HDRS := $(GEN_HDRS) compat% xdiff%\nCHK_HDRS = $(filter-out $(EXCEPT_HDRS),$(patsubst ./%,%,$(LIB_H)))\nHCO = $(patsubst %.h,%.hco,$(CHK_HDRS))\n\n$(HCO): %.hco: %.h FORCE\n\t$(QUIET_HDR)$(CC) -include git-compat-util.h -I. -o /dev/null -c -xc $<\n\n.PHONY: hdr-check $(HCO)\nhdr-check: $(HCO)\n\n"]]},{"span":[299185,299653],"parents":[298720],"agent":"Nguyễn Thái Ngọc Duy","seqStart":7482,"ops":[[28160,6,""],[28194,0,"-array"],[27377,0,"dump-untracked-cache.o\nTEST_BUILTINS_OBJS += test-"],[28637,50,""],[27880,0,"kt-line.o\nTEST_BUILTINS_OBJS += test-p"],[28797,38,""],[27841,0,"rse-options.o\nTEST_BUILTINS_OBJS += test-pa"],[28797,43,""],[27336,0,"fsmonitor.o\nTEST_BUILTINS_OBJS += test-dump-"],[28718,44,""],[28719,0,"# Do not add more tests here unless they have extra dependencies. Add\n# them in TEST_BUILTINS_OBJS above.\n"]]},{"span":[299653,300201],"parents":[297635,297683,298085,298524,298625,299652],"agent":"brian m. carlson","seqStart":537,"ops":[[27560,0,".o\nTEST_BUILTINS_OBJS += test-hash"],[27627,0,"hash-speed.o\nTEST_BUILTINS_OBJS += test-"],[28554,0,"ha256.o\nTEST_BUILTINS_OBJS += test-s"],[51141,0,"LIB_OBJS += sha256/block/sha256.o\nBASIC_CFLAGS += -DSHA256_BLK\n\n"],[7883,0,"BLK_SHA256 to use the built-in SHA-256 routines.\n#\n# Define GCRYPT_SHA256 to use the SHA-256 routines in libgcrypt.\n#\n# Define "],[51268,0,"ifdef GCRYPT_SHA256\n\tBASIC_CF"],[51298,0,"AGS += -DSHA256_GCRYPT\n\tEXTL"],[51328,0,"S += -lgcrypt\nelse\n\tLIB"],[51382,0,"\t"],[51412,0,"endif\n"],[8010,0,"OPENSSL_SHA256 to use the SHA-256 routines in OpenSSL.\n#\n# Define "],[51340,0,"OPENSSL_SHA256\n\tEXTLIBS += $(LIB_4_CRYPTO)\n\tBASIC_CFLAGS += -DSHA256_OPENSSL\nelse\nifdef "],[51572,0,"endif\n"]]},{"span":[300201,301134],"parents":[297635,297683,298085,298524,298625,298720],"agent":"Josh Steadmon","seqStart":0,"ops":[[23763,0,"FUZZ_OBJS =\nFUZZ_PROGRAMS =\n"],[26589,0,"FUZZ_OBJS += fuzz-pack-headers.o\n\n# Always build fuzz objects even if not testing, to prevent bit-rot.\nall:: $(FUZZ_OBJS)\n\nFUZZ_PROGRAMS += $(patsubst %.o,%,$(FUZZ_OBJS))\n\n"],[69150,0,"$(FUZZ_OBJS) \\\n\t"],[91544,0,"$(FUZZ_PROGRAMS)\n\t$(RM) "],[95138,0,"\n### Fuzz testing\n#\n# Building fuzz targets generally requires a special set of compiler flags that\n# are not necessarily appropriate for general builds, and that vary greatly\n# depending on the compiler version used.\n#\n# An example command to build against libFuzzer from LLVM 4.0.0:\n#\n# make CC=clang CXX=clang++ \\\n#      CFLAGS=\"-fsanitize-coverage=trace-pc-guard -fsanitize=address\" \\\n#      LIB_FUZZING_ENGINE=/usr/lib/llvm-4.0/lib/libFuzzer.a \\\n#      fuzz-all\n#\n.PHONY: fuzz-all\n\n$(FUZZ_PROGRAMS): all\n\t$(QUIET_LINK)$(CXX) $(CFLAGS) $(LIB_OBJS) $(BUILTIN_OBJS) \\\n\t\t$(XDIFF_OBJS) $(EXTLIBS) git.o $@.o $(LIB_FUZZING_ENGINE) -o $@\n\nfuzz-all: $(FUZZ_PROGRAMS)\n"],[26622,0,"FUZZ_OBJS += fuzz-pack-idx.o\n"]]},{"span":[301134,301176],"parents":[301133],"agent":"Josh Steadmon","seqStart":933,"ops":[[95491,0,"FUZZ_"],[95497,0,"XX"],[95643,0,"FUZZ_CXXFLAGS ?= $(CFLAGS)\n\n"],[95734,0,"FUZZ_"],[95740,0,"XX"]]},{"span":[301176,301231],"parents":[298810,299184,299652,301133],"agent":"Nguyễn Thái Ngọc Duy","seqStart":7950,"ops":[[34981,0,"hread-utils.o\nLIB_OBJS += t"],[52033,28,""]]},{"span":[301231,301258],"parents":[298810,299184,299652,301133],"agent":"Nguyễn Thái Ngọc Duy","seqStart":8005,"ops":[[63187,0," Documentation/config/*.txt"]]},{"span":[301258,301393],"parents":[298061,298597,298778,301257],"agent":"Đoàn Trần Công Danh","seqStart":0,"ops":[[8918,0,"POLL_H if you don't have poll.h.\n#\n# Define NO_"],[9096,0,"POLL_H and NO_"],[47360,0,"POLL_H = YesPlease\n\tNO_"],[48284,0,"POLL_H\n\tBASIC_CFLAGS += -DNO_POLL_H\nendif\nifdef NO_"]]},{"span":[301393,301417],"parents":[298061,298597,298778,301257],"agent":"Johannes Schindelin","seqStart":6620,"ops":[[80161,0,"\t@echo X=\\'$(X)\\' >>$@+\n"]]},{"span":[301417,302025],"parents":[298061,298597,298810,299184,299652,301133],"agent":"James Knight","seqStart":0,"ops":[[2721,0,"CURL_LDFLAGS to specify flags that you need to link when using libcurl,\n# if you do not want to rely on the libraries provided by CURL_CONFIG.  The\n# default value is a result of `curl-config --libs`.  An example value for\n# CURL_LDFLAGS is as follows:\n#\n#     CURL_LDFLAGS=-lcurl\n#\n# Define "],[8319,65,""],[8320,60,""],[8321,6,""],[8323,15,""],[43761,7,""],[43784,7,""],[43792,1,""],[43792,0,"\n"],[43799,15,""],[43803,0,"_LDFLAGS"],[43812,1,""],[43829,20,""],[43829,0,"$("],[43832,0,"U"],[43834,4,""],[43834,0,"L"],[43836,5,""],[43836,0,"LDFLAG"],[43843,2,""],[43843,0,")"],[43845,2,""],[43845,0,"else\n"],[43867,1,""],[43867,0,"$(shel"],[43874,28,""],[43875,15,""],[43875,0,"$("],[43881,3,""],[43881,0,"_"],[43883,5,""],[43883,0,"ONF"],[43887,8,""],[43887,0,"G)"],[43891,0,"-"],[43894,2,""],[43894,0,"bs)"],[43898,1,""]]},{"span":[302025,302485],"parents":[298061,298597,298810,299184,299652,301133],"agent":"Ævar Arnfjörð Bjarmason","seqStart":12294,"ops":[[15723,269,""],[46826,3,""],[46826,0,"$(error The GETTEXT_POI"],[46850,0,"ON option has been removed in favor of runtime G"],[46899,1,""],[46899,0,"T"],[46901,5,""],[46901,0,"TE"],[46904,6,""],[46904,0,"T_"],[46920,0,". See t/README!)"],[80384,27,""],[80391,57,""]]},{"span":[302485,302495],"parents":[302484],"agent":"Junio C Hamano","seqStart":68792,"ops":[[46828,1,""],[46828,0,"wa"],[46831,3,""],[46831,0,"ning"]]},{"span":[302495,302506],"parents":[298061,298597,298810,299184,299652,301133],"agent":"Johannes Schindelin","seqStart":6609,"ops":[[64546,0," GIT-PREFIX"]]},{"span":[302506,302675],"parents":[298061,298597,298810,299184,299652,301133],"agent":"SZEDER Gábor","seqStart":447,"ops":[[84525,0,"filter-out %.pending.cocci,$("],[84591,0,")"],[84594,0,"# See contrib/coccinelle/README\ncoccicheck-pending: $(addsuffix .patch,$(wildcard contrib/coccinelle/*.pending.cocci))\n\n"],[84732,0," coccicheck-pending"]]},{"span":[302675,302736],"parents":[301175,301230,301392,301416,302024,302494,302505,302674],"agent":"Ramsay Jones","seqStart":2682,"ops":[[83451,0,"/"],[83459,0,"/"],[83462,0,"ifndef GCRYPT_SHA256\n\tEXCEPT_HDRS += sha256/gcrypt.h\nendif\n"]]},{"span":[302736,302911],"parents":[301175,301230,301392,301416,302024,302494,302505,302674],"agent":"Duy Nguyen","seqStart":0,"ops":[[18501,0,"FILENO_IS_A_MACRO if fileno() is a macro, not a real function.\n#\n# Define "],[54067,0,"def FILENO_IS_A_MACRO\n\tCOMPAT_CFLAGS += -DFILENO_IS_A_MACRO\n\tCOMPAT_OBJS += compat/fileno.o\nendif\n\nif"]]},{"span":[302911,303078],"parents":[301175,301230,301392,301416,302024,302494,302505,302674],"agent":"Ramsay Jones","seqStart":2743,"ops":[[23217,0,"# user customisation variable for 'sparse' target\n"],[23280,0,"?"],[23283,0,"# internal/platform customisation variable for 'sparse'\n"],[23341,0,"_EXTRA_FL"],[23351,0,"GS =\n\nSPA"],[72149,1,""],[72149,0,"_EXT"],[72154,2,""],[72154,0,"A"],[72214,3,""],[72214,0,"_"],[72216,0,"XTRA"],[72628,3,""],[72628,0,"_"],[72630,0,"XTRA"],[83459,0,"(SP_EXTRA_FLAGS) $"]]},{"span":[303078,303110],"parents":[301175,301230,301392,301416,302024,302494,302505,302674],"agent":"Elijah Newren","seqStart":0,"ops":[[24789,32,""]]},{"span":[303110,303150],"parents":[301175,301230,301392,301416,302024,302494,302505,302674],"agent":"Joel Teichroeb","seqStart":0,"ops":[[39038,0,"ash--helper.o\nBUILTIN_OBJS += builtin/st"]]},{"span":[303150,303184],"parents":[303149],"agent":"Paul-Sebastian Ungureanu","seqStart":0,"ops":[[24532,26,""],[39015,8,""]]},{"span":[303184,303217],"parents":[303183],"agent":"Johannes Schindelin","seqStart":6644,"ops":[[24463,0,"legacy-stash.sh\nSCRIPT_SH += git-"]]},{"span":[303217,303257],"parents":[301175,301230,301392,301416,302024,302494,302505,302674],"agent":"Josh Steadmon","seqStart":975,"ops":[[26547,0,"commit-graph.o\nFUZZ_OBJS += fuzz-"],[96245,5,""],[96246,2,""]]},{"span":[303257,303463],"parents":[301175,301230,301392,301416,302024,302494,302505,302674],"agent":"Derrick Stolee","seqStart":229,"ops":[[95433,0,"prove: coverage-clean-results coverage-compile\n\t$(MAKE) CFLAGS=\"$(COVERAGE_CFLAGS)\" LDFLAGS=\"$(COVERAGE_LDFLAGS)\" \\\n\t\tDEFAULT_TEST_TARGET=prove GIT_PROVE_OPTS=\"$(GIT_PROVE_OPTS) -j1\" \\\n\t\t-j1 test\n\ncoverage-"]]},{"span":[303463,303942],"parents":[301175,301230,301392,301416,302024,302494,302505,302674],"agent":"Johannes Schindelin","seqStart":6677,"ops":[[28966,0,"xml-encode.o\nTEST_BUILTINS_OBJS += test-"],[91073,0,"artifacts-tar:: $(ALL_PROGRAMS) $(SCRIPT_LIB) $(BUILT_INS) $(OTHER_PROGRAMS) \\\n\t\tGIT-BUILD-OPTIONS $(TEST_PROGRAMS) $(test_bindir_programs) \\\n\t\t$(NO_INSTALL) $(MOFILES)\n\t$(QUIET_SUBDIR0)templates $(QUIET_SUBDIR1) \\\n\t\tSHELL_PATH='$(SHELL_PATH_SQ)' PERL_PATH='$(PERL_PATH_SQ)'\n\ttest -n \"$(ARTIFACTS_DIRECTORY)\"\n\tmkdir -p \"$(ARTIFACTS_DIRECTORY)\"\n\t$(TAR) czf \"$(ARTIFACTS_DIRECTORY)/artifacts.tar.gz\" $^ templates/blt/\n.PHONY: artifacts-tar\n\n"]]},{"span":[303942,304174],"parents":[300200,303077,303109,303256,303462,303941],"agent":"brian m. carlson","seqStart":1085,"ops":[[10877,0,"ICONV_OMITS_BOM if your iconv implementation does not write a\n# byte-order mark (BOM) when writing UTF-16 or UTF-32 and always writes in\n# big-endian format.\n#\n# Define "],[46679,0,"ICONV_OMITS_BOM\n\tBASIC_CFLAGS += -DICONV_OMITS_BOM\nendif\nifdef "]]},{"span":[304174,304212],"parents":[302910,304173],"agent":"Johannes Schindelin","seqStart":7156,"ops":[[28287,0,"genzeros.o\nTEST_BUILTINS_OBJS += test-"]]},{"span":[304212,304595],"parents":[304211],"agent":"Jeff Hostetler","seqStart":324,"ops":[[35836,0,"ce2.o\nLIB_OBJS += trace2/tr2_cfg.o\nLIB_OBJS += trace2/tr2_cmd_name.o\nLIB_OBJS += trace2/tr2_dst.o\nLIB_OBJS += trace2/tr2_s"],[35959,0,"d.o\nLIB_OBJS += trace2/tr2_tbuf.o\nLIB_OBJS += trace2/tr2_tgt_event.o\nLIB_OBJS += trace2/tr2_tgt_norma"],[36061,0,".o\nLIB_OBJS += trac"],[36081,0,"2/t"],[36085,0,"2_tgt_perf"],[36113,0,"ce2/tr2_tls.o\nLIB_OBJS += trailer.o\nLIB_OBJS += tra"],[50932,1,""],[50953,0,"BASIC_CFLAGS += -DNO_UNIX_SOCKETS\nelse\n\t"],[29624,0,"trace2.o\nTEST_BUILTINS_OBJS += test-"]]},{"span":[304595,306227],"parents":[304211],"agent":"Ævar Arnfjörð Bjarmason","seqStart":12754,"ops":[[23875,198,""],[21816,15,""],[23594,0,"TRIP = strip\nS"],[21723,1,""],[21815,0,"ARFLAGS = rcs\n"],[21832,2,""],[21832,0,"S"],[21834,1,""],[21835,1,""],[21836,10,""],[21836,0,"ou"],[21839,2,""],[21840,1,""],[21840,0,"d"],[21842,2,""],[21842,0,"f"],[21844,2,""],[21844,0,"ult"],[21848,2,""],[21848,0,"conf"],[21853,4,""],[21854,7,""],[21854,0,"u"],[21857,2,""],[21857,0,"t"],[21859,4,""],[21859,0,"o"],[21861,5,""],[21863,13,""],[21863,0,"#"],[21865,1,""],[23333,0,"# Set our default programs\n"],[23828,41,""],[23544,25,""],[23626,0,"Set our default LIBS variables\nPTHREAD_LIBS = -lpthread\n\n# "],[21651,17,""],[21652,11,""],[21653,24,""],[21654,2,""],[21655,1,""],[21656,126,""],[23355,12,""],[23356,5,""],[23486,5,""],[23487,143,""],[23488,14,""],[23489,7,""],[23490,48,""],[40001,0,"# Set CFLAGS, LDFLAGS and other *FLAGS variables. These might be\n# tweaked by config.* below as well as the command-line, both of\n# which'll override these defaults.\nCFLAGS = -g -O2 -Wall\nLDFLAGS =\nBASIC_CFLAGS = -I.\nBASIC_LDFLAGS =\n\n# library flags\nARFLAGS = rcs\nPTHREAD_CFLAGS =\n\n# For the 'sparse' target\nSPARSE_FLAGS ?=\nSP_EXTRA_FLAGS =\n\n# For the 'coccicheck' target\nSPATCH_FLAGS = --all-includes --patch .\n\n"],[40534,0,"ALL_CFLAGS = $(CPPFLAGS) $(CFLAGS)\nALL_LDFLAGS = $(LDFLAGS)\n\n"],[20851,0,". You can still set\n# CFLAGS=\"...\" in combination with DEVELOPER enables, whether that's\n# for tweaking something unrelated (e.g. optimization level), or for"],[21010,0," selectively overriding something DEVELOPER or one of the DEVOPTS\n# (see just below) brings in.\n#"],[40803,0,"DEVELOPER_CFLAGS) $("]]},{"span":[306227,306306],"parents":[304211],"agent":"Johannes Schindelin","seqStart":7194,"ops":[[31554,0,":"],[31565,0,"git ls-files '*.h' ':!t/' ':!Documentation/' 2>/dev/null || \\\n\t"],[72306,0," $(GENERATED_H)"]]},{"span":[306306,306359],"parents":[302735,304594,306305],"agent":"Nguyễn Thái Ngọc Duy","seqStart":8032,"ops":[[30640,0,"switch$X\nBUILT_INS += git-"],[30565,0,"restore$X\nBUILT_INS += git-"]]},{"span":[306359,306405],"parents":[302735,304594,306305],"agent":"Phillip Wood","seqStart":0,"ops":[[39492,46,""]]},{"span":[306405,306439],"parents":[302735,304594,306305],"agent":"Ævar Arnfjörð Bjarmason","seqStart":14386,"ops":[[24990,34,""]]},{"span":[306439,306471],"parents":[302735,304594,306226,306305],"agent":"Jeff Hostetler","seqStart":707,"ops":[[35716,0,"sysenv.o\nLIB_OBJS += trace2/tr2_"]]},{"span":[306471,306517],"parents":[304211],"agent":"Jeff King","seqStart":32051,"ops":[[41078,0,"BASIC_CFLAGS += -DSHA1DC_FORCE_ALIGNED_ACCESS\n"]]},{"span":[306517,306592],"parents":[304211],"agent":"Johannes Schindelin","seqStart":7273,"ops":[[95728,14,""],[95728,0,"^"],[95595,0,"/guide$$/d' \\\n\t\t    -e '"],[95035,0,"patsubst %$X,%,$("],[95065,0,")"],[95856,0,"patsubst %$X,%,$("],[95886,0,")"]]},{"span":[306592,307701],"parents":[306591],"agent":"Johannes Schindelin","seqStart":7348,"ops":[[25026,35,""],[25625,34,""],[25816,196,""],[26232,1,""],[26232,0,"GE"],[26235,1,""],[26324,1,""],[26324,0,"GE"],[26327,1,""],[26420,1,""],[26420,0,"GE"],[26423,1,""],[26698,1,""],[26698,0,"GE"],[26701,1,""],[26722,1,""],[26722,0,"GE"],[26725,1,""],[26748,1,""],[26748,0,"GE"],[26751,1,""],[83089,20,""],[92077,14,""],[93593,10,""],[93594,4,""],[24327,0,"EXCLUDED_PROGRAMS =\n"],[43959,0,"\tEXCLUDED_PROGRAMS += git-http-f"],[43992,0,"tch git-http-push\ne"],[44795,0,"lse\n\t\t\tEXCLUDED_PROGRAMS += git-http-push\n\t\te"],[44847,0,"lse\n\t\tEXCLUDED_PROGRAMS += git-http-push\n\te"],[50520,1,""],[50541,0,"EXCLUDED_PROGRAMS += git-credential-cache git-credential-cache--daemon\nelse\n\t"],[64530,0,"\\\n\t\t$(patsubst %,--exclude-program %,$(EXCLUDED_PROGRAMS)) \\\n\t\t"],[95871,0," $(EXCLUDED_PROGRAMS)"],[75173,0,"Documentation/GIT-EXCLUDED-PROGRAMS: FORCE\n\t@EXCLUDED='EXCLUDED_PROGRAMS := $(EXCLUDED_PROGRAMS)'; \\\n\t    if test x\"$$EXCLUDED\" != \\\n\t\tx\"`cat Documentation/GIT-EXCLUDED-PROGRAMS 2>/dev/null`\" ; then \\\n\t\techo >&2 \"    * new documentation flags\"; \\\n\t\techo \"$$EXCLUDED\" >Documentation/GIT-EXCLUDED-PROGRAMS; \\\n            fi\n\n"],[94553,0,"\t$(RM) Documentation/GIT-EXCLUDED-PROGRAMS\n"],[95618,0,"git-legacy-* | "],[29004,0,"erve-v2.o\nTEST_BUILTINS_OBJS += test-s"],[39375,32,""]]},{"span":[307701,307709],"parents":[303216,306226,306438,306516,306591],"agent":"Junio C Hamano","seqStart":68802,"ops":[[31199,0,"ort $(s"],[31384,0,")"]]},{"span":[307709,308150],"parents":[303216,306226,306438,306516,306591],"agent":"Jeff King","seqStart":32097,"ops":[[41037,0,"; setting SPATCH_BATCH_SIZE higher will"],[41077,0,"# usually result in less CPU usage at the cost of higher peak memory.\n"],[41187,0,"SPATCH_BATCH_SIZE = 1\n"],[86258,10,""],[86258,0,"i"],[86260,2,""],[86261,1,""],[86261,0,"!"],[86263,2,""],[86263,0,"echo"],[86284,1,""],[86285,2,""],[86285,0,"| xargs -n"],[86296,0,"$(SPATCH_BATCH_SIZE) "],[86343,4,""],[86359,3,""],[86364,30,""],[86377,23,""],[41147,0,"# Setting it to 0 will feed all files in a single spatch invocation.\n"],[86330,2,""],[86330,0,"t"],[86332,3,""],[86332,0,"st"],[86337,0,"SPAT"],[86342,2,""],[86342,0,"H_BAT"],[86348,1,""],[86348,0,"H"],[86351,4,""],[86351,0,"IZ"],[86354,1,""],[86356,1,""],[86356,0,"="],[86358,4,""],[86358,0,"0; then \\\n\t\tlimit=; \\\n\tel"],[86384,0,"e"],[86386,0,"\\\n\t\tlimit='"],[86420,0,"'; \\\n\tfi; \\\n\tif ! echo $(COCCI_SOURCES) | xargs $$limit"]]},{"span":[308150,308155],"parents":[303216,306226,306438,306516,307700],"agent":"Junio C Hamano","seqStart":68810,"ops":[[51162,5,""]]},{"span":[308155,308409],"parents":[304211],"agent":"Clément Chigot","seqStart":0,"ops":[[18937,0,"NEED_ACCESS_ROOT_HANDLER if access() under root may success for X_OK\n# even if execution permission isn't granted for any user.\n#\n# Define "],[55291,0,"def NEED_ACCESS_ROOT_HANDLER\n\tCOMPAT_CFLAGS += -DNEED_ACCESS_ROOT_HANDLER\n\tCOMPAT_OBJS += compat/access.o\nendif\n\nif"]]},{"span":[308409,308471],"parents":[306404,306470,307708,308154,308408],"agent":"Johannes Schindelin","seqStart":8457,"ops":[[24981,62,""]]},{"span":[308471,308882],"parents":[306404,306470,307708,308154,308408],"agent":"Ævar Arnfjörð Bjarmason","seqStart":14420,"ops":[[11118,158,""],[11120,3,""],[40597,0,"CC_LD_DYNPATH = -Wl,-rpath,\n"],[43505,222,""]]},{"span":[308882,308920],"parents":[308149,308470,308881],"agent":"Ævar Arnfjörð Bjarmason","seqStart":14831,"ops":[[37276,0,"env--helper.o\nBUILTIN_OBJS += builtin/"]]},{"span":[308920,310936],"parents":[308149,308470,308881],"agent":"Jeff Hostetler","seqStart":739,"ops":[[42527,0,"\""],[42548,0,"\""],[88272,0,"ifdef MSVC\n\t# We DO NOT install the individual foo.o.pdb files because they\n\t# have already been rolled up into the exe's pdb file.\n\t# We DO NOT have pdb files for the builtin commands (like git-status.exe)\n\t# because it is just a copy/hardlink of git.exe, rather than a unique binary.\n\t$(INSTALL) git.pdb '$(DESTDIR_SQ)$(bindir_SQ)'\n\t$(INSTALL) git-shell.pdb '$(DESTDIR_SQ)$(bindir_SQ)'\n\t$(INSTALL) git-upload-pack.pdb '$(DESTDIR_SQ)$(bindir_SQ)'\n\t$(INSTALL) git-credential-store.pdb '$(DESTDIR_SQ)$(gitexec_instdir_SQ)'\n\t$(INSTALL) git-daemon.pdb '$(DESTDIR_SQ)$(gitexec_instdir_SQ)'\n\t$(INSTALL) git-fast-import.pdb '$(DESTDIR_SQ)$(gitexec_instdir_SQ)'\n\t$(INSTALL) git-http-backend.pdb '$(DESTDIR_SQ)$(gitexec_instdir_SQ)'\n\t$(INSTALL) git-http-fetch.pdb '$(DESTDIR_SQ)$(gitexec_instdir_SQ)'\n\t$(INSTALL) git-http-push.pdb '$(DESTDIR_SQ)$(gitexec_instdir_SQ)'\n\t$(INSTALL) git-imap-send.pdb '$(DESTDIR_SQ)$(gitexec_instdir_SQ)'\n\t$(INSTALL) git-remote-http.pdb '$(DESTDIR_SQ)$(gitexec_instdir_SQ)'\n\t$(INSTALL) git-remote-testsvn.pdb '$(DESTDIR_SQ)$(gitexec_instdir_SQ)'\n\t$(INSTALL) git-sh-i18n--envsubst.pdb '$(DESTDIR_SQ)$(gitexec_instdir_SQ)'\n\t$(INSTALL) git-show-index.pdb '$(DESTDIR_SQ)$(gitexec_instdir_SQ)'\nifndef DEBUG\n\t$(INSTALL) $(vcpkg_rel_bin)/*.dll '$(DESTDIR_SQ)$(bindir_SQ)'\n\t$(INSTALL) $(vcpkg_rel_bin)/*.pdb '$(DESTDIR_SQ)$(bindir_SQ)'\nelse\n\t$(INSTALL) $(vcpkg_dbg_bin)/*.dll '$(DESTDIR_SQ)$(bindir_SQ)'\n\t$(INSTALL) $(vcpkg_dbg_bin)/*.pdb '$(DESTDIR_SQ)$(bindir_SQ)'\nendif\nendif\n"],[97235,0,"ifdef MSVC\n\t$(RM) $(patsubst %.o,%.o.pdb,$(OBJECTS))\n\t$(RM) $(patsubst %.exe,%.pdb,$(OTHER_PROGRAMS))\n\t$(RM) $(patsubst %.exe,%.iobj,$(OTHER_PROGRAMS))\n\t$(RM) $(patsubst %.exe,%.ipdb,$(OTHER_PROGRAMS))\n\t$(RM) $(patsubst %.exe,%.pdb,$(PROGRAMS))\n\t$(RM) $(patsubst %.exe,%.iobj,$(PROGRAMS))\n\t$(RM) $(patsubst %.exe,%.ipdb,$(PROGRAMS))\n\t$(RM) $(patsubst %.exe,%.pdb,$(TEST_PROGRAMS))\n\t$(RM) $(patsubst %.exe,%.iobj,$(TEST_PROGRAMS))\n\t$(RM) $(patsubst %.exe,%.ipdb,$(TEST_PROGRAMS))\n\t$(RM) compat/vcbuild/MSVC-DEFS-GEN\nendif\n"]]},{"span":[310936,311003],"parents":[306358,310935],"agent":"Johannes Schindelin","seqStart":8581,"ops":[[84642,0,"$(X)"],[84653,0,"$(patsubst git%,$(X),$(filter $(@F),$(BINDIR_PROGRAMS_NEED_X)))"]]},{"span":[311003,311101],"parents":[311002],"agent":"Johannes Schindelin","seqStart":8648,"ops":[[94945,0,"ifneq ($(INCLUDE_DLLS_IN_ARTIFACTS),)\nOTHER_PROGRAMS += $(shell echo *.dll t/helper/*.dll)\nendif\n\n"]]},{"span":[311101,311459],"parents":[308149,308470,308881],"agent":"Carlo Marcelo Arenas Belón","seqStart":0,"ops":[[1542,20,""],[1543,5,""],[1544,6,""],[1544,0,"u"],[1547,10,""],[1547,0,"a"],[1549,7,""],[1550,1,""],[1551,10,""],[1553,7,""],[1556,43,""],[1556,0,"d"],[1558,14,""],[1559,7,""],[1560,9,""],[1561,17,""],[1562,25,""],[1563,1,""],[1567,17,""],[1568,1,""],[1569,0,"v"],[1573,4,""],[1574,22,""],[1574,0,"f"],[1576,4,""],[1583,5,""],[1584,6,""],[1584,0,"d"],[1586,4,""],[1586,0,"by"],[1592,5,""],[1592,0,"r"],[1595,5,""],[1596,11,""],[1597,17,""],[1598,30,""],[1598,0,"a"],[1600,34,""],[1600,0,"y"]]},{"span":[311459,311516],"parents":[308149,308470,308881],"agent":"Christian Couder","seqStart":2076,"ops":[[34103,0,"isor-remote.o\nLIB_OBJS += prom"],[32530,27,""]]},{"span":[311516,311552],"parents":[306404,306470,307708,308149,308154,308408],"agent":"Christian Couder","seqStart":2040,"ops":[[28183,0,"idmap.o\nTEST_BUILTINS_OBJS += test-o"]]},{"span":[311552,311580],"parents":[306358,310935,311551],"agent":"Derrick Stolee","seqStart":435,"ops":[[34629,0,"-settings.o\nLIB_OBJS += repo"]]},{"span":[311580,311642],"parents":[306404,306470,307708,308149,308154,308408],"agent":"Johannes Schindelin","seqStart":8519,"ops":[[24981,62,""]]},{"span":[311642,311684],"parents":[306404,306470,307708,308149,308154,308408],"agent":"Daniel Ferreira","seqStart":0,"ops":[[27474,0,"ir-iterator.o\nTEST_BUILTINS_OBJS += test-d"]]},{"span":[311684,311742],"parents":[308919,311002,311551,311683],"agent":"Johannes Schindelin","seqStart":8746,"ops":[[35098,0,"able-qso"],[35107,0,"t.o\nLIB_OBJS += str"],[53613,8,""],[53614,23,""]]},{"span":[311742,312649],"parents":[308919,311002,311551,311683],"agent":"Denton Liu","seqStart":0,"ops":[[31045,0,"patsubst ./%,%,$("],[31242,0,")"],[86005,17,""],[86010,1,""],[24054,0,"THIRD_PARTY_SOURCES =\n"],[40330,0,"# THIRD_PARTY_SOURCES is a list of patterns compatible with the\n# $(filter) and $(filter-out) family of functions. They specify source\n# files which are taken from some third-party source where we want to be\n# less strict about issues such as coding style so we don't diverge from\n# upstream unnecessarily (making merging in future changes easier).\nTHIRD_PARTY_SOURCES += compat/inet_ntop.c\nTHIRD_PARTY_SOURCES += compat/inet_pton.c\nTHIRD_PARTY_SOURCES += compat/nedmalloc/%\nTHIRD_PARTY_SOURCES += compat/obstack.%\nTHIRD_PARTY_SOURCES += compat/poll/%\nTHIRD_PARTY_SOURCES += compat/regex/%\nTHIRD_PARTY_SOURCES += sha1collisiondetection/%\nTHIRD_PARTY_SOURCES += sha1dc/%\n\n"],[80740,0,"\t| sed -e 's|^\\./||' \\\n\t"],[87186,0,"FOUND_"],[87206,2,""],[87206,0,"fil"],[87210,5,""],[87210,0,"er"],[87215,4,""],[87219,11,""],[87219,0,"sh"],[87222,1,""],[87222,0,"ll"],[87225,0,"$(FIN"],[87231,6,""],[87233,3,""],[87234,1,""],[87235,0,"RCE_FI"],[87243,0,"S)))"],[87277,25,""],[87279,1,""],[87279,0,"THIRD"],[87285,3,""],[87285,0,"PA"],[87288,16,""],[87288,0,"TY"],[87298,24,""],[87298,0,")"],[87302,0,"FOUND_"],[87319,6,""]]},{"span":[312649,312716],"parents":[308919,311002,311551,311683],"agent":"Denton Liu","seqStart":907,"ops":[[56857,0,"PATCH   = @echo '   ' SPATCH $<;\n\tQ"],[56893,0,"IET_SU"],[86748,13,""],[86748,0,"$(QUIET_"],[86762,4,""],[86762,0,")"]]},{"span":[312716,312754],"parents":[308919,311002,311551,311683],"agent":"SZEDER Gábor","seqStart":616,"ops":[[28239,0,"progress.o\nTEST_BUILTINS_OBJS += test-"]]},{"span":[312754,312924],"parents":[308919,311002,311515,311579,311641,311683],"agent":"Denton Liu","seqStart":974,"ops":[[56840,0,"("],[56842,0,":hcc=h)"],[86092,0,"HCC = $(HCO:hco=hcc)\n\n%.hcc: %.h\n\t@echo '#include \"git-compat-util.h\"' >$@\n\t@echo '#include \"$<\"' >>$@\n"],[86214,0,"cc"],[86242,26,""],[86242,0,"$(ALL_CFLAGS)"],[86257,4,""],[96884,0,"$(HCC)\n\t$(RM) "]]},{"span":[312924,312954],"parents":[311100,311458,311741,312648,312715,312753,312923],"agent":"Johannes Schindelin","seqStart":8804,"ops":[[31005,0,"d-interactive.o\nLIB_OBJS += ad"]]},{"span":[312954,312978],"parents":[312953],"agent":"Johannes Schindelin","seqStart":8834,"ops":[[31035,0,"d-patch.o\nLIB_OBJS += ad"]]},{"span":[312978,313020],"parents":[311100,311458,311741,312648,312715,312753,312923],"agent":"Derrick Stolee","seqStart":463,"ops":[[39436,0,"parse-checkout.o\nBUILTIN_OBJS += builtin/s"]]},{"span":[313020,313060],"parents":[311100,311458,311741,312648,312715,312753,312923],"agent":"Derrick Stolee","seqStart":505,"ops":[[28043,0,"graph.o\nTEST_BUILTINS_OBJS += test-read-"]]},{"span":[313060,313064],"parents":[312953,313059],"agent":"ryenus","seqStart":0,"ops":[[20913,4,""]]},{"span":[313064,313126],"parents":[312953,313059],"agent":"Junio C Hamano","seqStart":68815,"ops":[[86383,1,""],[86384,1,""],[86384,0,"XCEPT"],[86428,27,""],[97511,14,""],[97511,0,"$(GENERATED_H)"]]},{"span":[313126,313162],"parents":[312977,313019,313063,313125],"agent":"Heba Waly","seqStart":0,"ops":[[26755,0,"advise.o\nTEST_BUILTINS_OBJS += test-"]]},{"span":[313162,313211],"parents":[312977,313019,313063,313125],"agent":"Alexandr Miloslavskiy","seqStart":0,"ops":[[27805,0,"rse-pathspec-file.o\nTEST_BUILTINS_OBJS += test-pa"]]},{"span":[313211,313569],"parents":[312977,313019,313063,313125],"agent":"Emily Shaffer","seqStart":0,"ops":[[30773,0,"nfig-list.h\nGENERATED_H += co"],[65126,3,""],[65127,1,""],[65127,0,"fig"],[65798,0,"nfig-list.h: generate-configlist.sh\n\nconfig-list.h:\n\t$(QUIET_GEN)$(SHELL_PATH) ./generate-configlist.sh \\\n\t\t>$@+ && mv $@+ $@\n\nco"],[86632,0,"config-list.h "],[87145,0,"nfig-list.h co"],[26395,0,"bugreport.o\nPROGRAM_OBJS += "],[75506,0,"bugreport$X: bugreport.o GIT-LDFLAGS $(GITLIBS)\n\t$(QUIET_LINK)$(CC) $(ALL_CFLAGS) -o $@ $(ALL_LDFLAGS) $(filter %.o,$^) \\\n\t\t$(LIBS)\n\ngit-"]]},{"span":[313569,313590],"parents":[312977,313019,313063,313125],"agent":"Bert Wesarg","seqStart":0,"ops":[[34209,0,".o\nLIB_OBJS += rebase"]]},{"span":[313590,313662],"parents":[311100,311458,311741,312648,312715,312753,312923],"agent":"Jeff King","seqStart":32538,"ops":[[42291,0,"ifneq ($(filter address,$(SANITIZERS)),)\nNO_REGEX = NeededForASAN\nendif\n"]]},{"span":[313662,313695],"parents":[313210,313589,313661],"agent":"Thomas Gummerer","seqStart":333,"ops":[[24300,33,""]]},{"span":[313695,313750],"parents":[313161,313694],"agent":"Garima Singh","seqStart":0,"ops":[[26758,0,"bloom.o\nTEST_BUILTINS_OBJS += test-"],[31461,0,"loom.o\nLIB_OBJS += b"]]},{"span":[313750,313972],"parents":[313210,313589,313661],"agent":"Martin Ågren","seqStart":0,"ops":[[12009,116,""],[11903,106,""]]},{"span":[313972,314027],"parents":[313210,313589,313661],"agent":"Denton Liu","seqStart":1144,"ops":[[32562,0,"mt-merge-msg.o\nLIB_OBJS += f"],[34186,0,"prune-packed.o\nLIB_OBJS += "]]},{"span":[314027,315019],"parents":[313210,313589,313661],"agent":"Denton Liu","seqStart":1199,"ops":[[24135,0,"legacy-stash.sh\nSCRIPT_SH += git-"],[24311,30,""],[24312,3,""],[24539,5,""],[24539,0,"i18n"],[24565,4,""],[24565,0,"setup"],[26544,8,""],[26544,0,"remote"],[26551,0,"t"],[26553,5,""],[26555,0,"svn"],[26579,0,"-i18n--"],[26587,2,""],[26587,0,"nvsubst"],[26613,5,""],[26613,0,"sh"],[26616,8,""],[26616,0,"ll"],[27327,0,"-speed"],[27367,3,""],[27401,2,""],[27401,0,"ma"],[27404,3,""],[28451,0,"-array"],[28491,6,""],[28911,2,""],[28911,0,"wi"],[28914,5,""],[28915,1,""],[28915,0,"match"],[28952,1,""],[28952,0,"n"],[28954,0,"ows-na"],[28961,4,""],[28961,0,"ed-pipe"],[28999,0,"r"],[29001,5,""],[29001,0,"te"],[29004,1,""],[29004,0,"c"],[29006,7,""],[29006,0,"ch"],[29039,4,""],[29039,0,"xml-"],[29044,1,""],[29044,0,"n"],[29046,3,""],[29046,0,"od"],[30263,6,""],[30263,0,"receive"],[30306,6,""],[30306,0,"sh"],[30309,5,""],[30309,0,"ll"],[30387,3,""],[30387,0,"up"],[30390,1,""],[30390,0,"oad-pack"],[31230,0,"-tar"],[31257,3,""],[31257,0,"zip"],[31282,4,""],[31640,0,"-graph"],[31668,1,""],[31669,0,"e"],[31671,1,""],[31671,0,"c"],[31694,6,""],[32019,4,""],[32020,2,""],[32020,0,"d"],[32022,0,"lt"],[32025,1,""],[32044,4,""],[32045,2,""],[32046,2,""],[32046,0,"ib"],[32067,4,""],[32068,0,"n"],[32070,1,""],[32070,0,"-in"],[32075,1,""],[32075,0,"x"],[32095,12,""],[32119,0,"b"],[32122,1,""],[32123,2,""],[32123,0,"k"],[32143,0,"core"],[32172,0,"core"],[32177,3,""],[32177,0,"order"],[32201,2,""],[32201,0,"c"],[32203,0,"re"],[32206,0,"p"],[32208,3,""],[32208,0,"cka"],[32212,0,"e"],[32232,0,"core-rename"],[32261,0,"-iterator"],[32286,3,""],[32287,6,""],[32715,32,""],[32918,0,"near-as"],[32926,5,""],[32926,0,"ignm"],[32931,1,""],[32931,0,"n"],[32933,1,""],[32967,0,"-options"],[33009,0,".o\nLIB_OBJS += list"],[33030,1,""],[33030,0,"bjec"],[33035,3,""],[33241,0,"-blobs"],[33268,4,""],[33268,0,"recur"],[33274,0,"ive"],[33296,3,""],[33297,7,""],[33451,0,"-cache"],[33478,4,""],[33478,0,"m"],[33480,0,"rge"],[33504,5,""],[33504,0,"utils"],[33528,6,""],[33611,23,""],[33618,0,"-write"],[33650,6,""],[33772,0,"ckfile.o\nLIB_OBJS += pa"],[33826,0,"-cb"],[33857,3,""],[34258,0,"-interactive"],[34291,0,".o\nLIB_OBJS += ref"],[34310,0,"f"],[34312,1,""],[34312,0,"l"],[34316,6,""],[34524,25,""],[34866,0,"fi"],[34869,5,""],[34869,0,"e"],[34890,2,""],[34891,1,""],[34891,0,"ookup"],[35130,1,""],[35130,0,"-pr"],[35134,3,""],[35134,0,"c"],[35136,0,"ss"],[35187,3,""],[35187,0,"m"],[35189,1,""],[35189,0,"dul"],[35193,2,""],[35713,0,"-helper"],[35744,7,""],[35787,0,"-walk"],[35811,5,""],[36943,1,""],[36943,0,"g"],[36945,2,""],[36945,0,"aph"],[36981,0,"-tree"],[37019,6,""],[38122,0,"-base"],[38160,3,""],[38160,0,"fil"],[38197,1,""],[38198,1,""],[38198,0,"nd"],[38201,0,"x"],[38235,5,""],[38235,0,"ours"],[38272,1,""],[38272,0,"rec"],[38278,0,"ive"],[38314,0,"t"],[38317,6,""],[38350,5,""],[39049,0,"-ext"],[39087,3,""],[39087,0,"fd"],[39122,3,""],[71731,2,""],[71732,4,""],[71732,0,"mit"],[71759,2,""],[71759,0,"h"],[71761,1,""],[71762,0,"togram"],[71792,0,"m"],[71794,3,""],[71794,0,"rge"],[71821,1,""],[71821,0,"pati"],[71826,2,""],[71826,0,"nc"],[71854,0,"rep"],[71858,5,""],[71858,0,"r"],[71884,1,""],[71884,0,"ut"],[71887,0,"l"],[71889,6,""],[71916,8,""],[71917,0,"ast_"],[71922,0,"xpo"],[71926,0,"t"],[71953,1,""],[71954,2,""],[71956,1,""],[71956,0,"e"],[71958,6,""],[71958,0,"buffer"],[71990,2,""],[71991,1,""],[71991,0,"liding"],[71998,3,""],[71998,0,"wind"],[72003,2,""],[72003,0,"w"],[99148,1,""],[99148,0,"-citool"],[99175,3,""],[99175,0,"-gui"],[99199,4,""],[99199,0,"k\nALL_COMMANDS +="],[99220,7,""],[99220,0,"web"],[34649,0,"et.o\nLIB_OBJS += res"]]},{"span":[315019,315308],"parents":[313210,313589,313661],"agent":"Jeff King","seqStart":32610,"ops":[[45645,0,"\t"],[45648,0,"n"],[45667,18,""],[45667,0,"\t"],[45680,20,""],[45681,1,""],[45681,0,":"],[45715,0,"\t"],[45722,0,"\tCURL_LIBCURL += $(CURL_LDFLAGS)\n"],[45506,4,""],[45507,0,"URL"],[45518,1,""],[45625,0,"CFLAGS =\n\t\tCURL_"],[45771,0,"ifndef CURL_CFLAGS\n\t\tCURL_CFLAGS := $(shell $(CURL_CONFIG) --cflags)\n\tendif\n\tBASIC_CFLAGS += $(CURL_CFLAGS)\n\n\t"],[45695,0,"= $(eval CURL_LDFLAGS "],[45721,0,"$"],[45730,0,"$"],[45752,0,")$(CURL_LDFLAGS)"],[45844,0,"= $(eval CURL_CFLAGS "],[45869,0,"$"],[45878,0,"$"],[45902,0,")$(CURL_CFLAGS)"]]},{"span":[315308,315364],"parents":[313210,313589,313661],"agent":"Jeff King","seqStart":32899,"ops":[[33607,0,"oid-array.o\nLIB_OBJS += "],[34845,25,""],[28481,4,""],[28481,0,"oid"]]},{"span":[315364,315519],"parents":[313161,313694,313971,314026,315018,315363],"agent":"Junio C Hamano","seqStart":68877,"ops":[[23913,33,""],[24056,0,"t.sh\nSCRIPT_SH += git-"],[27467,0,"-array.o\nTEST_BUILTINS_OBJS += test-oid"],[28271,6,""],[28301,30,""],[28302,3,""],[33376,1,""],[33376,0,"-arr"],[33381,1,""],[33381,0,"y"],[33400,3,""],[33400,0,"map"],[33421,6,""],[33421,0,"set"]]},{"span":[315519,315561],"parents":[313568,313749,315307,315518],"agent":"Jiang Xin","seqStart":79,"ops":[[27856,0,"c-receive.o\nTEST_BUILTINS_OBJS += test-pro"]]},{"span":[315561,315793],"parents":[312977,313019,313063,313125,313661],"agent":"Carlo Marcelo Arenas Belón","seqStart":358,"ops":[[17480,118,""],[55404,114,""]]},{"span":[315793,315820],"parents":[313210,313589,313661],"agent":"Luc Van Oostenryck","seqStart":0,"ops":[[41547,0," -Wno-universal-initializer"]]},{"span":[315820,315857],"parents":[313568,313749,315307,315518,315792,315819],"agent":"Jeff King","seqStart":32955,"ops":[[42210,37,""]]},{"span":[315857,315903],"parents":[313568,313749,315307,315518,315792,315819],"agent":"Jeff King","seqStart":32992,"ops":[[31052,25,""],[34903,0,"vec.o\nLIB_OBJS += str"]]},{"span":[315903,317538],"parents":[315902],"agent":"Jeff King","seqStart":33038,"ops":[[89926,60,""],[90560,6,""],[90561,27,""],[90562,24,""],[90563,11,""],[26050,35,""],[36713,0,"redential-cache."],[36730,0,"\nBUILTIN_OBJS += builtin/credentia"],[36765,0,"-cache--daemon.o\nBUILTIN_OBJS += b"],[36800,0,"iltin/credential-store.o\nBUILTIN_OBJS += builtin/colu"],[52167,72,""],[52200,21,""],[52202,33,""],[52203,26,""],[89851,74,""],[26022,28,""],[36319,0,"greport.o\nBUILTIN_OBJS += builtin/bu"],[75493,26,""],[75494,111,""],[26047,30,""],[37368,0,"ast-import.o\nBUILTIN_OBJS += builtin/f"],[89761,69,""],[23145,14,""],[26092,11,""],[26093,22,""],[28811,39,""],[28812,38,""],[30278,27,""],[71786,41,""],[71787,27,""],[71788,36,""],[71789,32,""],[71790,45,""],[71969,18,""],[75695,18,""],[75696,33,""],[75697,123,""],[76186,1,""],[76187,29,""],[76188,48,""],[85406,5,""],[85407,15,""],[85411,15,""],[85412,20,""],[85415,10,""],[85416,18,""],[89416,2,""],[89417,70,""],[96539,14,""]]},{"span":[317538,317569],"parents":[315902],"agent":"Jeff King","seqStart":34673,"ops":[[29457,0,"aintenance$X\nBUILT_INS += git-m"]]},{"span":[317569,317646],"parents":[315902],"agent":"Derrick Stolee","seqStart":545,"ops":[[37436,0,"or-each-repo.o\nBUILTIN_OBJS += builtin/f"],[26555,0,"rontab.o\nTEST_BUILTINS_OBJS += test-c"]]},{"span":[317646,317676],"parents":[315902],"agent":"Jonathan Tan","seqStart":255,"ops":[[33200,0,"noop.o\nLIB_OBJS += negotiator/"]]},{"span":[317676,317700],"parents":[317537,317675],"agent":"Eric Sunshine","seqStart":525,"ops":[[32305,24,""]]},{"span":[317700,317725],"parents":[317537,317675],"agent":"Han-Wen Nienhuys","seqStart":0,"ops":[[33995,0,"debug.o\nLIB_OBJS += refs/"]]},{"span":[317725,317984],"parents":[317537,317675],"agent":"Junio C Hamano","seqStart":69032,"ops":[[93685,0,"# Allow tweaking to hide local environment effects, like perm bits.\n# With "],[93761,0,"NU tar, \"--mode=u+rwX,og+rX,og-w\" would be a good idea, for example.\nTAR_D"],[93836,0,"S"],[93839,0,"EX"],[93842,0,"R"],[93844,0,"_OPTS =\nGIT_TA"],[94207,0,"$(TAR_DIST_EXTRA_OPTS) "],[94777,0,"$(TAR_DIST_EXTRA_OPTS) "],[95918,0,"$(TAR_DIST_EXTRA_OPTS) "],[96261,0,"$(TAR_DIST_EXTRA_OPTS) "]]},{"span":[317984,319581],"parents":[315902],"agent":"Philippe Blain","seqStart":0,"ops":[[19984,0,"GENERATE_COMPILATION_DATABASE to \"yes\" to generate JSON compilation\n# database entries during compilation if your compiler supports it, using the\n# `-MJ` flag. The JSON entries will be placed in the `compile_commands/`\n# directory, and the JSON compilation database 'compile_commands.json' will be\n# created at the root of the repository.\n#\n# Define "],[43522,0,"n"],[43527,0,"GENERATE_COMPILATION_DATABA"],[43555,0,"E\nGENER"],[43563,0,"TE_COMPILATIO"],[43577,0,"_DATABASE = no\nendif\n\nifeq ($(G"],[43609,0,"NERATE"],[43616,0,"COMPILA"],[43624,0,"I"],[43626,0,"N_DATABASE),yes)\ncompdb_check = $(shell $(CC) $(ALL_CFLAGS) \\\n\t-c -MJ /dev/null \\\n\t-x c /dev/null -o /dev/null 2>&1; \\\n\techo $$?)\nifneq ($(compdb_check),0)\noverride GENERATE_C"],[43802,0,"MPI"],[43806,0,"ATION_DATABASE = no\n$(warning GENERATE"],[43845,0,"COM"],[43849,0,"ILATION_DATABASE is set to \"yes\", but your compiler does not \\\nsupport generating compilation database entries)\nendif\nelse\nifneq ($(GENER"],[43988,0,"E_COMPILATION_DATABASE),no)\n$(error please set GENERATE_COMPILATION_DATABASE to \"yes\" or \"no\" \\\n(not \"$(GENERATE_COMPILATION_DATABASE)\"))\nendif\nendif\n\nifdef SANE_TOOL_PAT"],[73893,0,"compdb_dir = compile_commands\n\nifeq ($(GENERATE_COMPILATION_DATABASE),yes)\nmissing_compdb_dir = $(compdb_dir)\n$(missing_compdb_dir):\n\t@mkdir -p $@\n\ncompdb_file = $(compdb_dir)/$(subst /,-,$@.json)\ncompdb_args = -MJ $(compdb_file)\nelse\nmissing_compdb_dir =\ncompdb_args =\nendif\n\n"],[74341,0," $(missing_compdb_dir)"],[74407,0,"compdb_args) $("],[74506,0," $(missing_compdb_dir)"],[74572,0,"compdb_args) $("],[75291,0,"ifeq ($(GENERATE_COMPILATION_DATABASE),yes)\nall:: compile_commands.json\ncompil"],[75370,0,"_commands.json:\n\t@$(RM) $@\n\t$(QUIET_GEN)sed -e '1s/^/[/' -e '$$s/,$$/]/' $(compdb_dir)/*.o.json > $@+\n\t@if test -s $@+; then mv $@+ $@; else $(RM) $@+; fi\nendif\n\ne"],[99471,0," $(compdb_dir) compile_commands.json"]]},{"span":[319581,320504],"parents":[317983,319580],"agent":"René Scharfe","seqStart":3241,"ops":[[95446,19,""],[95446,0,"GIT_ARCHIVE_E"],[95460,26,""],[95460,0,"TRA_FILES"],[95470,8,""],[95471,3,""],[95474,1,""],[95500,32,""],[95500,0,"\\"],[95503,3,""],[95503,0,"--ad"],[95508,3,""],[95509,22,""],[95509,0,"file="],[95524,14,""],[95524,0,"\\"],[95527,1,""],[95527,0,"--add-fil"],[95537,21,""],[95537,0,"="],[95560,0," \\"],[95564,9,""],[95565,5,""],[95566,2,""],[95566,0,"pref"],[95571,7,""],[95571,0,"x"],[95573,3,""],[95595,0,"/"],[95597,12,""],[95597,0,"\\"],[95600,26,""],[95600,0,"--"],[95603,47,""],[95603,0,"dd-"],[95608,25,""],[95608,0,"l"],[95610,10,""],[95610,0,"="],[95666,13,""],[95670,1,""],[95672,3,""],[95672,0,"CHIV"],[95677,58,""],[95677,0,"_EXTRA_F"],[95686,1,""],[95686,0,"L"],[95688,1,""],[95689,5,""],[95690,0,"+= "],[95696,1,""],[95696,0,"--prefix="],[95743,0," \\"],[95747,4,""],[95747,0,"--add-file="],[95796,1,""],[95796,0,"--prefix="],[95843,0,"lib/ \\"],[95851,4,""],[95851,0,"--add-file="],[95894,1,""],[95895,2,""],[95899,16,""],[95899,0,"--add-file="],[95937,0,"sha1.h \\"],[95947,4,""],[95947,0,"--add-file="],[95995,1,""],[95996,2,""],[95999,1,""],[96000,15,""],[96000,0,"--add-file="],[96038,0,"ubc_check.h\nendif"],[96056,1,""],[96056,0,"dist: git-archive"],[96075,3,""],[96075,0,"X"],[96078,0,"configu"],[96086,1,""],[96086,0,"e\n\t@mkdir"],[96096,0,"-p "],[96113,4,""],[96113,0,"\n\t@echo"],[96123,5,""],[96123,0,"G"],[96125,1,""],[96127,0,"V"],[96129,2,""],[96130,2,""],[96130,0,"SI"],[96133,3,""],[96133,0,"N"],[96136,4,""],[96136,0,"> "],[96153,9,""],[96153,0,"ver"],[96160,2,""],[96160,0,"\n\t@$(MAKE) -C gi"],[96177,3,""],[96177,0,"-gu"],[96181,4,""],[96181,0," TARD"],[96187,5,""],[96187,0,"R="],[96190,8,""],[96190,0,"./"],[96207,8,""],[96207,0,"g"],[96209,1,""],[96209,0,"t-gu"],[96214,2,""],[96214,0," "],[96216,1,""],[96216,0,"is"],[96219,0,"-v"],[96222,2,""],[96222,0,"rs"],[96227,0,"\n\t."],[96231,1,""],[96231,0,"g"],[96233,4,""],[96233,0,"t-"],[96236,3,""],[96236,0,"r"],[96239,1,""],[96239,0,"ive --format=tar \\\n\t\t$(GIT_ARCHIVE_EXTRA_FILES)"],[96291,0,"--prefix="],[96315,15,""],[96315,0," HEAD^{"],[96323,0,"r"],[96325,16,""],[96326,2,""],[96326,0,"} > $(GIT_TARNAME)"],[96345,10,""],[96345,0,"tar"]]},{"span":[320504,321861],"parents":[317983,319580],"agent":"Johannes Schindelin","seqStart":8858,"ops":[[90555,9,""],[90557,39,""],[90557,0,"pa"],[90560,1,""],[90561,1,""],[90561,0,"ubst %.ex"],[90571,2,""],[90571,0,",%"],[90577,30,""],[90577,0,","],[90580,10,""],[90580,0,"f"],[90582,0,"l"],[90584,0,"er"],[90587,4,""],[90588,5,""],[90588,0,"ut"],[90591,1,""],[90593,5,""],[90593,0,"BU"],[90596,1,""],[90596,0,"LT"],[90599,0,"IN"],[90602,1,""],[90603,0,","],[90606,2,""],[90606,0,"pa"],[90609,7,""],[90610,0,"ubs"],[90614,10,""],[90614,0," %,%$X,"],[90623,0,"B"],[90626,35,""],[90630,0,"PROGRAM"],[90638,11,""],[90639,7,""],[90639,0,"NEED"],[90644,2,""],[90644,0,"X))"],[90648,12,""],[90649,19,""],[90666,8,""],[90666,0,"b"],[90669,2,""],[90690,7,""],[90690,0,"$("],[90693,3,""],[90693,0,"at"],[90696,4,""],[90696,0,"u"],[90698,0,"st"],[90701,19,""],[90701,0,"%."],[90706,40,""],[90706,0,",%"],[90712,2,""],[90712,0,","],[90715,14,""],[90715,0,"f"],[90717,0,"l"],[90719,2,""],[90720,8,""],[90721,21,""],[90722,3,""],[90723,5,""],[90723,0,"u"],[90725,5,""],[90726,1,""],[90728,3,""],[90728,0,"BUIL"],[90733,1,""],[90733,0,"_"],[90735,2,""],[90735,0,"N"],[90737,1,""],[90738,0," "],[90741,7,""],[90741,0,"REMOTE"],[90748,7,""],[90748,0,"CURL"],[90753,0,"ALIASE"],[90760,1,""],[90761,3,""],[90761,0,","],[90764,2,""],[90764,0,"PROGRAM"],[90772,4,""],[90773,26,""],[90773,0,"))"],[14988,0,"SKIP_DASHED_BUILT_INS if you do not need the dashed versions of the\n# built-ins to be linked/copied at all.\n#\n# Define "],[30031,0,"ALL_COMMANDS_TO_INSTALL = $(ALL_PROGRAMS)\nifeq (,$(SKIP_DASHED_BUILT_INS))\nALL_COMMANDS_TO_INSTALL += $(BUILT_INS)\nelse\n# git-upload-pack, git-receive-pack and git-upload-archive are special: they"],[30230,0,"are _expected_ to be present in the `bin/` directory in their dashed form.\nALL_COMMANDS_TO_INSTALL += git-receive-pack$(X)\nALL_COMMANDS_TO_INSTALL += git-upload-archive$(X)\nALL_COMMANDS_TO_INSTALL += git-upload-pack$(X)\nendif\n\n# "],[63991,2,""],[63991,0,"C"],[63993,2,""],[63993,0,"MM"],[63996,1,""],[63996,0,"ND"],[63999,0,"_TO_INSTALL"],[64024,13,""],[64140,2,""],[64140,0,"C"],[64142,3,""],[64143,0,"MAND"],[64148,8,""],[64148,0,"_"],[64150,0,"O"],[64155,0,"TALL"],[92395,2,""],[92395,0,"C"],[92397,3,""],[92398,0,"MAND"],[92403,8,""],[92403,0,"_"],[92405,0,"O"],[92410,0,"TALL"],[93350,0,"if "],[93359,0,"z \"$(SKIP_DASHED_BUILT_INS)\"; \\\n\t\tthen \\\n\t\t\ttest -"],[93440,0,"\t"],[93477,0,"\t"],[93521,0,"\t"],[93578,0,"\t"],[93629,0,"\t"],[93677,0,";"],[93682,0,"\tfi \\\n\t"],[93759,0,"if "],[93768,0,"z \"$(SKIP_DASHED_BUILT_INS)\"; \\\n\t\tthe"],[93807,0,"\\\n\t\t\ttest -n "],[93849,0,"\t"],[93935,0,"\t"],[93979,0,"\t"],[94038,0,"\t"],[94090,0,"\t"],[94140,0,";"],[94145,0,"\tfi \\\n\t"],[97158,2,""],[97158,0,"C"],[97160,2,""],[97160,0,"MM"],[97163,1,""],[97163,0,"NDS_TO_IN"],[97173,0,"TALL"],[97191,13,""],[100352,2,""],[100352,0,"C"],[100354,2,""],[100354,0,"MM"],[100357,1,""],[100357,0,"ND"],[100360,0,"_TO_INSTALL"],[100386,13,""],[101454,0,"BUILT_INS) $("]]},{"span":[321861,322049],"parents":[315560,315856,317699,317724,320503,321860],"agent":"Denton Liu","seqStart":2191,"ops":[[31239,0,"mma"],[31243,3,""],[31243,0,"d"],[31269,3,""],[31270,1,""],[31270,0,"fig"],[35626,1,""],[35627,1,""],[35627,0,"aming"],[35650,3,""],[35653,0,"-list"],[35676,8,""],[35676,0,"vec"],[37507,4,""],[37507,0,"olum"],[37512,10,""],[37540,5,""],[37540,0,"ommi"],[37545,3,""],[37546,1,""],[37546,0,"gr"],[37549,1,""],[37549,0,"p"],[37551,9,""],[37579,6,""],[37579,0,"omm"],[37583,2,""],[37583,0,"t"],[37585,1,""],[37586,1,""],[37588,0,"e"],[37618,2,""],[37619,1,""],[37619,0,"mit"],[37651,2,""],[37651,0,"nf"],[37654,2,""],[37655,4,""],[37684,3,""],[37684,0,"un"],[37688,0,"objec"],[37694,3,""],[37694,0,"s"],[37723,0,"redential-cache--daem"],[37745,4,""],[37745,0,"n"],[37774,1,""],[37774,0,"rede"],[37779,1,""],[37779,0,"t"],[37781,1,""],[37781,0,"al-cache"],[37817,2,""],[37817,0,"rede"],[37823,0,"ial"],[37827,0,"st"],[37830,2,""],[37830,0,"r"],[37832,3,""]]},{"span":[322049,322588],"parents":[322048],"agent":"René Scharfe","seqStart":4164,"ops":[[97490,0," git$X"],[97610,0,"./git -C .do"],[97623,0,"-tmp-"],[97629,0,"ir"],[97632,0,"init\n\t"],[97639,0,"/git -C ."],[97660,2,""],[97660,0,"add .\n\t./git -C .doc-tmp-dir commit -m htmldocs\n\t./git -C"],[97718,6,""],[97718,0,".doc-tmp-dir"],[97731,0,"ar"],[97734,0,"hive --"],[97742,0,"ormat=tar"],[97752,1,""],[97752,0,"--prefix="],[97763,0," HEAD^{tree} \\\n\t\t> "],[97797,25,""],[98068,0,"./git -C .do"],[98081,0,"-tmp-"],[98087,0,"ir"],[98090,0,"init\n\t"],[98097,0,"/git -C ."],[98118,2,""],[98118,0,"add .\n\t./git -C .doc-tmp-dir commit -m manpages\n\t./git -C"],[98176,6,""],[98176,0,".doc-tmp-dir"],[98189,0,"ar"],[98192,0,"hive --"],[98200,0,"ormat=tar"],[98210,1,""],[98210,0,"--prefix="],[98221,0," HEAD^{tree} \\\n\t\t> "],[98255,25,""],[95610,167,""]]},{"span":[322588,322609],"parents":[322048],"agent":"Elijah Newren","seqStart":32,"ops":[[35676,0,"map.o\nLIB_OBJS += str"]]},{"span":[322609,322762],"parents":[322048],"agent":"Jeff King","seqStart":34704,"ops":[[86344,0,"ifdef GIT_TEST_PERL_FATAL_WARNINGS\n\t@echo GIT_TEST_PERL_FATAL_WARNINGS=\\''$(subst ','\\'',$(subst ','\\'',$(GIT_TEST_PERL_FATAL_WARNINGS)))'\\' >>$@+\nendif\n"]]},{"span":[322762,322827],"parents":[321860],"agent":"Johannes Schindelin","seqStart":10215,"ops":[[93350,3,""],[93356,50,""],[93387,1,""],[93421,1,""],[93466,1,""],[93520,1,""],[93572,1,""],[93620,7,""]]},{"span":[322827,322925],"parents":[322048,322826],"agent":"Elijah Newren","seqStart":53,"ops":[[33713,0,"ort.o\nLIB_OBJS += merge-ort-wrappers.o\nLIB_OBJS += merge-"],[27301,0,"fast-rebase.o\nTEST_BUILTINS_OBJS += test-"]]},{"span":[322925,322992],"parents":[322048,322826],"agent":"Ævar Arnfjörð Bjarmason","seqStart":14869,"ops":[[24545,31,""],[79466,36,""]]},{"span":[322992,323238],"parents":[317645,322587,322608,322761,322924,322991],"agent":"Ramsay Jones","seqStart":2910,"ops":[[99208,33,""],[95952,14,""],[95952,0,".dist-tmp-dir"],[96024,14,""],[96024,0,".dist-tmp-dir"],[96502,0,"$(RM) -r .dist-t"],[96519,0,"p-dir\n\t@m"],[96533,0,".dist"],[96539,0,"tm"],[96542,15,""],[96542,0,"-dir"],[96571,14,""],[96571,0,".dist-tmp-dir"],[96624,14,""],[96624,0,".dist-tmp-dir"],[96791,14,""],[96791,0,".dist-tmp-dir"],[99168,14,""],[99168,0,".dist-tmp-dir"]]},{"span":[323238,323274],"parents":[105623,317568,323237],"agent":"Junio C Hamano","seqStart":69291,"ops":[[101795,36,""]]},{"span":[323274,323294],"parents":[317568,317645,322587,322608,322761,322924,322991],"agent":"Đoàn Trần Công Danh","seqStart":135,"ops":[[12845,0,"r /usr/bin/python3 o"]]},{"span":[323294,323362],"parents":[323273,323293],"agent":"Junio C Hamano","seqStart":69327,"ops":[[42339,0,"# Older versions of GCC may require adding \"-std=gnu99\" at the end.\n"]]},{"span":[323362,323389],"parents":[323273,323293],"agent":"Derrick Stolee","seqStart":622,"ops":[[32106,0,"hunk-format.o\nLIB_OBJS += c"]]},{"span":[323389,323541],"parents":[323273,323293],"agent":"Martin Ågren","seqStart":222,"ops":[[34180,0,"-name.o\nLIB_OBJS += object"],[35623,24,""],[34181,0,"file.o\nLIB_OBJS += object-"],[35599,24,""],[33264,0,"-lookup.o\nLIB_OBJS += hash"],[35623,26,""]]},{"span":[323541,323681],"parents":[323273,323293],"agent":"Ævar Arnfjörð Bjarmason","seqStart":14936,"ops":[[50949,140,""]]},{"span":[323681,324554],"parents":[323540,323680],"agent":"Ævar Arnfjörð Bjarmason","seqStart":15076,"ops":[[1233,0,"Only libpcre version 2 is supported. "],[1281,0,"2"],[1299,0,"\n#"],[1313,1,""],[1314,22,""],[1315,2,""],[1316,10,""],[1317,61,""],[1327,43,""],[1328,12,""],[1328,0,"h"],[1332,24,""],[1333,10,""],[1334,17,""],[1335,6,""],[1347,8,""],[1348,24,""],[1348,0,"h"],[1350,10,""],[1351,4,""],[1352,4,""],[1352,0,"b"],[1354,1,""],[1356,3,""],[1357,5,""],[1358,1,""],[1359,6,""],[1359,0,"m"],[1361,10,""],[1361,0,"ved"],[1490,17,""],[1492,68,""],[1495,15,""],[45928,32,""],[45930,26,""],[45955,6,""],[45955,0,"Th"],[45958,1,""],[45970,1,""],[45970,0,"1"],[45972,4,""],[45972,0,"bu"],[45975,4,""],[45976,0,"d opt"],[45982,0,"on h"],[45989,12,""],[45989,0,"been"],[45994,0,"rem"],[45998,0,"ved, use ve"],[46010,0,"sion 2 with"],[46033,12,""],[46035,1,""],[46042,3,""],[46042,0,"U"],[46044,2,""],[46044,0,"E"],[46046,2,""],[46047,3,""],[46047,0,"IBPCRE2"],[46055,1,""],[46055,0,"?"],[46058,2,""],[46058,0,"$("],[46071,29,""],[46071,0,")"],[46076,1,""],[46076,0,"n"],[46078,1,""],[46078,0,"q"],[46080,0,"(,$("],[46095,1,""],[46095,0,"2))"],[46129,1,""],[46129,0,"2"],[46149,41,""],[46149,0,"2"],[46151,22,""],[46151,0,"8"],[83768,80,""],[83848,86,""]]},{"span":[324554,324596],"parents":[323540,323680],"agent":"Ævar Arnfjörð Bjarmason","seqStart":15949,"ops":[[28054,0,"cre2-config.o\nTEST_BUILTINS_OBJS += test-p"]]},{"span":[324596,325112],"parents":[323540,323680],"agent":"Ævar Arnfjörð Bjarmason","seqStart":15991,"ops":[[23831,0,"OBJS =\nTEST_"],[23704,0,"OBJECTS =\n"],[73538,0,"\n"],[73547,1,""],[73547,0,"+"],[73561,0,"\nOBJECTS +="],[73588,0,"\nOBJECTS"],[73597,0,"+= "],[73615,0,"\nOBJECTS +="],[73639,0,"\nOBJECTS"],[73648,3,""],[73648,0,"+= "],[73664,0,"\nOBJECTS +="],[73676,3,""],[73688,2,""],[73689,1,""],[73689,0,"OBJECTS += "],[73713,2,""],[73714,1,""],[73714,0,"OBJECTS += "],[73600,0,"common-main.o\nOBJECTS += git.o\nOBJECTS += "],[73730,42,""],[23693,0,"GIT_OBJS =\n"],[73550,0,"GIT_"],[73557,3,""],[73574,0,"GIT_"],[73581,3,""],[73602,0,"GIT_"],[73609,3,""],[73628,0,"GIT_"],[73635,3,""],[73646,0,"\nOBJECTS += $(GIT_OBJS)\n"],[26213,0,".PHONY: fuzz-objs\nfuzz-objs: $(FUZZ_OBJS)\n"],[26669,0,".PHONY: program-objs\nprogram-objs: $(PROGRAM_OBJS)\n"],[73544,0,".PHONY: xdiff-objs"],[73563,0,"xdiff-objs: $(XDIFF_OBJS)\n\n"],[73687,0,".PHONY: test-objs\ntest-objs: $(TEST_OBJS)\n"],[73826,0,".PHONY: git-objs\ngit-objs: $(GIT_OBJS)\n"],[74057,0,".PHONY: objects\nobjects: $(OBJECTS)\n"]]},{"span":[325112,325138],"parents":[322587,322826],"agent":"Sergey Organov","seqStart":0,"ops":[[32486,0,"merges.o\nLIB_OBJS += diff-"]]},{"span":[325138,326284],"parents":[322048,322826],"agent":"Johannes Schindelin","seqStart":10280,"ops":[[29950,573,""],[42172,0,"# what 'all' will build and 'install' will install in gitexecdir,\n# excluding programs for built-in commands\nALL_PROGRAMS = $(PROGRAMS) $(SCRIPTS)\nALL_COMMANDS_TO_INSTALL = $(ALL_PROGRAMS)\nifeq (,$(SKIP_DASHED_BUILT_INS))\nALL_COMMANDS_TO_INSTALL += $(BUILT_INS)\nelse\n# git-upload-pack, git-receive-pack and git-upload-archive are special: they\n# are _expected_ to be present in the `bin/` directory in their dashed form.\nALL_COMMANDS_TO_INSTALL += git-receive-pack$(X)\nALL_COMMANDS_TO_INSTALL += git-upload-archive$(X)\nALL_COMMANDS_TO_INSTALL += git-upload-pack$(X)\nendif\n\n"]]},{"span":[326284,326314],"parents":[324553,324595,325137,326283],"agent":"Junio C Hamano","seqStart":69395,"ops":[[31957,0,"ffcore-rotate.o\nLIB_OBJS += di"]]},{"span":[326314,326595],"parents":[323680,326283],"agent":"Jeff Hostetler","seqStart":2755,"ops":[[53703,0,"USE_WIN32_IPC\n\tLIB_OBJS += compat/simple-ipc/ipc-shared.o\n\tLIB_OBJS += compat/simple-ipc/ipc-win32.o\nendif\n\nifdef "],[53690,0,"\tLIB_OBJS += unix-stream-server.o\n\tLIB_OBJS += compat/simple-ipc/ipc-shared.o\n\tLIB_OBJS += compat/simple-ipc/ipc-unix-socket.o\n"],[28759,0,"imple-ipc.o\nTEST_BUILTINS_OBJS += test-s"]]},{"span":[326595,327206],"parents":[326594],"agent":"Jeff Hostetler","seqStart":3036,"ops":[[53764,0,"endif\n\n# Simple IPC requires threads and platform-specific IPC support.\n# Only platforms that have both should include these source files\n# in the build.\n#\n# On Windows-based systems, Simple IPC requires threads and Windows\n# Named Pipes.  These are always available, so Simple IPC support\n# is optional.\n#\n# On Unix-based systems, Simple IPC requires pthreads and Unix\n# domain sockets.  So support is only enabled when both are present.\n#\nifdef USE_WIN32_IPC\n\tBASIC_CFLAGS += -DSUPPORTS_SIMPLE_IPC\n"],[54343,2,""],[54343,0,"w"],[54345,8,""],[54345,0,"n32"],[54352,0,"lse\nif"],[54360,1,""],[54360,0,"e"],[54362,1,""],[54362,0," NO_PTHREADS"],[54377,0,"n"],[54382,0,"NO_"],[54386,0,"NIX_"],[54391,0,"OCK"],[54395,0,"TS\n\tBASIC_CFLAGS += -DSUPPORTS"],[54426,1,""],[54426,0,"S"],[54428,3,""],[54428,0,"MPLE"],[54516,1,""],[54516,0,"un"],[54519,3,""],[54519,0,"x-socket"],[54536,0,"endif\nendif\n"]]},{"span":[327206,327436],"parents":[323680,326283],"agent":"Jeff King","seqStart":34857,"ops":[[941,0,"OPEN_RETURNS_EINTR if your open() system call may return EINTR\n# when a signal is received (as opposed to restarting).\n#\n# Define "],[51016,0,"OPEN_RETURNS_EINTR\n\tCOMPAT_CFLAGS += -DOPEN_RETURNS_EINTR\n\tCOMPAT_OBJS += compat/open.o\nendif\nifdef "]]},{"span":[327436,327463],"parents":[323388,326313,327435],"agent":"Derrick Stolee","seqStart":649,"ops":[[35055,0,"arse-index.o\nLIB_OBJS += sp"]]},{"span":[327463,327542],"parents":[323388,326313,327435],"agent":"Andrzej Hunt","seqStart":0,"ops":[[103352,1,""],[103352,0,"11"],[103416,9,""],[103418,4,""],[103418,0,"fuzz"],[103423,7,""],[103424,2,""],[103425,3,""],[103426,0,"o-l"],[103430,5,""],[103430,0,"nk,"],[103470,13,""],[103470,0,"\""],[103472,5,""],[103472,0,"fsan"],[103477,3,""],[103477,0,"t"],[103479,2,""],[103479,0,"ze=f"],[103488,2,""],[103488,0,"\""]]},{"span":[327542,327580],"parents":[327541],"agent":"Ævar Arnfjörð Bjarmason","seqStart":16507,"ops":[[28909,0,"userdiff.o\nTEST_BUILTINS_OBJS += test-"]]},{"span":[327580,327883],"parents":[327541],"agent":"Đoàn Trần Công Danh","seqStart":155,"ops":[[17190,0,"GIT_TEST_UTF8_LOCALE to preferred utf-8 locale for testing.\n# If it isn't set, fallback to $LC_ALL, $LANG or use the first utf-8\n# locale returned by \"locale -a\".\n#\n# Define "],[85310,0,"ifdef GIT_TEST_UTF8_LOCALE\n\t@echo GIT_TEST_UTF8_LOCALE=\\''$(subst ','\\'',$(subst ','\\'',$(GIT_TEST_UTF8_LOCALE)))'\\' >>$@+\nendif\n"]]},{"span":[327883,327989],"parents":[327541],"agent":"SZEDER Gábor","seqStart":654,"ops":[[67238,0," Documentation/*config.txt Documentation/config/*.txt"],[67471,53,""]]},{"span":[327989,328025],"parents":[325111,327541],"agent":"Taylor Blau","seqStart":0,"ops":[[26684,0,"itmap.o\nTEST_BUILTINS_OBJS += test-b"]]},{"span":[328025,328100],"parents":[325111,326594,327541],"agent":"Matheus Tavares","seqStart":0,"ops":[[34059,0,"allel-checkout.o\nLIB_OBJS += par"],[37098,0,"-worker.o\nBUILTIN_OBJS += builtin/checkout-"]]},{"span":[328100,328216],"parents":[327541],"agent":"Ævar Arnfjörð Bjarmason","seqStart":16545,"ops":[[82354,0,"QUIET_GEN)$("],[82370,0,"\""],[82386,0,"+\" && \\"],[82436,0,"\"$(ETAGS_TARGET)+\" && \\\n\tmv \"$(ETAGS_TARGET)+\" \""],[82499,0,"\""],[82517,0,"QUIET_GEN)$("],[82537,0,"+ && \\"],[82582,0," -o tags+ && \\\n\tmv tags+ tags"]]},{"span":[328216,328244],"parents":[326594,328024,328215],"agent":"Bruno Albuquerque","seqStart":0,"ops":[[34439,0,"otocol-caps.o\nLIB_OBJS += pr"]]},{"span":[328244,328513],"parents":[327462,327579,327988,328024,328099,328215],"agent":"Ævar Arnfjörð Bjarmason","seqStart":16661,"ops":[[69978,0,":"],[69980,3,""],[69980,0,"\n"],[69986,5,""],[69986,0,"DEFINE"],[69993,3,""],[69993,0," += "],[70002,1,""],[70003,2,""],[70004,4,""],[70004,0,"P"],[70006,17,""],[70006,0,"TH"],[70012,1,""],[70026,1,""],[70026,0,"+"],[70035,0,"LIB"],[70039,1,""],[70039,0,"EXTR"],[70044,2,""],[70048,3,""],[70048,0,"\n"],[70053,3,""],[70054,0,"D"],[70056,5,""],[70056,0,"FINE"],[70061,2,""],[70062,0,"+= "],[82403,0," GIT-PERL-DEFINES"],[70116,0,"PERL_DEFINES += $(NO_PERL_CPAN_FALLBACKS)\n"],[60397,0,"NO_GETTEXT_SQ = $(subst ','\\'',$(NO_GETTEXT))\n"],[70204,0,"PERL_DEFINES += $(NO_GETTEXT)\n"],[82643,0,"GETTEXT@@|$(NO_GETTEXT_SQ)|g' \\\n\t    -e 's|@@NO_"],[70024,1,""]]},{"span":[328513,328589],"parents":[328243,328512],"agent":"Emily Shaffer","seqStart":358,"ops":[[58189,0,"ndef HAVE_PLATFORM_PROCINFO\n\tCOMPAT_OBJS += compat/stub/procinfo.o\nendif\n\nif"]]},{"span":[328589,328696],"parents":[327205,328243,328512],"agent":"Johannes Schindelin","seqStart":11426,"ops":[[87968,0,"ifdef RUNTIME_PREFIX\n\t@echo RUNTIME_PREFIX=\\'true\\' >>$@+\nelse\n\t@echo RUNTIME_PREFIX=\\'false\\' >>$@+\nendif\n"]]},{"span":[328696,329053],"parents":[327205,328243,328512],"agent":"Ævar Arnfjörð Bjarmason","seqStart":16930,"ops":[[84212,0,".PHONY: cscope\n"],[101738,7,""],[84238,0,"QUIET_GEN)$("],[84261,0," && \\"],[83927,0,"FOUND_SOURCE_FILES = "],[83950,0,"shell $(FIND_SOURCE_FIL"],[83974,0,"S))\n\n$(E"],[83996,0,"$("],[84000,0,"UND_SOU"],[84010,0,"_FILES)"],[84062,0,"echo "],[84070,1,""],[84070,0,"OU"],[84181,0,"$("],[84185,0,"UND_SOU"],[84195,0,"_FILES)"],[84234,0,"echo "],[84242,1,""],[84242,0,"OU"],[84308,8,""],[84314,4,""],[84314,0,"."],[84316,2,""],[84316,0,"ut"],[84319,0," $(FOUND_SOURCE_FILES)"],[84375,0,"echo "],[84383,1,""],[84383,0,"OU"],[84421,0,".PHONY: cscope\ncscope: cscope.out\n\n"],[90671,8,""],[90672,1,""],[90672,0,"OU"],[90689,1,""],[84361,7,""],[84361,0,"$@"],[84413,0,"f$@ -"],[84037,1,""],[84038,14,""],[84038,0,"@"],[84040,1,""],[84094,1,""],[84095,14,""],[84095,0,"@"],[84097,1,""],[84107,1,""],[84108,14,""],[84108,0,"@"],[84110,1,""],[84111,1,""],[84112,15,""],[84112,0,"@"],[84162,4,""],[84162,0,"$@"],[84219,4,""],[84219,0,"$@"],[84232,4,""],[84232,0,"$@"],[84236,4,""],[84236,0,"$@"],[84295,0,"+"],[84349,0,"+"],[84353,0," && \\\n\tmv $@+ $@"]]},{"span":[329053,329115],"parents":[327205,328243,328512],"agent":"Johannes Schindelin","seqStart":11533,"ops":[[82371,0,"ifdef NO_GETTEXT\nPOFILES :=\nMOFILES :=\nelse\n"],[82524,1,""],[82525,17,""]]},{"span":[329115,329602],"parents":[327205,328243,328512],"agent":"Ævar Arnfjörð Bjarmason","seqStart":17287,"ops":[[65860,0,"Flags affecting all rules\n\n# A GNU make extension since gmake 3.72 (released in late 1994) to\n# remove the target of rules if commands in those rules fail. "],[66017,0,"he\n# default is to only do that if m"],[66054,0,"ke itself "],[66065,0,"eceives a si"],[66078,0,"nal. Affects\n# all targ"],[66103,0,"s, see:\n#\n#    info make --index-search=.DELETE_ON_ERROR\n.DELETE_ON_ERROR:\n\n### Target"],[69414,18,""],[71606,15,""],[72152,5,""],[72153,6,""],[72928,5,""],[72929,10,""],[73323,15,""],[73494,15,""],[73690,40,""],[77263,11,""],[79888,12,""],[79950,4,""],[79951,1,""],[79952,7,""]]},{"span":[329602,329626],"parents":[329601],"agent":"SZEDER Gábor","seqStart":760,"ops":[[79890,0,"RM) $@ && $("],[79966,0,"RM) $@ && $("]]},{"span":[329626,329669],"parents":[327205,328243,328512],"agent":"Jonathan Tan","seqStart":285,"ops":[[27970,0,"rtial-clone.o\nTEST_BUILTINS_OBJS += test-pa"]]},{"span":[329669,329705],"parents":[327205,328243,328512],"agent":"Ævar Arnfjörð Bjarmason","seqStart":17774,"ops":[[27400,0,"getcwd.o\nTEST_BUILTINS_OBJS += test-"]]},{"span":[329705,329785],"parents":[327205,328243,328512],"agent":"Eric Wong","seqStart":1864,"ops":[[27836,0,"idtree.o\nTEST_BUILTINS_OBJS += test-o"],[31595,0,"btree.o\nLIB_OBJS += c"],[33982,0,"oidtree.o\nLIB_OBJS += "]]},{"span":[329785,329874],"parents":[327882,329114,329601,329668,329704,329784],"agent":"Johannes Schindelin","seqStart":11595,"ops":[[24565,11,""],[24566,31,""],[81439,47,""]]},{"span":[329874,329891],"parents":[327882,329114,329601,329668,329704,329784],"agent":"Ævar Arnfjörð Bjarmason","seqStart":17810,"ops":[[45078,0,"Wno-pedantic \\\n\t-"]]},{"span":[329891,331515],"parents":[327882,328588,328695,329114,329601,329668,329704,329784],"agent":"Han-Wen Nienhuys","seqStart":25,"ops":[[28693,0,"ftable.o\nTEST_BUILTINS_OBJS += test-re"],[31149,0,"REFTABLE_LIB = reftable/libreftable.a\nREFTABLE_TEST_LIB = reftable/libreftable_test.a\n"],[42181,0," $(REFTABLE_LIB)"],[75363,0,"REF"],[75367,0,"ABL"],[75371,0,"_OBJ"],[75376,0," += reftable/basics.o\nREF"],[75402,0,"ABLE"],[75412,0,"+= reftable/error.o\nREFTABLE_OBJS += reftable/publicbasics.o\n\nREFTABLE_TEST_OBJS += reftable/test_framework.o\nREFTABLE_TEST_OBJS += reftable/basics_test.o\n\nTEST_OBJS "],[75665,0,"\n"],[75968,0,"OBJECTS += $(REFTABLE_OBJS) $(REFTABLE_TEST_OBJS)\n\n"],[80782,0,"$(REFTABLE_LIB): $(REFTABLE_OBJS)\n\t$(QUIET_AR)$(RM) $@ && $(AR) $(ARFLAGS) $@ $^\n\n$(REFTABLE_TEST_LIB): $(REFTABLE_TEST_OBJS)\n\t$(QUIET_AR)$(RM) $@ && $(AR) $(ARFLAGS) $@ $^\n\n"],[90734,0," $(REFTABLE_TEST_LIB)"],[101633,0," $(REFTABLE_LIB) $(REFTABLE_TEST_LIB)"],[75458,0,"blocksource.o\nREFTABLE_OBJS += reftable/"],[75513,0,"REFTABLE_OBJS += reftable/record.o\n\nREFTABLE_TEST_OBJS += reftable/record_test.o"],[10575,0,"UNCOMPRESS2 if your zlib does not have uncompress2.\n#\n# Define "],[10640,0,"_NO"],[55477,0,"UNCOMPRESS2\n\tBASIC_CFLAGS += -DNO_UNCOMPRESS2\n\tREFTABLE_OBJS += compat/zlib-uncompress2.o\nendif\n\nifdef NO_"],[75635,0,".o\nREFTABLE_OBJS += reftable/block"],[75786,0,"block_test.o\nREFTABLE_TEST_OBJS += reftable/"],[75754,0,"REFTABLE_OBJS += reftable/tree.o\n\nREFTABLE_TEST_OBJS += reftable/basics_test.o"],[76001,6,""],[76001,0,"tree"],[75787,0,"REFTABLE_OBJS += reftable/writer.o\n"],[75780,0,"refname.o\nREFTABLE_OBJS += reftable/generic.o\nREFTABLE_OBJS += reftable/stack.o\nREFTABLE_OBJS += reftable/"],[75704,0,"iter.o\nREFTABLE_OBJS += reftable/"],[75780,0,"ader.o\nREFTABLE_OBJS += reftable/re"],[76162,0,"readwrite_test.o\nREFTABLE_TEST_OBJS += reftable/"],[75778,0,"pq.o\nREFTABLE_OBJS += reftable/"],[76148,0,"pq_test.o\nREFTABLE_TEST_OBJS += reftable/"],[75778,0,"merged.o\nREFTABLE_OBJS += reftable/"],[76183,0,"merged_test.o\nREFTABLE_TEST_OBJS += reftable/"],[76362,0,"refname_test.o\nREFTABLE_TEST_OBJS += reftable/stack_test.o\nREFTABLE_TEST_OBJS += reftable/"],[76183,0,"dump.o\nREFTABLE_TEST_OBJS += reftable/"]]},{"span":[331515,331870],"parents":[327882,328588,328695,329114,329601,329668,329704,329784],"agent":"Bagas Sanjaya","seqStart":0,"ops":[[20083,0,"INSTALL_STRIP can be set to \"-s\" to strip binaries during installation,\n# if your $(INSTALL) command supports the option.\n#\n# "],[92837,0,"x"],[92893,0,"\ninstall_bindir_programs :="],[92923,0,"install_bindir_xprograms) $("],[93115,0,"INSTALL_STRIP =\n\n"],[93268,0,"INST"],[93276,0,"STRIP) $("],[93344,0,"$(SCRIPTS) '$(DESTDIR_SQ)$(gitexec_instdir_SQ)'\n\t$(INSTALL) "],[93476,0,"INSTALL_STRIP) $("],[93508,0,"x"],[93547,0,"\t$(INSTALL) $(BINDIR_PROGRAMS_NO_X) '$(DESTDIR_SQ)$(bindir_SQ)'\n\n"]]},{"span":[331870,332065],"parents":[327882,328588,328695,329114,329625,329668,329704,329784],"agent":"Ævar Arnfjörð Bjarmason","seqStart":17827,"ops":[[42628,0,"informing GIT-BUILD-OPTIONS of the SANITIZE=leak "],[42678,0,"arget\nSANITIZE_LEAK =\n\n# For t"],[44175,0,"SANITIZE_LEAK = Y"],[44193,0,"sCompiledWithIt\ne"],[87121,0,"SANITIZE_LEAK=\\''$(subst ','\\'',$(subst ','\\'',$(SANITIZE_LEAK)))'\\' >>$@+\n\t@echo "]]},{"span":[332065,332699],"parents":[327882,328588,328695,329114,329601,329668,329704,329784],"agent":"Ævar Arnfjörð Bjarmason","seqStart":18022,"ops":[[17637,344,""],[21135,19,""],[21136,72,""],[45636,199,""]]},{"span":[332699,332707],"parents":[332698],"agent":"Carlo Marcelo Arenas Belón","seqStart":590,"ops":[[21085,0,"no-"],[21109,2,""],[21109,0,"Dis"]]},{"span":[332707,332774],"parents":[327882,329114,329601,329668,329704,329784],"agent":"Ævar Arnfjörð Bjarmason","seqStart":18656,"ops":[[96825,67,""]]},{"span":[332774,332791],"parents":[329052,329625,331869,332706,332773],"agent":"Ævar Arnfjörð Bjarmason","seqStart":18988,"ops":[[44133,0,"Wno-pedantic \\\n\t-"]]},{"span":[332791,332857],"parents":[329052,329625,331869,332706,332773],"agent":"Ævar Arnfjörð Bjarmason","seqStart":19005,"ops":[[90031,0,"%.o "],[90045,6,""],[90111,0,"-Wsparse-error \\\n\t\t"],[90166,0," && \\\n\t>$@"],[90192,10,""],[100976,0,"SP_OBJ)\n\t$(RM) $("]]},{"span":[332857,332868],"parents":[332856],"agent":"Ævar Arnfjörð Bjarmason","seqStart":19071,"ops":[[90034,11,""]]},{"span":[332868,333122],"parents":[327882,328588,328695,329114,329625,329668,329704,329784],"agent":"Ævar Arnfjörð Bjarmason","seqStart":18723,"ops":[[48296,157,""],[48314,1,""],[48341,96,""]]},{"span":[333122,333790],"parents":[329052,331869,332706,332773,333121],"agent":"Ævar Arnfjörð Bjarmason","seqStart":19082,"ops":[[90475,0,".PHONY: check\n"],[30866,0,".PHONY: generated-hdrs"],[30889,0,"generated-hdrs: $(GENERATED_H)\n\n"],[90010,14,""],[90010,0,"$(GENERATED_H)"],[90025,14,""],[90536,28,""],[90536,0,"$(GENERATED_H)"],[68600,4,""],[68601,14,""],[68840,14,""],[76525,274,""],[32990,0,"hook.o\nLIB_OBJS += "],[30866,0,"GENERATED_H += hook-list"],[30891,0,"h\n\n."],[67768,0,"hook.sp hook.s hook.o: hook-list.h\n"],[67865,0,"hook-list.h "],[68938,0,"hook-list.h: generate-hooklist.sh Documentation/githooks.txt\n\t$(QUIET_GEN)$(SHELL_PATH) ./generate-hooklist.sh >$@\n\n"]]},{"span":[333790,333859],"parents":[333789],"agent":"Ævar Arnfjörð Bjarmason","seqStart":19750,"ops":[[67768,2,""],[67768,0,"builtin/bugrep"],[67783,1,""],[67783,0,"rt"],[67789,2,""],[67789,0,"builtin/bugrep"],[67804,1,""],[67804,0,"rt"],[67809,2,""],[67809,0,"builtin/bugrep"],[67824,1,""],[67824,0,"rt"],[67896,12,""]]},{"span":[333859,333870],"parents":[327882,329114,329601,329668,329704,329784],"agent":"Ævar Arnfjörð Bjarmason","seqStart":18977,"ops":[[76056,11,""]]},{"span":[333870,334551],"parents":[329873,329890,332064,332790,332856,333789,333869],"agent":"Ævar Arnfjörð Bjarmason","seqStart":19819,"ops":[[69378,0,"GIT-SCRIPT-DEFINES: FORCE\n\t@FLAGS='$(SCRIPT_DEFINES)'; \\\n\t    if test x\"$$FLAGS\" != x\"`cat $@ 2>/dev/null`\" ; then \\\n\t\techo >&2 \"    * new script parameters\"; \\\n\t\techo \"$$FLAGS\" >$@; \\\n            fi\n\n"],[70096,202,""],[69204,15,""],[69225,4,""],[69226,7,""],[69737,38,""],[12808,144,""],[69159,13,""],[69160,5,""],[69746,52,""]]},{"span":[334551,334815],"parents":[332867,334550],"agent":"Johannes Schindelin","seqStart":11684,"ops":[[74990,0,"\nSCALAR_SOURCES := contrib/scalar/scalar.c\nSCALAR_OBJECTS := $(SCALAR_SOURCES:c=o)\nOBJECTS += $(SCALAR_OBJECTS)\n\n"],[79388,0,"contrib/scalar/scalar$X: $(SCALAR_OBJECTS) GIT-LDFLAGS $(GITLIBS)\n\t$(QUIET_LINK)$(CC) $(ALL_CFLAGS) -o $@ $(ALL_LDFLAGS) \\\n\t\t$(filter %.o,$^) $(LIBS)\n\n"]]},{"span":[334815,334826],"parents":[329625,332773,333869],"agent":"brian m. carlson","seqStart":1317,"ops":[[42576,0," -std=gnu99"]]},{"span":[334826,334857],"parents":[323361,331514,334814,334825],"agent":"Emily Shaffer","seqStart":434,"ops":[[38641,0,"hook.o\nBUILTIN_OBJS += builtin/"]]},{"span":[334857,335983],"parents":[323361,331514,334814,334825],"agent":"brian m. carlson","seqStart":1328,"ops":[[9721,0,"CSPRNG_METHOD to \"arc4random\" if your system has arc4random and\n# arc4random_buf, \"libbsd\" if your system has those functions from libbsd,\n# \"getrandom\" if your system has getrandom, \"getentropy\" if your system has\n# getentropy, \"rtlgenrandom\" for RtlGenRandom (Windows only), or \"openssl\" if\n# you'd want to use the OpenSSL CSPRNG.  You may set multiple options with\n# spaces, in which case a suitable option will be chosen.  If unset or set to\n# anything else, defaults to using \"/dev/urandom\".\n#\n# Define "],[27122,0,"sprng.o\nTEST_BUILTINS_OBJS += test-c"],[59151,0,"findstring arc4random,$(CSPRNG_METHOD)),)\n\tBASIC_CFLAGS += -DHAVE_ARC4RANDOM\nendif\n\nifneq ($(findstring libbsd,$(CSPRNG_METHOD)),)\n\tBASIC_CFLAGS += -DHAVE_ARC4RANDOM_LIBBSD\n\tEXTLIBS += -lbsd\nendif\n\nifneq ($(findstring getrandom,$(CSPRNG_METHOD)),)\n\tBASIC_CFLAGS += -DHAVE_GETRANDOM\nendif\n\nifneq ($(findstring getentropy,$(CSPRNG_METHOD)),)\n\tBASIC_CFLAGS += -DHAVE_GETENTROPY\nendif\n\nifneq ($(findstring rtlgenrandom,$(CSPRNG_METHOD)),)\n\tBASIC_CFLAGS += -DHAVE_RTLGENRANDOM\nendif\n\nifneq ($(findstring openssl,$(CSPRNG_METHOD)),)\n\tBASIC_CFLAGS += -DHAVE_OPENSSL_CSPRNG\nendif\n\nifneq ($("]]},{"span":[335983,336010],"parents":[335982],"agent":"Carlo Marcelo Arenas Belón","seqStart":598,"ops":[[59717,0,"\tEXTLIBS += -lcrypto -lssl\n"]]},{"span":[336010,336023],"parents":[329873,329890,332064,332790,332867,333789,333869],"agent":"Ævar Arnfjörð Bjarmason","seqStart":20500,"ops":[[57936,13,""]]},{"span":[336023,336457],"parents":[329873,329890,332064,332790,332867,333789,333869],"agent":"Ævar Arnfjörð Bjarmason","seqStart":20513,"ops":[[64237,1,""],[64238,201,""],[67992,0,"PAGER_ENV_SQ = $(subst ','\\'',$(PAGER_ENV))\nPAGER_ENV_CQ = \"$(subst \",\\\",$(subst \\,\\\\,$(PAGER_ENV)))\"\nPAGER_ENV_CQ_SQ = $(subst ','\\'',$(PAGER_ENV_CQ))\npager.sp pager.s pager.o: EXTRA_CPPFLAGS = \\\n\t-DPAGER_ENV='$(PAGER_ENV_CQ_SQ)'\n\n"]]},{"span":[336457,336747],"parents":[323361,331514,333858,334814,334825,336022,336456],"agent":"Ævar Arnfjörð Bjarmason","seqStart":20947,"ops":[[10575,1,""],[10576,1,""],[10577,2,""],[10579,62,""],[31864,0,"mpat/zlib-uncompress2.o\nLIB_OBJS += co"],[41781,0,"# xdiff and reftable libs may in turn depend on what is in libgit.a\n"],[41913,0," $(LIB_FILE)"],[54895,106,""]]},{"span":[336747,339700],"parents":[334856,335982,336746],"agent":"Ævar Arnfjörð Bjarmason","seqStart":21237,"ops":[[53,0,"Import tree-wide shared Makefile behavior and libraries\ninclude shared.mak\n\n# "],[66924,323,""],[31509,5,""],[31509,0,"##"],[31512,2,""],[31512,0,"Exhaustive"],[31523,2,""],[31523,0,"list"],[31528,0," "],[31530,0,"f ou"],[31535,1,""],[31536,5,""],[31537,0,"o"],[31539,1,""],[31539,0,"rce file"],[31548,0,", ei"],[31553,0,"her dynamically"],[31569,3,""],[31569,0,"generated"],[31579,5,""],[31579,0,"\n## or "],[31587,0,"ardcod"],[31594,2,""],[31594,0,"d.\nSOURCES_CMD"],[31609,0,"= ( \\\n\t"],[31629,0,"\\\n\t\t'*.[hcS]' \\\n\t\t"],[31650,0,"s"],[31654,0,"\\\n\t\t"],[31661,0,"*["],[31664,1,""],[31664,0,"p][0-9][0-9][0-9][0-9]*"],[31689,0,"\\\n\t\t"],[31696,2,""],[31697,3,""],[31697,0,"o"],[31699,2,""],[31700,0,"r"],[31702,3,""],[31702,0,"b"],[31705,0,"\\\n\t\t"],[31740,0,"\t\\( "],[31756,0,"type d -"],[31770,0,"\\) \\\n\t\t"],[31781,0,"( -name '[tp][0-9][0-9][0-9][0-9]*' -prune \\) \\"],[31830,0,"\t"],[31832,0,"o \\( -"],[31843,0,"contrib -"],[31853,0,"ype d"],[31866,2,""],[31866,0,"\\)"],[31872,0,"\t"],[31874,0,"o \\( -"],[31885,1,""],[31885,0,"build -type d -prune \\) \\\n\t\t-"],[31915,2,""],[31915,0," \\( -na"],[31924,1,""],[31924,0," '"],[31927,0,"r"],[31929,0,"sh*' -"],[31936,3,""],[31936,0,"ype"],[31940,0,"d "],[31949,0,"\\) \\\n\t\t"],[31960,0,"( -name '*.[hcS]' -type f -print \\) \\"],[31999,0,"\t"],[32001,0,"o \\( -"],[32015,0,"s"],[32020,0,"type f -"],[32033,0," \\) \\\n\t\t| sed -e 's|^\\./||' \\\n\t)\nFOUND_SOURCE_FILES := $(shell $(SOURCES_CMD))\n\nFOUND_C_SOURCES = $(filter %.c,$(FOUND_SOURCE_FILES))\nFOUND_H_SOURCES = $(filter %.h,$(FOUND_SOURCE_FILES))\n\nCOCCI_SOURCES = $(filter-out $(THIRD_PARTY_SOURCES"],[32273,0,",$(FOUND_C_SOURCES"],[32299,0,"H = $(F"],[32307,0,"UND_H_SOURCES)\n\nLIB_O"],[86430,117,""],[86431,18,""],[86432,1,""],[86433,149,""],[86434,200,""],[86435,43,""],[93368,24,""],[93370,103,""],[78926,12,""],[44942,48,""],[61138,947,""],[84547,0,"call mkdir_p_parent_template)\n\t$("],[84593,9,""],[84595,13,""],[85125,0,"call mkdir_p_parent_template)\n\t$("],[85167,18,""],[85169,3,""],[85398,10,""],[85398,0,"call "],[85408,2,""],[85408,0,"_"],[85410,5,""],[85410,0,"_pa"],[85414,3,""],[85414,0,"ent_template"],[85427,5,""],[85429,0,"$(QUIET_GEN)"],[90506,1,""],[90506,0,"$(call "],[90518,2,""],[90518,0,"_p_"],[90522,6,""],[90522,0,"a"],[90524,2,""],[90524,0,"ent_tem"],[90532,0,"lat"],[90536,2,""],[90536,0,")"]]},{"span":[339700,339721],"parents":[334856,335982,336746],"agent":"John Cai","seqStart":0,"ops":[[35413,0,"log.o\nLIB_OBJS += ref"]]},{"span":[339721,339865],"parents":[334856,335982,336746],"agent":"Neeraj Singh","seqStart":0,"ops":[[17864,0,"HAVE_SYNC_FILE_RANGE if your platform has sync_file_range.\n#\n# Define "],[58932,0,"HAVE_SYNC_FILE_RANGE\n\tBASIC_CFLAGS += -DHAVE_SYNC_FILE_RANGE\nendif\n\nifdef "]]},{"span":[339865,340538],"parents":[334856,335982,336746],"agent":"Jeff Hostetler","seqStart":3647,"ops":[[33364,0,"fsmonitor-ipc.o\nLIB_OBJS += fsmonitor-settings.o\nLIB_OBJS += "],[39045,0,"fsmonitor--daemon.o\nBUILTIN_OBJS += builtin/"],[20579,0,"If your platform supports a built-in fsmonitor backend, set\n# FSMONITOR_"],[20652,0,"AEMON_BACKEND to th"],[20672,0," \"<name>\" o"],[20684,0," the correspond"],[20701,0,"g\n# `compat/fsmonitor/fsm-listen-<name>.c` that implements the\n# `fsm_listen__*()` routin"],[20791,0,"s.\n#\n#"],[20799,0,"efine D"],[60640,0,"def FSMONITOR_DAEMON_BACKEND\n\tCOMPAT_CFLAGS += -DHAVE_FSMONITOR_DAEMON_BACKEND\n\tCOMPAT_OBJS += compat/fsmonitor/fsm-listen-$(FSMONITOR_DAEMON_BACKEND).o\nendif\n\nif"],[89741,0,"FSMONITOR_DAEMON_BACKEND\n\t@echo FSMONITOR_DAEMON_BACKEND=\\''$(subst ','\\'',$(subst ','\\'',$(FSMONITOR_DAEMON_BACKEND)))'\\' >>$@+\nendif\nifdef "],[27769,0,"fsmonitor-client.o\nTEST_BUILTINS_OBJS += test-"]]},{"span":[340538,341310],"parents":[340537],"agent":"Jeff Hostetler","seqStart":4320,"ops":[[20798,0,"If your platform has OS-specific ways to tell if a repo is incompatible with\n# fsmonitor (whether the hook or IPC daemon version), set FSMONITOR_OS_SETTINGS\n# to the \"<name>\" of the corresponding `compat/fsmonitor/fsm-settings-<name>.c`\n# that implements the `fsm_os_settings__*()` routines.\n#\n# "],[61144,0,"def FSMONITOR_OS_SETTINGS\n\tCOMPAT_CFLAGS += -DHAVE_FSMONITOR_OS_SETTINGS\n\tCOMPAT_OBJS += compat/fsmonitor/fsm-s"],[61256,0,"ttings-$(FSMONITOR_OS_SETTINGS).o\nendif\n\nife"],[90379,0,"FSMONITOR_OS_SETTINGS\n\t@echo FSMONITOR_OS_SETTINGS=\\''$(subst ','\\'',$(subst ','\\'',$(FSMONITOR_OS_SETTINGS)))'\\' >>$@+\nendif\nifdef "],[20744,0,"and\n# `compat/fsmonitor/fsm-health-<name>.c` files\n# "],[20811,1,""],[20815,2,""],[20834,0,"and `fsm_health__*()` "],[61207,0,"\tCOMPAT_OBJS += compat/fsmonitor/fsm-health-$(FSMONITOR_DAEMON_BACKEND).o\n"],[28407,0,"hexdump.o\nTEST_BUILTINS_OBJS += test-"]]},{"span":[341310,341334],"parents":[336009,339699,339720,339864,340537],"agent":"René Scharfe","seqStart":4703,"ops":[[35221,24,""]]},{"span":[341334,341437],"parents":[336009,339699,339720,339864,340537],"agent":"Jiang Xin","seqStart":121,"ops":[[83646,0,"sort $("],[83687,0,")"],[83706,0,"sort $("],[83723,16,""],[83739,0,")"],[83760,0,"sort $("],[83779,0,")"],[83653,0,"FOUND_"],[83661,0,"S"],[83663,6,""],[83663,0,"URCES"],[83672,3,""],[83672,0,"FOUND"],[83679,0,"_SOURCES"],[83691,0,"SCALAR_SOURCES) \\\n\t        $("]]},{"span":[341437,343496],"parents":[341436],"agent":"Ævar Arnfjörð Bjarmason","seqStart":24190,"ops":[[23750,0,"CAT = msgcat\nMSG"],[32276,0,".build -type d -prune \\) \\\n\t\t-o \\( -name "],[83365,0,"package-name=Git \\\n\t--"],[84043,2,""],[84043,0,"We genera"],[84055,0,"in"],[84058,1,""],[84058,0,"ermedi"],[84066,0,"e"],[84068,2,""],[84068,0,".bu"],[84072,1,""],[84072,0,"ld/pot/po/%.po"],[84087,0,"f"],[84089,0,"le"],[84093,2,""],[84093,0,"cont"],[84098,0,"ini"],[84102,1,""],[84102,0,"g"],[84104,2,""],[84104,0,"a\n##"],[84109,1,""],[84110,1,""],[84110,0,"xt"],[84113,2,""],[84113,0,"act"],[84118,6,""],[84118,0,"f"],[84124,3,""],[84124,0,"tr"],[84127,0,"ns"],[84130,2,""],[84135,0,"s"],[84137,4,""],[84137,0,"we fin"],[84144,0," "],[84147,0," e"],[84150,0,"ch file in "],[84162,0,"he s"],[84167,0,"u"],[84169,0,"ce"],[84175,4,""],[84175,0,"t"],[84177,0,"ee."],[84181,3,""],[84181,0,"W"],[84183,2,""],[84184,6,""],[84184,0,"wil"],[84188,0," assemb"],[84197,1,""],[84198,5,""],[84199,7,""],[84199,0,"h"],[84201,1,""],[84201,0,"m"],[84203,4,""],[84203,0,"us"],[84206,1,""],[84206,0,"ng"],[84209,1,""],[84209,0,"m"],[84211,0,"gcat"],[84219,1,""],[84219,0,"creat"],[84226,3,""],[84226,0,"the"],[84230,0,"f"],[84233,1,""],[84234,0,"l"],[84239,1,""],[84239,0,"\"po/g"],[84246,3,""],[84246,0,"."],[84249,1,""],[84249,0,"t\" f"],[84254,4,""],[84254,0,"le.\nLOCALIZED_ALL_GEN_PO"],[84279,4,""],[84279,0,"=\n\nLOCALIZED_C_GEN_PO"],[84301,1,""],[84301,0,"="],[84303,3,""],[84303,0,"$(LOCALIZED_C:%=."],[84321,2,""],[84321,0,"ui"],[84324,3,""],[84324,0,"d/po"],[84329,4,""],[84329,0,"/po/%.po"],[84338,1,""],[84338,0,"\nLOCALIZED_ALL_GEN_PO +="],[84363,0,"$"],[84365,1,""],[84365,0,"LOCALIZED_C_GEN_PO"],[84384,0,"\n\nLOCALIZED_SH_GEN_PO"],[84406,3,""],[84406,0,"="],[84408,0,"$(LOCALIZED_SH:%=.bui"],[84430,0,"d/p"],[84434,5,""],[84434,0,"t/p"],[84438,8,""],[84438,0,"/%.p"],[84443,2,""],[84443,0,")\nLOCALIZED_ALL_GEN_PO += $(LOCALIZED_SH_GEN_PO)\n"],[84493,2,""],[84493,0,"LOCALIZED_PERL_GEN_PO"],[84515,4,""],[84515,0,"="],[84517,0,"$(LOCALIZED_PERL:%=."],[84538,2,""],[84538,0,"ui"],[84541,0,"d/p"],[84545,1,""],[84546,0,"/po/%"],[84552,0,"po)\nLOCALIZED_ALL_GEN_PO += $(LOCALIZED_PERL_GEN_PO)\n"],[84783,1,""],[84783,0,"$(LOCALIZED_C_GEN_PO): .build/"],[84815,3,""],[84816,0,"/po/%"],[84824,1,""],[84826,0,"%\n\t"],[84831,23,""],[84831,0,"ca"],[84837,1,""],[84837,0,"k"],[84839,2,""],[84840,1,""],[84840,0,"r_p_p"],[84846,14,""],[84847,2,""],[84848,1,""],[84848,0,"nt_"],[84853,2,""],[84853,0,"mpl"],[84858,3,""],[84859,14,""],[84859,0,")\n\t$(QUIET_XGETTEXT)"],[84880,3,""],[84880,0,"\\"],[84883,1,""],[84884,4,""],[84885,2,""],[84886,4,""],[84887,9,""],[84887,0,"if"],[84890,4,""],[84891,0,"r"],[84893,11,""],[84893,0,"p"],[84895,1,""],[84897,1,""],[84897,0," PRIt"],[84903,0,"m"],[84905,1,""],[84906,16,""],[84906,0,"$<;"],[84910,6,""],[84911,6,""],[84913,12,""],[84914,31,""],[84915,19,""],[84918,3,""],[84918,0,"\t("],[84924,0,"\t"],[84955,2,""],[84956,2,""],[84956,0,"<"],[84958,0,"\\\n\t\t\t\t"],[84965,2,""],[84965,0,".build/pot/po/"],[84980,3,""],[84980,0,"<"],[84989,0,"\t"],[84991,1,""],[84991,0,"d .build/po"],[85003,0,"/po"],[85007,6,""],[85007,0,"&&"],[85010,2,""],[85010,0,"\\\n\t\t\t"],[85016,3,""],[85016,0,"(XGETTEXT)"],[85027,4,""],[85027,0,"--o"],[85031,8,""],[85031,0,"it-header"],[85044,0,"\t\t\t-o $(@:.buil"],[85060,0,"/pot/p"],[85067,2,""],[85067,0,"/%=%) \\"],[85075,1,""],[85076,0,"\t\t\t"],[85081,6,""],[85089,0,"_FLAGS_C) $< && \\\n\t\t\trm $<; \\\n\t\t"],[85122,0,"; \\\n\t    else \\\n\t\t"],[85153,0,"-omit-header \\\n\t\t\t-"],[85173,0," "],[85176,1,""],[85198,0,"<; \\\n\t    fi\n\n$"],[85224,1,""],[85224,0,"SH_GEN_PO): .build/pot/po/%.po: %\n\t$(call mkdir_p_parent_template"],[85320,6,""],[85323,1,""],[85324,0,"m"],[85326,1,""],[85326,0,"t"],[85328,0,"head"],[85333,7,""],[85333,0,"r \\\n\t\t-o$@"],[85365,1,""],[85365,0,"$<\n"],[85369,2,""],[85381,2,""],[85381,0,"PERL_GEN_PO): .build/pot/po/%.po: %\n\t$(call mkdir_p_parent_template"],[85481,6,""],[85482,1,""],[85483,0,"m"],[85485,1,""],[85485,0,"t"],[85487,0,"h"],[85489,7,""],[85489,0,"ader"],[85494,0,"\\\n\t\t-o$@ "],[85526,1,""],[85526,0,"$<\n\ndefine gen_pot_header"],[85552,2,""],[85554,7,""],[85554,0,"XGETTEXT) $(XGETT"],[85572,1,""],[85572,0,"XT"],[85575,3,""],[85575,0,"F"],[85577,0,"AGS_C"],[85583,1,""],[85583,0," \\"],[85587,1,""],[85587,0,"-o"],[85590,1,""],[85590,0,"- /d"],[85596,0,"/null | \\\ns"],[85608,0,"d -e 's|charset=CHARSET|cha"],[85636,0,"set=UTF-8|' \\\n    -e 's|\\(Las"],[85666,1,""],[85666,0,"-Tra"],[85671,1,""],[85671,0,"slator: \\)FULL NAME <.*>|\\1make by"],[85710,4,""],[85710,0,"Makefile|' \\\n    -"],[85729,1,""],[85730,0,"'"],[85732,1,""],[85732,0,"|\\(Lang"],[85740,2,""],[85740,0,"age-T"],[85746,1,""],[85746,0,"am: \\)LANGUAGE"],[85761,2,""],[85761,0,"<.*>|\\1Git M"],[85774,1,""],[85775,0,"li"],[85780,1,""],[85780,0,"List <git@vger.ker"],[85799,0,"e"],[85801,1,""],[85801,0,".org>|' \\\n    >$@ &&"],[85822,1,""],[85822,0,"\\\nec"],[85827,1,""],[85827,0,"o"],[85829,0,"'\"Pl"],[85834,0,"ral-Forms: nplurals=INTEGER; "],[85864,0,"lural=EXPRESSION;\\\\n\"' >>$@\nen"],[85895,1,""],[85895,0,"ef\n\n.build/po"],[85909,0,"/git.h"],[85916,0,"a"],[85918,0,"er:"],[85923,1,""],[85923,0,"(LOCALIZED_ALL_GEN_PO)\n\t$(call mkdir_p_parent_template)"],[85980,0,"$(QUIET_GEN)$("],[85995,1,""],[85995,0,"en_po"],[86001,2,""],[86001,0,"_h"],[86004,1,""],[86004,0,"ad"],[86007,0,"r)\n\npo/git.po"],[86021,0,":"],[86023,2,""],[86023,0,".build/pot/git."],[86039,0,"e"],[86041,0,"de"],[86044,1,""],[86044,0," $(LOCALIZED_ALL_GEN_PO) FORCE"],[86076,2,""],[86076,0,"$(QUIET_GEN)$(MSGCAT) $(filter-out"],[86111,0,"FORCE,"],[86118,2,""],[86118,0,"^)"],[86121,0,">"],[104107,0,"-r .build\n\t$(RM) "],[83381,21,""],[86134,0,".PHONY: check-pot\ncheck-pot: $(LOCALIZED_ALL_GEN_PO)\n\n"]]},{"span":[343496,343539],"parents":[343495],"agent":"Jiang Xin","seqStart":224,"ops":[[31980,0,"--deduplicate "],[32496,0,"filter-out $(GENERATED_H),$("],[32545,0,")"]]},{"span":[343539,343583],"parents":[343538],"agent":"Ævar Arnfjörð Bjarmason","seqStart":26249,"ops":[[86090,6,""],[86113,13,""],[86114,6,""],[86116,1,""],[104174,0,"po/git.pot\n\t$(RM) "]]},{"span":[343583,344079],"parents":[343582],"agent":"Jiang Xin","seqStart":267,"ops":[[23779,0,"MSGMERGE = msgmerge\n"],[83751,0,"MSGMERGE_FLAGS = --add-location --backup=off --update\n"],[86225,0,"define check_po_file_envvar\n\t$(if $(PO_FILE), \\\n\t\t$(if $(filter po/%.po,$(PO_FILE)), , \\\n\t\t\t$(error PO_FILE should match pattern: \"po/%.po\")), \\\n\t\t$(error PO_FILE is not defined))\nendef\n\n.PHONY: po-update\npo-update: po/git.pot\n\t$(check_po_file_envvar)\n\t@if test ! -e $(PO_FILE); then \\\n\t\techo >&2 \"error: $(PO_FILE) does not exist\"; \\\n\t\texit 1; \\\n\tfi\n\t$(QUIET_MSGMERGE)$(MSGMERGE) $(MSGMERGE_FLAGS) $(PO_FILE) po/git.pot\n\n"]]},{"span":[344079,345330],"parents":[344078],"agent":"Ævar Arnfjörð Bjarmason","seqStart":26293,"ops":[[86563,0,"cho >&2 'To create an initial po file, use: \"make po-init PO_FILE=po/XX.po\"'; \\\n\t\te"],[86784,0,"### TODO FIXME: Translating everyth"],[86820,0,"ng in these "],[86833,0,"iles is a ba"],[86846,0,"\n### h"],[86853,0,"uristic "],[86862,0,"or \"core\", as we'll translate obscure error() messages\n### along with commonly seen i18n messages. A better heuristic would\n### be to e.g. use spatch to first remove error/die/warning\n###"],[87050,0,"etc. messages.\nLOCALIZED_C_CORE =\nLOCALIZED_C_CORE += builtin/checkout.c\nLOCALIZED_C_CORE += builtin/clone.c\nLOCALIZED_C_CORE += builtin/index-pack.c\nLOCALIZED_C_CORE += builtin/push.c\nLOCALIZED_C_CORE += builtin/reset.c\nLOCALIZED_C_CORE += remote.c\nLOCALIZED_C_CORE += wt-status.c\n\nLOCALIZED_C_CORE_GE"],[87353,0,"_PO = $(L"],[87363,0,"CALIZED"],[87371,0,"C_CORE:%=.build/pot/po/%.po)\n\n.build/pot/git-core.header: $(LOCALIZED_C_CORE_"],[87450,0,"N_PO)\n\t$(call mkdir_p_parent_template)\n\t$(QUIE"],[87497,0,"_GEN)$(gen_pot_header)\n\npo/git-core.pot: .build/pot/git-core.header $(LOCALIZED_C_CORE_GEN_PO)\n\t$(QUIE"],[87600,0,"_G"],[87603,0,"N)$(MSGCAT) $^ >$@\n\n.PHONY: po-init\npo-init: po/git-core.pot\n\t$(check_po_file_envvar)\n\t@if test -e $(PO_FILE); then \\\n\t\techo >&2 \"error: $(PO_FILE) exists already\"; \\\n\t\texit 1; \\\n\tfi\n\t$(QUIET_MSGINIT)msginit \\\n\t\t--input=$< \\\n\t\t--output=$(PO_FILE) \\\n\t\t--no-translator \\\n\t\t--locale=$(PO_FILE:po/%.po=%)\n\n## po/*.po files & their rules\nifdef NO_GETTE"],[105915,0," po/git-core.pot"]]},{"span":[345330,345397],"parents":[336009,339699,339720,339864,340537],"agent":"Taylor Blau","seqStart":36,"ops":[[35731,0,"mtimes.o\nLIB_OBJS += pack-"],[28591,0,"ck-mtimes.o\nTEST_BUILTINS_OBJS += test-pa"]]},{"span":[345397,345550],"parents":[323361,331514,333858,334814,334825,336022,336456],"agent":"Phillip Wood","seqStart":46,"ops":[[42571,0,",address"],[42586,0,"s"],[42604,0,"SANITIZE_ADDRESS =\n"],[44204,0,"SANITIZE_ADDRESS = YesCompiledWithIt\n"],[88194,0,"SANITIZE_ADDRESS=\\''$(subst ','\\'',$(subst ','\\'',$(SANITIZE_ADDRESS)))'\\' >>$@+\n\t@echo "]]},{"span":[345550,345665],"parents":[323361,331514,333858,334814,334825,336022,336456],"agent":"Elia Pinto","seqStart":341,"ops":[[105804,0,"\t$(RM) coverage-test.made\n"],[106333,0,"\ttouch coverage-test.made\n"],[106369,0,"test.made:\n\t$(MAKE) coverage-test\n\ncoverage-"],[106626,0," coverage-test.made"]]},{"span":[345665,346206],"parents":[336009,339699,339720,339864,340537,345549,345664],"agent":"Ævar Arnfjörð Bjarmason","seqStart":27544,"ops":[[22845,0,"gitwebstaticdir = $(gitwebdir)/static\n"],[23592,10,""],[63494,0,"gitwebstaticdir_SQ = $(subst ','\\'',$(gitwebstaticdir))\n"],[74135,1,""],[74136,14,""],[74140,54,""],[94095,0," \"Sub\"-Makefiles, not really because they can't be run stand-alone,\n# only there to contain directory-specific rules and variables\n## gitweb/Makefile inclusion:\nMAK_DIR_GITWEB = gitweb/\ninclude gitweb/Makefile\n\n.PHONY: gitweb\ngitweb: $(MAK_DIR_GITWEB_ALL)\n\n#"],[97147,9,""],[97148,18,""],[99501,15,""],[99635,15,""],[99636,19,""],[99643,9,""],[103935,25,""]]},{"span":[346206,346219],"parents":[346205],"agent":"SZEDER Gábor","seqStart":784,"ops":[[94351,0,"all:: gitweb\n"]]},{"span":[346219,346457],"parents":[346218],"agent":"Ævar Arnfjörð Bjarmason","seqStart":28085,"ops":[[13129,0,"NO_GITWEB if you do not want to build or install\n# 'gitweb'. Note that defining NO_PERL currently has the same effect\n# on not installing gitweb, but not on whether it's built in the\n# gitweb/ directory.\n#\n# Define "],[94566,0,"ifndef NO_GITWEB\n"],[94596,0,"endif\n"]]},{"span":[346457,347224],"parents":[341309,345329,345396,345549,345664],"agent":"Ævar Arnfjörð Bjarmason","seqStart":28323,"ops":[[45215,10,""],[97362,13,""],[97382,0,"--sp-file $< --patch . \\\n\t\t"],[106929,1,""],[106929,0,"git"],[97139,0,"COCCI_TEST_RES = $(wildcard contrib/coccinelle/tests/*.res)\n\n"],[97609,0,"\nCOCCI_TEST_RES_GEN = $(addprefix .build/,$(COCCI_TEST_RES))\n$(COCCI_TEST_RES_GEN): .build/%.res : %."],[97711,0,"\n$(COCCI_TEST_RES_GEN): .build/%.res : %.res\n$(COCCI_TEST_RES_GEN): .build/contrib/c"],[97799,0,"nelle/tests/%.res : contrib/coc"],[97831,0,"inelle/%.cocci\n\t$(call mkdir_p_parent_template)\n\t$(QUIET_SPATCH_T)$(SPATCH) $(SPATCH_FLAGS) \\\n\t\t--very-quiet --no-show-diff \\\n\t\t--sp-file $< -o $@ \\\n\t\t$(@:.build/%.res=%.c) && \\\n\tcmp $(@:.build/%=%) $@ || \\\n\tgit -P diff --no-index $(@:.build/%=%) $@ 2>/dev/null; \\\n\n.PHONY: coccicheck-test\ncoccic"],[98131,0,"-test"],[98140,0,"COCCI_TEST_RES_GEN)\n\ncoccicheck: $("],[107402,0,"-r .build/contrib/coccinelle\n\t$(RM) "],[98173,0,"coccicheck-test\ncoccicheck: "],[98343,0,"coccicheck-test\ncoccicheck-pending: "]]},{"span":[347224,347435],"parents":[341309,345329,345396,345549,345664],"agent":"brian m. carlson","seqStart":2454,"ops":[[7770,0,"NETTLE_SHA256 to use the SHA-256 routines in libnettle.\n#\n# Define "],[58692,0,"NETTLE_SHA256\n\tBASIC_CFLA"],[58718,0,"S += -DSHA256_NETTLE\n\tEXTLIBS += -lnettle\nelse\nifdef G"],[58921,0,"endif\n"],[96642,0,"NETTLE_SHA256\n\tEXCEPT_HDRS += sha256/nettle.h\nendif\nifndef "]]},{"span":[347435,347474],"parents":[346456,347223,347434],"agent":"Ævar Arnfjörð Bjarmason","seqStart":29090,"ops":[[30572,0,"module.o\nTEST_BUILTINS_OBJS += test-sub"]]},{"span":[347474,347499],"parents":[346456,347223,347434],"agent":"Derrick Stolee","seqStart":676,"ops":[[33951,0,"-uri.o\nLIB_OBJS += bundle"]]},{"span":[347499,347528],"parents":[346456,347223,347434],"agent":"Ævar Arnfjörð Bjarmason","seqStart":29129,"ops":[[110789,0,"/interfaces$$/d' \\\n\t\t    -e '"]]},{"span":[347528,347586],"parents":[346456,347223,347434],"agent":"Victoria Dye","seqStart":0,"ops":[[34578,0,"agnose.o\nLIB_OBJS += di"],[40493,0,"agnose.o\nBUILTIN_OBJS += builtin/di"]]},{"span":[347586,347628],"parents":[341309,345329,345396,345549,345664],"agent":"Matheus Tavares","seqStart":75,"ops":[[29713,0,"ot13-filter.o\nTEST_BUILTINS_OBJS += test-r"]]},{"span":[347628,347658],"parents":[341309,345329,345396,345549,345664],"agent":"Jeff King","seqStart":35087,"ops":[[33929,0,"nonblock.o\nLIB_OBJS += compat/"]]},{"span":[347658,348179],"parents":[341333,347527,347585,347627,347657],"agent":"Victoria Dye","seqStart":58,"ops":[[24822,0,"SCALAR_"],[24832,0,"S =\nOBJ"],[24846,0,"OTHER_PROGRAMS =\n"],[31827,0,"+"],[31836,0,"OTHER_PROGRAMS += scalar$X\n"],[31990,0,"scalar\nBINDIR_PROGRAMS_NEED_X += "],[68273,3,""],[68274,1,""],[68274,0,"(OTHER_PROGRAMS)"],[78902,0,"SCALAR_"],[78912,0,"S += scalar.o\n.PHONY: scalar-objs\nscalar-objs: $(SCALAR_OBJS)\n\nOBJ"],[79011,0,"SCALAR_OBJS)\nOBJECTS += $("],[79244,39,""],[79245,73,""],[83517,8,""],[83523,1,""],[83523,0,"$X: "],[83533,21,""],[83533,0,".o"],[85177,29,""],[95950,4,""],[95959,10,""],[95960,8,""],[95960,0,"f "],[95970,0,"-out"],[95977,6,""],[95994,3,""],[95994,0,"O"],[95998,0,",$(@F)"],[96005,0,",$(X),"],[102352,3,""],[102353,1,""],[102353,0,"(OTHER_PROGRAMS)"],[102789,3,""],[102790,1,""],[102790,0,"(OTHER_PROGRAMS)"],[108593,3,""],[108594,1,""],[108594,0,"(OTHER_PROGRAMS)"],[110257,0,"ALL_COMMANDS += scalar\n"]]},{"span":[348179,348792],"parents":[341333,347527,347585,347627,347657],"agent":"Ævar Arnfjörð Bjarmason","seqStart":29158,"ops":[[6553,122,""],[57692,0,"PPC_SHA1\n$(error the PPC_SHA1 flag has been removed along with the PowerPC-specific SHA-1 implementation.)\nendif\n\nifdef "],[57963,58,""],[57964,28,""],[58817,6,""],[79815,6,""],[79816,34,""],[79826,15,""],[79829,33,""],[79833,1,""],[79852,79,""],[79853,3,""],[79854,83,""],[79815,9,""],[79825,10,""],[96331,2,""],[96334,0,"ECTS"]]},{"span":[348792,348819],"parents":[347473,347498,348178,348791],"agent":"Victoria Dye","seqStart":579,"ops":[[31660,0,"version$X\nBUILT_INS += git-"]]}],"endContent":"# The default target of this Makefile is...\nall::\n\n# Import tree-wide shared Makefile behavior and libraries\ninclude shared.mak\n\n# Define V=1 to have a more verbose compile.\n#\n# Define SHELL_PATH to a POSIX shell if your /bin/sh is broken.\n#\n# Define SANE_TOOL_PATH to a colon-separated list of paths to prepend\n# to PATH if your tools in /usr/bin are broken.\n#\n# Define SOCKLEN_T to a suitable type (such as 'size_t') if your\n# system headers do not define a socklen_t type.\n#\n# Define INLINE to a suitable substitute (such as '__inline' or '') if git\n# fails to compile with errors about undefined inline functions or similar.\n#\n# Define SNPRINTF_RETURNS_BOGUS if you are on a system which snprintf()\n# or vsnprintf() return -1 instead of number of characters which would\n# have been written to the final string if enough space had been available.\n#\n# Define FREAD_READS_DIRECTORIES if you are on a system which succeeds\n# when attempting to read from an fopen'ed directory (or even to fopen\n# it at all).\n#\n# Define OPEN_RETURNS_EINTR if your open() system call may return EINTR\n# when a signal is received (as opposed to restarting).\n#\n# Define NO_OPENSSL environment variable if you do not have OpenSSL.\n#\n# Define USE_LIBPCRE if you have and want to use libpcre. Various\n# commands such as log and grep offer runtime options to use\n# Perl-compatible regular expressions instead of standard or extended\n# POSIX regular expressions.\n#\n# Only libpcre version 2 is supported. USE_LIBPCRE2 is a synonym for\n# USE_LIBPCRE, support for the old USE_LIBPCRE1 has been removed.\n#\n# Define LIBPCREDIR=/foo/bar if your PCRE header and library files are\n# in /foo/bar/include and /foo/bar/lib directories.\n#\n# Define HAVE_ALLOCA_H if you have working alloca(3) defined in that header.\n#\n# Define NO_CURL if you do not have libcurl installed.  git-http-fetch and\n# git-http-push are not built, and you cannot use http:// and https://\n# transports (neither smart nor dumb).\n#\n# Define CURLDIR=/foo/bar if your curl header and library files are in\n# /foo/bar/include and /foo/bar/lib directories.\n#\n# Define CURL_CONFIG to curl's configuration program that prints information\n# about the library (e.g., its version number).  The default is 'curl-config'.\n#\n# Define CURL_LDFLAGS to specify flags that you need to link when using libcurl,\n# if you do not want to rely on the libraries provided by CURL_CONFIG.  The\n# default value is a result of `curl-config --libs`.  An example value for\n# CURL_LDFLAGS is as follows:\n#\n#     CURL_LDFLAGS=-lcurl\n#\n# Define NO_EXPAT if you do not have expat installed.  git-http-push is\n# not built, and you cannot push using http:// and https:// transports (dumb).\n#\n# Define EXPATDIR=/foo/bar if your expat header and library files are in\n# /foo/bar/include and /foo/bar/lib directories.\n#\n# Define EXPAT_NEEDS_XMLPARSE_H if you have an old version of expat (e.g.,\n# 1.1 or 1.2) that provides xmlparse.h instead of expat.h.\n#\n# Define NO_GETTEXT if you don't want Git output to be translated.\n# A translated Git requires GNU libintl or another gettext implementation,\n# plus libintl-perl at runtime.\n#\n# Define USE_GETTEXT_SCHEME and set it to 'fallthrough', if you don't trust\n# the installed gettext translation of the shell scripts output.\n#\n# Define HAVE_LIBCHARSET_H if you haven't set NO_GETTEXT and you can't\n# trust the langinfo.h's nl_langinfo(CODESET) function to return the\n# current character set. GNU and Solaris have a nl_langinfo(CODESET),\n# FreeBSD can use either, but MinGW and some others need to use\n# libcharset.h's locale_charset() instead.\n#\n# Define CHARSET_LIB to the library you need to link with in order to\n# use locale_charset() function.  On some platforms this needs to set to\n# -lcharset, on others to -liconv .\n#\n# Define LIBC_CONTAINS_LIBINTL if your gettext implementation doesn't\n# need -lintl when linking.\n#\n# Define NO_MSGFMT_EXTENDED_OPTIONS if your implementation of msgfmt\n# doesn't support GNU extensions like --check and --statistics\n#\n# Define HAVE_PATHS_H if you have paths.h and want to use the default PATH\n# it specifies.\n#\n# Define NO_D_TYPE_IN_DIRENT if your platform defines DT_UNKNOWN but lacks\n# d_type in struct dirent (Cygwin 1.5, fixed in Cygwin 1.7).\n#\n# Define HAVE_STRINGS_H if you have strings.h and need it for strcasecmp.\n#\n# Define NO_STRCASESTR if you don't have strcasestr.\n#\n# Define NO_MEMMEM if you don't have memmem.\n#\n# Define NO_GETPAGESIZE if you don't have getpagesize.\n#\n# Define NO_STRLCPY if you don't have strlcpy.\n#\n# Define NO_STRTOUMAX if you don't have both strtoimax and strtoumax in the\n# C library. If your compiler also does not support long long or does not have\n# strtoull, define NO_STRTOULL.\n#\n# Define NO_SETENV if you don't have setenv in the C library.\n#\n# Define NO_UNSETENV if you don't have unsetenv in the C library.\n#\n# Define NO_MKDTEMP if you don't have mkdtemp in the C library.\n#\n# Define MKDIR_WO_TRAILING_SLASH if your mkdir() can't deal with trailing slash.\n#\n# Define NO_GECOS_IN_PWENT if you don't have pw_gecos in struct passwd\n# in the C library.\n#\n# Define NO_LIBGEN_H if you don't have libgen.h.\n#\n# Define NEEDS_LIBGEN if your libgen needs -lgen when linking\n#\n# Define NO_SYS_SELECT_H if you don't have sys/select.h.\n#\n# Define NO_SYMLINK_HEAD if you never want .git/HEAD to be a symbolic link.\n# Enable it on Windows.  By default, symrefs are still used.\n#\n# Define NO_SVN_TESTS if you want to skip time-consuming SVN interoperability\n# tests.  These tests take up a significant amount of the total test time\n# but are not needed unless you plan to talk to SVN repos.\n#\n# Define NO_FINK if you are building on Darwin/Mac OS X, have Fink\n# installed in /sw, but don't want GIT to link against any libraries\n# installed there.  If defined you may specify your own (or Fink's)\n# include directories and library directories by defining CFLAGS\n# and LDFLAGS appropriately.\n#\n# Define NO_DARWIN_PORTS if you are building on Darwin/Mac OS X,\n# have DarwinPorts installed in /opt/local, but don't want GIT to\n# link against any libraries installed there.  If defined you may\n# specify your own (or DarwinPort's) include directories and\n# library directories by defining CFLAGS and LDFLAGS appropriately.\n#\n# Define NO_APPLE_COMMON_CRYPTO if you are building on Darwin/Mac OS X\n# and do not want to use Apple's CommonCrypto library.  This allows you\n# to provide your own OpenSSL library, for example from MacPorts.\n#\n# Define BLK_SHA1 environment variable to make use of the bundled\n# optimized C SHA1 routine.\n#\n# Define DC_SHA1 to unconditionally enable the collision-detecting sha1\n# algorithm. This is slower, but may detect attempted collision attacks.\n# Takes priority over other *_SHA1 knobs.\n#\n# Define DC_SHA1_EXTERNAL in addition to DC_SHA1 if you want to build / link\n# git with the external SHA1 collision-detect library.\n# Without this option, i.e. the default behavior is to build git with its\n# own built-in code (or submodule).\n#\n# Define DC_SHA1_SUBMODULE in addition to DC_SHA1 to use the\n# sha1collisiondetection shipped as a submodule instead of the\n# non-submodule copy in sha1dc/. This is an experimental option used\n# by the git project to migrate to using sha1collisiondetection as a\n# submodule.\n#\n# Define OPENSSL_SHA1 environment variable when running make to link\n# with the SHA1 routine from openssl library.\n#\n# Define SHA1_MAX_BLOCK_SIZE to limit the amount of data that will be hashed\n# in one call to the platform's SHA1_Update(). e.g. APPLE_COMMON_CRYPTO\n# wants 'SHA1_MAX_BLOCK_SIZE=1024L*1024L*1024L' defined.\n#\n# Define BLK_SHA256 to use the built-in SHA-256 routines.\n#\n# Define NETTLE_SHA256 to use the SHA-256 routines in libnettle.\n#\n# Define GCRYPT_SHA256 to use the SHA-256 routines in libgcrypt.\n#\n# Define OPENSSL_SHA256 to use the SHA-256 routines in OpenSSL.\n#\n# Define NEEDS_CRYPTO_WITH_SSL if you need -lcrypto when using -lssl (Darwin).\n#\n# Define NEEDS_SSL_WITH_CRYPTO if you need -lssl when using -lcrypto (Darwin).\n#\n# Define NEEDS_LIBICONV if linking with libc is not enough (Darwin).\n#\n# Define NEEDS_LIBINTL_BEFORE_LIBICONV if you need libintl before libiconv.\n#\n# Define NO_INTPTR_T if you don't have intptr_t or uintptr_t.\n#\n# Define NO_UINTMAX_T if you don't have uintmax_t.\n#\n# Define NEEDS_SOCKET if linking with libc is not enough (SunOS,\n# Patrick Mauritz).\n#\n# Define NEEDS_RESOLV if linking with -lnsl and/or -lsocket is not enough.\n# Notably on Solaris hstrerror resides in libresolv and on Solaris 7\n# inet_ntop and inet_pton additionally reside there.\n#\n# Define NO_MMAP if you want to avoid mmap.\n#\n# Define MMAP_PREVENTS_DELETE if a file that is currently mmapped cannot be\n# deleted or cannot be replaced using rename().\n#\n# Define NO_POLL_H if you don't have poll.h.\n#\n# Define NO_SYS_POLL_H if you don't have sys/poll.h.\n#\n# Define NO_POLL if you do not have or don't want to use poll().\n# This also implies NO_POLL_H and NO_SYS_POLL_H.\n#\n# Define NEEDS_SYS_PARAM_H if you need to include sys/param.h to compile,\n# *PLEASE* REPORT to git@vger.kernel.org if your platform needs this;\n# we want to know more about the issue.\n#\n# Define NO_PTHREADS if you do not have or do not want to use Pthreads.\n#\n# Define NO_PREAD if you have a problem with pread() system call (e.g.\n# cygwin1.dll before v1.5.22).\n#\n# Define NO_SETITIMER if you don't have setitimer()\n#\n# Define NO_STRUCT_ITIMERVAL if you don't have struct itimerval\n# This also implies NO_SETITIMER\n#\n# Define NO_FAST_WORKING_DIRECTORY if accessing objects in pack files is\n# generally faster on your platform than accessing the working directory.\n#\n# Define NO_TRUSTABLE_FILEMODE if your filesystem may claim to support\n# the executable mode bit, but doesn't really do so.\n#\n# Define CSPRNG_METHOD to \"arc4random\" if your system has arc4random and\n# arc4random_buf, \"libbsd\" if your system has those functions from libbsd,\n# \"getrandom\" if your system has getrandom, \"getentropy\" if your system has\n# getentropy, \"rtlgenrandom\" for RtlGenRandom (Windows only), or \"openssl\" if\n# you'd want to use the OpenSSL CSPRNG.  You may set multiple options with\n# spaces, in which case a suitable option will be chosen.  If unset or set to\n# anything else, defaults to using \"/dev/urandom\".\n#\n# Define NEEDS_MODE_TRANSLATION if your OS strays from the typical file type\n# bits in mode values (e.g. z/OS defines I_SFMT to 0xFF000000 as opposed to the\n# usual 0xF000).\n#\n# Define NO_IPV6 if you lack IPv6 support and getaddrinfo().\n#\n# Define NO_UNIX_SOCKETS if your system does not offer unix sockets.\n#\n# Define NO_SOCKADDR_STORAGE if your platform does not have struct\n# sockaddr_storage.\n#\n# Define NO_ICONV if your libc does not properly support iconv.\n#\n# Define OLD_ICONV if your library has an old iconv(), where the second\n# (input buffer pointer) parameter is declared with type (const char **).\n#\n# Define ICONV_OMITS_BOM if your iconv implementation does not write a\n# byte-order mark (BOM) when writing UTF-16 or UTF-32 and always writes in\n# big-endian format.\n#\n# Define NO_DEFLATE_BOUND if your zlib does not have deflateBound.\n#\n# Define NO_NORETURN if using buggy versions of gcc 4.6+ and profile feedback,\n# as the compiler can crash (http://gcc.gnu.org/bugzilla/show_bug.cgi?id=49299)\n#\n# Define USE_NSEC below if you want git to care about sub-second file mtimes\n# and ctimes. Note that you need recent glibc (at least 2.2.4) for this. On\n# Linux, kernel 2.6.11 or newer is required for reliable sub-second file times\n# on file systems with exactly 1 ns or 1 s resolution. If you intend to use Git\n# on other file systems (e.g. CEPH, CIFS, NTFS, UDF), don't enable USE_NSEC. See\n# Documentation/technical/racy-git.txt for details.\n#\n# Define USE_ST_TIMESPEC if your \"struct stat\" uses \"st_ctimespec\" instead of\n# \"st_ctim\"\n#\n# Define NO_NSEC if your \"struct stat\" does not have \"st_ctim.tv_nsec\"\n# available.  This automatically turns USE_NSEC off.\n#\n# Define USE_STDEV below if you want git to care about the underlying device\n# change being considered an inode change from the update-index perspective.\n#\n# Define NO_ST_BLOCKS_IN_STRUCT_STAT if your platform does not have st_blocks\n# field that counts the on-disk footprint in 512-byte blocks.\n#\n# Define GNU_ROFF if your target system uses GNU groff.  This forces\n# apostrophes to be ASCII so that cut&pasting examples to the shell\n# will work.\n#\n# Define USE_ASCIIDOCTOR to use Asciidoctor instead of AsciiDoc to build the\n# documentation.\n#\n# Define ASCIIDOCTOR_EXTENSIONS_LAB to point to the location of the Asciidoctor\n# Extensions Lab if you have it available.\n#\n# Define PERL_PATH to the path of your Perl binary (usually /usr/bin/perl).\n#\n# Define NO_PERL if you do not want Perl scripts or libraries at all.\n#\n# Define NO_PERL_CPAN_FALLBACKS if you do not want to install bundled\n# copies of CPAN modules that serve as a fallback in case the modules\n# are not available on the system. This option is intended for\n# distributions that want to use their packaged versions of Perl\n# modules, instead of the fallbacks shipped with Git.\n#\n# Define NO_GITWEB if you do not want to build or install\n# 'gitweb'. Note that defining NO_PERL currently has the same effect\n# on not installing gitweb, but not on whether it's built in the\n# gitweb/ directory.\n#\n# Define PYTHON_PATH to the path of your Python binary (often /usr/bin/python\n# but /usr/bin/python2.7 or /usr/bin/python3 on some platforms).\n#\n# Define NO_PYTHON if you do not want Python scripts or libraries at all.\n#\n# Define NO_TCLTK if you do not want Tcl/Tk GUI.\n#\n# The TCL_PATH variable governs the location of the Tcl interpreter\n# used to optimize git-gui for your system.  Only used if NO_TCLTK\n# is not set.  Defaults to the bare 'tclsh'.\n#\n# The TCLTK_PATH variable governs the location of the Tcl/Tk interpreter.\n# If not set it defaults to the bare 'wish'. If it is set to the empty\n# string then NO_TCLTK will be forced (this is used by configure script).\n#\n# Define INTERNAL_QSORT to use Git's implementation of qsort(), which\n# is a simplified version of the merge sort used in glibc. This is\n# recommended if Git triggers O(n^2) behavior in your platform's qsort().\n#\n# Define HAVE_ISO_QSORT_S if your platform provides a qsort_s() that's\n# compatible with the one described in C11 Annex K.\n#\n# Define UNRELIABLE_FSTAT if your system's fstat does not return the same\n# information on a not yet closed file that lstat would return for the same\n# file after it was closed.\n#\n# Define OBJECT_CREATION_USES_RENAMES if your operating systems has problems\n# when hardlinking a file to another name and unlinking the original file right\n# away (some NTFS drivers seem to zero the contents in that scenario).\n#\n# Define INSTALL_SYMLINKS if you prefer to have everything that can be\n# symlinked between bin/ and libexec/ to use relative symlinks between\n# the two. This option overrides NO_CROSS_DIRECTORY_HARDLINKS and\n# NO_INSTALL_HARDLINKS which will also use symlinking by indirection\n# within the same directory in some cases, INSTALL_SYMLINKS will\n# always symlink to the final target directly.\n#\n# Define NO_CROSS_DIRECTORY_HARDLINKS if you plan to distribute the installed\n# programs as a tar, where bin/ and libexec/ might be on different file systems.\n#\n# Define NO_INSTALL_HARDLINKS if you prefer to use either symbolic links or\n# copies to install built-in git commands e.g. git-cat-file.\n#\n# Define SKIP_DASHED_BUILT_INS if you do not need the dashed versions of the\n# built-ins to be linked/copied at all.\n#\n# Define USE_NED_ALLOCATOR if you want to replace the platforms default\n# memory allocators with the nedmalloc allocator written by Niall Douglas.\n#\n# Define OVERRIDE_STRDUP to override the libc version of strdup(3).\n# This is necessary when using a custom allocator in order to avoid\n# crashes due to allocation and free working on different 'heaps'.\n# It's defined automatically if USE_NED_ALLOCATOR is set.\n#\n# Define NO_REGEX if your C library lacks regex support with REG_STARTEND\n# feature.\n#\n# Define HAVE_DEV_TTY if your system can open /dev/tty to interact with the\n# user.\n#\n# Define JSMIN to point to JavaScript minifier that functions as\n# a filter to have gitweb.js minified.\n#\n# Define CSSMIN to point to a CSS minifier in order to generate a minified\n# version of gitweb.css\n#\n# Define DEFAULT_PAGER to a sensible pager command (defaults to \"less\") if\n# you want to use something different.  The value will be interpreted by the\n# shell at runtime when it is used.\n#\n# Define DEFAULT_EDITOR to a sensible editor command (defaults to \"vi\") if you\n# want to use something different.  The value will be interpreted by the shell\n# if necessary when it is used.  Examples:\n#\n#   DEFAULT_EDITOR='~/bin/vi',\n#   DEFAULT_EDITOR='$GIT_FALLBACK_EDITOR',\n#   DEFAULT_EDITOR='\"C:\\Program Files\\Vim\\gvim.exe\" --nofork'\n#\n# Define COMPUTE_HEADER_DEPENDENCIES to \"yes\" if you want dependencies on\n# header files to be automatically computed, to avoid rebuilding objects when\n# an unrelated header file changes.  Define it to \"no\" to use the hard-coded\n# dependency rules.  The default is \"auto\", which means to use computed header\n# dependencies if your compiler is detected to support it.\n#\n# Define NATIVE_CRLF if your platform uses CRLF for line endings.\n#\n# Define GIT_USER_AGENT if you want to change how git identifies itself during\n# network interactions.  The default is \"git/$(GIT_VERSION)\".\n#\n# Define DEFAULT_HELP_FORMAT to \"man\", \"info\" or \"html\"\n# (defaults to \"man\") if you want to have a different default when\n# \"git help\" is called without a parameter specifying the format.\n#\n# Define GIT_TEST_INDEX_VERSION to 2, 3 or 4 to run the test suite\n# with a different indexfile format version.  If it isn't set the index\n# file format used is index-v[23].\n#\n# Define GIT_TEST_UTF8_LOCALE to preferred utf-8 locale for testing.\n# If it isn't set, fallback to $LC_ALL, $LANG or use the first utf-8\n# locale returned by \"locale -a\".\n#\n# Define HAVE_CLOCK_GETTIME if your platform has clock_gettime.\n#\n# Define HAVE_CLOCK_MONOTONIC if your platform has CLOCK_MONOTONIC.\n#\n# Define HAVE_SYNC_FILE_RANGE if your platform has sync_file_range.\n#\n# Define NEEDS_LIBRT if your platform requires linking with librt (glibc version\n# before 2.17) for clock_gettime and CLOCK_MONOTONIC.\n#\n# Define HAVE_BSD_SYSCTL if your platform has a BSD-compatible sysctl function.\n#\n# Define HAVE_GETDELIM if your system has the getdelim() function.\n#\n# Define FILENO_IS_A_MACRO if fileno() is a macro, not a real function.\n#\n# Define NEED_ACCESS_ROOT_HANDLER if access() under root may success for X_OK\n# even if execution permission isn't granted for any user.\n#\n# Define PAGER_ENV to a SP separated VAR=VAL pairs to define\n# default environment variables to be passed when a pager is spawned, e.g.\n#\n#    PAGER_ENV = LESS=FRX LV=-c\n#\n# to say \"export LESS=FRX (and LV=-c) if the environment variable\n# LESS (and LV) is not set, respectively\".\n#\n# Define TEST_SHELL_PATH if you want to use a shell besides SHELL_PATH for\n# running the test scripts (e.g., bash has better support for \"set -x\"\n# tracing).\n#\n# When cross-compiling, define HOST_CPU as the canonical name of the CPU on\n# which the built Git will run (for instance \"x86_64\").\n#\n# Define RUNTIME_PREFIX to configure Git to resolve its ancillary tooling and\n# support files relative to the location of the runtime binary, rather than\n# hard-coding them into the binary. Git installations built with RUNTIME_PREFIX\n# can be moved to arbitrary filesystem locations. RUNTIME_PREFIX also causes\n# Perl scripts to use a modified entry point header allowing them to resolve\n# support files at runtime.\n#\n# When using RUNTIME_PREFIX, define HAVE_BSD_KERN_PROC_SYSCTL if your platform\n# supports the KERN_PROC BSD sysctl function.\n#\n# When using RUNTIME_PREFIX, define PROCFS_EXECUTABLE_PATH if your platform\n# mounts a \"procfs\" filesystem capable of resolving the path of the current\n# executable. If defined, this must be the canonical path for the \"procfs\"\n# current executable path.\n#\n# When using RUNTIME_PREFIX, define HAVE_NS_GET_EXECUTABLE_PATH if your platform\n# supports calling _NSGetExecutablePath to retrieve the path of the running\n# executable.\n#\n# When using RUNTIME_PREFIX, define HAVE_WPGMPTR if your platform offers\n# the global variable _wpgmptr containing the absolute path of the current\n# executable (this is the case on Windows).\n#\n# INSTALL_STRIP can be set to \"-s\" to strip binaries during installation,\n# if your $(INSTALL) command supports the option.\n#\n# Define GENERATE_COMPILATION_DATABASE to \"yes\" to generate JSON compilation\n# database entries during compilation if your compiler supports it, using the\n# `-MJ` flag. The JSON entries will be placed in the `compile_commands/`\n# directory, and the JSON compilation database 'compile_commands.json' will be\n# created at the root of the repository.\n#\n# If your platform supports a built-in fsmonitor backend, set\n# FSMONITOR_DAEMON_BACKEND to the \"<name>\" of the corresponding\n# `compat/fsmonitor/fsm-listen-<name>.c` and\n# `compat/fsmonitor/fsm-health-<name>.c` files\n# that implement the `fsm_listen__*()` and `fsm_health__*()` routines.\n#\n# If your platform has OS-specific ways to tell if a repo is incompatible with\n# fsmonitor (whether the hook or IPC daemon version), set FSMONITOR_OS_SETTINGS\n# to the \"<name>\" of the corresponding `compat/fsmonitor/fsm-settings-<name>.c`\n# that implements the `fsm_os_settings__*()` routines.\n#\n# Define DEVELOPER to enable more compiler warnings. Compiler version\n# and family are auto detected, but could be overridden by defining\n# COMPILER_FEATURES (see config.mak.dev). You can still set\n# CFLAGS=\"...\" in combination with DEVELOPER enables, whether that's\n# for tweaking something unrelated (e.g. optimization level), or for\n# selectively overriding something DEVELOPER or one of the DEVOPTS\n# (see just below) brings in.\n#\n# When DEVELOPER is set, DEVOPTS can be used to control compiler\n# options.  This variable contains keywords separated by\n# whitespace. The following keywords are recognized:\n#\n#    no-error:\n#\n#        suppresses the -Werror that implicitly comes with\n#        DEVELOPER=1. Useful for getting the full set of errors\n#        without immediately dying, or for logging them.\n#\n#    extra-all:\n#\n#        The DEVELOPER mode enables -Wextra with a few exceptions. By\n#        setting this flag the exceptions are removed, and all of\n#        -Wextra is used.\n#\n#    no-pedantic:\n#\n#        Disable -pedantic compilation.\n\nGIT-VERSION-FILE: FORCE\n\t@$(SHELL_PATH) ./GIT-VERSION-GEN\n-include GIT-VERSION-FILE\n\n# Set our default configuration.\n#\n# Among the variables below, these:\n#   gitexecdir\n#   template_dir\n#   sysconfdir\n# can be specified as a relative path some/where/else;\n# this is interpreted as relative to $(prefix) and \"git\" at\n# runtime figures out where they are based on the path to the executable.\n# Additionally, the following will be treated as relative by \"git\" if they\n# begin with \"$(prefix)/\":\n#   mandir\n#   infodir\n#   htmldir\n#   localedir\n#   perllibdir\n# This can help installing the suite in a relocatable way.\n\nprefix = $(HOME)\nbindir = $(prefix)/bin\nmandir = $(prefix)/share/man\ninfodir = $(prefix)/share/info\ngitexecdir = libexec/git-core\nmergetoolsdir = $(gitexecdir)/mergetools\nsharedir = $(prefix)/share\ngitwebdir = $(sharedir)/gitweb\ngitwebstaticdir = $(gitwebdir)/static\nperllibdir = $(sharedir)/perl5\nlocaledir = $(sharedir)/locale\ntemplate_dir = share/git-core/templates\nhtmldir = $(prefix)/share/doc/git-doc\nETC_GITCONFIG = $(sysconfdir)/gitconfig\nETC_GITATTRIBUTES = $(sysconfdir)/gitattributes\nlib = lib\n# DESTDIR =\npathsep = :\n\nbindir_relative = $(patsubst $(prefix)/%,%,$(bindir))\nmandir_relative = $(patsubst $(prefix)/%,%,$(mandir))\ninfodir_relative = $(patsubst $(prefix)/%,%,$(infodir))\ngitexecdir_relative = $(patsubst $(prefix)/%,%,$(gitexecdir))\nlocaledir_relative = $(patsubst $(prefix)/%,%,$(localedir))\nhtmldir_relative = $(patsubst $(prefix)/%,%,$(htmldir))\nperllibdir_relative = $(patsubst $(prefix)/%,%,$(perllibdir))\n\nexport prefix bindir sharedir sysconfdir perllibdir localedir\n\n# Set our default programs\nCC = cc\nAR = ar\nRM = rm -f\nDIFF = diff\nTAR = tar\nFIND = find\nINSTALL = install\nTCL_PATH = tclsh\nTCLTK_PATH = wish\nXGETTEXT = xgettext\nMSGCAT = msgcat\nMSGFMT = msgfmt\nMSGMERGE = msgmerge\nCURL_CONFIG = curl-config\nGCOV = gcov\nSTRIP = strip\nSPATCH = spatch\n\nexport TCL_PATH TCLTK_PATH\n\n# Set our default LIBS variables\nPTHREAD_LIBS = -lpthread\n\n# Guard against environment variables\nBUILTIN_OBJS =\nBUILT_INS =\nCOMPAT_CFLAGS =\nCOMPAT_OBJS =\nXDIFF_OBJS =\nGENERATED_H =\nEXTRA_CPPFLAGS =\nFUZZ_OBJS =\nFUZZ_PROGRAMS =\nGIT_OBJS =\nLIB_OBJS =\nSCALAR_OBJS =\nOBJECTS =\nOTHER_PROGRAMS =\nPROGRAM_OBJS =\nPROGRAMS =\nEXCLUDED_PROGRAMS =\nSCRIPT_PERL =\nSCRIPT_PYTHON =\nSCRIPT_SH =\nSCRIPT_LIB =\nTEST_BUILTINS_OBJS =\nTEST_OBJS =\nTEST_PROGRAMS_NEED_X =\nTHIRD_PARTY_SOURCES =\n\n# Having this variable in your environment would break pipelines because\n# you cause \"cd\" to echo its destination to stdout.  It can also take\n# scripts to unexpected places.  If you like CDPATH, define it for your\n# interactive shell sessions without exporting it.\nunexport CDPATH\n\nSCRIPT_SH += git-bisect.sh\nSCRIPT_SH += git-difftool--helper.sh\nSCRIPT_SH += git-filter-branch.sh\nSCRIPT_SH += git-merge-octopus.sh\nSCRIPT_SH += git-merge-one-file.sh\nSCRIPT_SH += git-merge-resolve.sh\nSCRIPT_SH += git-mergetool.sh\nSCRIPT_SH += git-quiltimport.sh\nSCRIPT_SH += git-request-pull.sh\nSCRIPT_SH += git-submodule.sh\nSCRIPT_SH += git-web--browse.sh\n\nSCRIPT_LIB += git-mergetool--lib\nSCRIPT_LIB += git-sh-i18n\nSCRIPT_LIB += git-sh-setup\n\nSCRIPT_PERL += git-add--interactive.perl\nSCRIPT_PERL += git-archimport.perl\nSCRIPT_PERL += git-cvsexportcommit.perl\nSCRIPT_PERL += git-cvsimport.perl\nSCRIPT_PERL += git-cvsserver.perl\nSCRIPT_PERL += git-send-email.perl\nSCRIPT_PERL += git-svn.perl\n\nSCRIPT_PYTHON += git-p4.py\n\n# Generated files for scripts\nSCRIPT_SH_GEN = $(patsubst %.sh,%,$(SCRIPT_SH))\nSCRIPT_PERL_GEN = $(patsubst %.perl,%,$(SCRIPT_PERL))\nSCRIPT_PYTHON_GEN = $(patsubst %.py,%,$(SCRIPT_PYTHON))\n\n# Individual rules to allow e.g.\n# \"make -C ../.. SCRIPT_PERL=contrib/foo/bar.perl build-perl-script\"\n# from subdirectories like contrib/*/\n.PHONY: build-perl-script build-sh-script build-python-script\nbuild-perl-script: $(SCRIPT_PERL_GEN)\nbuild-sh-script: $(SCRIPT_SH_GEN)\nbuild-python-script: $(SCRIPT_PYTHON_GEN)\n\n.PHONY: install-perl-script install-sh-script install-python-script\ninstall-sh-script: $(SCRIPT_SH_GEN)\n\t$(INSTALL) $^ '$(DESTDIR_SQ)$(gitexec_instdir_SQ)'\ninstall-perl-script: $(SCRIPT_PERL_GEN)\n\t$(INSTALL) $^ '$(DESTDIR_SQ)$(gitexec_instdir_SQ)'\ninstall-python-script: $(SCRIPT_PYTHON_GEN)\n\t$(INSTALL) $^ '$(DESTDIR_SQ)$(gitexec_instdir_SQ)'\n\n.PHONY: clean-perl-script clean-sh-script clean-python-script\nclean-sh-script:\n\t$(RM) $(SCRIPT_SH_GEN)\nclean-perl-script:\n\t$(RM) $(SCRIPT_PERL_GEN)\nclean-python-script:\n\t$(RM) $(SCRIPT_PYTHON_GEN)\n\nSCRIPTS = $(SCRIPT_SH_GEN) \\\n\t  $(SCRIPT_PERL_GEN) \\\n\t  $(SCRIPT_PYTHON_GEN) \\\n\t  git-instaweb\n\nETAGS_TARGET = TAGS\n\nFUZZ_OBJS += fuzz-commit-graph.o\nFUZZ_OBJS += fuzz-pack-headers.o\nFUZZ_OBJS += fuzz-pack-idx.o\n.PHONY: fuzz-objs\nfuzz-objs: $(FUZZ_OBJS)\n\n# Always build fuzz objects even if not testing, to prevent bit-rot.\nall:: $(FUZZ_OBJS)\n\nFUZZ_PROGRAMS += $(patsubst %.o,%,$(FUZZ_OBJS))\n\n# Empty...\nEXTRA_PROGRAMS =\n\n# ... and all the rest that could be moved out of bindir to gitexecdir\nPROGRAMS += $(EXTRA_PROGRAMS)\n\nPROGRAM_OBJS += daemon.o\nPROGRAM_OBJS += http-backend.o\nPROGRAM_OBJS += imap-send.o\nPROGRAM_OBJS += sh-i18n--envsubst.o\nPROGRAM_OBJS += shell.o\n.PHONY: program-objs\nprogram-objs: $(PROGRAM_OBJS)\n\n# Binary suffix, set to .exe for Windows builds\nX =\n\nPROGRAMS += $(patsubst %.o,git-%$X,$(PROGRAM_OBJS))\n\nTEST_BUILTINS_OBJS += test-advise.o\nTEST_BUILTINS_OBJS += test-bitmap.o\nTEST_BUILTINS_OBJS += test-bloom.o\nTEST_BUILTINS_OBJS += test-chmtime.o\nTEST_BUILTINS_OBJS += test-config.o\nTEST_BUILTINS_OBJS += test-crontab.o\nTEST_BUILTINS_OBJS += test-csprng.o\nTEST_BUILTINS_OBJS += test-ctype.o\nTEST_BUILTINS_OBJS += test-date.o\nTEST_BUILTINS_OBJS += test-delta.o\nTEST_BUILTINS_OBJS += test-dir-iterator.o\nTEST_BUILTINS_OBJS += test-drop-caches.o\nTEST_BUILTINS_OBJS += test-dump-cache-tree.o\nTEST_BUILTINS_OBJS += test-dump-fsmonitor.o\nTEST_BUILTINS_OBJS += test-dump-split-index.o\nTEST_BUILTINS_OBJS += test-dump-untracked-cache.o\nTEST_BUILTINS_OBJS += test-example-decorate.o\nTEST_BUILTINS_OBJS += test-fast-rebase.o\nTEST_BUILTINS_OBJS += test-fsmonitor-client.o\nTEST_BUILTINS_OBJS += test-genrandom.o\nTEST_BUILTINS_OBJS += test-genzeros.o\nTEST_BUILTINS_OBJS += test-getcwd.o\nTEST_BUILTINS_OBJS += test-hash-speed.o\nTEST_BUILTINS_OBJS += test-hash.o\nTEST_BUILTINS_OBJS += test-hashmap.o\nTEST_BUILTINS_OBJS += test-hexdump.o\nTEST_BUILTINS_OBJS += test-index-version.o\nTEST_BUILTINS_OBJS += test-json-writer.o\nTEST_BUILTINS_OBJS += test-lazy-init-name-hash.o\nTEST_BUILTINS_OBJS += test-match-trees.o\nTEST_BUILTINS_OBJS += test-mergesort.o\nTEST_BUILTINS_OBJS += test-mktemp.o\nTEST_BUILTINS_OBJS += test-oid-array.o\nTEST_BUILTINS_OBJS += test-oidmap.o\nTEST_BUILTINS_OBJS += test-oidtree.o\nTEST_BUILTINS_OBJS += test-online-cpus.o\nTEST_BUILTINS_OBJS += test-pack-mtimes.o\nTEST_BUILTINS_OBJS += test-parse-options.o\nTEST_BUILTINS_OBJS += test-parse-pathspec-file.o\nTEST_BUILTINS_OBJS += test-partial-clone.o\nTEST_BUILTINS_OBJS += test-path-utils.o\nTEST_BUILTINS_OBJS += test-pcre2-config.o\nTEST_BUILTINS_OBJS += test-pkt-line.o\nTEST_BUILTINS_OBJS += test-prio-queue.o\nTEST_BUILTINS_OBJS += test-proc-receive.o\nTEST_BUILTINS_OBJS += test-progress.o\nTEST_BUILTINS_OBJS += test-reach.o\nTEST_BUILTINS_OBJS += test-read-cache.o\nTEST_BUILTINS_OBJS += test-read-graph.o\nTEST_BUILTINS_OBJS += test-read-midx.o\nTEST_BUILTINS_OBJS += test-ref-store.o\nTEST_BUILTINS_OBJS += test-reftable.o\nTEST_BUILTINS_OBJS += test-regex.o\nTEST_BUILTINS_OBJS += test-rot13-filter.o\nTEST_BUILTINS_OBJS += test-repository.o\nTEST_BUILTINS_OBJS += test-revision-walking.o\nTEST_BUILTINS_OBJS += test-run-command.o\nTEST_BUILTINS_OBJS += test-scrap-cache-tree.o\nTEST_BUILTINS_OBJS += test-serve-v2.o\nTEST_BUILTINS_OBJS += test-sha1.o\nTEST_BUILTINS_OBJS += test-sha256.o\nTEST_BUILTINS_OBJS += test-sigchain.o\nTEST_BUILTINS_OBJS += test-simple-ipc.o\nTEST_BUILTINS_OBJS += test-strcmp-offset.o\nTEST_BUILTINS_OBJS += test-string-list.o\nTEST_BUILTINS_OBJS += test-submodule-config.o\nTEST_BUILTINS_OBJS += test-submodule-nested-repo-config.o\nTEST_BUILTINS_OBJS += test-submodule.o\nTEST_BUILTINS_OBJS += test-subprocess.o\nTEST_BUILTINS_OBJS += test-trace2.o\nTEST_BUILTINS_OBJS += test-urlmatch-normalization.o\nTEST_BUILTINS_OBJS += test-userdiff.o\nTEST_BUILTINS_OBJS += test-wildmatch.o\nTEST_BUILTINS_OBJS += test-windows-named-pipe.o\nTEST_BUILTINS_OBJS += test-write-cache.o\nTEST_BUILTINS_OBJS += test-xml-encode.o\n\n# Do not add more tests here unless they have extra dependencies. Add\n# them in TEST_BUILTINS_OBJS above.\nTEST_PROGRAMS_NEED_X += test-fake-ssh\nTEST_PROGRAMS_NEED_X += test-tool\n\nTEST_PROGRAMS = $(patsubst %,t/helper/%$X,$(TEST_PROGRAMS_NEED_X))\n\n# List built-in command $C whose implementation cmd_$C() is not in\n# builtin/$C.o but is linked in as part of some other command.\nBUILT_INS += $(patsubst builtin/%.o,git-%$X,$(BUILTIN_OBJS))\n\nBUILT_INS += git-cherry$X\nBUILT_INS += git-cherry-pick$X\nBUILT_INS += git-format-patch$X\nBUILT_INS += git-fsck-objects$X\nBUILT_INS += git-init$X\nBUILT_INS += git-maintenance$X\nBUILT_INS += git-merge-subtree$X\nBUILT_INS += git-restore$X\nBUILT_INS += git-show$X\nBUILT_INS += git-stage$X\nBUILT_INS += git-status$X\nBUILT_INS += git-switch$X\nBUILT_INS += git-version$X\nBUILT_INS += git-whatchanged$X\n\n# what 'all' will build but not install in gitexecdir\nOTHER_PROGRAMS += git$X\nOTHER_PROGRAMS += scalar$X\n\n# what test wrappers are needed and 'install' will install, in bindir\nBINDIR_PROGRAMS_NEED_X += git\nBINDIR_PROGRAMS_NEED_X += scalar\nBINDIR_PROGRAMS_NEED_X += git-receive-pack\nBINDIR_PROGRAMS_NEED_X += git-shell\nBINDIR_PROGRAMS_NEED_X += git-upload-archive\nBINDIR_PROGRAMS_NEED_X += git-upload-pack\n\nBINDIR_PROGRAMS_NO_X += git-cvsserver\n\n# Set paths to tools early so that they can be used for version tests.\nifndef SHELL_PATH\n\tSHELL_PATH = /bin/sh\nendif\nifndef PERL_PATH\n\tPERL_PATH = /usr/bin/perl\nendif\nifndef PYTHON_PATH\n\tPYTHON_PATH = /usr/bin/python\nendif\n\nexport PERL_PATH\nexport PYTHON_PATH\n\nTEST_SHELL_PATH = $(SHELL_PATH)\n\nLIB_FILE = libgit.a\nXDIFF_LIB = xdiff/lib.a\nREFTABLE_LIB = reftable/libreftable.a\nREFTABLE_TEST_LIB = reftable/libreftable_test.a\n\nGENERATED_H += command-list.h\nGENERATED_H += config-list.h\nGENERATED_H += hook-list.h\n\n.PHONY: generated-hdrs\ngenerated-hdrs: $(GENERATED_H)\n\n## Exhaustive lists of our source files, either dynamically generated,\n## or hardcoded.\nSOURCES_CMD = ( \\\n\tgit ls-files --deduplicate \\\n\t\t'*.[hcS]' \\\n\t\t'*.sh' \\\n\t\t':!*[tp][0-9][0-9][0-9][0-9]*' \\\n\t\t':!contrib' \\\n\t\t2>/dev/null || \\\n\t$(FIND) . \\\n\t\t\\( -name .git -type d -prune \\) \\\n\t\t-o \\( -name '[tp][0-9][0-9][0-9][0-9]*' -prune \\) \\\n\t\t-o \\( -name contrib -type d -prune \\) \\\n\t\t-o \\( -name build -type d -prune \\) \\\n\t\t-o \\( -name .build -type d -prune \\) \\\n\t\t-o \\( -name 'trash*' -type d -prune \\) \\\n\t\t-o \\( -name '*.[hcS]' -type f -print \\) \\\n\t\t-o \\( -name '*.sh' -type f -print \\) \\\n\t\t| sed -e 's|^\\./||' \\\n\t)\nFOUND_SOURCE_FILES := $(filter-out $(GENERATED_H),$(shell $(SOURCES_CMD)))\n\nFOUND_C_SOURCES = $(filter %.c,$(FOUND_SOURCE_FILES))\nFOUND_H_SOURCES = $(filter %.h,$(FOUND_SOURCE_FILES))\n\nCOCCI_SOURCES = $(filter-out $(THIRD_PARTY_SOURCES),$(FOUND_C_SOURCES))\n\nLIB_H = $(FOUND_H_SOURCES)\n\nLIB_OBJS += abspath.o\nLIB_OBJS += add-interactive.o\nLIB_OBJS += add-patch.o\nLIB_OBJS += advice.o\nLIB_OBJS += alias.o\nLIB_OBJS += alloc.o\nLIB_OBJS += apply.o\nLIB_OBJS += archive-tar.o\nLIB_OBJS += archive-zip.o\nLIB_OBJS += archive.o\nLIB_OBJS += attr.o\nLIB_OBJS += base85.o\nLIB_OBJS += bisect.o\nLIB_OBJS += blame.o\nLIB_OBJS += blob.o\nLIB_OBJS += bloom.o\nLIB_OBJS += branch.o\nLIB_OBJS += bulk-checkin.o\nLIB_OBJS += bundle-uri.o\nLIB_OBJS += bundle.o\nLIB_OBJS += cache-tree.o\nLIB_OBJS += cbtree.o\nLIB_OBJS += chdir-notify.o\nLIB_OBJS += checkout.o\nLIB_OBJS += chunk-format.o\nLIB_OBJS += color.o\nLIB_OBJS += column.o\nLIB_OBJS += combine-diff.o\nLIB_OBJS += commit-graph.o\nLIB_OBJS += commit-reach.o\nLIB_OBJS += commit.o\nLIB_OBJS += compat/nonblock.o\nLIB_OBJS += compat/obstack.o\nLIB_OBJS += compat/terminal.o\nLIB_OBJS += compat/zlib-uncompress2.o\nLIB_OBJS += config.o\nLIB_OBJS += connect.o\nLIB_OBJS += connected.o\nLIB_OBJS += convert.o\nLIB_OBJS += copy.o\nLIB_OBJS += credential.o\nLIB_OBJS += csum-file.o\nLIB_OBJS += ctype.o\nLIB_OBJS += date.o\nLIB_OBJS += decorate.o\nLIB_OBJS += delta-islands.o\nLIB_OBJS += diagnose.o\nLIB_OBJS += diff-delta.o\nLIB_OBJS += diff-merges.o\nLIB_OBJS += diff-lib.o\nLIB_OBJS += diff-no-index.o\nLIB_OBJS += diff.o\nLIB_OBJS += diffcore-break.o\nLIB_OBJS += diffcore-delta.o\nLIB_OBJS += diffcore-order.o\nLIB_OBJS += diffcore-pickaxe.o\nLIB_OBJS += diffcore-rename.o\nLIB_OBJS += diffcore-rotate.o\nLIB_OBJS += dir-iterator.o\nLIB_OBJS += dir.o\nLIB_OBJS += editor.o\nLIB_OBJS += entry.o\nLIB_OBJS += environment.o\nLIB_OBJS += ewah/bitmap.o\nLIB_OBJS += ewah/ewah_bitmap.o\nLIB_OBJS += ewah/ewah_io.o\nLIB_OBJS += ewah/ewah_rlw.o\nLIB_OBJS += exec-cmd.o\nLIB_OBJS += fetch-negotiator.o\nLIB_OBJS += fetch-pack.o\nLIB_OBJS += fmt-merge-msg.o\nLIB_OBJS += fsck.o\nLIB_OBJS += fsmonitor.o\nLIB_OBJS += fsmonitor-ipc.o\nLIB_OBJS += fsmonitor-settings.o\nLIB_OBJS += gettext.o\nLIB_OBJS += gpg-interface.o\nLIB_OBJS += graph.o\nLIB_OBJS += grep.o\nLIB_OBJS += hash-lookup.o\nLIB_OBJS += hashmap.o\nLIB_OBJS += help.o\nLIB_OBJS += hex.o\nLIB_OBJS += hook.o\nLIB_OBJS += ident.o\nLIB_OBJS += json-writer.o\nLIB_OBJS += kwset.o\nLIB_OBJS += levenshtein.o\nLIB_OBJS += line-log.o\nLIB_OBJS += line-range.o\nLIB_OBJS += linear-assignment.o\nLIB_OBJS += list-objects-filter-options.o\nLIB_OBJS += list-objects-filter.o\nLIB_OBJS += list-objects.o\nLIB_OBJS += ll-merge.o\nLIB_OBJS += lockfile.o\nLIB_OBJS += log-tree.o\nLIB_OBJS += ls-refs.o\nLIB_OBJS += mailinfo.o\nLIB_OBJS += mailmap.o\nLIB_OBJS += match-trees.o\nLIB_OBJS += mem-pool.o\nLIB_OBJS += merge-blobs.o\nLIB_OBJS += merge-ort.o\nLIB_OBJS += merge-ort-wrappers.o\nLIB_OBJS += merge-recursive.o\nLIB_OBJS += merge.o\nLIB_OBJS += midx.o\nLIB_OBJS += name-hash.o\nLIB_OBJS += negotiator/default.o\nLIB_OBJS += negotiator/noop.o\nLIB_OBJS += negotiator/skipping.o\nLIB_OBJS += notes-cache.o\nLIB_OBJS += notes-merge.o\nLIB_OBJS += notes-utils.o\nLIB_OBJS += notes.o\nLIB_OBJS += object-file.o\nLIB_OBJS += object-name.o\nLIB_OBJS += object.o\nLIB_OBJS += oid-array.o\nLIB_OBJS += oidmap.o\nLIB_OBJS += oidset.o\nLIB_OBJS += oidtree.o\nLIB_OBJS += pack-bitmap-write.o\nLIB_OBJS += pack-bitmap.o\nLIB_OBJS += pack-check.o\nLIB_OBJS += pack-mtimes.o\nLIB_OBJS += pack-objects.o\nLIB_OBJS += pack-revindex.o\nLIB_OBJS += pack-write.o\nLIB_OBJS += packfile.o\nLIB_OBJS += pager.o\nLIB_OBJS += parallel-checkout.o\nLIB_OBJS += parse-options-cb.o\nLIB_OBJS += parse-options.o\nLIB_OBJS += patch-delta.o\nLIB_OBJS += patch-ids.o\nLIB_OBJS += path.o\nLIB_OBJS += pathspec.o\nLIB_OBJS += pkt-line.o\nLIB_OBJS += preload-index.o\nLIB_OBJS += pretty.o\nLIB_OBJS += prio-queue.o\nLIB_OBJS += progress.o\nLIB_OBJS += promisor-remote.o\nLIB_OBJS += prompt.o\nLIB_OBJS += protocol.o\nLIB_OBJS += protocol-caps.o\nLIB_OBJS += prune-packed.o\nLIB_OBJS += quote.o\nLIB_OBJS += range-diff.o\nLIB_OBJS += reachable.o\nLIB_OBJS += read-cache.o\nLIB_OBJS += rebase-interactive.o\nLIB_OBJS += rebase.o\nLIB_OBJS += ref-filter.o\nLIB_OBJS += reflog-walk.o\nLIB_OBJS += reflog.o\nLIB_OBJS += refs.o\nLIB_OBJS += refs/debug.o\nLIB_OBJS += refs/files-backend.o\nLIB_OBJS += refs/iterator.o\nLIB_OBJS += refs/packed-backend.o\nLIB_OBJS += refs/ref-cache.o\nLIB_OBJS += refspec.o\nLIB_OBJS += remote.o\nLIB_OBJS += replace-object.o\nLIB_OBJS += repo-settings.o\nLIB_OBJS += repository.o\nLIB_OBJS += rerere.o\nLIB_OBJS += reset.o\nLIB_OBJS += resolve-undo.o\nLIB_OBJS += revision.o\nLIB_OBJS += run-command.o\nLIB_OBJS += send-pack.o\nLIB_OBJS += sequencer.o\nLIB_OBJS += serve.o\nLIB_OBJS += server-info.o\nLIB_OBJS += setup.o\nLIB_OBJS += shallow.o\nLIB_OBJS += sideband.o\nLIB_OBJS += sigchain.o\nLIB_OBJS += sparse-index.o\nLIB_OBJS += split-index.o\nLIB_OBJS += stable-qsort.o\nLIB_OBJS += strbuf.o\nLIB_OBJS += streaming.o\nLIB_OBJS += string-list.o\nLIB_OBJS += strmap.o\nLIB_OBJS += strvec.o\nLIB_OBJS += sub-process.o\nLIB_OBJS += submodule-config.o\nLIB_OBJS += submodule.o\nLIB_OBJS += symlinks.o\nLIB_OBJS += tag.o\nLIB_OBJS += tempfile.o\nLIB_OBJS += thread-utils.o\nLIB_OBJS += tmp-objdir.o\nLIB_OBJS += trace.o\nLIB_OBJS += trace2.o\nLIB_OBJS += trace2/tr2_cfg.o\nLIB_OBJS += trace2/tr2_cmd_name.o\nLIB_OBJS += trace2/tr2_dst.o\nLIB_OBJS += trace2/tr2_sid.o\nLIB_OBJS += trace2/tr2_sysenv.o\nLIB_OBJS += trace2/tr2_tbuf.o\nLIB_OBJS += trace2/tr2_tgt_event.o\nLIB_OBJS += trace2/tr2_tgt_normal.o\nLIB_OBJS += trace2/tr2_tgt_perf.o\nLIB_OBJS += trace2/tr2_tls.o\nLIB_OBJS += trailer.o\nLIB_OBJS += transport-helper.o\nLIB_OBJS += transport.o\nLIB_OBJS += tree-diff.o\nLIB_OBJS += tree-walk.o\nLIB_OBJS += tree.o\nLIB_OBJS += unpack-trees.o\nLIB_OBJS += upload-pack.o\nLIB_OBJS += url.o\nLIB_OBJS += urlmatch.o\nLIB_OBJS += usage.o\nLIB_OBJS += userdiff.o\nLIB_OBJS += utf8.o\nLIB_OBJS += varint.o\nLIB_OBJS += version.o\nLIB_OBJS += versioncmp.o\nLIB_OBJS += walker.o\nLIB_OBJS += wildmatch.o\nLIB_OBJS += worktree.o\nLIB_OBJS += wrapper.o\nLIB_OBJS += write-or-die.o\nLIB_OBJS += ws.o\nLIB_OBJS += wt-status.o\nLIB_OBJS += xdiff-interface.o\nLIB_OBJS += zlib.o\n\nBUILTIN_OBJS += builtin/add.o\nBUILTIN_OBJS += builtin/am.o\nBUILTIN_OBJS += builtin/annotate.o\nBUILTIN_OBJS += builtin/apply.o\nBUILTIN_OBJS += builtin/archive.o\nBUILTIN_OBJS += builtin/bisect--helper.o\nBUILTIN_OBJS += builtin/blame.o\nBUILTIN_OBJS += builtin/branch.o\nBUILTIN_OBJS += builtin/bugreport.o\nBUILTIN_OBJS += builtin/bundle.o\nBUILTIN_OBJS += builtin/cat-file.o\nBUILTIN_OBJS += builtin/check-attr.o\nBUILTIN_OBJS += builtin/check-ignore.o\nBUILTIN_OBJS += builtin/check-mailmap.o\nBUILTIN_OBJS += builtin/check-ref-format.o\nBUILTIN_OBJS += builtin/checkout--worker.o\nBUILTIN_OBJS += builtin/checkout-index.o\nBUILTIN_OBJS += builtin/checkout.o\nBUILTIN_OBJS += builtin/clean.o\nBUILTIN_OBJS += builtin/clone.o\nBUILTIN_OBJS += builtin/column.o\nBUILTIN_OBJS += builtin/commit-graph.o\nBUILTIN_OBJS += builtin/commit-tree.o\nBUILTIN_OBJS += builtin/commit.o\nBUILTIN_OBJS += builtin/config.o\nBUILTIN_OBJS += builtin/count-objects.o\nBUILTIN_OBJS += builtin/credential-cache--daemon.o\nBUILTIN_OBJS += builtin/credential-cache.o\nBUILTIN_OBJS += builtin/credential-store.o\nBUILTIN_OBJS += builtin/credential.o\nBUILTIN_OBJS += builtin/describe.o\nBUILTIN_OBJS += builtin/diagnose.o\nBUILTIN_OBJS += builtin/diff-files.o\nBUILTIN_OBJS += builtin/diff-index.o\nBUILTIN_OBJS += builtin/diff-tree.o\nBUILTIN_OBJS += builtin/diff.o\nBUILTIN_OBJS += builtin/difftool.o\nBUILTIN_OBJS += builtin/env--helper.o\nBUILTIN_OBJS += builtin/fast-export.o\nBUILTIN_OBJS += builtin/fast-import.o\nBUILTIN_OBJS += builtin/fetch-pack.o\nBUILTIN_OBJS += builtin/fetch.o\nBUILTIN_OBJS += builtin/fmt-merge-msg.o\nBUILTIN_OBJS += builtin/for-each-ref.o\nBUILTIN_OBJS += builtin/for-each-repo.o\nBUILTIN_OBJS += builtin/fsck.o\nBUILTIN_OBJS += builtin/fsmonitor--daemon.o\nBUILTIN_OBJS += builtin/gc.o\nBUILTIN_OBJS += builtin/get-tar-commit-id.o\nBUILTIN_OBJS += builtin/grep.o\nBUILTIN_OBJS += builtin/hash-object.o\nBUILTIN_OBJS += builtin/help.o\nBUILTIN_OBJS += builtin/hook.o\nBUILTIN_OBJS += builtin/index-pack.o\nBUILTIN_OBJS += builtin/init-db.o\nBUILTIN_OBJS += builtin/interpret-trailers.o\nBUILTIN_OBJS += builtin/log.o\nBUILTIN_OBJS += builtin/ls-files.o\nBUILTIN_OBJS += builtin/ls-remote.o\nBUILTIN_OBJS += builtin/ls-tree.o\nBUILTIN_OBJS += builtin/mailinfo.o\nBUILTIN_OBJS += builtin/mailsplit.o\nBUILTIN_OBJS += builtin/merge-base.o\nBUILTIN_OBJS += builtin/merge-file.o\nBUILTIN_OBJS += builtin/merge-index.o\nBUILTIN_OBJS += builtin/merge-ours.o\nBUILTIN_OBJS += builtin/merge-recursive.o\nBUILTIN_OBJS += builtin/merge-tree.o\nBUILTIN_OBJS += builtin/merge.o\nBUILTIN_OBJS += builtin/mktag.o\nBUILTIN_OBJS += builtin/mktree.o\nBUILTIN_OBJS += builtin/multi-pack-index.o\nBUILTIN_OBJS += builtin/mv.o\nBUILTIN_OBJS += builtin/name-rev.o\nBUILTIN_OBJS += builtin/notes.o\nBUILTIN_OBJS += builtin/pack-objects.o\nBUILTIN_OBJS += builtin/pack-redundant.o\nBUILTIN_OBJS += builtin/pack-refs.o\nBUILTIN_OBJS += builtin/patch-id.o\nBUILTIN_OBJS += builtin/prune-packed.o\nBUILTIN_OBJS += builtin/prune.o\nBUILTIN_OBJS += builtin/pull.o\nBUILTIN_OBJS += builtin/push.o\nBUILTIN_OBJS += builtin/range-diff.o\nBUILTIN_OBJS += builtin/read-tree.o\nBUILTIN_OBJS += builtin/rebase.o\nBUILTIN_OBJS += builtin/receive-pack.o\nBUILTIN_OBJS += builtin/reflog.o\nBUILTIN_OBJS += builtin/remote-ext.o\nBUILTIN_OBJS += builtin/remote-fd.o\nBUILTIN_OBJS += builtin/remote.o\nBUILTIN_OBJS += builtin/repack.o\nBUILTIN_OBJS += builtin/replace.o\nBUILTIN_OBJS += builtin/rerere.o\nBUILTIN_OBJS += builtin/reset.o\nBUILTIN_OBJS += builtin/rev-list.o\nBUILTIN_OBJS += builtin/rev-parse.o\nBUILTIN_OBJS += builtin/revert.o\nBUILTIN_OBJS += builtin/rm.o\nBUILTIN_OBJS += builtin/send-pack.o\nBUILTIN_OBJS += builtin/shortlog.o\nBUILTIN_OBJS += builtin/show-branch.o\nBUILTIN_OBJS += builtin/show-index.o\nBUILTIN_OBJS += builtin/show-ref.o\nBUILTIN_OBJS += builtin/sparse-checkout.o\nBUILTIN_OBJS += builtin/stash.o\nBUILTIN_OBJS += builtin/stripspace.o\nBUILTIN_OBJS += builtin/submodule--helper.o\nBUILTIN_OBJS += builtin/symbolic-ref.o\nBUILTIN_OBJS += builtin/tag.o\nBUILTIN_OBJS += builtin/unpack-file.o\nBUILTIN_OBJS += builtin/unpack-objects.o\nBUILTIN_OBJS += builtin/update-index.o\nBUILTIN_OBJS += builtin/update-ref.o\nBUILTIN_OBJS += builtin/update-server-info.o\nBUILTIN_OBJS += builtin/upload-archive.o\nBUILTIN_OBJS += builtin/upload-pack.o\nBUILTIN_OBJS += builtin/var.o\nBUILTIN_OBJS += builtin/verify-commit.o\nBUILTIN_OBJS += builtin/verify-pack.o\nBUILTIN_OBJS += builtin/verify-tag.o\nBUILTIN_OBJS += builtin/worktree.o\nBUILTIN_OBJS += builtin/write-tree.o\n\n# THIRD_PARTY_SOURCES is a list of patterns compatible with the\n# $(filter) and $(filter-out) family of functions. They specify source\n# files which are taken from some third-party source where we want to be\n# less strict about issues such as coding style so we don't diverge from\n# upstream unnecessarily (making merging in future changes easier).\nTHIRD_PARTY_SOURCES += compat/inet_ntop.c\nTHIRD_PARTY_SOURCES += compat/inet_pton.c\nTHIRD_PARTY_SOURCES += compat/nedmalloc/%\nTHIRD_PARTY_SOURCES += compat/obstack.%\nTHIRD_PARTY_SOURCES += compat/poll/%\nTHIRD_PARTY_SOURCES += compat/regex/%\nTHIRD_PARTY_SOURCES += sha1collisiondetection/%\nTHIRD_PARTY_SOURCES += sha1dc/%\n\n# xdiff and reftable libs may in turn depend on what is in libgit.a\nGITLIBS = common-main.o $(LIB_FILE) $(XDIFF_LIB) $(REFTABLE_LIB) $(LIB_FILE)\nEXTLIBS =\n\nGIT_USER_AGENT = git/$(GIT_VERSION)\n\nifeq ($(wildcard sha1collisiondetection/lib/sha1.h),sha1collisiondetection/lib/sha1.h)\nDC_SHA1_SUBMODULE = auto\nendif\n\n# Set CFLAGS, LDFLAGS and other *FLAGS variables. These might be\n# tweaked by config.* below as well as the command-line, both of\n# which'll override these defaults.\n# Older versions of GCC may require adding \"-std=gnu99\" at the end.\nCFLAGS = -g -O2 -Wall\nLDFLAGS =\nCC_LD_DYNPATH = -Wl,-rpath,\nBASIC_CFLAGS = -I.\nBASIC_LDFLAGS =\n\n# library flags\nARFLAGS = rcs\nPTHREAD_CFLAGS =\n\n# For the 'sparse' target\nSPARSE_FLAGS ?= -std=gnu99\nSP_EXTRA_FLAGS = -Wno-universal-initializer\n\n# For informing GIT-BUILD-OPTIONS of the SANITIZE=leak,address targets\nSANITIZE_LEAK =\nSANITIZE_ADDRESS =\n\n# For the 'coccicheck' target; setting SPATCH_BATCH_SIZE higher will\n# usually result in less CPU usage at the cost of higher peak memory.\n# Setting it to 0 will feed all files in a single spatch invocation.\nSPATCH_FLAGS = --all-includes\nSPATCH_BATCH_SIZE = 1\n\ninclude config.mak.uname\n-include config.mak.autogen\n-include config.mak\n\nifdef DEVELOPER\ninclude config.mak.dev\nendif\n\n# what 'all' will build and 'install' will install in gitexecdir,\n# excluding programs for built-in commands\nALL_PROGRAMS = $(PROGRAMS) $(SCRIPTS)\nALL_COMMANDS_TO_INSTALL = $(ALL_PROGRAMS)\nifeq (,$(SKIP_DASHED_BUILT_INS))\nALL_COMMANDS_TO_INSTALL += $(BUILT_INS)\nelse\n# git-upload-pack, git-receive-pack and git-upload-archive are special: they\n# are _expected_ to be present in the `bin/` directory in their dashed form.\nALL_COMMANDS_TO_INSTALL += git-receive-pack$(X)\nALL_COMMANDS_TO_INSTALL += git-upload-archive$(X)\nALL_COMMANDS_TO_INSTALL += git-upload-pack$(X)\nendif\n\nALL_CFLAGS = $(DEVELOPER_CFLAGS) $(CPPFLAGS) $(CFLAGS)\nALL_LDFLAGS = $(LDFLAGS)\n\nifdef SANITIZE\nSANITIZERS := $(foreach flag,$(subst $(comma),$(space),$(SANITIZE)),$(flag))\nBASIC_CFLAGS += -fsanitize=$(SANITIZE) -fno-sanitize-recover=$(SANITIZE)\nBASIC_CFLAGS += -fno-omit-frame-pointer\nifneq ($(filter undefined,$(SANITIZERS)),)\nBASIC_CFLAGS += -DSHA1DC_FORCE_ALIGNED_ACCESS\nendif\nifneq ($(filter leak,$(SANITIZERS)),)\nBASIC_CFLAGS += -DSUPPRESS_ANNOTATED_LEAKS\nSANITIZE_LEAK = YesCompiledWithIt\nendif\nifneq ($(filter address,$(SANITIZERS)),)\nNO_REGEX = NeededForASAN\nSANITIZE_ADDRESS = YesCompiledWithIt\nendif\nendif\n\nifndef sysconfdir\nifeq ($(prefix),/usr)\nsysconfdir = /etc\nelse\nsysconfdir = etc\nendif\nendif\n\nifndef COMPUTE_HEADER_DEPENDENCIES\nCOMPUTE_HEADER_DEPENDENCIES = auto\nendif\n\nifeq ($(COMPUTE_HEADER_DEPENDENCIES),auto)\ndep_check = $(shell $(CC) $(ALL_CFLAGS) \\\n\t-Wno-pedantic \\\n\t-c -MF /dev/null -MQ /dev/null -MMD -MP \\\n\t-x c /dev/null -o /dev/null 2>&1; \\\n\techo $$?)\nifeq ($(dep_check),0)\noverride COMPUTE_HEADER_DEPENDENCIES = yes\nelse\noverride COMPUTE_HEADER_DEPENDENCIES = no\nendif\nendif\n\nifeq ($(COMPUTE_HEADER_DEPENDENCIES),yes)\nUSE_COMPUTED_HEADER_DEPENDENCIES = YesPlease\nelse\nifneq ($(COMPUTE_HEADER_DEPENDENCIES),no)\n$(error please set COMPUTE_HEADER_DEPENDENCIES to yes, no, or auto \\\n(not \"$(COMPUTE_HEADER_DEPENDENCIES)\"))\nendif\nendif\n\nifndef GENERATE_COMPILATION_DATABASE\nGENERATE_COMPILATION_DATABASE = no\nendif\n\nifeq ($(GENERATE_COMPILATION_DATABASE),yes)\ncompdb_check = $(shell $(CC) $(ALL_CFLAGS) \\\n\t-Wno-pedantic \\\n\t-c -MJ /dev/null \\\n\t-x c /dev/null -o /dev/null 2>&1; \\\n\techo $$?)\nifneq ($(compdb_check),0)\noverride GENERATE_COMPILATION_DATABASE = no\n$(warning GENERATE_COMPILATION_DATABASE is set to \"yes\", but your compiler does not \\\nsupport generating compilation database entries)\nendif\nelse\nifneq ($(GENERATE_COMPILATION_DATABASE),no)\n$(error please set GENERATE_COMPILATION_DATABASE to \"yes\" or \"no\" \\\n(not \"$(GENERATE_COMPILATION_DATABASE)\"))\nendif\nendif\n\nifdef SANE_TOOL_PATH\nSANE_TOOL_PATH_SQ = $(subst ','\\'',$(SANE_TOOL_PATH))\nBROKEN_PATH_FIX = 's|^\\# @@BROKEN_PATH_FIX@@$$|git_broken_path_fix \"$(SANE_TOOL_PATH_SQ)\"|'\nPATH := $(SANE_TOOL_PATH):${PATH}\nelse\nBROKEN_PATH_FIX = '/^\\# @@BROKEN_PATH_FIX@@$$/d'\nendif\n\nifeq (,$(HOST_CPU))\n\tBASIC_CFLAGS += -DGIT_HOST_CPU=\"\\\"$(firstword $(subst -, ,$(uname_M)))\\\"\"\nelse\n\tBASIC_CFLAGS += -DGIT_HOST_CPU=\"\\\"$(HOST_CPU)\\\"\"\nendif\n\nifneq (,$(INLINE))\n\tBASIC_CFLAGS += -Dinline=$(INLINE)\nendif\n\nifneq (,$(SOCKLEN_T))\n\tBASIC_CFLAGS += -Dsocklen_t=$(SOCKLEN_T)\nendif\n\nifeq ($(uname_S),Darwin)\n\tifndef NO_FINK\n\t\tifeq ($(shell test -d /sw/lib && echo y),y)\n\t\t\tBASIC_CFLAGS += -I/sw/include\n\t\t\tBASIC_LDFLAGS += -L/sw/lib\n\t\tendif\n\tendif\n\tifndef NO_DARWIN_PORTS\n\t\tifeq ($(shell test -d /opt/local/lib && echo y),y)\n\t\t\tBASIC_CFLAGS += -I/opt/local/include\n\t\t\tBASIC_LDFLAGS += -L/opt/local/lib\n\t\tendif\n\tendif\n\tifndef NO_APPLE_COMMON_CRYPTO\n\t\tNO_OPENSSL = YesPlease\n\t\tAPPLE_COMMON_CRYPTO = YesPlease\n\t\tCOMPAT_CFLAGS += -DAPPLE_COMMON_CRYPTO\n\tendif\n\tNO_REGEX = YesPlease\n\tPTHREAD_LIBS =\nendif\n\nifdef NO_LIBGEN_H\n\tCOMPAT_CFLAGS += -DNO_LIBGEN_H\n\tCOMPAT_OBJS += compat/basename.o\nendif\n\nifdef USE_LIBPCRE1\n$(error The USE_LIBPCRE1 build option has been removed, use version 2 with USE_LIBPCRE)\nendif\n\nUSE_LIBPCRE2 ?= $(USE_LIBPCRE)\n\nifneq (,$(USE_LIBPCRE2))\n\tBASIC_CFLAGS += -DUSE_LIBPCRE2\n\tEXTLIBS += -lpcre2-8\nendif\n\nifdef LIBPCREDIR\n\tBASIC_CFLAGS += -I$(LIBPCREDIR)/include\n\tEXTLIBS += -L$(LIBPCREDIR)/$(lib) $(CC_LD_DYNPATH)$(LIBPCREDIR)/$(lib)\nendif\n\nifdef HAVE_ALLOCA_H\n\tBASIC_CFLAGS += -DHAVE_ALLOCA_H\nendif\n\nIMAP_SEND_BUILDDEPS =\nIMAP_SEND_LDFLAGS =\n\nifdef NO_CURL\n\tBASIC_CFLAGS += -DNO_CURL\n\tREMOTE_CURL_PRIMARY =\n\tREMOTE_CURL_ALIASES =\n\tREMOTE_CURL_NAMES =\n\tEXCLUDED_PROGRAMS += git-http-fetch git-http-push\nelse\n\tifdef CURLDIR\n\t\t# Try \"-Wl,-rpath=$(CURLDIR)/$(lib)\" in such a case.\n\t\tCURL_CFLAGS = -I$(CURLDIR)/include\n\t\tCURL_LIBCURL = -L$(CURLDIR)/$(lib) $(CC_LD_DYNPATH)$(CURLDIR)/$(lib)\n\telse\n\t\tCURL_CFLAGS =\n\t\tCURL_LIBCURL =\n\tendif\n\n\tifndef CURL_LDFLAGS\n\t\tCURL_LDFLAGS = $(eval CURL_LDFLAGS := $$(shell $$(CURL_CONFIG) --libs))$(CURL_LDFLAGS)\n\tendif\n\tCURL_LIBCURL += $(CURL_LDFLAGS)\n\n\tifndef CURL_CFLAGS\n\t\tCURL_CFLAGS = $(eval CURL_CFLAGS := $$(shell $$(CURL_CONFIG) --cflags))$(CURL_CFLAGS)\n\tendif\n\tBASIC_CFLAGS += $(CURL_CFLAGS)\n\n\tREMOTE_CURL_PRIMARY = git-remote-http$X\n\tREMOTE_CURL_ALIASES = git-remote-https$X git-remote-ftp$X git-remote-ftps$X\n\tREMOTE_CURL_NAMES = $(REMOTE_CURL_PRIMARY) $(REMOTE_CURL_ALIASES)\n\tPROGRAM_OBJS += http-fetch.o\n\tPROGRAMS += $(REMOTE_CURL_NAMES)\n\tifndef NO_EXPAT\n\t\tPROGRAM_OBJS += http-push.o\n\tendif\n\tcurl_check := $(shell (echo 072200; $(CURL_CONFIG) --vernum | sed -e '/^70[BC]/s/^/0/') 2>/dev/null | sort -r | sed -ne 2p)\n\tifeq \"$(curl_check)\" \"072200\"\n\t\tUSE_CURL_FOR_IMAP_SEND = YesPlease\n\tendif\n\tifdef USE_CURL_FOR_IMAP_SEND\n\t\tBASIC_CFLAGS += -DUSE_CURL_FOR_IMAP_SEND\n\t\tIMAP_SEND_BUILDDEPS = http.o\n\t\tIMAP_SEND_LDFLAGS += $(CURL_LIBCURL)\n\tendif\n\tifndef NO_EXPAT\n\t\tifdef EXPATDIR\n\t\t\tBASIC_CFLAGS += -I$(EXPATDIR)/include\n\t\t\tEXPAT_LIBEXPAT = -L$(EXPATDIR)/$(lib) $(CC_LD_DYNPATH)$(EXPATDIR)/$(lib) -lexpat\n\t\telse\n\t\t\tEXPAT_LIBEXPAT = -lexpat\n\t\tendif\n\t\tifdef EXPAT_NEEDS_XMLPARSE_H\n\t\t\tBASIC_CFLAGS += -DEXPAT_NEEDS_XMLPARSE_H\n\t\tendif\n\tendif\nendif\nIMAP_SEND_LDFLAGS += $(OPENSSL_LINK) $(OPENSSL_LIBSSL) $(LIB_4_CRYPTO)\n\nifdef ZLIB_PATH\n\tBASIC_CFLAGS += -I$(ZLIB_PATH)/include\n\tEXTLIBS += -L$(ZLIB_PATH)/$(lib) $(CC_LD_DYNPATH)$(ZLIB_PATH)/$(lib)\nendif\nEXTLIBS += -lz\n\nifndef NO_OPENSSL\n\tOPENSSL_LIBSSL = -lssl\n\tifdef OPENSSLDIR\n\t\tBASIC_CFLAGS += -I$(OPENSSLDIR)/include\n\t\tOPENSSL_LINK = -L$(OPENSSLDIR)/$(lib) $(CC_LD_DYNPATH)$(OPENSSLDIR)/$(lib)\n\telse\n\t\tOPENSSL_LINK =\n\tendif\n\tifdef NEEDS_CRYPTO_WITH_SSL\n\t\tOPENSSL_LIBSSL += -lcrypto\n\tendif\nelse\n\tBASIC_CFLAGS += -DNO_OPENSSL\n\tOPENSSL_LIBSSL =\nendif\nifdef NO_OPENSSL\n\tLIB_4_CRYPTO =\nelse\nifdef NEEDS_SSL_WITH_CRYPTO\n\tLIB_4_CRYPTO = $(OPENSSL_LINK) -lcrypto -lssl\nelse\n\tLIB_4_CRYPTO = $(OPENSSL_LINK) -lcrypto\nendif\nifdef APPLE_COMMON_CRYPTO\n\tLIB_4_CRYPTO += -framework Security -framework CoreFoundation\nendif\nendif\nifndef NO_ICONV\n\tifdef NEEDS_LIBICONV\n\t\tifdef ICONVDIR\n\t\t\tBASIC_CFLAGS += -I$(ICONVDIR)/include\n\t\t\tICONV_LINK = -L$(ICONVDIR)/$(lib) $(CC_LD_DYNPATH)$(ICONVDIR)/$(lib)\n\t\telse\n\t\t\tICONV_LINK =\n\t\tendif\n\t\tifdef NEEDS_LIBINTL_BEFORE_LIBICONV\n\t\t\tICONV_LINK += -lintl\n\t\tendif\n\t\tEXTLIBS += $(ICONV_LINK) -liconv\n\tendif\nendif\nifdef ICONV_OMITS_BOM\n\tBASIC_CFLAGS += -DICONV_OMITS_BOM\nendif\nifdef NEEDS_LIBGEN\n\tEXTLIBS += -lgen\nendif\nifndef NO_GETTEXT\nifndef LIBC_CONTAINS_LIBINTL\n\tEXTLIBS += -lintl\nendif\nendif\nifdef NEEDS_SOCKET\n\tEXTLIBS += -lsocket\nendif\nifdef NEEDS_NSL\n\tEXTLIBS += -lnsl\nendif\nifdef NEEDS_RESOLV\n\tEXTLIBS += -lresolv\nendif\nifdef NO_D_TYPE_IN_DIRENT\n\tBASIC_CFLAGS += -DNO_D_TYPE_IN_DIRENT\nendif\nifdef NO_GECOS_IN_PWENT\n\tBASIC_CFLAGS += -DNO_GECOS_IN_PWENT\nendif\nifdef NO_ST_BLOCKS_IN_STRUCT_STAT\n\tBASIC_CFLAGS += -DNO_ST_BLOCKS_IN_STRUCT_STAT\nendif\nifdef USE_NSEC\n\tBASIC_CFLAGS += -DUSE_NSEC\nendif\nifdef USE_ST_TIMESPEC\n\tBASIC_CFLAGS += -DUSE_ST_TIMESPEC\nendif\nifdef NO_NORETURN\n\tBASIC_CFLAGS += -DNO_NORETURN\nendif\nifdef NO_NSEC\n\tBASIC_CFLAGS += -DNO_NSEC\nendif\nifdef SNPRINTF_RETURNS_BOGUS\n\tCOMPAT_CFLAGS += -DSNPRINTF_RETURNS_BOGUS\n\tCOMPAT_OBJS += compat/snprintf.o\nendif\nifdef FREAD_READS_DIRECTORIES\n\tCOMPAT_CFLAGS += -DFREAD_READS_DIRECTORIES\n\tCOMPAT_OBJS += compat/fopen.o\nendif\nifdef OPEN_RETURNS_EINTR\n\tCOMPAT_CFLAGS += -DOPEN_RETURNS_EINTR\n\tCOMPAT_OBJS += compat/open.o\nendif\nifdef NO_SYMLINK_HEAD\n\tBASIC_CFLAGS += -DNO_SYMLINK_HEAD\nendif\nifdef NO_GETTEXT\n\tBASIC_CFLAGS += -DNO_GETTEXT\n\tUSE_GETTEXT_SCHEME ?= fallthrough\nendif\nifdef NO_POLL\n\tNO_POLL_H = YesPlease\n\tNO_SYS_POLL_H = YesPlease\n\tCOMPAT_CFLAGS += -DNO_POLL -Icompat/poll\n\tCOMPAT_OBJS += compat/poll/poll.o\nendif\nifdef NO_STRCASESTR\n\tCOMPAT_CFLAGS += -DNO_STRCASESTR\n\tCOMPAT_OBJS += compat/strcasestr.o\nendif\nifdef NO_STRLCPY\n\tCOMPAT_CFLAGS += -DNO_STRLCPY\n\tCOMPAT_OBJS += compat/strlcpy.o\nendif\nifdef NO_STRTOUMAX\n\tCOMPAT_CFLAGS += -DNO_STRTOUMAX\n\tCOMPAT_OBJS += compat/strtoumax.o compat/strtoimax.o\nendif\nifdef NO_STRTOULL\n\tCOMPAT_CFLAGS += -DNO_STRTOULL\nendif\nifdef NO_SETENV\n\tCOMPAT_CFLAGS += -DNO_SETENV\n\tCOMPAT_OBJS += compat/setenv.o\nendif\nifdef NO_MKDTEMP\n\tCOMPAT_CFLAGS += -DNO_MKDTEMP\n\tCOMPAT_OBJS += compat/mkdtemp.o\nendif\nifdef MKDIR_WO_TRAILING_SLASH\n\tCOMPAT_CFLAGS += -DMKDIR_WO_TRAILING_SLASH\n\tCOMPAT_OBJS += compat/mkdir.o\nendif\nifdef NO_UNSETENV\n\tCOMPAT_CFLAGS += -DNO_UNSETENV\n\tCOMPAT_OBJS += compat/unsetenv.o\nendif\nifdef NO_SYS_SELECT_H\n\tBASIC_CFLAGS += -DNO_SYS_SELECT_H\nendif\nifdef NO_POLL_H\n\tBASIC_CFLAGS += -DNO_POLL_H\nendif\nifdef NO_SYS_POLL_H\n\tBASIC_CFLAGS += -DNO_SYS_POLL_H\nendif\nifdef NEEDS_SYS_PARAM_H\n\tBASIC_CFLAGS += -DNEEDS_SYS_PARAM_H\nendif\nifdef NO_INTTYPES_H\n\tBASIC_CFLAGS += -DNO_INTTYPES_H\nendif\nifdef NO_INITGROUPS\n\tBASIC_CFLAGS += -DNO_INITGROUPS\nendif\nifdef NO_MMAP\n\tCOMPAT_CFLAGS += -DNO_MMAP\n\tCOMPAT_OBJS += compat/mmap.o\nelse\n\tifdef USE_WIN32_MMAP\n\t\tCOMPAT_CFLAGS += -DUSE_WIN32_MMAP\n\t\tCOMPAT_OBJS += compat/win32mmap.o\n\tendif\nendif\nifdef MMAP_PREVENTS_DELETE\n\tBASIC_CFLAGS += -DMMAP_PREVENTS_DELETE\nendif\nifdef OBJECT_CREATION_USES_RENAMES\n\tCOMPAT_CFLAGS += -DOBJECT_CREATION_MODE=1\nendif\nifdef NO_STRUCT_ITIMERVAL\n\tCOMPAT_CFLAGS += -DNO_STRUCT_ITIMERVAL\n\tNO_SETITIMER = YesPlease\nendif\nifdef NO_SETITIMER\n\tCOMPAT_CFLAGS += -DNO_SETITIMER\nendif\nifdef NO_PREAD\n\tCOMPAT_CFLAGS += -DNO_PREAD\n\tCOMPAT_OBJS += compat/pread.o\nendif\nifdef NO_FAST_WORKING_DIRECTORY\n\tBASIC_CFLAGS += -DNO_FAST_WORKING_DIRECTORY\nendif\nifdef NO_TRUSTABLE_FILEMODE\n\tBASIC_CFLAGS += -DNO_TRUSTABLE_FILEMODE\nendif\nifdef NEEDS_MODE_TRANSLATION\n\tCOMPAT_CFLAGS += -DNEEDS_MODE_TRANSLATION\n\tCOMPAT_OBJS += compat/stat.o\nendif\nifdef NO_IPV6\n\tBASIC_CFLAGS += -DNO_IPV6\nendif\nifdef NO_INTPTR_T\n\tCOMPAT_CFLAGS += -DNO_INTPTR_T\nendif\nifdef NO_UINTMAX_T\n\tBASIC_CFLAGS += -Duintmax_t=uint32_t\nendif\nifdef NO_SOCKADDR_STORAGE\nifdef NO_IPV6\n\tBASIC_CFLAGS += -Dsockaddr_storage=sockaddr_in\nelse\n\tBASIC_CFLAGS += -Dsockaddr_storage=sockaddr_in6\nendif\nendif\nifdef NO_INET_NTOP\n\tLIB_OBJS += compat/inet_ntop.o\n\tBASIC_CFLAGS += -DNO_INET_NTOP\nendif\nifdef NO_INET_PTON\n\tLIB_OBJS += compat/inet_pton.o\n\tBASIC_CFLAGS += -DNO_INET_PTON\nendif\nifdef NO_UNIX_SOCKETS\n\tBASIC_CFLAGS += -DNO_UNIX_SOCKETS\nelse\n\tLIB_OBJS += unix-socket.o\n\tLIB_OBJS += unix-stream-server.o\nendif\n\n# Simple IPC requires threads and platform-specific IPC support.\n# Only platforms that have both should include these source files\n# in the build.\n#\n# On Windows-based systems, Simple IPC requires threads and Windows\n# Named Pipes.  These are always available, so Simple IPC support\n# is optional.\n#\n# On Unix-based systems, Simple IPC requires pthreads and Unix\n# domain sockets.  So support is only enabled when both are present.\n#\nifdef USE_WIN32_IPC\n\tBASIC_CFLAGS += -DSUPPORTS_SIMPLE_IPC\n\tLIB_OBJS += compat/simple-ipc/ipc-shared.o\n\tLIB_OBJS += compat/simple-ipc/ipc-win32.o\nelse\nifndef NO_PTHREADS\nifndef NO_UNIX_SOCKETS\n\tBASIC_CFLAGS += -DSUPPORTS_SIMPLE_IPC\n\tLIB_OBJS += compat/simple-ipc/ipc-shared.o\n\tLIB_OBJS += compat/simple-ipc/ipc-unix-socket.o\nendif\nendif\nendif\n\nifdef NO_ICONV\n\tBASIC_CFLAGS += -DNO_ICONV\nendif\n\nifdef OLD_ICONV\n\tBASIC_CFLAGS += -DOLD_ICONV\nendif\n\nifdef NO_DEFLATE_BOUND\n\tBASIC_CFLAGS += -DNO_DEFLATE_BOUND\nendif\n\nifdef NO_POSIX_GOODIES\n\tBASIC_CFLAGS += -DNO_POSIX_GOODIES\nendif\n\nifdef APPLE_COMMON_CRYPTO\n\t# Apple CommonCrypto requires chunking\n\tSHA1_MAX_BLOCK_SIZE = 1024L*1024L*1024L\nendif\n\nifdef PPC_SHA1\n$(error the PPC_SHA1 flag has been removed along with the PowerPC-specific SHA-1 implementation.)\nendif\n\nifdef OPENSSL_SHA1\n\tEXTLIBS += $(LIB_4_CRYPTO)\n\tBASIC_CFLAGS += -DSHA1_OPENSSL\nelse\nifdef BLK_SHA1\n\tLIB_OBJS += block-sha1/sha1.o\n\tBASIC_CFLAGS += -DSHA1_BLK\nelse\nifdef APPLE_COMMON_CRYPTO\n\tCOMPAT_CFLAGS += -DCOMMON_DIGEST_FOR_OPENSSL\n\tBASIC_CFLAGS += -DSHA1_APPLE\nelse\n\tDC_SHA1 := YesPlease\n\tBASIC_CFLAGS += -DSHA1_DC\n\tLIB_OBJS += sha1dc_git.o\nifdef DC_SHA1_EXTERNAL\n\tifdef DC_SHA1_SUBMODULE\n\t\tifneq ($(DC_SHA1_SUBMODULE),auto)\n$(error Only set DC_SHA1_EXTERNAL or DC_SHA1_SUBMODULE, not both)\n\t\tendif\n\tendif\n\tBASIC_CFLAGS += -DDC_SHA1_EXTERNAL\n\tEXTLIBS += -lsha1detectcoll\nelse\nifdef DC_SHA1_SUBMODULE\n\tLIB_OBJS += sha1collisiondetection/lib/sha1.o\n\tLIB_OBJS += sha1collisiondetection/lib/ubc_check.o\n\tBASIC_CFLAGS += -DDC_SHA1_SUBMODULE\nelse\n\tLIB_OBJS += sha1dc/sha1.o\n\tLIB_OBJS += sha1dc/ubc_check.o\nendif\n\tBASIC_CFLAGS += \\\n\t\t-DSHA1DC_NO_STANDARD_INCLUDES \\\n\t\t-DSHA1DC_INIT_SAFE_HASH_DEFAULT=0 \\\n\t\t-DSHA1DC_CUSTOM_INCLUDE_SHA1_C=\"\\\"cache.h\\\"\" \\\n\t\t-DSHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=\"\\\"git-compat-util.h\\\"\"\nendif\nendif\nendif\nendif\n\nifdef OPENSSL_SHA256\n\tEXTLIBS += $(LIB_4_CRYPTO)\n\tBASIC_CFLAGS += -DSHA256_OPENSSL\nelse\nifdef NETTLE_SHA256\n\tBASIC_CFLAGS += -DSHA256_NETTLE\n\tEXTLIBS += -lnettle\nelse\nifdef GCRYPT_SHA256\n\tBASIC_CFLAGS += -DSHA256_GCRYPT\n\tEXTLIBS += -lgcrypt\nelse\n\tLIB_OBJS += sha256/block/sha256.o\n\tBASIC_CFLAGS += -DSHA256_BLK\nendif\nendif\nendif\n\nifdef SHA1_MAX_BLOCK_SIZE\n\tLIB_OBJS += compat/sha1-chunked.o\n\tBASIC_CFLAGS += -DSHA1_MAX_BLOCK_SIZE=\"$(SHA1_MAX_BLOCK_SIZE)\"\nendif\nifdef NO_HSTRERROR\n\tCOMPAT_CFLAGS += -DNO_HSTRERROR\n\tCOMPAT_OBJS += compat/hstrerror.o\nendif\nifdef NO_MEMMEM\n\tCOMPAT_CFLAGS += -DNO_MEMMEM\n\tCOMPAT_OBJS += compat/memmem.o\nendif\nifdef NO_GETPAGESIZE\n\tCOMPAT_CFLAGS += -DNO_GETPAGESIZE\nendif\nifdef INTERNAL_QSORT\n\tCOMPAT_CFLAGS += -DINTERNAL_QSORT\nendif\nifdef HAVE_ISO_QSORT_S\n\tCOMPAT_CFLAGS += -DHAVE_ISO_QSORT_S\nelse\n\tCOMPAT_OBJS += compat/qsort_s.o\nendif\nifdef RUNTIME_PREFIX\n\tCOMPAT_CFLAGS += -DRUNTIME_PREFIX\nendif\n\nifdef NO_PTHREADS\n\tBASIC_CFLAGS += -DNO_PTHREADS\nelse\n\tBASIC_CFLAGS += $(PTHREAD_CFLAGS)\n\tEXTLIBS += $(PTHREAD_LIBS)\nendif\n\nifdef HAVE_PATHS_H\n\tBASIC_CFLAGS += -DHAVE_PATHS_H\nendif\n\nifdef HAVE_LIBCHARSET_H\n\tBASIC_CFLAGS += -DHAVE_LIBCHARSET_H\n\tEXTLIBS += $(CHARSET_LIB)\nendif\n\nifdef HAVE_STRINGS_H\n\tBASIC_CFLAGS += -DHAVE_STRINGS_H\nendif\n\nifdef HAVE_DEV_TTY\n\tBASIC_CFLAGS += -DHAVE_DEV_TTY\nendif\n\nifdef DIR_HAS_BSD_GROUP_SEMANTICS\n\tCOMPAT_CFLAGS += -DDIR_HAS_BSD_GROUP_SEMANTICS\nendif\nifdef UNRELIABLE_FSTAT\n\tBASIC_CFLAGS += -DUNRELIABLE_FSTAT\nendif\nifdef NO_REGEX\n\tCOMPAT_CFLAGS += -Icompat/regex\n\tCOMPAT_OBJS += compat/regex/regex.o\nendif\nifdef NATIVE_CRLF\n\tBASIC_CFLAGS += -DNATIVE_CRLF\nendif\n\nifdef USE_NED_ALLOCATOR\n\tCOMPAT_CFLAGS += -Icompat/nedmalloc\n\tCOMPAT_OBJS += compat/nedmalloc/nedmalloc.o\n\tOVERRIDE_STRDUP = YesPlease\nendif\n\nifdef OVERRIDE_STRDUP\n\tCOMPAT_CFLAGS += -DOVERRIDE_STRDUP\n\tCOMPAT_OBJS += compat/strdup.o\nendif\n\nifdef GIT_TEST_CMP_USE_COPIED_CONTEXT\n\texport GIT_TEST_CMP_USE_COPIED_CONTEXT\nendif\n\nifndef NO_MSGFMT_EXTENDED_OPTIONS\n\tMSGFMT += --check\nendif\n\nifdef HAVE_CLOCK_GETTIME\n\tBASIC_CFLAGS += -DHAVE_CLOCK_GETTIME\nendif\n\nifdef HAVE_CLOCK_MONOTONIC\n\tBASIC_CFLAGS += -DHAVE_CLOCK_MONOTONIC\nendif\n\nifdef HAVE_SYNC_FILE_RANGE\n\tBASIC_CFLAGS += -DHAVE_SYNC_FILE_RANGE\nendif\n\nifdef NEEDS_LIBRT\n\tEXTLIBS += -lrt\nendif\n\nifdef HAVE_BSD_SYSCTL\n\tBASIC_CFLAGS += -DHAVE_BSD_SYSCTL\nendif\n\nifdef HAVE_BSD_KERN_PROC_SYSCTL\n\tBASIC_CFLAGS += -DHAVE_BSD_KERN_PROC_SYSCTL\nendif\n\nifdef HAVE_GETDELIM\n\tBASIC_CFLAGS += -DHAVE_GETDELIM\nendif\n\nifneq ($(findstring arc4random,$(CSPRNG_METHOD)),)\n\tBASIC_CFLAGS += -DHAVE_ARC4RANDOM\nendif\n\nifneq ($(findstring libbsd,$(CSPRNG_METHOD)),)\n\tBASIC_CFLAGS += -DHAVE_ARC4RANDOM_LIBBSD\n\tEXTLIBS += -lbsd\nendif\n\nifneq ($(findstring getrandom,$(CSPRNG_METHOD)),)\n\tBASIC_CFLAGS += -DHAVE_GETRANDOM\nendif\n\nifneq ($(findstring getentropy,$(CSPRNG_METHOD)),)\n\tBASIC_CFLAGS += -DHAVE_GETENTROPY\nendif\n\nifneq ($(findstring rtlgenrandom,$(CSPRNG_METHOD)),)\n\tBASIC_CFLAGS += -DHAVE_RTLGENRANDOM\nendif\n\nifneq ($(findstring openssl,$(CSPRNG_METHOD)),)\n\tBASIC_CFLAGS += -DHAVE_OPENSSL_CSPRNG\n\tEXTLIBS += -lcrypto -lssl\nendif\n\nifneq ($(PROCFS_EXECUTABLE_PATH),)\n\tprocfs_executable_path_SQ = $(subst ','\\'',$(PROCFS_EXECUTABLE_PATH))\n\tBASIC_CFLAGS += '-DPROCFS_EXECUTABLE_PATH=\"$(procfs_executable_path_SQ)\"'\nendif\n\nifndef HAVE_PLATFORM_PROCINFO\n\tCOMPAT_OBJS += compat/stub/procinfo.o\nendif\n\nifdef HAVE_NS_GET_EXECUTABLE_PATH\n\tBASIC_CFLAGS += -DHAVE_NS_GET_EXECUTABLE_PATH\nendif\n\nifdef HAVE_WPGMPTR\n\tBASIC_CFLAGS += -DHAVE_WPGMPTR\nendif\n\nifdef FILENO_IS_A_MACRO\n\tCOMPAT_CFLAGS += -DFILENO_IS_A_MACRO\n\tCOMPAT_OBJS += compat/fileno.o\nendif\n\nifdef NEED_ACCESS_ROOT_HANDLER\n\tCOMPAT_CFLAGS += -DNEED_ACCESS_ROOT_HANDLER\n\tCOMPAT_OBJS += compat/access.o\nendif\n\nifdef FSMONITOR_DAEMON_BACKEND\n\tCOMPAT_CFLAGS += -DHAVE_FSMONITOR_DAEMON_BACKEND\n\tCOMPAT_OBJS += compat/fsmonitor/fsm-listen-$(FSMONITOR_DAEMON_BACKEND).o\n\tCOMPAT_OBJS += compat/fsmonitor/fsm-health-$(FSMONITOR_DAEMON_BACKEND).o\nendif\n\nifdef FSMONITOR_OS_SETTINGS\n\tCOMPAT_CFLAGS += -DHAVE_FSMONITOR_OS_SETTINGS\n\tCOMPAT_OBJS += compat/fsmonitor/fsm-settings-$(FSMONITOR_OS_SETTINGS).o\nendif\n\nifeq ($(TCLTK_PATH),)\nNO_TCLTK = NoThanks\nendif\n\nifeq ($(PERL_PATH),)\nNO_PERL = NoThanks\nendif\n\nifeq ($(PYTHON_PATH),)\nNO_PYTHON = NoThanks\nendif\n\nifndef PAGER_ENV\nPAGER_ENV = LESS=FRX LV=-c\nendif\n\nifdef NO_INSTALL_HARDLINKS\n\texport NO_INSTALL_HARDLINKS\nendif\n\n### profile feedback build\n#\n\n# Can adjust this to be a global directory if you want to do extended\n# data gathering\nPROFILE_DIR := $(CURDIR)\n\nifeq (\"$(PROFILE)\",\"GEN\")\n\tBASIC_CFLAGS += -fprofile-generate=$(PROFILE_DIR) -DNO_NORETURN=1\n\tEXTLIBS += -lgcov\n\texport CCACHE_DISABLE = t\n\tV = 1\nelse\nifneq (\"$(PROFILE)\",\"\")\n\tBASIC_CFLAGS += -fprofile-use=$(PROFILE_DIR) -fprofile-correction -DNO_NORETURN=1\n\texport CCACHE_DISABLE = t\n\tV = 1\nendif\nendif\n\n# Shell quote (do not use $(call) to accommodate ancient setups);\n\nETC_GITCONFIG_SQ = $(subst ','\\'',$(ETC_GITCONFIG))\nETC_GITATTRIBUTES_SQ = $(subst ','\\'',$(ETC_GITATTRIBUTES))\n\nDESTDIR_SQ = $(subst ','\\'',$(DESTDIR))\nNO_GETTEXT_SQ = $(subst ','\\'',$(NO_GETTEXT))\nbindir_SQ = $(subst ','\\'',$(bindir))\nbindir_relative_SQ = $(subst ','\\'',$(bindir_relative))\nmandir_SQ = $(subst ','\\'',$(mandir))\nmandir_relative_SQ = $(subst ','\\'',$(mandir_relative))\ninfodir_relative_SQ = $(subst ','\\'',$(infodir_relative))\nperllibdir_SQ = $(subst ','\\'',$(perllibdir))\nlocaledir_SQ = $(subst ','\\'',$(localedir))\nlocaledir_relative_SQ = $(subst ','\\'',$(localedir_relative))\ngitexecdir_SQ = $(subst ','\\'',$(gitexecdir))\ngitexecdir_relative_SQ = $(subst ','\\'',$(gitexecdir_relative))\ntemplate_dir_SQ = $(subst ','\\'',$(template_dir))\nhtmldir_relative_SQ = $(subst ','\\'',$(htmldir_relative))\nprefix_SQ = $(subst ','\\'',$(prefix))\nperllibdir_relative_SQ = $(subst ','\\'',$(perllibdir_relative))\ngitwebdir_SQ = $(subst ','\\'',$(gitwebdir))\ngitwebstaticdir_SQ = $(subst ','\\'',$(gitwebstaticdir))\n\nSHELL_PATH_SQ = $(subst ','\\'',$(SHELL_PATH))\nTEST_SHELL_PATH_SQ = $(subst ','\\'',$(TEST_SHELL_PATH))\nPERL_PATH_SQ = $(subst ','\\'',$(PERL_PATH))\nPYTHON_PATH_SQ = $(subst ','\\'',$(PYTHON_PATH))\nTCLTK_PATH_SQ = $(subst ','\\'',$(TCLTK_PATH))\nDIFF_SQ = $(subst ','\\'',$(DIFF))\nPERLLIB_EXTRA_SQ = $(subst ','\\'',$(PERLLIB_EXTRA))\n\n# RUNTIME_PREFIX's resolution logic requires resource paths to be expressed\n# relative to each other and share an installation path.\n#\n# This is a dependency in:\n# - Git's binary RUNTIME_PREFIX logic in (see \"exec_cmd.c\").\n# - The runtime prefix Perl header (see\n#   \"perl/header_templates/runtime_prefix.template.pl\").\nifdef RUNTIME_PREFIX\n\nifneq ($(filter /%,$(firstword $(gitexecdir_relative))),)\n$(error RUNTIME_PREFIX requires a relative gitexecdir, not: $(gitexecdir))\nendif\n\nifneq ($(filter /%,$(firstword $(localedir_relative))),)\n$(error RUNTIME_PREFIX requires a relative localedir, not: $(localedir))\nendif\n\nifndef NO_PERL\nifneq ($(filter /%,$(firstword $(perllibdir_relative))),)\n$(error RUNTIME_PREFIX requires a relative perllibdir, not: $(perllibdir))\nendif\nendif\n\nendif\n\n# We must filter out any object files from $(GITLIBS),\n# as it is typically used like:\n#\n#   foo: foo.o $(GITLIBS)\n#\t$(CC) $(filter %.o,$^) $(LIBS)\n#\n# where we use it as a dependency. Since we also pull object files\n# from the dependency list, that would make each entry appear twice.\nLIBS = $(filter-out %.o, $(GITLIBS)) $(EXTLIBS)\n\nBASIC_CFLAGS += $(COMPAT_CFLAGS)\nLIB_OBJS += $(COMPAT_OBJS)\n\n# Quote for C\n\nifdef DEFAULT_EDITOR\nDEFAULT_EDITOR_CQ = \"$(subst \",\\\",$(subst \\,\\\\,$(DEFAULT_EDITOR)))\"\nDEFAULT_EDITOR_CQ_SQ = $(subst ','\\'',$(DEFAULT_EDITOR_CQ))\n\nBASIC_CFLAGS += -DDEFAULT_EDITOR='$(DEFAULT_EDITOR_CQ_SQ)'\nendif\n\nifdef DEFAULT_PAGER\nDEFAULT_PAGER_CQ = \"$(subst \",\\\",$(subst \\,\\\\,$(DEFAULT_PAGER)))\"\nDEFAULT_PAGER_CQ_SQ = $(subst ','\\'',$(DEFAULT_PAGER_CQ))\n\nBASIC_CFLAGS += -DDEFAULT_PAGER='$(DEFAULT_PAGER_CQ_SQ)'\nendif\n\nifdef SHELL_PATH\nSHELL_PATH_CQ = \"$(subst \",\\\",$(subst \\,\\\\,$(SHELL_PATH)))\"\nSHELL_PATH_CQ_SQ = $(subst ','\\'',$(SHELL_PATH_CQ))\n\nBASIC_CFLAGS += -DSHELL_PATH='$(SHELL_PATH_CQ_SQ)'\nendif\n\nGIT_USER_AGENT_SQ = $(subst ','\\'',$(GIT_USER_AGENT))\nGIT_USER_AGENT_CQ = \"$(subst \",\\\",$(subst \\,\\\\,$(GIT_USER_AGENT)))\"\nGIT_USER_AGENT_CQ_SQ = $(subst ','\\'',$(GIT_USER_AGENT_CQ))\nGIT-USER-AGENT: FORCE\n\t@if test x'$(GIT_USER_AGENT_SQ)' != x\"`cat GIT-USER-AGENT 2>/dev/null`\"; then \\\n\t\techo '$(GIT_USER_AGENT_SQ)' >GIT-USER-AGENT; \\\n\tfi\n\nifdef DEFAULT_HELP_FORMAT\nBASIC_CFLAGS += -DDEFAULT_HELP_FORMAT='\"$(DEFAULT_HELP_FORMAT)\"'\nendif\n\nALL_CFLAGS += $(BASIC_CFLAGS)\nALL_LDFLAGS += $(BASIC_LDFLAGS)\n\nexport DIFF TAR INSTALL DESTDIR SHELL_PATH\n\n\n### Build rules\n\nSHELL = $(SHELL_PATH)\n\nall:: shell_compatibility_test\n\nifeq \"$(PROFILE)\" \"BUILD\"\nall:: profile\nendif\n\nprofile:: profile-clean\n\t$(MAKE) PROFILE=GEN all\n\t$(MAKE) PROFILE=GEN -j1 test\n\t@if test -n \"$$GIT_PERF_REPO\" || test -d .git; then \\\n\t\t$(MAKE) PROFILE=GEN -j1 perf; \\\n\telse \\\n\t\techo \"Skipping profile of perf tests...\"; \\\n\tfi\n\t$(MAKE) PROFILE=USE all\n\nprofile-fast: profile-clean\n\t$(MAKE) PROFILE=GEN all\n\t$(MAKE) PROFILE=GEN -j1 perf\n\t$(MAKE) PROFILE=USE all\n\n\nall:: $(ALL_COMMANDS_TO_INSTALL) $(SCRIPT_LIB) $(OTHER_PROGRAMS) GIT-BUILD-OPTIONS\nifneq (,$X)\n\t$(QUIET_BUILT_IN)$(foreach p,$(patsubst %$X,%,$(filter %$X,$(ALL_COMMANDS_TO_INSTALL) $(OTHER_PROGRAMS))), test -d '$p' -o '$p' -ef '$p$X' || $(RM) '$p';)\nendif\n\nall::\nifndef NO_TCLTK\n\t$(QUIET_SUBDIR0)git-gui $(QUIET_SUBDIR1) gitexecdir='$(gitexec_instdir_SQ)' all\n\t$(QUIET_SUBDIR0)gitk-git $(QUIET_SUBDIR1) all\nendif\n\t$(QUIET_SUBDIR0)templates $(QUIET_SUBDIR1) SHELL_PATH='$(SHELL_PATH_SQ)' PERL_PATH='$(PERL_PATH_SQ)'\n\nplease_set_SHELL_PATH_to_a_more_modern_shell:\n\t@$$(:)\n\nshell_compatibility_test: please_set_SHELL_PATH_to_a_more_modern_shell\n\nstrip: $(PROGRAMS) git$X\n\t$(STRIP) $(STRIP_OPTS) $^\n\n### Target-specific flags and dependencies\n\n# The generic compilation pattern rule and automatically\n# computed header dependencies (falling back to a dependency on\n# LIB_H) are enough to describe how most targets should be built,\n# but some targets are special enough to need something a little\n# different.\n#\n# - When a source file \"foo.c\" #includes a generated header file,\n#   we need to list that dependency for the \"foo.o\" target.\n#\n#   We also list it from other targets that are built from foo.c\n#   like \"foo.sp\" and \"foo.s\", even though that is easy to forget\n#   to do because the generated header is already present around\n#   after a regular build attempt.\n#\n# - Some code depends on configuration kept in makefile\n#   variables. The target-specific variable EXTRA_CPPFLAGS can\n#   be used to convey that information to the C preprocessor\n#   using -D options.\n#\n#   The \"foo.o\" target should have a corresponding dependency on\n#   a file that changes when the value of the makefile variable\n#   changes.  For example, targets making use of the\n#   $(GIT_VERSION) variable depend on GIT-VERSION-FILE.\n#\n#   Technically the \".sp\" and \".s\" targets do not need this\n#   dependency because they are force-built, but they get the\n#   same dependency for consistency. This way, you do not have to\n#   know how each target is implemented. And it means the\n#   dependencies here will not need to change if the force-build\n#   details change some day.\n\ngit.sp git.s git.o: GIT-PREFIX\ngit.sp git.s git.o: EXTRA_CPPFLAGS = \\\n\t'-DGIT_HTML_PATH=\"$(htmldir_relative_SQ)\"' \\\n\t'-DGIT_MAN_PATH=\"$(mandir_relative_SQ)\"' \\\n\t'-DGIT_INFO_PATH=\"$(infodir_relative_SQ)\"'\n\ngit$X: git.o GIT-LDFLAGS $(BUILTIN_OBJS) $(GITLIBS)\n\t$(QUIET_LINK)$(CC) $(ALL_CFLAGS) -o $@ $(ALL_LDFLAGS) \\\n\t\t$(filter %.o,$^) $(LIBS)\n\nhelp.sp help.s help.o: command-list.h\nbuiltin/bugreport.sp builtin/bugreport.s builtin/bugreport.o: hook-list.h\n\nbuiltin/help.sp builtin/help.s builtin/help.o: config-list.h GIT-PREFIX\nbuiltin/help.sp builtin/help.s builtin/help.o: EXTRA_CPPFLAGS = \\\n\t'-DGIT_HTML_PATH=\"$(htmldir_relative_SQ)\"' \\\n\t'-DGIT_MAN_PATH=\"$(mandir_relative_SQ)\"' \\\n\t'-DGIT_INFO_PATH=\"$(infodir_relative_SQ)\"'\n\nPAGER_ENV_SQ = $(subst ','\\'',$(PAGER_ENV))\nPAGER_ENV_CQ = \"$(subst \",\\\",$(subst \\,\\\\,$(PAGER_ENV)))\"\nPAGER_ENV_CQ_SQ = $(subst ','\\'',$(PAGER_ENV_CQ))\npager.sp pager.s pager.o: EXTRA_CPPFLAGS = \\\n\t-DPAGER_ENV='$(PAGER_ENV_CQ_SQ)'\n\nversion.sp version.s version.o: GIT-VERSION-FILE GIT-USER-AGENT\nversion.sp version.s version.o: EXTRA_CPPFLAGS = \\\n\t'-DGIT_VERSION=\"$(GIT_VERSION)\"' \\\n\t'-DGIT_USER_AGENT=$(GIT_USER_AGENT_CQ_SQ)' \\\n\t'-DGIT_BUILT_FROM_COMMIT=\"$(shell \\\n\t\tGIT_CEILING_DIRECTORIES=\"$(CURDIR)/..\" \\\n\t\tgit rev-parse -q --verify HEAD 2>/dev/null)\"'\n\n$(BUILT_INS): git$X\n\t$(QUIET_BUILT_IN)$(RM) $@ && \\\n\tln $< $@ 2>/dev/null || \\\n\tln -s $< $@ 2>/dev/null || \\\n\tcp $< $@\n\nconfig-list.h: generate-configlist.sh\n\nconfig-list.h: Documentation/*config.txt Documentation/config/*.txt\n\t$(QUIET_GEN)$(SHELL_PATH) ./generate-configlist.sh >$@\n\ncommand-list.h: generate-cmdlist.sh command-list.txt\n\ncommand-list.h: $(wildcard Documentation/git*.txt)\n\t$(QUIET_GEN)$(SHELL_PATH) ./generate-cmdlist.sh \\\n\t\t$(patsubst %,--exclude-program %,$(EXCLUDED_PROGRAMS)) \\\n\t\tcommand-list.txt >$@\n\nhook-list.h: generate-hooklist.sh Documentation/githooks.txt\n\t$(QUIET_GEN)$(SHELL_PATH) ./generate-hooklist.sh >$@\n\nSCRIPT_DEFINES = $(SHELL_PATH_SQ):$(DIFF_SQ):\\\n\t$(localedir_SQ):$(USE_GETTEXT_SCHEME):$(SANE_TOOL_PATH_SQ):\\\n\t$(gitwebdir_SQ):$(PERL_PATH_SQ):$(PAGER_ENV):\\\n\t$(perllibdir_SQ)\nGIT-SCRIPT-DEFINES: FORCE\n\t@FLAGS='$(SCRIPT_DEFINES)'; \\\n\t    if test x\"$$FLAGS\" != x\"`cat $@ 2>/dev/null`\" ; then \\\n\t\techo >&2 \"    * new script parameters\"; \\\n\t\techo \"$$FLAGS\" >$@; \\\n            fi\n\ndefine cmd_munge_script\nsed -e '1s|#!.*/sh|#!$(SHELL_PATH_SQ)|' \\\n    -e 's|@SHELL_PATH@|$(SHELL_PATH_SQ)|' \\\n    -e 's|@@DIFF@@|$(DIFF_SQ)|' \\\n    -e 's|@@LOCALEDIR@@|$(localedir_SQ)|g' \\\n    -e 's/@@USE_GETTEXT_SCHEME@@/$(USE_GETTEXT_SCHEME)/g' \\\n    -e $(BROKEN_PATH_FIX) \\\n    -e 's|@@GITWEBDIR@@|$(gitwebdir_SQ)|g' \\\n    -e 's|@@PERL@@|$(PERL_PATH_SQ)|g' \\\n    -e 's|@@PAGER_ENV@@|$(PAGER_ENV_SQ)|g' \\\n    $@.sh >$@+\nendef\n\n$(SCRIPT_SH_GEN) : % : %.sh GIT-SCRIPT-DEFINES\n\t$(QUIET_GEN)$(cmd_munge_script) && \\\n\tchmod +x $@+ && \\\n\tmv $@+ $@\n\n$(SCRIPT_LIB) : % : %.sh GIT-SCRIPT-DEFINES\n\t$(QUIET_GEN)$(cmd_munge_script) && \\\n\tmv $@+ $@\n\ngit.res: git.rc GIT-VERSION-FILE GIT-PREFIX\n\t$(QUIET_RC)$(RC) \\\n\t  $(join -DMAJOR= -DMINOR= -DMICRO= -DPATCHLEVEL=, $(wordlist 1, 4, \\\n\t    $(shell echo $(GIT_VERSION) 0 0 0 0 | tr '.a-zA-Z-' ' '))) \\\n\t  -DGIT_VERSION=\"\\\\\\\"$(GIT_VERSION)\\\\\\\"\" -i $< -o $@\n\n# This makes sure we depend on the NO_PERL setting itself.\n$(SCRIPT_PERL_GEN): GIT-BUILD-OPTIONS\n\n# Used for substitution in Perl modules. Disabled when using RUNTIME_PREFIX\n# since the locale directory is injected.\nperl_localedir_SQ = $(localedir_SQ)\n\nifndef NO_PERL\nPERL_HEADER_TEMPLATE = perl/header_templates/fixed_prefix.template.pl\nPERL_DEFINES =\nPERL_DEFINES += $(PERL_PATH_SQ)\nPERL_DEFINES += $(PERLLIB_EXTRA_SQ)\nPERL_DEFINES += $(perllibdir_SQ)\nPERL_DEFINES += $(RUNTIME_PREFIX)\nPERL_DEFINES += $(NO_PERL_CPAN_FALLBACKS)\nPERL_DEFINES += $(NO_GETTEXT)\n\n# Support Perl runtime prefix. In this mode, a different header is installed\n# into Perl scripts.\nifdef RUNTIME_PREFIX\n\nPERL_HEADER_TEMPLATE = perl/header_templates/runtime_prefix.template.pl\n\n# Don't export a fixed $(localedir) path; it will be resolved by the Perl header\n# at runtime.\nperl_localedir_SQ =\n\nendif\n\nPERL_DEFINES += $(gitexecdir) $(perllibdir) $(localedir)\n\n$(SCRIPT_PERL_GEN): % : %.perl GIT-PERL-DEFINES GIT-PERL-HEADER GIT-VERSION-FILE\n\t$(QUIET_GEN) \\\n\tsed -e '1{' \\\n\t    -e '\ts|#!.*perl|#!$(PERL_PATH_SQ)|' \\\n\t    -e '\tr GIT-PERL-HEADER' \\\n\t    -e '\tG' \\\n\t    -e '}' \\\n\t    -e 's/@@GIT_VERSION@@/$(GIT_VERSION)/g' \\\n\t    $< >$@+ && \\\n\tchmod +x $@+ && \\\n\tmv $@+ $@\n\nPERL_DEFINES := $(subst $(space),:,$(PERL_DEFINES))\nGIT-PERL-DEFINES: FORCE\n\t@FLAGS='$(PERL_DEFINES)'; \\\n\t    if test x\"$$FLAGS\" != x\"`cat $@ 2>/dev/null`\" ; then \\\n\t\techo >&2 \"    * new perl-specific parameters\"; \\\n\t\techo \"$$FLAGS\" >$@; \\\n\t    fi\n\nGIT-PERL-HEADER: $(PERL_HEADER_TEMPLATE) GIT-PERL-DEFINES Makefile\n\t$(QUIET_GEN) \\\n\tINSTLIBDIR='$(perllibdir_SQ)' && \\\n\tINSTLIBDIR_EXTRA='$(PERLLIB_EXTRA_SQ)' && \\\n\tINSTLIBDIR=\"$$INSTLIBDIR$${INSTLIBDIR_EXTRA:+:$$INSTLIBDIR_EXTRA}\" && \\\n\tsed -e 's=@@PATHSEP@@=$(pathsep)=g' \\\n\t    -e \"s=@@INSTLIBDIR@@=$$INSTLIBDIR=g\" \\\n\t    -e 's=@@PERLLIBDIR_REL@@=$(perllibdir_relative_SQ)=g' \\\n\t    -e 's=@@GITEXECDIR_REL@@=$(gitexecdir_relative_SQ)=g' \\\n\t    -e 's=@@LOCALEDIR_REL@@=$(localedir_relative_SQ)=g' \\\n\t    $< >$@+ && \\\n\tmv $@+ $@\n\n.PHONY: perllibdir\nperllibdir:\n\t@echo '$(perllibdir_SQ)'\n\ngit-instaweb: git-instaweb.sh GIT-SCRIPT-DEFINES\n\t$(QUIET_GEN)$(cmd_munge_script) && \\\n\tchmod +x $@+ && \\\n\tmv $@+ $@\nelse # NO_PERL\n$(SCRIPT_PERL_GEN) git-instaweb: % : unimplemented.sh\n\t$(QUIET_GEN) \\\n\tsed -e '1s|#!.*/sh|#!$(SHELL_PATH_SQ)|' \\\n\t    -e 's|@@REASON@@|NO_PERL=$(NO_PERL)|g' \\\n\t    unimplemented.sh >$@+ && \\\n\tchmod +x $@+ && \\\n\tmv $@+ $@\nendif # NO_PERL\n\n# This makes sure we depend on the NO_PYTHON setting itself.\n$(SCRIPT_PYTHON_GEN): GIT-BUILD-OPTIONS\n\nifndef NO_PYTHON\n$(SCRIPT_PYTHON_GEN): GIT-CFLAGS GIT-PREFIX GIT-PYTHON-VARS\n$(SCRIPT_PYTHON_GEN): % : %.py\n\t$(QUIET_GEN) \\\n\tsed -e '1s|#!.*python|#!$(PYTHON_PATH_SQ)|' \\\n\t    $< >$@+ && \\\n\tchmod +x $@+ && \\\n\tmv $@+ $@\nelse # NO_PYTHON\n$(SCRIPT_PYTHON_GEN): % : unimplemented.sh\n\t$(QUIET_GEN) \\\n\tsed -e '1s|#!.*/sh|#!$(SHELL_PATH_SQ)|' \\\n\t    -e 's|@@REASON@@|NO_PYTHON=$(NO_PYTHON)|g' \\\n\t    unimplemented.sh >$@+ && \\\n\tchmod +x $@+ && \\\n\tmv $@+ $@\nendif # NO_PYTHON\n\nCONFIGURE_RECIPE = sed -e 's/@@GIT_VERSION@@/$(GIT_VERSION)/g' \\\n\t\t\tconfigure.ac >configure.ac+ && \\\n\t\t   autoconf -o configure configure.ac+ && \\\n\t\t   $(RM) configure.ac+\n\nconfigure: configure.ac GIT-VERSION-FILE\n\t$(QUIET_GEN)$(CONFIGURE_RECIPE)\n\nifdef AUTOCONFIGURED\n# We avoid depending on 'configure' here, because it gets rebuilt\n# every time GIT-VERSION-FILE is modified, only to update the embedded\n# version number string, which config.status does not care about.  We\n# do want to recheck when the platform/environment detection logic\n# changes, hence this depends on configure.ac.\nconfig.status: configure.ac\n\t$(QUIET_GEN)$(CONFIGURE_RECIPE) && \\\n\tif test -f config.status; then \\\n\t  ./config.status --recheck; \\\n\telse \\\n\t  ./configure; \\\n\tfi\nreconfigure config.mak.autogen: config.status\n\t$(QUIET_GEN)./config.status\n.PHONY: reconfigure # This is a convenience target.\nendif\n\nXDIFF_OBJS += xdiff/xdiffi.o\nXDIFF_OBJS += xdiff/xemit.o\nXDIFF_OBJS += xdiff/xhistogram.o\nXDIFF_OBJS += xdiff/xmerge.o\nXDIFF_OBJS += xdiff/xpatience.o\nXDIFF_OBJS += xdiff/xprepare.o\nXDIFF_OBJS += xdiff/xutils.o\n.PHONY: xdiff-objs\nxdiff-objs: $(XDIFF_OBJS)\n\nREFTABLE_OBJS += reftable/basics.o\nREFTABLE_OBJS += reftable/error.o\nREFTABLE_OBJS += reftable/block.o\nREFTABLE_OBJS += reftable/blocksource.o\nREFTABLE_OBJS += reftable/iter.o\nREFTABLE_OBJS += reftable/publicbasics.o\nREFTABLE_OBJS += reftable/merged.o\nREFTABLE_OBJS += reftable/pq.o\nREFTABLE_OBJS += reftable/reader.o\nREFTABLE_OBJS += reftable/record.o\nREFTABLE_OBJS += reftable/refname.o\nREFTABLE_OBJS += reftable/generic.o\nREFTABLE_OBJS += reftable/stack.o\nREFTABLE_OBJS += reftable/tree.o\nREFTABLE_OBJS += reftable/writer.o\n\nREFTABLE_TEST_OBJS += reftable/basics_test.o\nREFTABLE_TEST_OBJS += reftable/block_test.o\nREFTABLE_TEST_OBJS += reftable/dump.o\nREFTABLE_TEST_OBJS += reftable/merged_test.o\nREFTABLE_TEST_OBJS += reftable/pq_test.o\nREFTABLE_TEST_OBJS += reftable/record_test.o\nREFTABLE_TEST_OBJS += reftable/readwrite_test.o\nREFTABLE_TEST_OBJS += reftable/refname_test.o\nREFTABLE_TEST_OBJS += reftable/stack_test.o\nREFTABLE_TEST_OBJS += reftable/test_framework.o\nREFTABLE_TEST_OBJS += reftable/tree_test.o\n\nTEST_OBJS := $(patsubst %$X,%.o,$(TEST_PROGRAMS)) $(patsubst %,t/helper/%,$(TEST_BUILTINS_OBJS))\n\n.PHONY: test-objs\ntest-objs: $(TEST_OBJS)\n\nGIT_OBJS += $(LIB_OBJS)\nGIT_OBJS += $(BUILTIN_OBJS)\nGIT_OBJS += common-main.o\nGIT_OBJS += git.o\n.PHONY: git-objs\ngit-objs: $(GIT_OBJS)\n\nSCALAR_OBJS += scalar.o\n.PHONY: scalar-objs\nscalar-objs: $(SCALAR_OBJS)\n\nOBJECTS += $(GIT_OBJS)\nOBJECTS += $(SCALAR_OBJS)\nOBJECTS += $(PROGRAM_OBJS)\nOBJECTS += $(TEST_OBJS)\nOBJECTS += $(XDIFF_OBJS)\nOBJECTS += $(FUZZ_OBJS)\nOBJECTS += $(REFTABLE_OBJS) $(REFTABLE_TEST_OBJS)\n\nifndef NO_CURL\n\tOBJECTS += http.o http-walker.o remote-curl.o\nendif\n\n.PHONY: objects\nobjects: $(OBJECTS)\n\ndep_files := $(foreach f,$(OBJECTS),$(dir $f).depend/$(notdir $f).d)\ndep_dirs := $(addsuffix .depend,$(sort $(dir $(OBJECTS))))\n\nifeq ($(COMPUTE_HEADER_DEPENDENCIES),yes)\n$(dep_dirs):\n\t@mkdir -p $@\n\nmissing_dep_dirs := $(filter-out $(wildcard $(dep_dirs)),$(dep_dirs))\ndep_file = $(dir $@).depend/$(notdir $@).d\ndep_args = -MF $(dep_file) -MQ $@ -MMD -MP\nendif\n\nifneq ($(COMPUTE_HEADER_DEPENDENCIES),yes)\nmissing_dep_dirs =\ndep_args =\nendif\n\ncompdb_dir = compile_commands\n\nifeq ($(GENERATE_COMPILATION_DATABASE),yes)\nmissing_compdb_dir = $(compdb_dir)\n$(missing_compdb_dir):\n\t@mkdir -p $@\n\ncompdb_file = $(compdb_dir)/$(subst /,-,$@.json)\ncompdb_args = -MJ $(compdb_file)\nelse\nmissing_compdb_dir =\ncompdb_args =\nendif\n\n$(OBJECTS): %.o: %.c GIT-CFLAGS $(missing_dep_dirs) $(missing_compdb_dir)\n\t$(QUIET_CC)$(CC) -o $*.o -c $(dep_args) $(compdb_args) $(ALL_CFLAGS) $(EXTRA_CPPFLAGS) $<\n\n%.s: %.c GIT-CFLAGS FORCE\n\t$(QUIET_CC)$(CC) -o $@ -S $(ALL_CFLAGS) $(EXTRA_CPPFLAGS) $<\n\nifdef USE_COMPUTED_HEADER_DEPENDENCIES\n# Take advantage of gcc's on-the-fly dependency generation\n# See <http://gcc.gnu.org/gcc-3.0/features.html>.\ndep_files_present := $(wildcard $(dep_files))\nifneq ($(dep_files_present),)\ninclude $(dep_files_present)\nendif\nelse\n$(OBJECTS): $(LIB_H) $(GENERATED_H)\nendif\n\nifeq ($(GENERATE_COMPILATION_DATABASE),yes)\nall:: compile_commands.json\ncompile_commands.json:\n\t$(QUIET_GEN)sed -e '1s/^/[/' -e '$$s/,$$/]/' $(compdb_dir)/*.o.json > $@+\n\t@if test -s $@+; then mv $@+ $@; else $(RM) $@+; fi\nendif\n\nexec-cmd.sp exec-cmd.s exec-cmd.o: GIT-PREFIX\nexec-cmd.sp exec-cmd.s exec-cmd.o: EXTRA_CPPFLAGS = \\\n\t'-DGIT_EXEC_PATH=\"$(gitexecdir_SQ)\"' \\\n\t'-DGIT_LOCALE_PATH=\"$(localedir_relative_SQ)\"' \\\n\t'-DBINDIR=\"$(bindir_relative_SQ)\"' \\\n\t'-DFALLBACK_RUNTIME_PREFIX=\"$(prefix_SQ)\"'\n\nbuiltin/init-db.sp builtin/init-db.s builtin/init-db.o: GIT-PREFIX\nbuiltin/init-db.sp builtin/init-db.s builtin/init-db.o: EXTRA_CPPFLAGS = \\\n\t-DDEFAULT_GIT_TEMPLATE_DIR='\"$(template_dir_SQ)\"'\n\nconfig.sp config.s config.o: GIT-PREFIX\nconfig.sp config.s config.o: EXTRA_CPPFLAGS = \\\n\t-DETC_GITCONFIG='\"$(ETC_GITCONFIG_SQ)\"'\n\nattr.sp attr.s attr.o: GIT-PREFIX\nattr.sp attr.s attr.o: EXTRA_CPPFLAGS = \\\n\t-DETC_GITATTRIBUTES='\"$(ETC_GITATTRIBUTES_SQ)\"'\n\ngettext.sp gettext.s gettext.o: GIT-PREFIX\ngettext.sp gettext.s gettext.o: EXTRA_CPPFLAGS = \\\n\t-DGIT_LOCALE_PATH='\"$(localedir_relative_SQ)\"'\n\nhttp-push.sp http.sp http-walker.sp remote-curl.sp imap-send.sp: SP_EXTRA_FLAGS += \\\n\t-DCURL_DISABLE_TYPECHECK\n\npack-revindex.sp: SP_EXTRA_FLAGS += -Wno-memcpy-max-count\n\nifdef NO_EXPAT\nhttp-walker.sp http-walker.s http-walker.o: EXTRA_CPPFLAGS = -DNO_EXPAT\nendif\n\nifdef NO_REGEX\ncompat/regex/regex.sp compat/regex/regex.o: EXTRA_CPPFLAGS = \\\n\t-DGAWK -DNO_MBSUPPORT\nendif\n\nifdef USE_NED_ALLOCATOR\ncompat/nedmalloc/nedmalloc.sp compat/nedmalloc/nedmalloc.o: EXTRA_CPPFLAGS = \\\n\t-DNDEBUG -DREPLACE_SYSTEM_ALLOCATOR\ncompat/nedmalloc/nedmalloc.sp: SP_EXTRA_FLAGS += -Wno-non-pointer-null\nendif\n\ngit-%$X: %.o GIT-LDFLAGS $(GITLIBS)\n\t$(QUIET_LINK)$(CC) $(ALL_CFLAGS) -o $@ $(ALL_LDFLAGS) $(filter %.o,$^) $(LIBS)\n\ngit-imap-send$X: imap-send.o $(IMAP_SEND_BUILDDEPS) GIT-LDFLAGS $(GITLIBS)\n\t$(QUIET_LINK)$(CC) $(ALL_CFLAGS) -o $@ $(ALL_LDFLAGS) $(filter %.o,$^) \\\n\t\t$(IMAP_SEND_LDFLAGS) $(LIBS)\n\ngit-http-fetch$X: http.o http-walker.o http-fetch.o GIT-LDFLAGS $(GITLIBS)\n\t$(QUIET_LINK)$(CC) $(ALL_CFLAGS) -o $@ $(ALL_LDFLAGS) $(filter %.o,$^) \\\n\t\t$(CURL_LIBCURL) $(LIBS)\ngit-http-push$X: http.o http-push.o GIT-LDFLAGS $(GITLIBS)\n\t$(QUIET_LINK)$(CC) $(ALL_CFLAGS) -o $@ $(ALL_LDFLAGS) $(filter %.o,$^) \\\n\t\t$(CURL_LIBCURL) $(EXPAT_LIBEXPAT) $(LIBS)\n\n$(REMOTE_CURL_ALIASES): $(REMOTE_CURL_PRIMARY)\n\t$(QUIET_LNCP)$(RM) $@ && \\\n\tln $< $@ 2>/dev/null || \\\n\tln -s $< $@ 2>/dev/null || \\\n\tcp $< $@\n\n$(REMOTE_CURL_PRIMARY): remote-curl.o http.o http-walker.o GIT-LDFLAGS $(GITLIBS)\n\t$(QUIET_LINK)$(CC) $(ALL_CFLAGS) -o $@ $(ALL_LDFLAGS) $(filter %.o,$^) \\\n\t\t$(CURL_LIBCURL) $(EXPAT_LIBEXPAT) $(LIBS)\n\nscalar$X: scalar.o GIT-LDFLAGS $(GITLIBS)\n\t$(QUIET_LINK)$(CC) $(ALL_CFLAGS) -o $@ $(ALL_LDFLAGS) \\\n\t\t$(filter %.o,$^) $(LIBS)\n\n$(LIB_FILE): $(LIB_OBJS)\n\t$(QUIET_AR)$(RM) $@ && $(AR) $(ARFLAGS) $@ $^\n\n$(XDIFF_LIB): $(XDIFF_OBJS)\n\t$(QUIET_AR)$(RM) $@ && $(AR) $(ARFLAGS) $@ $^\n\n$(REFTABLE_LIB): $(REFTABLE_OBJS)\n\t$(QUIET_AR)$(RM) $@ && $(AR) $(ARFLAGS) $@ $^\n\n$(REFTABLE_TEST_LIB): $(REFTABLE_TEST_OBJS)\n\t$(QUIET_AR)$(RM) $@ && $(AR) $(ARFLAGS) $@ $^\n\nexport DEFAULT_EDITOR DEFAULT_PAGER\n\nDocumentation/GIT-EXCLUDED-PROGRAMS: FORCE\n\t@EXCLUDED='EXCLUDED_PROGRAMS := $(EXCLUDED_PROGRAMS)'; \\\n\t    if test x\"$$EXCLUDED\" != \\\n\t\tx\"`cat Documentation/GIT-EXCLUDED-PROGRAMS 2>/dev/null`\" ; then \\\n\t\techo >&2 \"    * new documentation flags\"; \\\n\t\techo \"$$EXCLUDED\" >Documentation/GIT-EXCLUDED-PROGRAMS; \\\n            fi\n\n.PHONY: doc man man-perl html info pdf\ndoc: man-perl\n\t$(MAKE) -C Documentation all\n\nman: man-perl\n\t$(MAKE) -C Documentation man\n\nman-perl: perl/build/man/man3/Git.3pm\n\nhtml:\n\t$(MAKE) -C Documentation html\n\ninfo:\n\t$(MAKE) -C Documentation info\n\npdf:\n\t$(MAKE) -C Documentation pdf\n\nXGETTEXT_FLAGS = \\\n\t--force-po \\\n\t--add-comments=TRANSLATORS: \\\n\t--msgid-bugs-address=\"Git Mailing List <git@vger.kernel.org>\" \\\n\t--package-name=Git\nXGETTEXT_FLAGS_C = $(XGETTEXT_FLAGS) --language=C \\\n\t--keyword=_ --keyword=N_ --keyword=\"Q_:1,2\"\nXGETTEXT_FLAGS_SH = $(XGETTEXT_FLAGS) --language=Shell \\\n\t--keyword=gettextln --keyword=eval_gettextln\nXGETTEXT_FLAGS_PERL = $(XGETTEXT_FLAGS) --language=Perl \\\n\t--keyword=__ --keyword=N__ --keyword=\"__n:1,2\"\nMSGMERGE_FLAGS = --add-location --backup=off --update\nLOCALIZED_C = $(sort $(FOUND_C_SOURCES) $(FOUND_H_SOURCES) $(GENERATED_H))\nLOCALIZED_SH = $(sort $(SCRIPT_SH) git-sh-setup.sh)\nLOCALIZED_PERL = $(sort $(SCRIPT_PERL))\n\nifdef XGETTEXT_INCLUDE_TESTS\nLOCALIZED_C += t/t0200/test.c\nLOCALIZED_SH += t/t0200/test.sh\nLOCALIZED_PERL += t/t0200/test.perl\nendif\n\n## We generate intermediate .build/pot/po/%.po files containing a\n## extract of the translations we find in each file in the source\n## tree. We will assemble them using msgcat to create the final\n## \"po/git.pot\" file.\nLOCALIZED_ALL_GEN_PO =\n\nLOCALIZED_C_GEN_PO = $(LOCALIZED_C:%=.build/pot/po/%.po)\nLOCALIZED_ALL_GEN_PO += $(LOCALIZED_C_GEN_PO)\n\nLOCALIZED_SH_GEN_PO = $(LOCALIZED_SH:%=.build/pot/po/%.po)\nLOCALIZED_ALL_GEN_PO += $(LOCALIZED_SH_GEN_PO)\n\nLOCALIZED_PERL_GEN_PO = $(LOCALIZED_PERL:%=.build/pot/po/%.po)\nLOCALIZED_ALL_GEN_PO += $(LOCALIZED_PERL_GEN_PO)\n\n## Gettext tools cannot work with our own custom PRItime type, so\n## we replace PRItime with PRIuMAX.  We need to update this to\n## PRIdMAX if we switch to a signed type later.\n$(LOCALIZED_C_GEN_PO): .build/pot/po/%.po: %\n\t$(call mkdir_p_parent_template)\n\t$(QUIET_XGETTEXT) \\\n\t    if grep -q PRItime $<; then \\\n\t\t(\\\n\t\t\tsed -e 's|PRItime|PRIuMAX|g' <$< \\\n\t\t\t\t>.build/pot/po/$< && \\\n\t\t\tcd .build/pot/po && \\\n\t\t\t$(XGETTEXT) --omit-header \\\n\t\t\t\t-o $(@:.build/pot/po/%=%) \\\n\t\t\t\t$(XGETTEXT_FLAGS_C) $< && \\\n\t\t\trm $<; \\\n\t\t); \\\n\t    else \\\n\t\t$(XGETTEXT) --omit-header \\\n\t\t\t-o $@ $(XGETTEXT_FLAGS_C) $<; \\\n\t    fi\n\n$(LOCALIZED_SH_GEN_PO): .build/pot/po/%.po: %\n\t$(call mkdir_p_parent_template)\n\t$(QUIET_XGETTEXT)$(XGETTEXT) --omit-header \\\n\t\t-o$@ $(XGETTEXT_FLAGS_SH) $<\n\n$(LOCALIZED_PERL_GEN_PO): .build/pot/po/%.po: %\n\t$(call mkdir_p_parent_template)\n\t$(QUIET_XGETTEXT)$(XGETTEXT) --omit-header \\\n\t\t-o$@ $(XGETTEXT_FLAGS_PERL) $<\n\ndefine gen_pot_header\n$(XGETTEXT) $(XGETTEXT_FLAGS_C) \\\n\t-o - /dev/null | \\\nsed -e 's|charset=CHARSET|charset=UTF-8|' \\\n    -e 's|\\(Last-Translator: \\)FULL NAME <.*>|\\1make by the Makefile|' \\\n    -e 's|\\(Language-Team: \\)LANGUAGE <.*>|\\1Git Mailing List <git@vger.kernel.org>|' \\\n    >$@ && \\\necho '\"Plural-Forms: nplurals=INTEGER; plural=EXPRESSION;\\\\n\"' >>$@\nendef\n\n.build/pot/git.header: $(LOCALIZED_ALL_GEN_PO)\n\t$(call mkdir_p_parent_template)\n\t$(QUIET_GEN)$(gen_pot_header)\n\npo/git.pot: .build/pot/git.header $(LOCALIZED_ALL_GEN_PO)\n\t$(QUIET_GEN)$(MSGCAT) $^ >$@\n\n.PHONY: pot\npot: po/git.pot\n\ndefine check_po_file_envvar\n\t$(if $(PO_FILE), \\\n\t\t$(if $(filter po/%.po,$(PO_FILE)), , \\\n\t\t\t$(error PO_FILE should match pattern: \"po/%.po\")), \\\n\t\t$(error PO_FILE is not defined))\nendef\n\n.PHONY: po-update\npo-update: po/git.pot\n\t$(check_po_file_envvar)\n\t@if test ! -e $(PO_FILE); then \\\n\t\techo >&2 \"error: $(PO_FILE) does not exist\"; \\\n\t\techo >&2 'To create an initial po file, use: \"make po-init PO_FILE=po/XX.po\"'; \\\n\t\texit 1; \\\n\tfi\n\t$(QUIET_MSGMERGE)$(MSGMERGE) $(MSGMERGE_FLAGS) $(PO_FILE) po/git.pot\n\n.PHONY: check-pot\ncheck-pot: $(LOCALIZED_ALL_GEN_PO)\n\n### TODO FIXME: Translating everything in these files is a bad\n### heuristic for \"core\", as we'll translate obscure error() messages\n### along with commonly seen i18n messages. A better heuristic would\n### be to e.g. use spatch to first remove error/die/warning\n### etc. messages.\nLOCALIZED_C_CORE =\nLOCALIZED_C_CORE += builtin/checkout.c\nLOCALIZED_C_CORE += builtin/clone.c\nLOCALIZED_C_CORE += builtin/index-pack.c\nLOCALIZED_C_CORE += builtin/push.c\nLOCALIZED_C_CORE += builtin/reset.c\nLOCALIZED_C_CORE += remote.c\nLOCALIZED_C_CORE += wt-status.c\n\nLOCALIZED_C_CORE_GEN_PO = $(LOCALIZED_C_CORE:%=.build/pot/po/%.po)\n\n.build/pot/git-core.header: $(LOCALIZED_C_CORE_GEN_PO)\n\t$(call mkdir_p_parent_template)\n\t$(QUIET_GEN)$(gen_pot_header)\n\npo/git-core.pot: .build/pot/git-core.header $(LOCALIZED_C_CORE_GEN_PO)\n\t$(QUIET_GEN)$(MSGCAT) $^ >$@\n\n.PHONY: po-init\npo-init: po/git-core.pot\n\t$(check_po_file_envvar)\n\t@if test -e $(PO_FILE); then \\\n\t\techo >&2 \"error: $(PO_FILE) exists already\"; \\\n\t\texit 1; \\\n\tfi\n\t$(QUIET_MSGINIT)msginit \\\n\t\t--input=$< \\\n\t\t--output=$(PO_FILE) \\\n\t\t--no-translator \\\n\t\t--locale=$(PO_FILE:po/%.po=%)\n\n## po/*.po files & their rules\nifdef NO_GETTEXT\nPOFILES :=\nMOFILES :=\nelse\nPOFILES := $(wildcard po/*.po)\nMOFILES := $(patsubst po/%.po,po/build/locale/%/LC_MESSAGES/git.mo,$(POFILES))\n\nall:: $(MOFILES)\nendif\n\npo/build/locale/%/LC_MESSAGES/git.mo: po/%.po\n\t$(call mkdir_p_parent_template)\n\t$(QUIET_MSGFMT)$(MSGFMT) -o $@ $<\n\nLIB_PERL := $(wildcard perl/Git.pm perl/Git/*.pm perl/Git/*/*.pm perl/Git/*/*/*.pm)\nLIB_PERL_GEN := $(patsubst perl/%.pm,perl/build/lib/%.pm,$(LIB_PERL))\nLIB_CPAN := $(wildcard perl/FromCPAN/*.pm perl/FromCPAN/*/*.pm)\nLIB_CPAN_GEN := $(patsubst perl/%.pm,perl/build/lib/%.pm,$(LIB_CPAN))\n\nifndef NO_PERL\nall:: $(LIB_PERL_GEN)\nifndef NO_PERL_CPAN_FALLBACKS\nall:: $(LIB_CPAN_GEN)\nendif\nNO_PERL_CPAN_FALLBACKS_SQ = $(subst ','\\'',$(NO_PERL_CPAN_FALLBACKS))\nendif\n\nperl/build/lib/%.pm: perl/%.pm GIT-PERL-DEFINES\n\t$(call mkdir_p_parent_template)\n\t$(QUIET_GEN) \\\n\tsed -e 's|@@LOCALEDIR@@|$(perl_localedir_SQ)|g' \\\n\t    -e 's|@@NO_GETTEXT@@|$(NO_GETTEXT_SQ)|g' \\\n\t    -e 's|@@NO_PERL_CPAN_FALLBACKS@@|$(NO_PERL_CPAN_FALLBACKS_SQ)|g' \\\n\t< $< > $@\n\nperl/build/man/man3/Git.3pm: perl/Git.pm\n\t$(call mkdir_p_parent_template)\n\t$(QUIET_GEN)pod2man $< $@\n\n$(ETAGS_TARGET): $(FOUND_SOURCE_FILES)\n\t$(QUIET_GEN)$(RM) $@+ && \\\n\techo $(FOUND_SOURCE_FILES) | xargs etags -a -o $@+ && \\\n\tmv $@+ $@\n\ntags: $(FOUND_SOURCE_FILES)\n\t$(QUIET_GEN)$(RM) $@+ && \\\n\techo $(FOUND_SOURCE_FILES) | xargs ctags -a -o $@+ && \\\n\tmv $@+ $@\n\ncscope.out: $(FOUND_SOURCE_FILES)\n\t$(QUIET_GEN)$(RM) $@+ && \\\n\techo $(FOUND_SOURCE_FILES) | xargs cscope -f$@+ -b && \\\n\tmv $@+ $@\n\n.PHONY: cscope\ncscope: cscope.out\n\n### Detect prefix changes\nTRACK_PREFIX = $(bindir_SQ):$(gitexecdir_SQ):$(template_dir_SQ):$(prefix_SQ):\\\n\t\t$(localedir_SQ)\n\nGIT-PREFIX: FORCE\n\t@FLAGS='$(TRACK_PREFIX)'; \\\n\tif test x\"$$FLAGS\" != x\"`cat GIT-PREFIX 2>/dev/null`\" ; then \\\n\t\techo >&2 \"    * new prefix flags\"; \\\n\t\techo \"$$FLAGS\" >GIT-PREFIX; \\\n\tfi\n\nTRACK_CFLAGS = $(CC):$(subst ','\\'',$(ALL_CFLAGS)):$(USE_GETTEXT_SCHEME)\n\nGIT-CFLAGS: FORCE\n\t@FLAGS='$(TRACK_CFLAGS)'; \\\n\t    if test x\"$$FLAGS\" != x\"`cat GIT-CFLAGS 2>/dev/null`\" ; then \\\n\t\techo >&2 \"    * new build flags\"; \\\n\t\techo \"$$FLAGS\" >GIT-CFLAGS; \\\n            fi\n\nTRACK_LDFLAGS = $(subst ','\\'',$(ALL_LDFLAGS))\n\nGIT-LDFLAGS: FORCE\n\t@FLAGS='$(TRACK_LDFLAGS)'; \\\n\t    if test x\"$$FLAGS\" != x\"`cat GIT-LDFLAGS 2>/dev/null`\" ; then \\\n\t\techo >&2 \"    * new link flags\"; \\\n\t\techo \"$$FLAGS\" >GIT-LDFLAGS; \\\n            fi\n\n# We need to apply sq twice, once to protect from the shell\n# that runs GIT-BUILD-OPTIONS, and then again to protect it\n# and the first level quoting from the shell that runs \"echo\".\nGIT-BUILD-OPTIONS: FORCE\n\t@echo SHELL_PATH=\\''$(subst ','\\'',$(SHELL_PATH_SQ))'\\' >$@+\n\t@echo TEST_SHELL_PATH=\\''$(subst ','\\'',$(TEST_SHELL_PATH_SQ))'\\' >>$@+\n\t@echo PERL_PATH=\\''$(subst ','\\'',$(PERL_PATH_SQ))'\\' >>$@+\n\t@echo DIFF=\\''$(subst ','\\'',$(subst ','\\'',$(DIFF)))'\\' >>$@+\n\t@echo PYTHON_PATH=\\''$(subst ','\\'',$(PYTHON_PATH_SQ))'\\' >>$@+\n\t@echo TAR=\\''$(subst ','\\'',$(subst ','\\'',$(TAR)))'\\' >>$@+\n\t@echo NO_CURL=\\''$(subst ','\\'',$(subst ','\\'',$(NO_CURL)))'\\' >>$@+\n\t@echo NO_EXPAT=\\''$(subst ','\\'',$(subst ','\\'',$(NO_EXPAT)))'\\' >>$@+\n\t@echo USE_LIBPCRE2=\\''$(subst ','\\'',$(subst ','\\'',$(USE_LIBPCRE2)))'\\' >>$@+\n\t@echo NO_PERL=\\''$(subst ','\\'',$(subst ','\\'',$(NO_PERL)))'\\' >>$@+\n\t@echo NO_PTHREADS=\\''$(subst ','\\'',$(subst ','\\'',$(NO_PTHREADS)))'\\' >>$@+\n\t@echo NO_PYTHON=\\''$(subst ','\\'',$(subst ','\\'',$(NO_PYTHON)))'\\' >>$@+\n\t@echo NO_UNIX_SOCKETS=\\''$(subst ','\\'',$(subst ','\\'',$(NO_UNIX_SOCKETS)))'\\' >>$@+\n\t@echo PAGER_ENV=\\''$(subst ','\\'',$(subst ','\\'',$(PAGER_ENV)))'\\' >>$@+\n\t@echo DC_SHA1=\\''$(subst ','\\'',$(subst ','\\'',$(DC_SHA1)))'\\' >>$@+\n\t@echo SANITIZE_LEAK=\\''$(subst ','\\'',$(subst ','\\'',$(SANITIZE_LEAK)))'\\' >>$@+\n\t@echo SANITIZE_ADDRESS=\\''$(subst ','\\'',$(subst ','\\'',$(SANITIZE_ADDRESS)))'\\' >>$@+\n\t@echo X=\\'$(X)\\' >>$@+\nifdef FSMONITOR_DAEMON_BACKEND\n\t@echo FSMONITOR_DAEMON_BACKEND=\\''$(subst ','\\'',$(subst ','\\'',$(FSMONITOR_DAEMON_BACKEND)))'\\' >>$@+\nendif\nifdef FSMONITOR_OS_SETTINGS\n\t@echo FSMONITOR_OS_SETTINGS=\\''$(subst ','\\'',$(subst ','\\'',$(FSMONITOR_OS_SETTINGS)))'\\' >>$@+\nendif\nifdef TEST_OUTPUT_DIRECTORY\n\t@echo TEST_OUTPUT_DIRECTORY=\\''$(subst ','\\'',$(subst ','\\'',$(TEST_OUTPUT_DIRECTORY)))'\\' >>$@+\nendif\nifdef GIT_TEST_OPTS\n\t@echo GIT_TEST_OPTS=\\''$(subst ','\\'',$(subst ','\\'',$(GIT_TEST_OPTS)))'\\' >>$@+\nendif\nifdef GIT_TEST_CMP\n\t@echo GIT_TEST_CMP=\\''$(subst ','\\'',$(subst ','\\'',$(GIT_TEST_CMP)))'\\' >>$@+\nendif\nifdef GIT_TEST_CMP_USE_COPIED_CONTEXT\n\t@echo GIT_TEST_CMP_USE_COPIED_CONTEXT=YesPlease >>$@+\nendif\nifdef GIT_TEST_UTF8_LOCALE\n\t@echo GIT_TEST_UTF8_LOCALE=\\''$(subst ','\\'',$(subst ','\\'',$(GIT_TEST_UTF8_LOCALE)))'\\' >>$@+\nendif\n\t@echo NO_GETTEXT=\\''$(subst ','\\'',$(subst ','\\'',$(NO_GETTEXT)))'\\' >>$@+\nifdef GIT_PERF_REPEAT_COUNT\n\t@echo GIT_PERF_REPEAT_COUNT=\\''$(subst ','\\'',$(subst ','\\'',$(GIT_PERF_REPEAT_COUNT)))'\\' >>$@+\nendif\nifdef GIT_PERF_REPO\n\t@echo GIT_PERF_REPO=\\''$(subst ','\\'',$(subst ','\\'',$(GIT_PERF_REPO)))'\\' >>$@+\nendif\nifdef GIT_PERF_LARGE_REPO\n\t@echo GIT_PERF_LARGE_REPO=\\''$(subst ','\\'',$(subst ','\\'',$(GIT_PERF_LARGE_REPO)))'\\' >>$@+\nendif\nifdef GIT_PERF_MAKE_OPTS\n\t@echo GIT_PERF_MAKE_OPTS=\\''$(subst ','\\'',$(subst ','\\'',$(GIT_PERF_MAKE_OPTS)))'\\' >>$@+\nendif\nifdef GIT_PERF_MAKE_COMMAND\n\t@echo GIT_PERF_MAKE_COMMAND=\\''$(subst ','\\'',$(subst ','\\'',$(GIT_PERF_MAKE_COMMAND)))'\\' >>$@+\nendif\nifdef GIT_INTEROP_MAKE_OPTS\n\t@echo GIT_INTEROP_MAKE_OPTS=\\''$(subst ','\\'',$(subst ','\\'',$(GIT_INTEROP_MAKE_OPTS)))'\\' >>$@+\nendif\nifdef GIT_TEST_INDEX_VERSION\n\t@echo GIT_TEST_INDEX_VERSION=\\''$(subst ','\\'',$(subst ','\\'',$(GIT_TEST_INDEX_VERSION)))'\\' >>$@+\nendif\nifdef GIT_TEST_PERL_FATAL_WARNINGS\n\t@echo GIT_TEST_PERL_FATAL_WARNINGS=\\''$(subst ','\\'',$(subst ','\\'',$(GIT_TEST_PERL_FATAL_WARNINGS)))'\\' >>$@+\nendif\nifdef RUNTIME_PREFIX\n\t@echo RUNTIME_PREFIX=\\'true\\' >>$@+\nelse\n\t@echo RUNTIME_PREFIX=\\'false\\' >>$@+\nendif\n\t@if cmp $@+ $@ >/dev/null 2>&1; then $(RM) $@+; else mv $@+ $@; fi\n\n### Detect Python interpreter path changes\nifndef NO_PYTHON\nTRACK_PYTHON = $(subst ','\\'',-DPYTHON_PATH='$(PYTHON_PATH_SQ)')\n\nGIT-PYTHON-VARS: FORCE\n\t@VARS='$(TRACK_PYTHON)'; \\\n\t    if test x\"$$VARS\" != x\"`cat $@ 2>/dev/null`\" ; then \\\n\t\techo >&2 \"    * new Python interpreter location\"; \\\n\t\techo \"$$VARS\" >$@; \\\n            fi\nendif\n\ntest_bindir_programs := $(patsubst %,bin-wrappers/%,$(BINDIR_PROGRAMS_NEED_X) $(BINDIR_PROGRAMS_NO_X) $(TEST_PROGRAMS_NEED_X))\n\nall:: $(TEST_PROGRAMS) $(test_bindir_programs)\n\nbin-wrappers/%: wrap-for-bin.sh\n\t$(call mkdir_p_parent_template)\n\t$(QUIET_GEN)sed -e '1s|#!.*/sh|#!$(SHELL_PATH_SQ)|' \\\n\t     -e 's|@@BUILD_DIR@@|$(shell pwd)|' \\\n\t     -e 's|@@PROG@@|$(patsubst test-%,t/helper/test-%,$(@F))$(if $(filter-out $(BINDIR_PROGRAMS_NO_X),$(@F)),$(X),)|' < $< > $@ && \\\n\tchmod +x $@\n\n# GNU make supports exporting all variables by \"export\" without parameters.\n# However, the environment gets quite big, and some programs have problems\n# with that.\n\nexport NO_SVN_TESTS\nexport TEST_NO_MALLOC_CHECK\n\n### Testing rules\n\ntest: all\n\t$(MAKE) -C t/ all\n\nperf: all\n\t$(MAKE) -C t/perf/ all\n\n.PHONY: test perf\n\n.PRECIOUS: $(TEST_OBJS)\n\nt/helper/test-tool$X: $(patsubst %,t/helper/%,$(TEST_BUILTINS_OBJS))\n\nt/helper/test-%$X: t/helper/test-%.o GIT-LDFLAGS $(GITLIBS) $(REFTABLE_TEST_LIB)\n\t$(QUIET_LINK)$(CC) $(ALL_CFLAGS) -o $@ $(ALL_LDFLAGS) $(filter %.o,$^) $(filter %.a,$^) $(LIBS)\n\ncheck-sha1:: t/helper/test-tool$X\n\tt/helper/test-sha1.sh\n\nSP_OBJ = $(patsubst %.o,%.sp,$(OBJECTS))\n\n$(SP_OBJ): %.sp: %.c %.o\n\t$(QUIET_SP)cgcc -no-compile $(ALL_CFLAGS) $(EXTRA_CPPFLAGS) \\\n\t\t-Wsparse-error \\\n\t\t$(SPARSE_FLAGS) $(SP_EXTRA_FLAGS) $< && \\\n\t>$@\n\n.PHONY: sparse\nsparse: $(SP_OBJ)\n\nEXCEPT_HDRS := $(GENERATED_H) unicode-width.h compat/% xdiff/%\nifndef NETTLE_SHA256\n\tEXCEPT_HDRS += sha256/nettle.h\nendif\nifndef GCRYPT_SHA256\n\tEXCEPT_HDRS += sha256/gcrypt.h\nendif\nCHK_HDRS = $(filter-out $(EXCEPT_HDRS),$(LIB_H))\nHCO = $(patsubst %.h,%.hco,$(CHK_HDRS))\nHCC = $(HCO:hco=hcc)\n\n%.hcc: %.h\n\t@echo '#include \"git-compat-util.h\"' >$@\n\t@echo '#include \"$<\"' >>$@\n\n$(HCO): %.hco: %.hcc FORCE\n\t$(QUIET_HDR)$(CC) $(ALL_CFLAGS) -o /dev/null -c -xc $<\n\n.PHONY: hdr-check $(HCO)\nhdr-check: $(HCO)\n\n.PHONY: style\nstyle:\n\tgit clang-format --style file --diff --extensions c,h\n\n.PHONY: check\ncheck: $(GENERATED_H)\n\t@if sparse; \\\n\tthen \\\n\t\techo >&2 \"Use 'make sparse' instead\"; \\\n\t\t$(MAKE) --no-print-directory sparse; \\\n\telse \\\n\t\techo >&2 \"Did you mean 'make test'?\"; \\\n\t\texit 1; \\\n\tfi\n\nCOCCI_TEST_RES = $(wildcard contrib/coccinelle/tests/*.res)\n\n%.cocci.patch: %.cocci $(COCCI_SOURCES)\n\t$(QUIET_SPATCH) \\\n\tif test $(SPATCH_BATCH_SIZE) = 0; then \\\n\t\tlimit=; \\\n\telse \\\n\t\tlimit='-n $(SPATCH_BATCH_SIZE)'; \\\n\tfi; \\\n\tif ! echo $(COCCI_SOURCES) | xargs $$limit \\\n\t\t$(SPATCH) $(SPATCH_FLAGS) \\\n\t\t--sp-file $< --patch . \\\n\t\t>$@+ 2>$@.log; \\\n\tthen \\\n\t\tcat $@.log; \\\n\t\texit 1; \\\n\tfi; \\\n\tmv $@+ $@; \\\n\tif test -s $@; \\\n\tthen \\\n\t\techo '    ' SPATCH result: $@; \\\n\tfi\n\nCOCCI_TEST_RES_GEN = $(addprefix .build/,$(COCCI_TEST_RES))\n$(COCCI_TEST_RES_GEN): .build/%.res : %.c\n$(COCCI_TEST_RES_GEN): .build/%.res : %.res\n$(COCCI_TEST_RES_GEN): .build/contrib/coccinelle/tests/%.res : contrib/coccinelle/%.cocci\n\t$(call mkdir_p_parent_template)\n\t$(QUIET_SPATCH_T)$(SPATCH) $(SPATCH_FLAGS) \\\n\t\t--very-quiet --no-show-diff \\\n\t\t--sp-file $< -o $@ \\\n\t\t$(@:.build/%.res=%.c) && \\\n\tcmp $(@:.build/%=%) $@ || \\\n\tgit -P diff --no-index $(@:.build/%=%) $@ 2>/dev/null; \\\n\n.PHONY: coccicheck-test\ncoccicheck-test: $(COCCI_TEST_RES_GEN)\n\ncoccicheck: coccicheck-test\ncoccicheck: $(addsuffix .patch,$(filter-out %.pending.cocci,$(wildcard contrib/coccinelle/*.cocci)))\n\n# See contrib/coccinelle/README\ncoccicheck-pending: coccicheck-test\ncoccicheck-pending: $(addsuffix .patch,$(wildcard contrib/coccinelle/*.pending.cocci))\n\n.PHONY: coccicheck coccicheck-pending\n\n# \"Sub\"-Makefiles, not really because they can't be run stand-alone,\n# only there to contain directory-specific rules and variables\n## gitweb/Makefile inclusion:\nMAK_DIR_GITWEB = gitweb/\ninclude gitweb/Makefile\n\n.PHONY: gitweb\ngitweb: $(MAK_DIR_GITWEB_ALL)\nifndef NO_GITWEB\nall:: gitweb\nendif\n\n### Installation rules\n\nifneq ($(filter /%,$(firstword $(template_dir))),)\ntemplate_instdir = $(template_dir)\nelse\ntemplate_instdir = $(prefix)/$(template_dir)\nendif\nexport template_instdir\n\nifneq ($(filter /%,$(firstword $(gitexecdir))),)\ngitexec_instdir = $(gitexecdir)\nelse\ngitexec_instdir = $(prefix)/$(gitexecdir)\nendif\ngitexec_instdir_SQ = $(subst ','\\'',$(gitexec_instdir))\nexport gitexec_instdir\n\nifneq ($(filter /%,$(firstword $(mergetoolsdir))),)\nmergetools_instdir = $(mergetoolsdir)\nelse\nmergetools_instdir = $(prefix)/$(mergetoolsdir)\nendif\nmergetools_instdir_SQ = $(subst ','\\'',$(mergetools_instdir))\n\ninstall_bindir_xprograms := $(patsubst %,%$X,$(BINDIR_PROGRAMS_NEED_X))\ninstall_bindir_programs := $(install_bindir_xprograms) $(BINDIR_PROGRAMS_NO_X)\n\n.PHONY: profile-install profile-fast-install\nprofile-install: profile\n\t$(MAKE) install\n\nprofile-fast-install: profile-fast\n\t$(MAKE) install\n\nINSTALL_STRIP =\n\ninstall: all\n\t$(INSTALL) -d -m 755 '$(DESTDIR_SQ)$(bindir_SQ)'\n\t$(INSTALL) -d -m 755 '$(DESTDIR_SQ)$(gitexec_instdir_SQ)'\n\t$(INSTALL) $(INSTALL_STRIP) $(PROGRAMS) '$(DESTDIR_SQ)$(gitexec_instdir_SQ)'\n\t$(INSTALL) $(SCRIPTS) '$(DESTDIR_SQ)$(gitexec_instdir_SQ)'\n\t$(INSTALL) -m 644 $(SCRIPT_LIB) '$(DESTDIR_SQ)$(gitexec_instdir_SQ)'\n\t$(INSTALL) $(INSTALL_STRIP) $(install_bindir_xprograms) '$(DESTDIR_SQ)$(bindir_SQ)'\n\t$(INSTALL) $(BINDIR_PROGRAMS_NO_X) '$(DESTDIR_SQ)$(bindir_SQ)'\n\nifdef MSVC\n\t# We DO NOT install the individual foo.o.pdb files because they\n\t# have already been rolled up into the exe's pdb file.\n\t# We DO NOT have pdb files for the builtin commands (like git-status.exe)\n\t# because it is just a copy/hardlink of git.exe, rather than a unique binary.\n\t$(INSTALL) $(patsubst %.exe,%.pdb,$(filter-out $(BUILT_INS),$(patsubst %,%$X,$(BINDIR_PROGRAMS_NEED_X)))) '$(DESTDIR_SQ)$(bindir_SQ)'\n\t$(INSTALL) $(patsubst %.exe,%.pdb,$(filter-out $(BUILT_INS) $(REMOTE_CURL_ALIASES),$(PROGRAMS))) '$(DESTDIR_SQ)$(gitexec_instdir_SQ)'\nifndef DEBUG\n\t$(INSTALL) $(vcpkg_rel_bin)/*.dll '$(DESTDIR_SQ)$(bindir_SQ)'\n\t$(INSTALL) $(vcpkg_rel_bin)/*.pdb '$(DESTDIR_SQ)$(bindir_SQ)'\nelse\n\t$(INSTALL) $(vcpkg_dbg_bin)/*.dll '$(DESTDIR_SQ)$(bindir_SQ)'\n\t$(INSTALL) $(vcpkg_dbg_bin)/*.pdb '$(DESTDIR_SQ)$(bindir_SQ)'\nendif\nendif\n\t$(MAKE) -C templates DESTDIR='$(DESTDIR_SQ)' install\n\t$(INSTALL) -d -m 755 '$(DESTDIR_SQ)$(mergetools_instdir_SQ)'\n\t$(INSTALL) -m 644 mergetools/* '$(DESTDIR_SQ)$(mergetools_instdir_SQ)'\nifndef NO_GETTEXT\n\t$(INSTALL) -d -m 755 '$(DESTDIR_SQ)$(localedir_SQ)'\n\t(cd po/build/locale && $(TAR) cf - .) | \\\n\t(cd '$(DESTDIR_SQ)$(localedir_SQ)' && umask 022 && $(TAR) xof -)\nendif\nifndef NO_PERL\n\t$(INSTALL) -d -m 755 '$(DESTDIR_SQ)$(perllibdir_SQ)'\n\t(cd perl/build/lib && $(TAR) cf - .) | \\\n\t(cd '$(DESTDIR_SQ)$(perllibdir_SQ)' && umask 022 && $(TAR) xof -)\nendif\nifndef NO_TCLTK\n\t$(MAKE) -C gitk-git install\n\t$(MAKE) -C git-gui gitexecdir='$(gitexec_instdir_SQ)' install\nendif\nifneq (,$X)\n\t$(foreach p,$(patsubst %$X,%,$(filter %$X,$(ALL_COMMANDS_TO_INSTALL) $(OTHER_PROGRAMS))), test '$(DESTDIR_SQ)$(gitexec_instdir_SQ)/$p' -ef '$(DESTDIR_SQ)$(gitexec_instdir_SQ)/$p$X' || $(RM) '$(DESTDIR_SQ)$(gitexec_instdir_SQ)/$p';)\nendif\n\n\tbindir=$$(cd '$(DESTDIR_SQ)$(bindir_SQ)' && pwd) && \\\n\texecdir=$$(cd '$(DESTDIR_SQ)$(gitexec_instdir_SQ)' && pwd) && \\\n\tdestdir_from_execdir_SQ=$$(echo '$(gitexecdir_relative_SQ)' | sed -e 's|[^/][^/]*|..|g') && \\\n\t{ test \"$$bindir/\" = \"$$execdir/\" || \\\n\t  for p in $(OTHER_PROGRAMS) $(filter $(install_bindir_programs),$(ALL_PROGRAMS)); do \\\n\t\t$(RM) \"$$execdir/$$p\" && \\\n\t\ttest -n \"$(INSTALL_SYMLINKS)\" && \\\n\t\tln -s \"$$destdir_from_execdir_SQ/$(bindir_relative_SQ)/$$p\" \"$$execdir/$$p\" || \\\n\t\t{ test -z \"$(NO_INSTALL_HARDLINKS)$(NO_CROSS_DIRECTORY_HARDLINKS)\" && \\\n\t\t  ln \"$$bindir/$$p\" \"$$execdir/$$p\" 2>/dev/null || \\\n\t\t  cp \"$$bindir/$$p\" \"$$execdir/$$p\" || exit; } \\\n\t  done; \\\n\t} && \\\n\tfor p in $(filter $(install_bindir_programs),$(BUILT_INS)); do \\\n\t\t$(RM) \"$$bindir/$$p\" && \\\n\t\ttest -n \"$(INSTALL_SYMLINKS)\" && \\\n\t\tln -s \"git$X\" \"$$bindir/$$p\" || \\\n\t\t{ test -z \"$(NO_INSTALL_HARDLINKS)\" && \\\n\t\t  ln \"$$bindir/git$X\" \"$$bindir/$$p\" 2>/dev/null || \\\n\t\t  ln -s \"git$X\" \"$$bindir/$$p\" 2>/dev/null || \\\n\t\t  cp \"$$bindir/git$X\" \"$$bindir/$$p\" || exit; }; \\\n\tdone && \\\n\tfor p in $(BUILT_INS); do \\\n\t\t$(RM) \"$$execdir/$$p\" && \\\n\t\tif test -z \"$(SKIP_DASHED_BUILT_INS)\"; \\\n\t\tthen \\\n\t\t\ttest -n \"$(INSTALL_SYMLINKS)\" && \\\n\t\t\tln -s \"$$destdir_from_execdir_SQ/$(bindir_relative_SQ)/git$X\" \"$$execdir/$$p\" || \\\n\t\t\t{ test -z \"$(NO_INSTALL_HARDLINKS)\" && \\\n\t\t\t  ln \"$$execdir/git$X\" \"$$execdir/$$p\" 2>/dev/null || \\\n\t\t\t  ln -s \"git$X\" \"$$execdir/$$p\" 2>/dev/null || \\\n\t\t\t  cp \"$$execdir/git$X\" \"$$execdir/$$p\" || exit; }; \\\n\t\tfi \\\n\tdone && \\\n\tremote_curl_aliases=\"$(REMOTE_CURL_ALIASES)\" && \\\n\tfor p in $$remote_curl_aliases; do \\\n\t\t$(RM) \"$$execdir/$$p\" && \\\n\t\ttest -n \"$(INSTALL_SYMLINKS)\" && \\\n\t\tln -s \"git-remote-http$X\" \"$$execdir/$$p\" || \\\n\t\t{ test -z \"$(NO_INSTALL_HARDLINKS)\" && \\\n\t\t  ln \"$$execdir/git-remote-http$X\" \"$$execdir/$$p\" 2>/dev/null || \\\n\t\t  ln -s \"git-remote-http$X\" \"$$execdir/$$p\" 2>/dev/null || \\\n\t\t  cp \"$$execdir/git-remote-http$X\" \"$$execdir/$$p\" || exit; } \\\n\tdone\n\n.PHONY: install-doc install-man install-man-perl install-html install-info install-pdf\n.PHONY: quick-install-doc quick-install-man quick-install-html\n\ninstall-doc: install-man-perl\n\t$(MAKE) -C Documentation install\n\ninstall-man: install-man-perl\n\t$(MAKE) -C Documentation install-man\n\ninstall-man-perl: man-perl\n\t$(INSTALL) -d -m 755 '$(DESTDIR_SQ)$(mandir_SQ)/man3'\n\t(cd perl/build/man/man3 && $(TAR) cf - .) | \\\n\t(cd '$(DESTDIR_SQ)$(mandir_SQ)/man3' && umask 022 && $(TAR) xof -)\n\ninstall-html:\n\t$(MAKE) -C Documentation install-html\n\ninstall-info:\n\t$(MAKE) -C Documentation install-info\n\ninstall-pdf:\n\t$(MAKE) -C Documentation install-pdf\n\nquick-install-doc:\n\t$(MAKE) -C Documentation quick-install\n\nquick-install-man:\n\t$(MAKE) -C Documentation quick-install-man\n\nquick-install-html:\n\t$(MAKE) -C Documentation quick-install-html\n\n\n\n### Maintainer's dist rules\n\nGIT_TARNAME = git-$(GIT_VERSION)\nGIT_ARCHIVE_EXTRA_FILES = \\\n\t--prefix=$(GIT_TARNAME)/ \\\n\t--add-file=configure \\\n\t--add-file=.dist-tmp-dir/version \\\n\t--prefix=$(GIT_TARNAME)/git-gui/ \\\n\t--add-file=.dist-tmp-dir/git-gui/version\nifdef DC_SHA1_SUBMODULE\nGIT_ARCHIVE_EXTRA_FILES += \\\n\t--prefix=$(GIT_TARNAME)/sha1collisiondetection/ \\\n\t--add-file=sha1collisiondetection/LICENSE.txt \\\n\t--prefix=$(GIT_TARNAME)/sha1collisiondetection/lib/ \\\n\t--add-file=sha1collisiondetection/lib/sha1.c \\\n\t--add-file=sha1collisiondetection/lib/sha1.h \\\n\t--add-file=sha1collisiondetection/lib/ubc_check.c \\\n\t--add-file=sha1collisiondetection/lib/ubc_check.h\nendif\ndist: git-archive$(X) configure\n\t@$(RM) -r .dist-tmp-dir\n\t@mkdir .dist-tmp-dir\n\t@echo $(GIT_VERSION) > .dist-tmp-dir/version\n\t@$(MAKE) -C git-gui TARDIR=../.dist-tmp-dir/git-gui dist-version\n\t./git-archive --format=tar \\\n\t\t$(GIT_ARCHIVE_EXTRA_FILES) \\\n\t\t--prefix=$(GIT_TARNAME)/ HEAD^{tree} > $(GIT_TARNAME).tar\n\t@$(RM) -r .dist-tmp-dir\n\tgzip -f -9 $(GIT_TARNAME).tar\n\nrpm::\n\t@echo >&2 \"Use distro packaged sources to run rpmbuild\"\n\t@false\n.PHONY: rpm\n\nifneq ($(INCLUDE_DLLS_IN_ARTIFACTS),)\nOTHER_PROGRAMS += $(shell echo *.dll t/helper/*.dll)\nendif\n\nartifacts-tar:: $(ALL_COMMANDS_TO_INSTALL) $(SCRIPT_LIB) $(OTHER_PROGRAMS) \\\n\t\tGIT-BUILD-OPTIONS $(TEST_PROGRAMS) $(test_bindir_programs) \\\n\t\t$(MOFILES)\n\t$(QUIET_SUBDIR0)templates $(QUIET_SUBDIR1) \\\n\t\tSHELL_PATH='$(SHELL_PATH_SQ)' PERL_PATH='$(PERL_PATH_SQ)'\n\ttest -n \"$(ARTIFACTS_DIRECTORY)\"\n\tmkdir -p \"$(ARTIFACTS_DIRECTORY)\"\n\t$(TAR) czf \"$(ARTIFACTS_DIRECTORY)/artifacts.tar.gz\" $^ templates/blt/\n.PHONY: artifacts-tar\n\nhtmldocs = git-htmldocs-$(GIT_VERSION)\nmanpages = git-manpages-$(GIT_VERSION)\n.PHONY: dist-doc distclean\ndist-doc: git$X\n\t$(RM) -r .doc-tmp-dir\n\tmkdir .doc-tmp-dir\n\t$(MAKE) -C Documentation WEBDOC_DEST=../.doc-tmp-dir install-webdoc\n\t./git -C .doc-tmp-dir init\n\t./git -C .doc-tmp-dir add .\n\t./git -C .doc-tmp-dir commit -m htmldocs\n\t./git -C .doc-tmp-dir archive --format=tar --prefix=./ HEAD^{tree} \\\n\t\t> $(htmldocs).tar\n\tgzip -n -9 -f $(htmldocs).tar\n\t:\n\t$(RM) -r .doc-tmp-dir\n\tmkdir -p .doc-tmp-dir/man1 .doc-tmp-dir/man5 .doc-tmp-dir/man7\n\t$(MAKE) -C Documentation DESTDIR=./ \\\n\t\tman1dir=../.doc-tmp-dir/man1 \\\n\t\tman5dir=../.doc-tmp-dir/man5 \\\n\t\tman7dir=../.doc-tmp-dir/man7 \\\n\t\tinstall\n\t./git -C .doc-tmp-dir init\n\t./git -C .doc-tmp-dir add .\n\t./git -C .doc-tmp-dir commit -m manpages\n\t./git -C .doc-tmp-dir archive --format=tar --prefix=./ HEAD^{tree} \\\n\t\t> $(manpages).tar\n\tgzip -n -9 -f $(manpages).tar\n\t$(RM) -r .doc-tmp-dir\n\n### Cleaning rules\n\ndistclean: clean\n\t$(RM) configure\n\t$(RM) config.log config.status config.cache\n\t$(RM) config.mak.autogen config.mak.append\n\t$(RM) -r autom4te.cache\n\nprofile-clean:\n\t$(RM) $(addsuffix *.gcda,$(addprefix $(PROFILE_DIR)/, $(object_dirs)))\n\t$(RM) $(addsuffix *.gcno,$(addprefix $(PROFILE_DIR)/, $(object_dirs)))\n\ncocciclean:\n\t$(RM) -r .build/contrib/coccinelle\n\t$(RM) contrib/coccinelle/*.cocci.patch*\n\nclean: profile-clean coverage-clean cocciclean\n\t$(RM) -r .build\n\t$(RM) po/git.pot po/git-core.pot\n\t$(RM) git.res\n\t$(RM) $(OBJECTS)\n\t$(RM) $(LIB_FILE) $(XDIFF_LIB) $(REFTABLE_LIB) $(REFTABLE_TEST_LIB)\n\t$(RM) $(ALL_PROGRAMS) $(SCRIPT_LIB) $(BUILT_INS) $(OTHER_PROGRAMS)\n\t$(RM) $(TEST_PROGRAMS)\n\t$(RM) $(FUZZ_PROGRAMS)\n\t$(RM) $(SP_OBJ)\n\t$(RM) $(HCC)\n\t$(RM) -r bin-wrappers $(dep_dirs) $(compdb_dir) compile_commands.json\n\t$(RM) -r po/build/\n\t$(RM) *.pyc *.pyo */*.pyc */*.pyo $(GENERATED_H) $(ETAGS_TARGET) tags cscope*\n\t$(RM) -r .dist-tmp-dir .doc-tmp-dir\n\t$(RM) $(GIT_TARNAME).tar.gz\n\t$(RM) $(htmldocs).tar.gz $(manpages).tar.gz\n\t$(MAKE) -C Documentation/ clean\n\t$(RM) Documentation/GIT-EXCLUDED-PROGRAMS\nifndef NO_PERL\n\t$(RM) -r perl/build/\nendif\n\t$(MAKE) -C templates/ clean\n\t$(MAKE) -C t/ clean\nifndef NO_TCLTK\n\t$(MAKE) -C gitk-git clean\n\t$(MAKE) -C git-gui clean\nendif\n\t$(RM) GIT-VERSION-FILE GIT-CFLAGS GIT-LDFLAGS GIT-BUILD-OPTIONS\n\t$(RM) GIT-USER-AGENT GIT-PREFIX\n\t$(RM) GIT-SCRIPT-DEFINES GIT-PERL-DEFINES GIT-PERL-HEADER GIT-PYTHON-VARS\nifdef MSVC\n\t$(RM) $(patsubst %.o,%.o.pdb,$(OBJECTS))\n\t$(RM) $(patsubst %.exe,%.pdb,$(OTHER_PROGRAMS))\n\t$(RM) $(patsubst %.exe,%.iobj,$(OTHER_PROGRAMS))\n\t$(RM) $(patsubst %.exe,%.ipdb,$(OTHER_PROGRAMS))\n\t$(RM) $(patsubst %.exe,%.pdb,$(PROGRAMS))\n\t$(RM) $(patsubst %.exe,%.iobj,$(PROGRAMS))\n\t$(RM) $(patsubst %.exe,%.ipdb,$(PROGRAMS))\n\t$(RM) $(patsubst %.exe,%.pdb,$(TEST_PROGRAMS))\n\t$(RM) $(patsubst %.exe,%.iobj,$(TEST_PROGRAMS))\n\t$(RM) $(patsubst %.exe,%.ipdb,$(TEST_PROGRAMS))\n\t$(RM) compat/vcbuild/MSVC-DEFS-GEN\nendif\n\n.PHONY: all install profile-clean cocciclean clean strip\n.PHONY: shell_compatibility_test please_set_SHELL_PATH_to_a_more_modern_shell\n.PHONY: FORCE\n\n### Check documentation\n#\nALL_COMMANDS = $(ALL_COMMANDS_TO_INSTALL) $(SCRIPT_LIB)\nALL_COMMANDS += git\nALL_COMMANDS += git-citool\nALL_COMMANDS += git-gui\nALL_COMMANDS += gitk\nALL_COMMANDS += gitweb\nALL_COMMANDS += scalar\n\n.PHONY: check-docs\ncheck-docs::\n\t$(MAKE) -C Documentation lint-docs\n\t@(for v in $(patsubst %$X,%,$(ALL_COMMANDS)); \\\n\tdo \\\n\t\tcase \"$$v\" in \\\n\t\tgit-merge-octopus | git-merge-ours | git-merge-recursive | \\\n\t\tgit-merge-resolve | git-merge-subtree | \\\n\t\tgit-fsck-objects | git-init-db | \\\n\t\tgit-remote-* | git-stage | git-legacy-* | \\\n\t\tgit-?*--?* ) continue ;; \\\n\t\tesac ; \\\n\t\ttest -f \"Documentation/$$v.txt\" || \\\n\t\techo \"no doc: $$v\"; \\\n\t\tsed -e '1,/^### command list/d' -e '/^#/d' command-list.txt | \\\n\t\tgrep -q \"^$$v[ \t]\" || \\\n\t\tcase \"$$v\" in \\\n\t\tgit) ;; \\\n\t\t*) echo \"no link: $$v\";; \\\n\t\tesac ; \\\n\tdone; \\\n\t( \\\n\t\tsed -e '1,/^### command list/d' \\\n\t\t    -e '/^#/d' \\\n\t\t    -e '/guide$$/d' \\\n\t\t    -e '/interfaces$$/d' \\\n\t\t    -e 's/[ \t].*//' \\\n\t\t    -e 's/^/listed /' command-list.txt; \\\n\t\t$(MAKE) -C Documentation print-man1 | \\\n\t\tgrep '\\.txt$$' | \\\n\t\tsed -e 's|^|documented |' \\\n\t\t    -e 's/\\.txt//'; \\\n\t) | while read how cmd; \\\n\tdo \\\n\t\tcase \" $(patsubst %$X,%,$(ALL_COMMANDS) $(BUILT_INS) $(EXCLUDED_PROGRAMS)) \" in \\\n\t\t*\" $$cmd \"*)\t;; \\\n\t\t*) echo \"removed but $$how: $$cmd\" ;; \\\n\t\tesac; \\\n\tdone ) | sort\n\n### Make sure built-ins do not have dups and listed in git.c\n#\ncheck-builtins::\n\t./check-builtins.sh\n\n### Test suite coverage testing\n#\n.PHONY: coverage coverage-clean coverage-compile coverage-test coverage-report\n.PHONY: coverage-untested-functions cover_db cover_db_html\n.PHONY: coverage-clean-results\n\ncoverage:\n\t$(MAKE) coverage-test\n\t$(MAKE) coverage-untested-functions\n\nobject_dirs := $(sort $(dir $(OBJECTS)))\ncoverage-clean-results:\n\t$(RM) $(addsuffix *.gcov,$(object_dirs))\n\t$(RM) $(addsuffix *.gcda,$(object_dirs))\n\t$(RM) coverage-untested-functions\n\t$(RM) -r cover_db/\n\t$(RM) -r cover_db_html/\n\t$(RM) coverage-test.made\n\ncoverage-clean: coverage-clean-results\n\t$(RM) $(addsuffix *.gcno,$(object_dirs))\n\nCOVERAGE_CFLAGS = $(CFLAGS) -O0 -ftest-coverage -fprofile-arcs\nCOVERAGE_LDFLAGS = $(CFLAGS)  -O0 -lgcov\nGCOVFLAGS = --preserve-paths --branch-probabilities --all-blocks\n\ncoverage-compile:\n\t$(MAKE) CFLAGS=\"$(COVERAGE_CFLAGS)\" LDFLAGS=\"$(COVERAGE_LDFLAGS)\" all\n\ncoverage-test: coverage-clean-results coverage-compile\n\t$(MAKE) CFLAGS=\"$(COVERAGE_CFLAGS)\" LDFLAGS=\"$(COVERAGE_LDFLAGS)\" \\\n\t\tDEFAULT_TEST_TARGET=test -j1 test\n\ttouch coverage-test.made\n\ncoverage-test.made:\n\t$(MAKE) coverage-test\n\ncoverage-prove: coverage-clean-results coverage-compile\n\t$(MAKE) CFLAGS=\"$(COVERAGE_CFLAGS)\" LDFLAGS=\"$(COVERAGE_LDFLAGS)\" \\\n\t\tDEFAULT_TEST_TARGET=prove GIT_PROVE_OPTS=\"$(GIT_PROVE_OPTS) -j1\" \\\n\t\t-j1 test\n\ncoverage-report: coverage-test.made\n\t$(QUIET_GCOV)for dir in $(object_dirs); do \\\n\t\t$(GCOV) $(GCOVFLAGS) --object-directory=$$dir $$dir*.c || exit; \\\n\tdone\n\ncoverage-untested-functions: coverage-report\n\tgrep '^function.*called 0 ' *.c.gcov \\\n\t\t| sed -e 's/\\([^:]*\\)\\.gcov: *function \\([^ ]*\\) called.*/\\1: \\2/' \\\n\t\t> coverage-untested-functions\n\ncover_db: coverage-report\n\tgcov2perl -db cover_db *.gcov\n\ncover_db_html: cover_db\n\tcover -report html -outputdir cover_db_html cover_db\n\n\n### Fuzz testing\n#\n# Building fuzz targets generally requires a special set of compiler flags that\n# are not necessarily appropriate for general builds, and that vary greatly\n# depending on the compiler version used.\n#\n# An example command to build against libFuzzer from LLVM 11.0.0:\n#\n# make CC=clang CXX=clang++ \\\n#      CFLAGS=\"-fsanitize=fuzzer-no-link,address\" \\\n#      LIB_FUZZING_ENGINE=\"-fsanitize=fuzzer\" \\\n#      fuzz-all\n#\nFUZZ_CXXFLAGS ?= $(CFLAGS)\n\n.PHONY: fuzz-all\n\n$(FUZZ_PROGRAMS): all\n\t$(QUIET_LINK)$(CXX) $(FUZZ_CXXFLAGS) $(LIB_OBJS) $(BUILTIN_OBJS) \\\n\t\t$(XDIFF_OBJS) $(EXTLIBS) git.o $@.o $(LIB_FUZZING_ENGINE) -o $@\n\nfuzz-all: $(FUZZ_PROGRAMS)\n"}